"use strict";

export { anyTypeAnnotation as AnyTypeAnnotation } from "./2630/index";
export { argumentPlaceholder as ArgumentPlaceholder } from "./2630/index";
export { arrayExpression as ArrayExpression } from "./2630/index";
export { arrayPattern as ArrayPattern } from "./2630/index";
export { arrayTypeAnnotation as ArrayTypeAnnotation } from "./2630/index";
export { arrowFunctionExpression as ArrowFunctionExpression } from "./2630/index";
export { assignmentExpression as AssignmentExpression } from "./2630/index";
export { assignmentPattern as AssignmentPattern } from "./2630/index";
export { awaitExpression as AwaitExpression } from "./2630/index";
export { bigIntLiteral as BigIntLiteral } from "./2630/index";
export { binaryExpression as BinaryExpression } from "./2630/index";
export { bindExpression as BindExpression } from "./2630/index";
export { blockStatement as BlockStatement } from "./2630/index";
export { booleanLiteral as BooleanLiteral } from "./2630/index";
export { booleanLiteralTypeAnnotation as BooleanLiteralTypeAnnotation } from "./2630/index";
export { booleanTypeAnnotation as BooleanTypeAnnotation } from "./2630/index";
export { breakStatement as BreakStatement } from "./2630/index";
export { callExpression as CallExpression } from "./2630/index";
export { catchClause as CatchClause } from "./2630/index";
export { classBody as ClassBody } from "./2630/index";
export { classDeclaration as ClassDeclaration } from "./2630/index";
export { classExpression as ClassExpression } from "./2630/index";
export { classImplements as ClassImplements } from "./2630/index";
export { classMethod as ClassMethod } from "./2630/index";
export { classPrivateMethod as ClassPrivateMethod } from "./2630/index";
export { classPrivateProperty as ClassPrivateProperty } from "./2630/index";
export { classProperty as ClassProperty } from "./2630/index";
export { conditionalExpression as ConditionalExpression } from "./2630/index";
export { continueStatement as ContinueStatement } from "./2630/index";
export { debuggerStatement as DebuggerStatement } from "./2630/index";
export { decimalLiteral as DecimalLiteral } from "./2630/index";
export { declareClass as DeclareClass } from "./2630/index";
export { declareExportAllDeclaration as DeclareExportAllDeclaration } from "./2630/index";
export { declareExportDeclaration as DeclareExportDeclaration } from "./2630/index";
export { declareFunction as DeclareFunction } from "./2630/index";
export { declareInterface as DeclareInterface } from "./2630/index";
export { declareModule as DeclareModule } from "./2630/index";
export { declareModuleExports as DeclareModuleExports } from "./2630/index";
export { declareOpaqueType as DeclareOpaqueType } from "./2630/index";
export { declareTypeAlias as DeclareTypeAlias } from "./2630/index";
export { declareVariable as DeclareVariable } from "./2630/index";
export { declaredPredicate as DeclaredPredicate } from "./2630/index";
export { decorator as Decorator } from "./2630/index";
export { directive as Directive } from "./2630/index";
export { directiveLiteral as DirectiveLiteral } from "./2630/index";
export { doExpression as DoExpression } from "./2630/index";
export { doWhileStatement as DoWhileStatement } from "./2630/index";
export { emptyStatement as EmptyStatement } from "./2630/index";
export { emptyTypeAnnotation as EmptyTypeAnnotation } from "./2630/index";
export { enumBooleanBody as EnumBooleanBody } from "./2630/index";
export { enumBooleanMember as EnumBooleanMember } from "./2630/index";
export { enumDeclaration as EnumDeclaration } from "./2630/index";
export { enumDefaultedMember as EnumDefaultedMember } from "./2630/index";
export { enumNumberBody as EnumNumberBody } from "./2630/index";
export { enumNumberMember as EnumNumberMember } from "./2630/index";
export { enumStringBody as EnumStringBody } from "./2630/index";
export { enumStringMember as EnumStringMember } from "./2630/index";
export { enumSymbolBody as EnumSymbolBody } from "./2630/index";
export { existsTypeAnnotation as ExistsTypeAnnotation } from "./2630/index";
export { exportAllDeclaration as ExportAllDeclaration } from "./2630/index";
export { exportDefaultDeclaration as ExportDefaultDeclaration } from "./2630/index";
export { exportDefaultSpecifier as ExportDefaultSpecifier } from "./2630/index";
export { exportNamedDeclaration as ExportNamedDeclaration } from "./2630/index";
export { exportNamespaceSpecifier as ExportNamespaceSpecifier } from "./2630/index";
export { exportSpecifier as ExportSpecifier } from "./2630/index";
export { expressionStatement as ExpressionStatement } from "./2630/index";
export { file as File } from "./2630/index";
export { forInStatement as ForInStatement } from "./2630/index";
export { forOfStatement as ForOfStatement } from "./2630/index";
export { forStatement as ForStatement } from "./2630/index";
export { functionDeclaration as FunctionDeclaration } from "./2630/index";
export { functionExpression as FunctionExpression } from "./2630/index";
export { functionTypeAnnotation as FunctionTypeAnnotation } from "./2630/index";
export { functionTypeParam as FunctionTypeParam } from "./2630/index";
export { genericTypeAnnotation as GenericTypeAnnotation } from "./2630/index";
export { identifier as Identifier } from "./2630/index";
export { ifStatement as IfStatement } from "./2630/index";
export { import as Import } from "./2630/index";
export { importAttribute as ImportAttribute } from "./2630/index";
export { importDeclaration as ImportDeclaration } from "./2630/index";
export { importDefaultSpecifier as ImportDefaultSpecifier } from "./2630/index";
export { importNamespaceSpecifier as ImportNamespaceSpecifier } from "./2630/index";
export { importSpecifier as ImportSpecifier } from "./2630/index";
export { indexedAccessType as IndexedAccessType } from "./2630/index";
export { inferredPredicate as InferredPredicate } from "./2630/index";
export { interfaceDeclaration as InterfaceDeclaration } from "./2630/index";
export { interfaceExtends as InterfaceExtends } from "./2630/index";
export { interfaceTypeAnnotation as InterfaceTypeAnnotation } from "./2630/index";
export { interpreterDirective as InterpreterDirective } from "./2630/index";
export { intersectionTypeAnnotation as IntersectionTypeAnnotation } from "./2630/index";
export { jsxAttribute as JSXAttribute } from "./2630/index";
export { jsxClosingElement as JSXClosingElement } from "./2630/index";
export { jsxClosingFragment as JSXClosingFragment } from "./2630/index";
export { jsxElement as JSXElement } from "./2630/index";
export { jsxEmptyExpression as JSXEmptyExpression } from "./2630/index";
export { jsxExpressionContainer as JSXExpressionContainer } from "./2630/index";
export { jsxFragment as JSXFragment } from "./2630/index";
export { jsxIdentifier as JSXIdentifier } from "./2630/index";
export { jsxMemberExpression as JSXMemberExpression } from "./2630/index";
export { jsxNamespacedName as JSXNamespacedName } from "./2630/index";
export { jsxOpeningElement as JSXOpeningElement } from "./2630/index";
export { jsxOpeningFragment as JSXOpeningFragment } from "./2630/index";
export { jsxSpreadAttribute as JSXSpreadAttribute } from "./2630/index";
export { jsxSpreadChild as JSXSpreadChild } from "./2630/index";
export { jsxText as JSXText } from "./2630/index";
export { labeledStatement as LabeledStatement } from "./2630/index";
export { logicalExpression as LogicalExpression } from "./2630/index";
export { memberExpression as MemberExpression } from "./2630/index";
export { metaProperty as MetaProperty } from "./2630/index";
export { mixedTypeAnnotation as MixedTypeAnnotation } from "./2630/index";
export { moduleExpression as ModuleExpression } from "./2630/index";
export { newExpression as NewExpression } from "./2630/index";
export { noop as Noop } from "./2630/index";
export { nullLiteral as NullLiteral } from "./2630/index";
export { nullLiteralTypeAnnotation as NullLiteralTypeAnnotation } from "./2630/index";
export { nullableTypeAnnotation as NullableTypeAnnotation } from "./2630/index";
export { numberLiteral as NumberLiteral } from "./2630/index";
export { numberLiteralTypeAnnotation as NumberLiteralTypeAnnotation } from "./2630/index";
export { numberTypeAnnotation as NumberTypeAnnotation } from "./2630/index";
export { numericLiteral as NumericLiteral } from "./2630/index";
export { objectExpression as ObjectExpression } from "./2630/index";
export { objectMethod as ObjectMethod } from "./2630/index";
export { objectPattern as ObjectPattern } from "./2630/index";
export { objectProperty as ObjectProperty } from "./2630/index";
export { objectTypeAnnotation as ObjectTypeAnnotation } from "./2630/index";
export { objectTypeCallProperty as ObjectTypeCallProperty } from "./2630/index";
export { objectTypeIndexer as ObjectTypeIndexer } from "./2630/index";
export { objectTypeInternalSlot as ObjectTypeInternalSlot } from "./2630/index";
export { objectTypeProperty as ObjectTypeProperty } from "./2630/index";
export { objectTypeSpreadProperty as ObjectTypeSpreadProperty } from "./2630/index";
export { opaqueType as OpaqueType } from "./2630/index";
export { optionalCallExpression as OptionalCallExpression } from "./2630/index";
export { optionalIndexedAccessType as OptionalIndexedAccessType } from "./2630/index";
export { optionalMemberExpression as OptionalMemberExpression } from "./2630/index";
export { parenthesizedExpression as ParenthesizedExpression } from "./2630/index";
export { pipelineBareFunction as PipelineBareFunction } from "./2630/index";
export { pipelinePrimaryTopicReference as PipelinePrimaryTopicReference } from "./2630/index";
export { pipelineTopicExpression as PipelineTopicExpression } from "./2630/index";
export { placeholder as Placeholder } from "./2630/index";
export { privateName as PrivateName } from "./2630/index";
export { program as Program } from "./2630/index";
export { qualifiedTypeIdentifier as QualifiedTypeIdentifier } from "./2630/index";
export { recordExpression as RecordExpression } from "./2630/index";
export { regExpLiteral as RegExpLiteral } from "./2630/index";
export { regexLiteral as RegexLiteral } from "./2630/index";
export { restElement as RestElement } from "./2630/index";
export { restProperty as RestProperty } from "./2630/index";
export { returnStatement as ReturnStatement } from "./2630/index";
export { sequenceExpression as SequenceExpression } from "./2630/index";
export { spreadElement as SpreadElement } from "./2630/index";
export { spreadProperty as SpreadProperty } from "./2630/index";
export { staticBlock as StaticBlock } from "./2630/index";
export { stringLiteral as StringLiteral } from "./2630/index";
export { stringLiteralTypeAnnotation as StringLiteralTypeAnnotation } from "./2630/index";
export { stringTypeAnnotation as StringTypeAnnotation } from "./2630/index";
export { super as Super } from "./2630/index";
export { switchCase as SwitchCase } from "./2630/index";
export { switchStatement as SwitchStatement } from "./2630/index";
export { symbolTypeAnnotation as SymbolTypeAnnotation } from "./2630/index";
export { tsAnyKeyword as TSAnyKeyword } from "./2630/index";
export { tsArrayType as TSArrayType } from "./2630/index";
export { tsAsExpression as TSAsExpression } from "./2630/index";
export { tsBigIntKeyword as TSBigIntKeyword } from "./2630/index";
export { tsBooleanKeyword as TSBooleanKeyword } from "./2630/index";
export { tsCallSignatureDeclaration as TSCallSignatureDeclaration } from "./2630/index";
export { tsConditionalType as TSConditionalType } from "./2630/index";
export { tsConstructSignatureDeclaration as TSConstructSignatureDeclaration } from "./2630/index";
export { tsConstructorType as TSConstructorType } from "./2630/index";
export { tsDeclareFunction as TSDeclareFunction } from "./2630/index";
export { tsDeclareMethod as TSDeclareMethod } from "./2630/index";
export { tsEnumDeclaration as TSEnumDeclaration } from "./2630/index";
export { tsEnumMember as TSEnumMember } from "./2630/index";
export { tsExportAssignment as TSExportAssignment } from "./2630/index";
export { tsExpressionWithTypeArguments as TSExpressionWithTypeArguments } from "./2630/index";
export { tsExternalModuleReference as TSExternalModuleReference } from "./2630/index";
export { tsFunctionType as TSFunctionType } from "./2630/index";
export { tsImportEqualsDeclaration as TSImportEqualsDeclaration } from "./2630/index";
export { tsImportType as TSImportType } from "./2630/index";
export { tsIndexSignature as TSIndexSignature } from "./2630/index";
export { tsIndexedAccessType as TSIndexedAccessType } from "./2630/index";
export { tsInferType as TSInferType } from "./2630/index";
export { tsInterfaceBody as TSInterfaceBody } from "./2630/index";
export { tsInterfaceDeclaration as TSInterfaceDeclaration } from "./2630/index";
export { tsIntersectionType as TSIntersectionType } from "./2630/index";
export { tsIntrinsicKeyword as TSIntrinsicKeyword } from "./2630/index";
export { tsLiteralType as TSLiteralType } from "./2630/index";
export { tsMappedType as TSMappedType } from "./2630/index";
export { tsMethodSignature as TSMethodSignature } from "./2630/index";
export { tsModuleBlock as TSModuleBlock } from "./2630/index";
export { tsModuleDeclaration as TSModuleDeclaration } from "./2630/index";
export { tsNamedTupleMember as TSNamedTupleMember } from "./2630/index";
export { tsNamespaceExportDeclaration as TSNamespaceExportDeclaration } from "./2630/index";
export { tsNeverKeyword as TSNeverKeyword } from "./2630/index";
export { tsNonNullExpression as TSNonNullExpression } from "./2630/index";
export { tsNullKeyword as TSNullKeyword } from "./2630/index";
export { tsNumberKeyword as TSNumberKeyword } from "./2630/index";
export { tsObjectKeyword as TSObjectKeyword } from "./2630/index";
export { tsOptionalType as TSOptionalType } from "./2630/index";
export { tsParameterProperty as TSParameterProperty } from "./2630/index";
export { tsParenthesizedType as TSParenthesizedType } from "./2630/index";
export { tsPropertySignature as TSPropertySignature } from "./2630/index";
export { tsQualifiedName as TSQualifiedName } from "./2630/index";
export { tsRestType as TSRestType } from "./2630/index";
export { tsStringKeyword as TSStringKeyword } from "./2630/index";
export { tsSymbolKeyword as TSSymbolKeyword } from "./2630/index";
export { tsThisType as TSThisType } from "./2630/index";
export { tsTupleType as TSTupleType } from "./2630/index";
export { tsTypeAliasDeclaration as TSTypeAliasDeclaration } from "./2630/index";
export { tsTypeAnnotation as TSTypeAnnotation } from "./2630/index";
export { tsTypeAssertion as TSTypeAssertion } from "./2630/index";
export { tsTypeLiteral as TSTypeLiteral } from "./2630/index";
export { tsTypeOperator as TSTypeOperator } from "./2630/index";
export { tsTypeParameter as TSTypeParameter } from "./2630/index";
export { tsTypeParameterDeclaration as TSTypeParameterDeclaration } from "./2630/index";
export { tsTypeParameterInstantiation as TSTypeParameterInstantiation } from "./2630/index";
export { tsTypePredicate as TSTypePredicate } from "./2630/index";
export { tsTypeQuery as TSTypeQuery } from "./2630/index";
export { tsTypeReference as TSTypeReference } from "./2630/index";
export { tsUndefinedKeyword as TSUndefinedKeyword } from "./2630/index";
export { tsUnionType as TSUnionType } from "./2630/index";
export { tsUnknownKeyword as TSUnknownKeyword } from "./2630/index";
export { tsVoidKeyword as TSVoidKeyword } from "./2630/index";
export { taggedTemplateExpression as TaggedTemplateExpression } from "./2630/index";
export { templateElement as TemplateElement } from "./2630/index";
export { templateLiteral as TemplateLiteral } from "./2630/index";
export { thisExpression as ThisExpression } from "./2630/index";
export { thisTypeAnnotation as ThisTypeAnnotation } from "./2630/index";
export { throwStatement as ThrowStatement } from "./2630/index";
export { topicReference as TopicReference } from "./2630/index";
export { tryStatement as TryStatement } from "./2630/index";
export { tupleExpression as TupleExpression } from "./2630/index";
export { tupleTypeAnnotation as TupleTypeAnnotation } from "./2630/index";
export { typeAlias as TypeAlias } from "./2630/index";
export { typeAnnotation as TypeAnnotation } from "./2630/index";
export { typeCastExpression as TypeCastExpression } from "./2630/index";
export { typeParameter as TypeParameter } from "./2630/index";
export { typeParameterDeclaration as TypeParameterDeclaration } from "./2630/index";
export { typeParameterInstantiation as TypeParameterInstantiation } from "./2630/index";
export { typeofTypeAnnotation as TypeofTypeAnnotation } from "./2630/index";
export { unaryExpression as UnaryExpression } from "./2630/index";
export { unionTypeAnnotation as UnionTypeAnnotation } from "./2630/index";
export { updateExpression as UpdateExpression } from "./2630/index";
export { v8IntrinsicIdentifier as V8IntrinsicIdentifier } from "./2630/index";
export { variableDeclaration as VariableDeclaration } from "./2630/index";
export { variableDeclarator as VariableDeclarator } from "./2630/index";
export { variance as Variance } from "./2630/index";
export { voidTypeAnnotation as VoidTypeAnnotation } from "./2630/index";
export { whileStatement as WhileStatement } from "./2630/index";
export { withStatement as WithStatement } from "./2630/index";
export { yieldExpression as YieldExpression } from "./2630/index";
import * as r from "./2630/index";