"use strict";

import * as r from "./2636/index";
var a = r.FLIPPED_ALIAS_KEYS.Standardized;
export { a as STANDARDIZED_TYPES };
var i = r.FLIPPED_ALIAS_KEYS.Expression;
export { i as EXPRESSION_TYPES };
var o = r.FLIPPED_ALIAS_KEYS.Binary;
export { o as BINARY_TYPES };
var s = r.FLIPPED_ALIAS_KEYS.Scopable;
export { s as SCOPABLE_TYPES };
var u = r.FLIPPED_ALIAS_KEYS.BlockParent;
export { u as BLOCKPARENT_TYPES };
var l = r.FLIPPED_ALIAS_KEYS.Block;
export { l as BLOCK_TYPES };
var p = r.FLIPPED_ALIAS_KEYS.Statement;
export { p as STATEMENT_TYPES };
var f = r.FLIPPED_ALIAS_KEYS.Terminatorless;
export { f as TERMINATORLESS_TYPES };
var d = r.FLIPPED_ALIAS_KEYS.CompletionStatement;
export { d as COMPLETIONSTATEMENT_TYPES };
var c = r.FLIPPED_ALIAS_KEYS.Conditional;
export { c as CONDITIONAL_TYPES };
var y = r.FLIPPED_ALIAS_KEYS.Loop;
export { y as LOOP_TYPES };
var T = r.FLIPPED_ALIAS_KEYS.While;
export { T as WHILE_TYPES };
var m = r.FLIPPED_ALIAS_KEYS.ExpressionWrapper;
export { m as EXPRESSIONWRAPPER_TYPES };
var S = r.FLIPPED_ALIAS_KEYS.For;
export { S as FOR_TYPES };
var E = r.FLIPPED_ALIAS_KEYS.ForXStatement;
export { E as FORXSTATEMENT_TYPES };
var b = r.FLIPPED_ALIAS_KEYS.Function;
export { b as FUNCTION_TYPES };
var v = r.FLIPPED_ALIAS_KEYS.FunctionParent;
export { v as FUNCTIONPARENT_TYPES };
var P = r.FLIPPED_ALIAS_KEYS.Pureish;
export { P as PUREISH_TYPES };
var O = r.FLIPPED_ALIAS_KEYS.Declaration;
export { O as DECLARATION_TYPES };
var A = r.FLIPPED_ALIAS_KEYS.PatternLike;
export { A as PATTERNLIKE_TYPES };
var g = r.FLIPPED_ALIAS_KEYS.LVal;
export { g as LVAL_TYPES };
var x = r.FLIPPED_ALIAS_KEYS.TSEntityName;
export { x as TSENTITYNAME_TYPES };
var D = r.FLIPPED_ALIAS_KEYS.Literal;
export { D as LITERAL_TYPES };
var I = r.FLIPPED_ALIAS_KEYS.Immutable;
export { I as IMMUTABLE_TYPES };
var _ = r.FLIPPED_ALIAS_KEYS.UserWhitespacable;
export { _ as USERWHITESPACABLE_TYPES };
var h = r.FLIPPED_ALIAS_KEYS.Method;
export { h as METHOD_TYPES };
var N = r.FLIPPED_ALIAS_KEYS.ObjectMember;
export { N as OBJECTMEMBER_TYPES };
var j = r.FLIPPED_ALIAS_KEYS.Property;
export { j as PROPERTY_TYPES };
var L = r.FLIPPED_ALIAS_KEYS.UnaryLike;
export { L as UNARYLIKE_TYPES };
var C = r.FLIPPED_ALIAS_KEYS.Pattern;
export { C as PATTERN_TYPES };
var B = r.FLIPPED_ALIAS_KEYS.Class;
export { B as CLASS_TYPES };
var w = r.FLIPPED_ALIAS_KEYS.ModuleDeclaration;
export { w as MODULEDECLARATION_TYPES };
var M = r.FLIPPED_ALIAS_KEYS.ExportDeclaration;
export { M as EXPORTDECLARATION_TYPES };
var F = r.FLIPPED_ALIAS_KEYS.ModuleSpecifier;
export { F as MODULESPECIFIER_TYPES };
var R = r.FLIPPED_ALIAS_KEYS.Private;
export { R as PRIVATE_TYPES };
var K = r.FLIPPED_ALIAS_KEYS.Flow;
export { K as FLOW_TYPES };
var V = r.FLIPPED_ALIAS_KEYS.FlowType;
export { V as FLOWTYPE_TYPES };
var k = r.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation;
export { k as FLOWBASEANNOTATION_TYPES };
var Y = r.FLIPPED_ALIAS_KEYS.FlowDeclaration;
export { Y as FLOWDECLARATION_TYPES };
var U = r.FLIPPED_ALIAS_KEYS.FlowPredicate;
export { U as FLOWPREDICATE_TYPES };
var X = r.FLIPPED_ALIAS_KEYS.EnumBody;
export { X as ENUMBODY_TYPES };
var W = r.FLIPPED_ALIAS_KEYS.EnumMember;
export { W as ENUMMEMBER_TYPES };
var J = r.FLIPPED_ALIAS_KEYS.JSX;
export { J as JSX_TYPES };
var H = r.FLIPPED_ALIAS_KEYS.Miscellaneous;
export { H as MISCELLANEOUS_TYPES };
var q = r.FLIPPED_ALIAS_KEYS.TypeScript;
export { q as TYPESCRIPT_TYPES };
var G = r.FLIPPED_ALIAS_KEYS.TSTypeElement;
export { G as TSTYPEELEMENT_TYPES };
var z = r.FLIPPED_ALIAS_KEYS.TSType;
export { z as TSTYPE_TYPES };
var Q = r.FLIPPED_ALIAS_KEYS.TSBaseType;
export { Q as TSBASETYPE_TYPES };