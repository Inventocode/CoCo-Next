"use strict";

(function (e) {
  function n(e) {
    return null == e || "" === e ? null : e;
  }
  function r(e, t) {
    if (undefined === t) {
      t = false;
    }
    return null != e && ("" !== e || t);
  }
  function o(e) {
    return !r(e);
  }
  function i(e) {
    return null == e || 0 === e.length;
  }
  function a(e) {
    return null != e && "function" === typeof e.toString ? e.toString() : null;
  }
  function s(e) {
    if (undefined !== e) {
      if (null === e || "" === e) {
        return null;
      }
      if ("number" === typeof e) {
        return isNaN(e) ? undefined : e;
      }
      var t = parseInt(e, 10);
      return isNaN(t) ? undefined : t;
    }
  }
  function c(e) {
    if (undefined !== e) {
      return null !== e && "" !== e && ("boolean" === typeof e ? e : /true/i.test(e));
    }
  }
  function l(e, t, n) {
    if (undefined === n) {
      n = false;
    }
    var r = null == e;
    var o = null == t;
    if (e && e.toNumber) {
      e = e.toNumber();
    }
    if (t && t.toNumber) {
      t = t.toNumber();
    }
    if (r && o) {
      return 0;
    }
    if (r) {
      return -1;
    }
    if (o) {
      return 1;
    }
    function i(e, t) {
      return e > t ? 1 : e < t ? -1 : 0;
    }
    if ("string" !== typeof e) {
      return i(e, t);
    }
    if (!n) {
      return i(e, t);
    }
    try {
      return e.localeCompare(t);
    } catch (a) {
      return i(e, t);
    }
  }
  function u(e, t, n) {
    if (null === e || undefined === e) {
      return null;
    }
    if (!Array.isArray(e)) {
      return u(d(e), t, n);
    }
    for (var r = e, o = null, i = 0; i < r.length; i++) {
      var a = r[i];
      if ("string" === typeof t) {
        if (a[t] === n) {
          o = a;
          break;
        }
      } else if (t(a)) {
        o = a;
        break;
      }
    }
    return o;
  }
  function d(e) {
    if (e instanceof Set || e instanceof Map) {
      var t = [];
      e.forEach(function (e) {
        return t.push(e);
      });
      return t;
    }
    return Object.keys(e).map(function (t) {
      return e[t];
    });
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var p = Object.freeze({
    __proto__: null,
    makeNull: n,
    exists: r,
    missing: o,
    missingOrEmpty: i,
    toStringOrNull: a,
    attrToNumber: s,
    attrToBoolean: c,
    attrToString: function (e) {
      if (null != e && "" !== e) {
        return e;
      }
    },
    referenceCompare: function (e, t) {
      return null == e && null == t || (null != e || null == t) && (null == e || null != t) && e === t;
    },
    jsonEquals: function (e, t) {
      return (e ? JSON.stringify(e) : null) === (t ? JSON.stringify(t) : null);
    },
    defaultComparator: l,
    find: u,
    values: d
  });
  var f = function () {
    function e() {
      this.existingKeys = {};
    }
    e.prototype.addExistingKeys = function (e) {
      for (var t = 0; t < e.length; t++) {
        this.existingKeys[e[t]] = true;
      }
    };
    e.prototype.getUniqueKey = function (e, t) {
      e = a(e);
      for (var n = 0;;) {
        var r = undefined;
        if (e) {
          r = e;
          if (0 !== n) {
            r += "_" + n;
          }
        } else {
          if (t) {
            r = t;
            if (0 !== n) {
              r += "_" + n;
            }
          } else {
            r = "" + n;
          }
        }
        if (!this.existingKeys[r]) {
          this.existingKeys[r] = true;
          return r;
        }
        n++;
      }
    };
    return e;
  }();
  function h() {
    for (var e = [], t = 0; t < arguments.length; t++) {
      e[t] = arguments[t];
    }
    for (var n = 0; n < e.length; n++) {
      var o = e[n];
      if (r(o)) {
        return o;
      }
    }
    return null;
  }
  function m(e) {
    if (e && e.length) {
      return e[e.length - 1];
    }
  }
  function g(e, t, n) {
    return null == e && null == t || null != e && null != t && e.length === t.length && T(e, function (e, r) {
      return n ? n(e, t[r]) : t[r] === e;
    });
  }
  function _(e) {
    return e.sort(function (e, t) {
      return e - t;
    });
  }
  function v(e, t) {
    var n = e.indexOf(t);
    if (n >= 0) {
      e.splice(n, 1);
    }
  }
  function b(e, t) {
    I(t, function (t) {
      return v(e, t);
    });
  }
  function y(e, t, n) {
    e.splice(n, 0, t);
  }
  function E(e, t, n) {
    b(e, t);
    I(t.slice().reverse(), function (t) {
      return y(e, t, n);
    });
  }
  function O(e, t) {
    return e.indexOf(t) > -1;
  }
  function w(e, t) {
    if (null != t && null != e) {
      I(t, function (t) {
        return e.push(t);
      });
    }
  }
  function C(e, t) {
    for (var n = 0; n < e.length; n++) {
      if (t(e[n], n, e)) {
        return n;
      }
    }
    return -1;
  }
  function T(e, t) {
    if (null == e) {
      return true;
    }
    for (var n = 0; n < e.length; n++) {
      if (!t(e[n], n)) {
        return false;
      }
    }
    return true;
  }
  function S(e, t) {
    if (null == e) {
      return false;
    }
    for (var n = 0; n < e.length; n++) {
      if (t(e[n], n)) {
        return true;
      }
    }
    return false;
  }
  function I(e, t) {
    if (null != e) {
      for (var n = 0; n < e.length; n++) {
        t(e[n], n);
      }
    }
  }
  function A(e, t) {
    if (null == e) {
      return null;
    }
    for (var n = [], r = 0; r < e.length; r++) {
      n.push(t(e[r], r));
    }
    return n;
  }
  function j(e, t) {
    if (null == e) {
      return null;
    }
    for (var n = [], r = 0; r < e.length; r++) {
      if (t(e[r], r)) {
        n.push(e[r]);
      }
    }
    return n;
  }
  var N = Object.freeze({
    __proto__: null,
    firstExistingValue: h,
    anyExists: function (e) {
      return e && null != h(e);
    },
    existsAndNotEmpty: function (e) {
      return null != e && e.length > 0;
    },
    last: m,
    areEqual: g,
    compareArrays: function (e, t) {
      return g(e, t);
    },
    shallowCompare: function (e, t) {
      return g(e, t);
    },
    sortNumerically: _,
    removeRepeatsFromArray: function (e, t) {
      if (e) {
        for (var n = e.length - 2; n >= 0; n--) {
          var r = e[n] === t;
          var o = e[n + 1] === t;
          if (r && o) {
            e.splice(n + 1, 1);
          }
        }
      }
    },
    removeFromArray: v,
    removeAllFromArray: b,
    insertIntoArray: y,
    insertArrayIntoArray: function (e, t, n) {
      if (null != e && null != t) {
        for (var r = t.length - 1; r >= 0; r--) {
          y(e, t[r], n);
        }
      }
    },
    moveInArray: E,
    includes: O,
    flatten: function (e) {
      return [].concat.apply([], e);
    },
    pushAll: w,
    toStrings: function (e) {
      return A(e, a);
    },
    findIndex: C,
    fill: function (e, t, n, r) {
      if (undefined === t) {
        t = null;
      }
      if (undefined === n) {
        n = 0;
      }
      if (undefined === r) {
        r = e.length;
      }
      for (var o = n; o < r; o++) {
        e[o] = t;
      }
      return e;
    },
    every: T,
    some: S,
    forEach: I,
    forEachReverse: function (e, t) {
      if (null != e) {
        for (var n = e.length - 1; n >= 0; n--) {
          t(e[n], n);
        }
      }
    },
    map: A,
    filter: j,
    reduce: function (e, t, n) {
      if (null == e || null == n) {
        return null;
      }
      for (var r = n, o = 0; o < e.length; o++) {
        r = t(r, e[o], o);
      }
      return r;
    },
    forEachSnapshotFirst: function (e, t) {
      if (e) {
        e.slice(0).forEach(t);
      }
    }
  });
  function R(e, t) {
    if (null != e) {
      if (Array.isArray(e)) {
        I(e, function (e, n) {
          return t("" + n, e);
        });
      } else {
        I(Object.keys(e), function (n) {
          return t(n, e[n]);
        });
      }
    }
  }
  function k(e) {
    for (var t = {}, n = Object.keys(e), r = 0; r < n.length; r++) {
      var o = n[r];
      var i = e[o];
      t[o] = i;
    }
    return t;
  }
  function x(e, t) {
    if (e) {
      var n = e;
      var r = {};
      Object.keys(n).forEach(function (e) {
        if (!(t && t.indexOf(e) >= 0)) {
          var o = n[e];
          var i = V(o) && o.constructor === Object;
          r[e] = i ? x(o) : o;
        }
      });
      return r;
    }
  }
  function D(e, t) {
    return e[t];
  }
  function M(e, t, n) {
    e[t] = n;
  }
  function L(e, t, n, r) {
    var o = D(e, n);
    if (undefined !== o) {
      M(t, n, r ? r(o) : o);
    }
  }
  function P(e) {
    var t = {};
    e.filter(function (e) {
      return null != e;
    }).forEach(function (e) {
      I(Object.keys(e), function (e) {
        return t[e] = null;
      });
    });
    return Object.keys(t);
  }
  function B(e) {
    if (!e) {
      return [];
    }
    var t = Object;
    if ("function" === typeof t.values) {
      return t.values(e);
    }
    var n = [];
    for (var r in e) if (e.hasOwnProperty(r) && e.propertyIsEnumerable(r)) {
      n.push(e[r]);
    }
    return n;
  }
  function F(e, t, n, o) {
    if (undefined === n) {
      n = true;
    }
    if (undefined === o) {
      o = false;
    }
    if (r(t)) {
      R(t, function (t, r) {
        var i = e[t];
        if (i !== r) {
          if (o) {
            if (null == i && null != r) {
              if ("object" === typeof r && r.constructor === Object) {
                i = {};
                e[t] = i;
              }
            }
          }
          if (V(r) && V(i) && !Array.isArray(i)) {
            F(i, r, n, o);
          } else {
            if (n || undefined !== r) {
              e[t] = r;
            }
          }
        }
      });
    }
  }
  function G(e) {
    for (var t = [], n = 1; n < arguments.length; n++) {
      t[n - 1] = arguments[n];
    }
    I(t, function (t) {
      return R(t, function (t, n) {
        return e[t] = n;
      });
    });
    return e;
  }
  function U(e, t, n) {
    if (null == e) {
      return n;
    }
    for (var r = t.split("."), o = e; r.length > 1;) {
      if (null == (o = o[r.shift()])) {
        return n;
      }
    }
    var i = o[r[0]];
    return null != i ? i : n;
  }
  function W(e, t, n) {
    if (t && e) {
      if (!n) {
        return e[t];
      }
      for (var r = t.split("."), o = e, i = 0; i < r.length; i++) {
        if (null == o) {
          return;
        }
        o = o[r[i]];
      }
      return o;
    }
  }
  function H(e, t) {
    Object.keys(e).forEach(function (t) {
      if ("object" === typeof e[t]) {
        e[t] = undefined;
      }
    });
    var n = Object.getPrototypeOf(e);
    var r = {};
    Object.keys(n).forEach(function (e) {
      if ("function" === typeof n[e]) {
        r[e] = {
          value: function () {
            console.warn("AG Grid: " + t + " function " + e + "() cannot be called as the grid has been destroyed.\n                     Please don't call grid API functions on destroyed grids - as a matter of fact you shouldn't\n                     be keeping the API reference, your application has a memory leak! Remove the API reference\n                     when the grid is destroyed.");
          },
          writable: true
        };
      }
    });
    Object.defineProperties(e, r);
  }
  function V(e) {
    return "object" === typeof e && null !== e;
  }
  var z = Object.freeze({
    __proto__: null,
    iterateObject: R,
    cloneObject: k,
    deepCloneObject: function (e) {
      return JSON.parse(JSON.stringify(e));
    },
    deepCloneDefinition: x,
    getProperty: D,
    setProperty: M,
    copyPropertiesIfPresent: function (e, t) {
      for (var n = [], r = 2; r < arguments.length; r++) {
        n[r - 2] = arguments[r];
      }
      I(n, function (n) {
        return L(e, t, n);
      });
    },
    copyPropertyIfPresent: L,
    getAllKeysInObjects: P,
    getAllValuesInObject: B,
    mergeDeep: F,
    assign: G,
    missingOrEmptyObject: function (e) {
      return o(e) || 0 === Object.keys(e).length;
    },
    get: U,
    set: function (e, t, n) {
      if (null != e) {
        for (var r = t.split("."), o = e; r.length > 1;) {
          if (null == (o = o[r.shift()])) {
            return;
          }
        }
        o[r[0]] = n;
      }
    },
    deepFreeze: function e(t) {
      Object.freeze(t);
      I(d(t), function (t) {
        if (V(t) || "function" === typeof t) {
          e(t);
        }
      });
      return t;
    },
    getValueUsingField: W,
    removeAllReferences: H,
    isNonNullObject: V
  });
  var Y = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;
  var K = /([^\s,]+)/g;
  var q = {};
  function X(e, t) {
    if (!q[t]) {
      e();
      q[t] = true;
    }
  }
  function Q(e) {
    if (e.name) {
      return e.name;
    }
    var t = /function\s+([^\(]+)/.exec(e.toString());
    return t && 2 === t.length ? t[1].trim() : null;
  }
  function Z(e) {
    return !!(e && e.constructor && e.call && e.apply);
  }
  function J(e) {
    ne(e, 400);
  }
  var $ = [];
  var ee = false;
  function te(e) {
    $.push(e);
    if (!ee) {
      ee = true;
      window.setTimeout(function () {
        var e = $.slice();
        $.length = 0;
        ee = false;
        e.forEach(function (e) {
          return e();
        });
      }, 0);
    }
  }
  function ne(e, t) {
    if (undefined === t) {
      t = 0;
    }
    if (e.length > 0) {
      window.setTimeout(function () {
        return e.forEach(function (e) {
          return e();
        });
      }, t);
    }
  }
  function re(e, t, n) {
    var r;
    if (undefined === n) {
      n = false;
    }
    return function () {
      for (var o = [], i = 0; i < arguments.length; i++) {
        o[i] = arguments[i];
      }
      var a = this;
      var s = n && !r;
      window.clearTimeout(r);
      r = window.setTimeout(function () {
        r = null;
        if (!n) {
          e.apply(a, o);
        }
      }, t);
      if (s) {
        e.apply(a, o);
      }
    };
  }
  function oe(e, t, n, r) {
    if (undefined === n) {
      n = 100;
    }
    var o = new Date().getTime();
    var i = null;
    var a = false;
    var s = function () {
      var s = new Date().getTime() - o > n;
      if (e() || s) {
        t();
        a = true;
        if (null != i) {
          window.clearInterval(i);
          i = null;
        }
        if (s && r) {
          console.warn(r);
        }
      }
    };
    s();
    if (!a) {
      i = window.setInterval(s, 10);
    }
  }
  function ie(e) {
    if (e) {
      e();
    }
  }
  var ae = Object.freeze({
    __proto__: null,
    doOnce: X,
    getFunctionName: Q,
    getFunctionParameters: function (e) {
      var t = e.toString().replace(Y, "");
      return t.slice(t.indexOf("(") + 1, t.indexOf(")")).match(K) || [];
    },
    isFunction: Z,
    executeInAWhile: J,
    executeNextVMTurn: te,
    executeAfter: ne,
    debounce: re,
    waitUntil: oe,
    compose: function () {
      for (var e = [], t = 0; t < arguments.length; t++) {
        e[t] = arguments[t];
      }
      return function (t) {
        return e.reduce(function (e, t) {
          return t(e);
        }, t);
      };
    },
    callIfPresent: ie
  });
  var se = function () {
    function e(e, t) {
      this.beanWrappers = {};
      this.destroyed = false;
      if (e && e.beanClasses) {
        this.contextParams = e;
        this.logger = t;
        this.logger.log(">> creating ag-Application Context");
        this.createBeans();
        var n = this.getBeanInstances();
        this.wireBeans(n);
        this.logger.log(">> ag-Application Context ready - component is alive");
      }
    }
    e.prototype.getBeanInstances = function () {
      return d(this.beanWrappers).map(function (e) {
        return e.beanInstance;
      });
    };
    e.prototype.createBean = function (e, t) {
      if (!e) {
        throw Error("Can't wire to bean since it is null");
      }
      this.wireBeans([e], t);
      return e;
    };
    e.prototype.wireBeans = function (e, t) {
      this.autoWireBeans(e);
      this.methodWireBeans(e);
      this.callLifeCycleMethods(e, "preConstructMethods");
      if (r(t)) {
        e.forEach(t);
      }
      this.callLifeCycleMethods(e, "postConstructMethods");
    };
    e.prototype.createBeans = function () {
      var e = this;
      this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));
      R(this.beanWrappers, function (t, n) {
        var r;
        if (n.bean.__agBeanMetaData && n.bean.__agBeanMetaData.autowireMethods && n.bean.__agBeanMetaData.autowireMethods.agConstructor) {
          r = n.bean.__agBeanMetaData.autowireMethods.agConstructor;
        }
        var o = e.getBeansForParameters(r, n.bean.name);
        var i = function (e, t) {
          var n = [null].concat(t);
          return new (e.bind.apply(e, n))();
        }(n.bean, o);
        n.beanInstance = i;
      });
      var t = Object.keys(this.beanWrappers).join(", ");
      this.logger.log("created beans: " + t);
    };
    e.prototype.createBeanWrapper = function (e) {
      var t = e.__agBeanMetaData;
      if (!t) {
        var n = undefined;
        n = e.prototype.constructor ? Q(e.prototype.constructor) : "" + e;
        return void console.error("Context item " + n + " is not a bean");
      }
      var r = {
        bean: e,
        beanInstance: null,
        beanName: t.beanName
      };
      this.beanWrappers[t.beanName] = r;
    };
    e.prototype.autoWireBeans = function (e) {
      var t = this;
      e.forEach(function (e) {
        t.forEachMetaDataInHierarchy(e, function (n, r) {
          var o = n.agClassAttributes;
          if (o) {
            o.forEach(function (n) {
              var o = t.lookupBeanInstance(r, n.beanName, n.optional);
              e[n.attributeName] = o;
            });
          }
        });
      });
    };
    e.prototype.methodWireBeans = function (e) {
      var t = this;
      e.forEach(function (e) {
        t.forEachMetaDataInHierarchy(e, function (n, r) {
          R(n.autowireMethods, function (n, o) {
            if ("agConstructor" !== n) {
              var i = t.getBeansForParameters(o, r);
              e[n].apply(e, i);
            }
          });
        });
      });
    };
    e.prototype.forEachMetaDataInHierarchy = function (e, t) {
      for (var n = Object.getPrototypeOf(e); null != n;) {
        var r = n.constructor;
        if (r.hasOwnProperty("__agBeanMetaData")) {
          t(r.__agBeanMetaData, this.getBeanName(r));
        }
        n = Object.getPrototypeOf(n);
      }
    };
    e.prototype.getBeanName = function (e) {
      if (e.__agBeanMetaData && e.__agBeanMetaData.beanName) {
        return e.__agBeanMetaData.beanName;
      }
      var t = e.toString();
      return t.substring(9, t.indexOf("("));
    };
    e.prototype.getBeansForParameters = function (e, t) {
      var n = this;
      var r = [];
      if (e) {
        R(e, function (e, o) {
          var i = n.lookupBeanInstance(t, o);
          r[Number(e)] = i;
        });
      }
      return r;
    };
    e.prototype.lookupBeanInstance = function (e, t, n) {
      if (undefined === n) {
        n = false;
      }
      if ("context" === t) {
        return this;
      }
      if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(t)) {
        return this.contextParams.providedBeanInstances[t];
      }
      var r = this.beanWrappers[t];
      return r ? r.beanInstance : (n || console.error("AG Grid: unable to find bean reference " + t + " while initialising " + e), null);
    };
    e.prototype.callLifeCycleMethods = function (e, t) {
      var n = this;
      e.forEach(function (e) {
        return n.callLifeCycleMethodsOnBean(e, t);
      });
    };
    e.prototype.callLifeCycleMethodsOnBean = function (e, t, n) {
      var r = {};
      this.forEachMetaDataInHierarchy(e, function (e) {
        var o = e[t];
        if (o) {
          o.forEach(function (e) {
            if (e != n) {
              r[e] = true;
            }
          });
        }
      });
      Object.keys(r).forEach(function (t) {
        return e[t]();
      });
    };
    e.prototype.getBean = function (e) {
      return this.lookupBeanInstance("getBean", e, true);
    };
    e.prototype.destroy = function () {
      if (!this.destroyed) {
        this.logger.log(">> Shutting down ag-Application Context");
        var e = this.getBeanInstances();
        this.destroyBeans(e);
        this.contextParams.providedBeanInstances = null;
        this.destroyed = true;
        this.logger.log(">> ag-Application Context shut down - component is dead");
      }
    };
    e.prototype.destroyBean = function (e) {
      if (e) {
        this.destroyBeans([e]);
      }
    };
    e.prototype.destroyBeans = function (e) {
      var t = this;
      return e ? (e.forEach(function (e) {
        t.callLifeCycleMethodsOnBean(e, "preDestroyMethods", "destroy");
        var n = e;
        if ("function" === typeof n.destroy) {
          n.destroy();
        }
      }), []) : [];
    };
    return e;
  }();
  function ce(e, t, n) {
    var r = ge(e.constructor);
    if (!r.preConstructMethods) {
      r.preConstructMethods = [];
    }
    r.preConstructMethods.push(t);
  }
  function le(e, t, n) {
    var r = ge(e.constructor);
    if (!r.postConstructMethods) {
      r.postConstructMethods = [];
    }
    r.postConstructMethods.push(t);
  }
  function ue(e, t, n) {
    var r = ge(e.constructor);
    if (!r.preDestroyMethods) {
      r.preDestroyMethods = [];
    }
    r.preDestroyMethods.push(t);
  }
  function de(e) {
    return function (t) {
      ge(t).beanName = e;
    };
  }
  function pe(e) {
    return function (t, n, r) {
      he(t, e, false, t, n, null);
    };
  }
  function fe(e) {
    return function (t, n, r) {
      he(t, e, true, t, n, null);
    };
  }
  function he(e, t, n, r, o, i) {
    if (null !== t) {
      if ("number" !== typeof i) {
        var a = ge(e.constructor);
        if (!a.agClassAttributes) {
          a.agClassAttributes = [];
        }
        a.agClassAttributes.push({
          attributeName: o,
          beanName: t,
          optional: n
        });
      } else {
        console.error("AG Grid: Autowired should be on an attribute");
      }
    } else {
      console.error("AG Grid: Autowired name should not be null");
    }
  }
  function me(e) {
    return function (t, n, r) {
      var o;
      var i = "function" == typeof t ? t : t.constructor;
      if ("number" === typeof r) {
        var a = undefined;
        if (n) {
          o = ge(i);
          a = n;
        } else {
          o = ge(i);
          a = "agConstructor";
        }
        if (!o.autowireMethods) {
          o.autowireMethods = {};
        }
        if (!o.autowireMethods[a]) {
          o.autowireMethods[a] = {};
        }
        o.autowireMethods[a][r] = e;
      }
    };
  }
  function ge(e) {
    if (!e.hasOwnProperty("__agBeanMetaData")) {
      e.__agBeanMetaData = {};
    }
    return e.__agBeanMetaData;
  }
  var _e;
  var ve = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var be = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var ye = function () {
    function e() {
      this.allSyncListeners = new Map();
      this.allAsyncListeners = new Map();
      this.globalSyncListeners = new Set();
      this.globalAsyncListeners = new Set();
      this.asyncFunctionsQueue = [];
      this.scheduled = false;
      this.firedEvents = {};
    }
    e.prototype.setBeans = function (e, t, n, r) {
      if (undefined === r) {
        r = null;
      }
      this.logger = e.create("EventService");
      this.frameworkOverrides = n;
      if (r) {
        var o = t.useAsyncEvents();
        this.addGlobalListener(r, o);
      }
    };
    e.prototype.getListeners = function (e, t, n) {
      var r = t ? this.allAsyncListeners : this.allSyncListeners;
      var o = r.get(e);
      if (!o && n) {
        o = new Set();
        r.set(e, o);
      }
      return o;
    };
    e.prototype.noRegisteredListenersExist = function () {
      return 0 === this.allSyncListeners.size && 0 === this.allAsyncListeners.size && 0 === this.globalSyncListeners.size && 0 === this.globalAsyncListeners.size;
    };
    e.prototype.addEventListener = function (e, t, n) {
      if (undefined === n) {
        n = false;
      }
      this.getListeners(e, n, true).add(t);
    };
    e.prototype.removeEventListener = function (e, t, n) {
      if (undefined === n) {
        n = false;
      }
      var r = this.getListeners(e, n, false);
      if (r) {
        r.delete(t);
        if (0 === r.size) {
          (n ? this.allAsyncListeners : this.allSyncListeners).delete(e);
        }
      }
    };
    e.prototype.addGlobalListener = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      (t ? this.globalAsyncListeners : this.globalSyncListeners).add(e);
    };
    e.prototype.removeGlobalListener = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      (t ? this.globalAsyncListeners : this.globalSyncListeners).delete(e);
    };
    e.prototype.dispatchEvent = function (e) {
      this.dispatchToListeners(e, true);
      this.dispatchToListeners(e, false);
      this.firedEvents[e.type] = true;
    };
    e.prototype.dispatchEventOnce = function (e) {
      if (!this.firedEvents[e.type]) {
        this.dispatchEvent(e);
      }
    };
    e.prototype.dispatchToListeners = function (e, t) {
      var n = this;
      var r = e.type;
      var o = this.getListeners(r, t, false);
      if (o) {
        (function (r) {
          r.forEach(function (r) {
            if (t) {
              n.dispatchAsync(function () {
                return r(e);
              });
            } else {
              r(e);
            }
          });
        })(o);
      }
      (t ? this.globalAsyncListeners : this.globalSyncListeners).forEach(function (o) {
        if (t) {
          n.dispatchAsync(function () {
            return n.frameworkOverrides.dispatchEvent(r, function () {
              return o(r, e);
            });
          });
        } else {
          n.frameworkOverrides.dispatchEvent(r, function () {
            return o(r, e);
          });
        }
      });
    };
    e.prototype.dispatchAsync = function (e) {
      this.asyncFunctionsQueue.push(e);
      if (!this.scheduled) {
        window.setTimeout(this.flushAsyncQueue.bind(this), 0);
        this.scheduled = true;
      }
    };
    e.prototype.flushAsyncQueue = function () {
      this.scheduled = false;
      var e = this.asyncFunctionsQueue.slice();
      this.asyncFunctionsQueue = [];
      e.forEach(function (e) {
        return e();
      });
    };
    ve([be(0, me("loggerFactory")), be(1, me("gridOptionsWrapper")), be(2, me("frameworkOverrides")), be(3, me("globalEventListener"))], e.prototype, "setBeans", null);
    return e = ve([de("eventService")], e);
  }();
  var Ee = function () {
    function e() {}
    e.ROW_BUFFER_SIZE = 10;
    e.LAYOUT_INTERVAL = 500;
    e.BATCH_WAIT_MILLIS = 50;
    e.EXPORT_TYPE_DRAG_COPY = "dragCopy";
    e.EXPORT_TYPE_CLIPBOARD = "clipboard";
    e.EXPORT_TYPE_EXCEL = "excel";
    e.EXPORT_TYPE_CSV = "csv";
    e.ROW_MODEL_TYPE_INFINITE = "infinite";
    e.ROW_MODEL_TYPE_VIEWPORT = "viewport";
    e.ROW_MODEL_TYPE_CLIENT_SIDE = "clientSide";
    e.ROW_MODEL_TYPE_SERVER_SIDE = "serverSide";
    e.ALWAYS = "always";
    e.ONLY_WHEN_GROUPING = "onlyWhenGrouping";
    e.PINNED_TOP = "top";
    e.PINNED_BOTTOM = "bottom";
    e.DOM_LAYOUT_NORMAL = "normal";
    e.DOM_LAYOUT_PRINT = "print";
    e.DOM_LAYOUT_AUTO_HEIGHT = "autoHeight";
    e.GROUP_AUTO_COLUMN_ID = "ag-Grid-AutoColumn";
    e.SOURCE_PASTE = "paste";
    e.PINNED_RIGHT = "right";
    e.PINNED_LEFT = "left";
    e.SORT_ASC = "asc";
    e.SORT_DESC = "desc";
    e.INPUT_SELECTOR = "input, select, button, textarea";
    e.FOCUSABLE_SELECTOR = "[tabindex], input, select, button, textarea";
    e.FOCUSABLE_EXCLUDE = ".ag-hidden, .ag-hidden *, [disabled], .ag-disabled, .ag-disabled *";
    return e;
  }();
  (_e = exports.ModuleNames || (exports.ModuleNames = {})).CommunityCoreModule = "@ag-grid-community/core";
  _e.CommunityAllModules = "@ag-grid-community/all";
  _e.InfiniteRowModelModule = "@ag-grid-community/infinite-row-model";
  _e.ClientSideRowModelModule = "@ag-grid-community/client-side-row-model";
  _e.CsvExportModule = "@ag-grid-community/csv-export";
  _e.EnterpriseCoreModule = "@ag-grid-enterprise/core";
  _e.EnterpriseAllModules = "@ag-grid-enterprise/all";
  _e.RowGroupingModule = "@ag-grid-enterprise/row-grouping";
  _e.ColumnToolPanelModule = "@ag-grid-enterprise/column-tool-panel";
  _e.FiltersToolPanelModule = "@ag-grid-enterprise/filter-tool-panel";
  _e.MenuModule = "@ag-grid-enterprise/menu";
  _e.SetFilterModule = "@ag-grid-enterprise/set-filter";
  _e.MultiFilterModule = "@ag-grid-enterprise/multi-filter";
  _e.StatusBarModule = "@ag-grid-enterprise/status-bar";
  _e.SideBarModule = "@ag-grid-enterprise/side-bar";
  _e.RangeSelectionModule = "@ag-grid-enterprise/range-selection";
  _e.MasterDetailModule = "@ag-grid-enterprise/master-detail";
  _e.RichSelectModule = "@ag-grid-enterprise/rich-select";
  _e.GridChartsModule = "@ag-grid-enterprise/charts";
  _e.ViewportRowModelModule = "@ag-grid-enterprise/viewport-row-model";
  _e.ServerSideRowModelModule = "@ag-grid-enterprise/server-side-row-model";
  _e.ExcelExportModule = "@ag-grid-enterprise/excel-export";
  _e.ClipboardModule = "@ag-grid-enterprise/clipboard";
  _e.DateTimeCellEditorModule = "@ag-grid-enterprise/date-time-cell-editor";
  _e.AngularModule = "@ag-grid-community/angular";
  _e.ReactModule = "@ag-grid-community/react";
  _e.VueModule = "@ag-grid-community/vue";
  _e.PolymerModule = "@ag-grid-community/polymer";
  var Oe = function () {
    function e() {}
    e.register = function (t, n) {
      if (undefined === n) {
        n = true;
      }
      e.modulesMap[t.moduleName] = t;
      if (undefined === e.moduleBased) {
        e.moduleBased = n;
      } else {
        if (e.moduleBased !== n) {
          X(function () {
            console.warn("AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.");
            console.warn("Please see https://www.ag-grid.com/javascript-table/packages-modules/ for more information.");
          }, "ModulePackageCheck");
        }
      }
    };
    e.registerModules = function (t, n) {
      if (undefined === n) {
        n = true;
      }
      if (t) {
        t.forEach(function (t) {
          return e.register(t, n);
        });
      }
    };
    e.assertRegistered = function (e, t) {
      if (this.isRegistered(e)) {
        return true;
      }
      var n = "AG Grid: unable to use " + t + " as module " + e + " is not present. Please see: https://www.ag-grid.com/javascript-table/modules/";
      X(function () {
        console.warn(n);
      }, t + e);
      return false;
    };
    e.isRegistered = function (t) {
      return !!e.modulesMap[t];
    };
    e.getRegisteredModules = function () {
      return d(e.modulesMap);
    };
    e.isPackageBased = function () {
      return !e.moduleBased;
    };
    e.modulesMap = {};
    return e;
  }();
  var we = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ce = function () {
    function e(e, t, n, r) {
      this.moving = false;
      this.menuVisible = false;
      this.filterActive = false;
      this.eventService = new ye();
      this.rowGroupActive = false;
      this.pivotActive = false;
      this.aggregationActive = false;
      this.colDef = e;
      this.userProvidedColDef = t;
      this.colId = n;
      this.primary = r;
      this.setState(e);
    }
    e.prototype.setState = function (e) {
      if (undefined !== e.sort) {
        if (!(e.sort !== Ee.SORT_ASC && e.sort !== Ee.SORT_DESC)) {
          this.sort = e.sort;
        }
      } else {
        if (!(e.initialSort !== Ee.SORT_ASC && e.initialSort !== Ee.SORT_DESC)) {
          this.sort = e.initialSort;
        }
      }
      var t = s(e.sortIndex);
      var n = s(e.initialSortIndex);
      if (undefined !== t) {
        if (null !== t) {
          this.sortIndex = t;
        }
      } else {
        if (null !== n) {
          this.sortIndex = n;
        }
      }
      var r = c(e.hide);
      var o = c(e.initialHide);
      this.visible = undefined !== r ? !r : !o;
      if (undefined !== e.pinned) {
        this.setPinned(e.pinned);
      } else {
        this.setPinned(e.initialPinned);
      }
      var i = s(e.flex);
      var a = s(e.initialFlex);
      if (undefined !== i) {
        this.flex = i;
      } else {
        if (undefined !== a) {
          this.flex = a;
        }
      }
    };
    e.prototype.setColDef = function (e, t) {
      this.colDef = e;
      this.userProvidedColDef = t;
      this.initMinAndMaxWidths();
      this.initDotNotation();
    };
    e.prototype.getUserProvidedColDef = function () {
      return this.userProvidedColDef;
    };
    e.prototype.setParent = function (e) {
      this.parent = e;
    };
    e.prototype.getParent = function () {
      return this.parent;
    };
    e.prototype.setOriginalParent = function (e) {
      this.originalParent = e;
    };
    e.prototype.getOriginalParent = function () {
      return this.originalParent;
    };
    e.prototype.initialise = function () {
      this.initMinAndMaxWidths();
      this.resetActualWidth("gridInitializing");
      this.initDotNotation();
      this.validate();
    };
    e.prototype.initDotNotation = function () {
      var e = this.gridOptionsWrapper.isSuppressFieldDotNotation();
      this.fieldContainsDots = r(this.colDef.field) && this.colDef.field.indexOf(".") >= 0 && !e;
      this.tooltipFieldContainsDots = r(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf(".") >= 0 && !e;
    };
    e.prototype.initMinAndMaxWidths = function () {
      var e = this.gridOptionsWrapper.getMinColWidth();
      var t = this.gridOptionsWrapper.getMaxColWidth();
      if (null != this.colDef.minWidth) {
        this.minWidth = Math.max(this.colDef.minWidth, 1);
      } else {
        this.minWidth = e;
      }
      if (null != this.colDef.maxWidth) {
        this.maxWidth = this.colDef.maxWidth;
      } else {
        this.maxWidth = t;
      }
    };
    e.prototype.resetActualWidth = function (e) {
      if (undefined === e) {
        e = "api";
      }
      var t = this.columnUtils.calculateColInitialWidth(this.colDef);
      this.setActualWidth(t, e, true);
    };
    e.prototype.isEmptyGroup = function () {
      return false;
    };
    e.prototype.isRowGroupDisplayed = function (e) {
      if (o(this.colDef) || o(this.colDef.showRowGroup)) {
        return false;
      }
      var t = true === this.colDef.showRowGroup;
      var n = this.colDef.showRowGroup === e;
      return t || n;
    };
    e.prototype.getUniqueId = function () {
      return this.getId();
    };
    e.prototype.isPrimary = function () {
      return this.primary;
    };
    e.prototype.isFilterAllowed = function () {
      var e = !!this.colDef.filter || !!this.colDef.filterFramework;
      return this.primary && e;
    };
    e.prototype.isFieldContainsDots = function () {
      return this.fieldContainsDots;
    };
    e.prototype.isTooltipFieldContainsDots = function () {
      return this.tooltipFieldContainsDots;
    };
    e.prototype.validate = function () {
      var e = this.colDef;
      function n(e, t, n) {
        X(function () {
          if (n) {
            console.warn(e, n);
          } else {
            X(function () {
              return console.warn(e);
            }, t);
          }
        }, t);
      }
      if (this.gridOptionsWrapper.isRowModelDefault() && !Oe.isRegistered(exports.ModuleNames.RowGroupingModule)) {
        ["enableRowGroup", "rowGroup", "rowGroupIndex", "enablePivot", "enableValue", "pivot", "pivotIndex", "aggFunc"].forEach(function (o) {
          if (r(e[o])) {
            if (Oe.isPackageBased()) {
              n("AG Grid: " + o + " is only valid in ag-grid-enterprise, your column definition should not have " + o, "ColumnRowGroupingMissing" + o);
            } else {
              n("AG Grid: " + o + " is only valid with AG Grid Enterprise Module " + exports.ModuleNames.RowGroupingModule + " - your column definition should not have " + o, "ColumnRowGroupingMissing" + o);
            }
          }
        });
      }
      if (!(Oe.isRegistered(exports.ModuleNames.RichSelectModule) || "agRichSelect" !== this.colDef.cellEditor && "agRichSelectCellEditor" !== this.colDef.cellEditor)) {
        if (Oe.isPackageBased()) {
          n("AG Grid: " + this.colDef.cellEditor + " can only be used with ag-grid-enterprise", "ColumnRichSelectMissing");
        } else {
          n("AG Grid: " + this.colDef.cellEditor + " can only be used with AG Grid Enterprise Module " + exports.ModuleNames.RichSelectModule, "ColumnRichSelectMissing");
        }
      }
      if (!(Oe.isRegistered(exports.ModuleNames.DateTimeCellEditorModule) || "agRichSelect" !== this.colDef.cellEditor && "agDateTimeCellEditor" !== this.colDef.cellEditor)) {
        if (Oe.isPackageBased()) {
          n("AG Grid: " + this.colDef.cellEditor + " can only be used with ag-grid-enterprise", "ColumnDateTimeMissing");
        } else {
          n("AG Grid: " + this.colDef.cellEditor + " can only be used with AG Grid Enterprise Module " + exports.ModuleNames.DateTimeCellEditorModule, "ColumnDateTimeMissing");
        }
      }
      if (this.gridOptionsWrapper.isTreeData()) {
        ["rowGroup", "rowGroupIndex", "pivot", "pivotIndex"].forEach(function (t) {
          if (r(e[t])) {
            n("AG Grid: " + t + " is not possible when doing tree data, your column definition should not have " + t, "TreeDataCannotRowGroup");
          }
        });
      }
      if (r(this.colDef.width) && "number" !== typeof this.colDef.width) {
        n("AG Grid: colDef.width should be a number, not " + typeof this.colDef.width, "ColumnCheck_asdfawef");
      }
    };
    e.prototype.addEventListener = function (e, t) {
      this.eventService.addEventListener(e, t);
    };
    e.prototype.removeEventListener = function (e, t) {
      this.eventService.removeEventListener(e, t);
    };
    e.prototype.createColumnFunctionCallbackParams = function (e) {
      return {
        node: e,
        data: e.data,
        column: this,
        colDef: this.colDef,
        context: this.gridOptionsWrapper.getContext(),
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi()
      };
    };
    e.prototype.isSuppressNavigable = function (e) {
      if ("boolean" === typeof this.colDef.suppressNavigable) {
        return this.colDef.suppressNavigable;
      }
      if ("function" === typeof this.colDef.suppressNavigable) {
        var t = this.createColumnFunctionCallbackParams(e);
        return (0, this.colDef.suppressNavigable)(t);
      }
      return false;
    };
    e.prototype.isCellEditable = function (e) {
      return !(e.group && !this.gridOptionsWrapper.isEnableGroupEdit()) && this.isColumnFunc(e, this.colDef.editable);
    };
    e.prototype.isRowDrag = function (e) {
      return this.isColumnFunc(e, this.colDef.rowDrag);
    };
    e.prototype.isDndSource = function (e) {
      return this.isColumnFunc(e, this.colDef.dndSource);
    };
    e.prototype.isCellCheckboxSelection = function (e) {
      return this.isColumnFunc(e, this.colDef.checkboxSelection);
    };
    e.prototype.isSuppressPaste = function (e) {
      return this.isColumnFunc(e, this.colDef ? this.colDef.suppressPaste : null);
    };
    e.prototype.isResizable = function () {
      return true === this.colDef.resizable;
    };
    e.prototype.isColumnFunc = function (e, t) {
      return "boolean" === typeof t ? t : "function" === typeof t && t(this.createColumnFunctionCallbackParams(e));
    };
    e.prototype.setMoving = function (t, n) {
      if (undefined === n) {
        n = "api";
      }
      this.moving = t;
      this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_MOVING_CHANGED, n));
    };
    e.prototype.createColumnEvent = function (e, t) {
      return {
        api: this.gridApi,
        columnApi: this.columnApi,
        type: e,
        column: this,
        columns: [this],
        source: t
      };
    };
    e.prototype.isMoving = function () {
      return this.moving;
    };
    e.prototype.getSort = function () {
      return this.sort;
    };
    e.prototype.setSort = function (t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (this.sort !== t) {
        this.sort = t;
        this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_SORT_CHANGED, n));
      }
    };
    e.prototype.setMenuVisible = function (t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (this.menuVisible !== t) {
        this.menuVisible = t;
        this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_MENU_VISIBLE_CHANGED, n));
      }
    };
    e.prototype.isMenuVisible = function () {
      return this.menuVisible;
    };
    e.prototype.isSortAscending = function () {
      return this.sort === Ee.SORT_ASC;
    };
    e.prototype.isSortDescending = function () {
      return this.sort === Ee.SORT_DESC;
    };
    e.prototype.isSortNone = function () {
      return o(this.sort);
    };
    e.prototype.isSorting = function () {
      return r(this.sort);
    };
    e.prototype.getSortIndex = function () {
      return this.sortIndex;
    };
    e.prototype.setSortIndex = function (e) {
      this.sortIndex = e;
    };
    e.prototype.setAggFunc = function (e) {
      this.aggFunc = e;
    };
    e.prototype.getAggFunc = function () {
      return this.aggFunc;
    };
    e.prototype.getLeft = function () {
      return this.left;
    };
    e.prototype.getOldLeft = function () {
      return this.oldLeft;
    };
    e.prototype.getRight = function () {
      return this.left + this.actualWidth;
    };
    e.prototype.setLeft = function (t, n) {
      if (undefined === n) {
        n = "api";
      }
      this.oldLeft = this.left;
      if (this.left !== t) {
        this.left = t;
        this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_LEFT_CHANGED, n));
      }
    };
    e.prototype.isFilterActive = function () {
      return this.filterActive;
    };
    e.prototype.setFilterActive = function (t, n, r) {
      if (undefined === n) {
        n = "api";
      }
      if (this.filterActive !== t) {
        this.filterActive = t;
        this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_FILTER_ACTIVE_CHANGED, n));
      }
      var o = this.createColumnEvent(e.EVENT_FILTER_CHANGED, n);
      if (r) {
        F(o, r);
      }
      this.eventService.dispatchEvent(o);
    };
    e.prototype.setPinned = function (e) {
      if (true === e || e === Ee.PINNED_LEFT) {
        this.pinned = Ee.PINNED_LEFT;
      } else {
        if (e === Ee.PINNED_RIGHT) {
          this.pinned = Ee.PINNED_RIGHT;
        } else {
          this.pinned = null;
        }
      }
    };
    e.prototype.setFirstRightPinned = function (t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (this.firstRightPinned !== t) {
        this.firstRightPinned = t;
        this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_FIRST_RIGHT_PINNED_CHANGED, n));
      }
    };
    e.prototype.setLastLeftPinned = function (t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (this.lastLeftPinned !== t) {
        this.lastLeftPinned = t;
        this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_LAST_LEFT_PINNED_CHANGED, n));
      }
    };
    e.prototype.isFirstRightPinned = function () {
      return this.firstRightPinned;
    };
    e.prototype.isLastLeftPinned = function () {
      return this.lastLeftPinned;
    };
    e.prototype.isPinned = function () {
      return this.pinned === Ee.PINNED_LEFT || this.pinned === Ee.PINNED_RIGHT;
    };
    e.prototype.isPinnedLeft = function () {
      return this.pinned === Ee.PINNED_LEFT;
    };
    e.prototype.isPinnedRight = function () {
      return this.pinned === Ee.PINNED_RIGHT;
    };
    e.prototype.getPinned = function () {
      return this.pinned;
    };
    e.prototype.setVisible = function (t, n) {
      if (undefined === n) {
        n = "api";
      }
      var r = true === t;
      if (this.visible !== r) {
        this.visible = r;
        this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_VISIBLE_CHANGED, n));
      }
    };
    e.prototype.isVisible = function () {
      return this.visible;
    };
    e.prototype.getColDef = function () {
      return this.colDef;
    };
    e.prototype.getColumnGroupShow = function () {
      return this.colDef.columnGroupShow;
    };
    e.prototype.getColId = function () {
      return this.colId;
    };
    e.prototype.getId = function () {
      return this.getColId();
    };
    e.prototype.getDefinition = function () {
      return this.colDef;
    };
    e.prototype.getActualWidth = function () {
      return this.actualWidth;
    };
    e.prototype.createBaseColDefParams = function (e) {
      return {
        node: e,
        data: e.data,
        colDef: this.colDef,
        column: this,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      };
    };
    e.prototype.getColSpan = function (e) {
      if (o(this.colDef.colSpan)) {
        return 1;
      }
      var t = this.createBaseColDefParams(e);
      var n = this.colDef.colSpan(t);
      return Math.max(n, 1);
    };
    e.prototype.getRowSpan = function (e) {
      if (o(this.colDef.rowSpan)) {
        return 1;
      }
      var t = this.createBaseColDefParams(e);
      var n = this.colDef.rowSpan(t);
      return Math.max(n, 1);
    };
    e.prototype.setActualWidth = function (e, t, n) {
      if (undefined === t) {
        t = "api";
      }
      if (undefined === n) {
        n = false;
      }
      if (null != this.minWidth) {
        e = Math.max(e, this.minWidth);
      }
      if (null != this.maxWidth) {
        e = Math.min(e, this.maxWidth);
      }
      if (this.actualWidth !== e) {
        this.actualWidth = e;
        if (this.flex && "flex" !== t && "gridInitializing" !== t) {
          this.flex = null;
        }
        if (!n) {
          this.fireColumnWidthChangedEvent(t);
        }
      }
    };
    e.prototype.fireColumnWidthChangedEvent = function (t) {
      this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_WIDTH_CHANGED, t));
    };
    e.prototype.isGreaterThanMax = function (e) {
      return null != this.maxWidth && e > this.maxWidth;
    };
    e.prototype.getMinWidth = function () {
      return this.minWidth;
    };
    e.prototype.getMaxWidth = function () {
      return this.maxWidth;
    };
    e.prototype.getFlex = function () {
      return this.flex || 0;
    };
    e.prototype.setFlex = function (e) {
      if (this.flex !== e) {
        this.flex = e;
      }
    };
    e.prototype.setMinimum = function (e) {
      if (undefined === e) {
        e = "api";
      }
      if (r(this.minWidth)) {
        this.setActualWidth(this.minWidth, e);
      }
    };
    e.prototype.setRowGroupActive = function (t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (this.rowGroupActive !== t) {
        this.rowGroupActive = t;
        this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_ROW_GROUP_CHANGED, n));
      }
    };
    e.prototype.isRowGroupActive = function () {
      return this.rowGroupActive;
    };
    e.prototype.setPivotActive = function (t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (this.pivotActive !== t) {
        this.pivotActive = t;
        this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_PIVOT_CHANGED, n));
      }
    };
    e.prototype.isPivotActive = function () {
      return this.pivotActive;
    };
    e.prototype.isAnyFunctionActive = function () {
      return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
    };
    e.prototype.isAnyFunctionAllowed = function () {
      return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
    };
    e.prototype.setValueActive = function (t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (this.aggregationActive !== t) {
        this.aggregationActive = t;
        this.eventService.dispatchEvent(this.createColumnEvent(e.EVENT_VALUE_CHANGED, n));
      }
    };
    e.prototype.isValueActive = function () {
      return this.aggregationActive;
    };
    e.prototype.isAllowPivot = function () {
      return true === this.colDef.enablePivot;
    };
    e.prototype.isAllowValue = function () {
      return true === this.colDef.enableValue;
    };
    e.prototype.isAllowRowGroup = function () {
      return true === this.colDef.enableRowGroup;
    };
    e.prototype.getMenuTabs = function (e) {
      var t = this.getColDef().menuTabs;
      if (null == t) {
        t = e;
      }
      return t;
    };
    e.prototype.isLockPosition = function () {
      console.warn("AG Grid: since v21, col.isLockPosition() should not be used, please use col.getColDef().lockPosition instead.");
      return !!this.colDef && !!this.colDef.lockPosition;
    };
    e.prototype.isLockVisible = function () {
      console.warn("AG Grid: since v21, col.isLockVisible() should not be used, please use col.getColDef().lockVisible instead.");
      return !!this.colDef && !!this.colDef.lockVisible;
    };
    e.prototype.isLockPinned = function () {
      console.warn("AG Grid: since v21, col.isLockPinned() should not be used, please use col.getColDef().lockPinned instead.");
      return !!this.colDef && !!this.colDef.lockPinned;
    };
    e.EVENT_MOVING_CHANGED = "movingChanged";
    e.EVENT_LEFT_CHANGED = "leftChanged";
    e.EVENT_WIDTH_CHANGED = "widthChanged";
    e.EVENT_LAST_LEFT_PINNED_CHANGED = "lastLeftPinnedChanged";
    e.EVENT_FIRST_RIGHT_PINNED_CHANGED = "firstRightPinnedChanged";
    e.EVENT_VISIBLE_CHANGED = "visibleChanged";
    e.EVENT_FILTER_CHANGED = "filterChanged";
    e.EVENT_FILTER_ACTIVE_CHANGED = "filterActiveChanged";
    e.EVENT_SORT_CHANGED = "sortChanged";
    e.EVENT_MENU_VISIBLE_CHANGED = "menuVisibleChanged";
    e.EVENT_ROW_GROUP_CHANGED = "columnRowGroupChanged";
    e.EVENT_PIVOT_CHANGED = "columnPivotChanged";
    e.EVENT_VALUE_CHANGED = "columnValueChanged";
    we([pe("gridOptionsWrapper")], e.prototype, "gridOptionsWrapper", undefined);
    we([pe("columnUtils")], e.prototype, "columnUtils", undefined);
    we([pe("columnApi")], e.prototype, "columnApi", undefined);
    we([pe("gridApi")], e.prototype, "gridApi", undefined);
    we([pe("context")], e.prototype, "context", undefined);
    we([le], e.prototype, "initialise", null);
    return e;
  }();
  var Te = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Se = function () {
    function e(e, t, n, r) {
      this.displayedChildren = [];
      this.localEventService = new ye();
      this.groupId = t;
      this.instanceId = n;
      this.originalColumnGroup = e;
      this.pinned = r;
    }
    e.createUniqueId = function (e, t) {
      return e + "_" + t;
    };
    e.prototype.reset = function () {
      this.parent = null;
      this.children = null;
      this.displayedChildren = null;
    };
    e.prototype.getParent = function () {
      return this.parent;
    };
    e.prototype.setParent = function (e) {
      this.parent = e;
    };
    e.prototype.getUniqueId = function () {
      return e.createUniqueId(this.groupId, this.instanceId);
    };
    e.prototype.isEmptyGroup = function () {
      return 0 === this.displayedChildren.length;
    };
    e.prototype.isMoving = function () {
      var e = this.getOriginalColumnGroup().getLeafColumns();
      return !(!e || 0 === e.length) && e.every(function (e) {
        return e.isMoving();
      });
    };
    e.prototype.checkLeft = function () {
      this.displayedChildren.forEach(function (t) {
        if (t instanceof e) {
          t.checkLeft();
        }
      });
      if (this.displayedChildren.length > 0) {
        if (this.gridOptionsWrapper.isEnableRtl()) {
          var t = m(this.displayedChildren).getLeft();
          this.setLeft(t);
        } else {
          var n = this.displayedChildren[0].getLeft();
          this.setLeft(n);
        }
      } else {
        this.setLeft(null);
      }
    };
    e.prototype.getLeft = function () {
      return this.left;
    };
    e.prototype.getOldLeft = function () {
      return this.oldLeft;
    };
    e.prototype.setLeft = function (t) {
      this.oldLeft = t;
      if (this.left !== t) {
        this.left = t;
        this.localEventService.dispatchEvent(this.createAgEvent(e.EVENT_LEFT_CHANGED));
      }
    };
    e.prototype.getPinned = function () {
      return this.pinned;
    };
    e.prototype.createAgEvent = function (e) {
      return {
        type: e
      };
    };
    e.prototype.addEventListener = function (e, t) {
      this.localEventService.addEventListener(e, t);
    };
    e.prototype.removeEventListener = function (e, t) {
      this.localEventService.removeEventListener(e, t);
    };
    e.prototype.getGroupId = function () {
      return this.groupId;
    };
    e.prototype.getInstanceId = function () {
      return this.instanceId;
    };
    e.prototype.isChildInThisGroupDeepSearch = function (t) {
      var n = false;
      this.children.forEach(function (r) {
        if (t === r) {
          n = true;
        }
        if (r instanceof e && r.isChildInThisGroupDeepSearch(t)) {
          n = true;
        }
      });
      return n;
    };
    e.prototype.getActualWidth = function () {
      var e = 0;
      if (this.displayedChildren) {
        this.displayedChildren.forEach(function (t) {
          e += t.getActualWidth();
        });
      }
      return e;
    };
    e.prototype.isResizable = function () {
      if (!this.displayedChildren) {
        return false;
      }
      var e = false;
      this.displayedChildren.forEach(function (t) {
        if (t.isResizable()) {
          e = true;
        }
      });
      return e;
    };
    e.prototype.getMinWidth = function () {
      var e = 0;
      this.displayedChildren.forEach(function (t) {
        e += t.getMinWidth() || 0;
      });
      return e;
    };
    e.prototype.addChild = function (e) {
      if (!this.children) {
        this.children = [];
      }
      this.children.push(e);
    };
    e.prototype.getDisplayedChildren = function () {
      return this.displayedChildren;
    };
    e.prototype.getLeafColumns = function () {
      var e = [];
      this.addLeafColumns(e);
      return e;
    };
    e.prototype.getDisplayedLeafColumns = function () {
      var e = [];
      this.addDisplayedLeafColumns(e);
      return e;
    };
    e.prototype.getDefinition = function () {
      return this.originalColumnGroup.getColGroupDef();
    };
    e.prototype.getColGroupDef = function () {
      return this.originalColumnGroup.getColGroupDef();
    };
    e.prototype.isPadding = function () {
      return this.originalColumnGroup.isPadding();
    };
    e.prototype.isExpandable = function () {
      return this.originalColumnGroup.isExpandable();
    };
    e.prototype.isExpanded = function () {
      return this.originalColumnGroup.isExpanded();
    };
    e.prototype.setExpanded = function (e) {
      this.originalColumnGroup.setExpanded(e);
    };
    e.prototype.addDisplayedLeafColumns = function (t) {
      this.displayedChildren.forEach(function (n) {
        if (n instanceof Ce) {
          t.push(n);
        } else {
          if (n instanceof e) {
            n.addDisplayedLeafColumns(t);
          }
        }
      });
    };
    e.prototype.addLeafColumns = function (t) {
      this.children.forEach(function (n) {
        if (n instanceof Ce) {
          t.push(n);
        } else {
          if (n instanceof e) {
            n.addLeafColumns(t);
          }
        }
      });
    };
    e.prototype.getChildren = function () {
      return this.children;
    };
    e.prototype.getColumnGroupShow = function () {
      return this.originalColumnGroup.getColumnGroupShow();
    };
    e.prototype.getOriginalColumnGroup = function () {
      return this.originalColumnGroup;
    };
    e.prototype.getPaddingLevel = function () {
      var e = this.getParent();
      return this.isPadding() && e && e.isPadding() ? 1 + e.getPaddingLevel() : 0;
    };
    e.prototype.calculateDisplayedColumns = function () {
      var t = this;
      this.displayedChildren = [];
      for (var n = this; null != n && n.isPadding();) {
        n = n.getParent();
      }
      if (!(!!n && n.originalColumnGroup.isExpandable())) {
        this.displayedChildren = this.children;
        return void this.localEventService.dispatchEvent(this.createAgEvent(e.EVENT_DISPLAYED_CHILDREN_CHANGED));
      }
      this.children.forEach(function (r) {
        if (!(r instanceof e && (!r.displayedChildren || !r.displayedChildren.length))) {
          switch (r.getColumnGroupShow()) {
            case e.HEADER_GROUP_SHOW_OPEN:
              if (n.originalColumnGroup.isExpanded()) {
                t.displayedChildren.push(r);
              }
              break;
            case e.HEADER_GROUP_SHOW_CLOSED:
              if (!n.originalColumnGroup.isExpanded()) {
                t.displayedChildren.push(r);
              }
              break;
            default:
              t.displayedChildren.push(r);
          }
        }
      });
      this.localEventService.dispatchEvent(this.createAgEvent(e.EVENT_DISPLAYED_CHILDREN_CHANGED));
    };
    e.HEADER_GROUP_SHOW_OPEN = "open";
    e.HEADER_GROUP_SHOW_CLOSED = "closed";
    e.EVENT_LEFT_CHANGED = "leftChanged";
    e.EVENT_DISPLAYED_CHILDREN_CHANGED = "displayedChildrenChanged";
    Te([pe("gridOptionsWrapper")], e.prototype, "gridOptionsWrapper", undefined);
    return e;
  }();
  var Ie = function () {
    function e(e, t, n, r) {
      this.localEventService = new ye();
      this.expandable = false;
      this.colGroupDef = e;
      this.groupId = t;
      this.expanded = !!e && !!e.openByDefault;
      this.padding = n;
      this.level = r;
    }
    e.prototype.setOriginalParent = function (e) {
      this.originalParent = e;
    };
    e.prototype.getOriginalParent = function () {
      return this.originalParent;
    };
    e.prototype.getLevel = function () {
      return this.level;
    };
    e.prototype.isVisible = function () {
      return !!this.children && this.children.some(function (e) {
        return e.isVisible();
      });
    };
    e.prototype.isPadding = function () {
      return this.padding;
    };
    e.prototype.setExpanded = function (t) {
      this.expanded = undefined !== t && t;
      var n = {
        type: e.EVENT_EXPANDED_CHANGED
      };
      this.localEventService.dispatchEvent(n);
    };
    e.prototype.isExpandable = function () {
      return this.expandable;
    };
    e.prototype.isExpanded = function () {
      return this.expanded;
    };
    e.prototype.getGroupId = function () {
      return this.groupId;
    };
    e.prototype.getId = function () {
      return this.getGroupId();
    };
    e.prototype.setChildren = function (e) {
      this.children = e;
    };
    e.prototype.getChildren = function () {
      return this.children;
    };
    e.prototype.getColGroupDef = function () {
      return this.colGroupDef;
    };
    e.prototype.getLeafColumns = function () {
      var e = [];
      this.addLeafColumns(e);
      return e;
    };
    e.prototype.addLeafColumns = function (t) {
      if (this.children) {
        this.children.forEach(function (n) {
          if (n instanceof Ce) {
            t.push(n);
          } else {
            if (n instanceof e) {
              n.addLeafColumns(t);
            }
          }
        });
      }
    };
    e.prototype.getColumnGroupShow = function () {
      var e = this.colGroupDef;
      if (e) {
        return e.columnGroupShow;
      }
    };
    e.prototype.setupExpandable = function () {
      var e = this;
      this.setExpandable();
      this.getLeafColumns().forEach(function (t) {
        return t.addEventListener(Ce.EVENT_VISIBLE_CHANGED, e.onColumnVisibilityChanged.bind(e));
      });
    };
    e.prototype.setExpandable = function () {
      if (!this.isPadding()) {
        for (var t = false, n = false, r = false, o = this.findChildrenRemovingPadding(), i = 0, a = o.length; i < a; i++) {
          var s = o[i];
          if (s.isVisible()) {
            var c = s.getColumnGroupShow();
            if (c === Se.HEADER_GROUP_SHOW_OPEN) {
              t = true;
              r = true;
            } else {
              if (c === Se.HEADER_GROUP_SHOW_CLOSED) {
                n = true;
                r = true;
              } else {
                t = true;
                n = true;
              }
            }
          }
        }
        var l = t && n && r;
        if (this.expandable !== l) {
          this.expandable = l;
          var u = {
            type: e.EVENT_EXPANDABLE_CHANGED
          };
          this.localEventService.dispatchEvent(u);
        }
      }
    };
    e.prototype.findChildrenRemovingPadding = function () {
      var t = [];
      (function n(r) {
        r.forEach(function (r) {
          if (r instanceof e && r.isPadding()) {
            n(r.children);
          } else {
            t.push(r);
          }
        });
      })(this.children);
      return t;
    };
    e.prototype.onColumnVisibilityChanged = function () {
      this.setExpandable();
    };
    e.prototype.addEventListener = function (e, t) {
      this.localEventService.addEventListener(e, t);
    };
    e.prototype.removeEventListener = function (e, t) {
      this.localEventService.removeEventListener(e, t);
    };
    e.EVENT_EXPANDED_CHANGED = "expandedChanged";
    e.EVENT_EXPANDABLE_CHANGED = "expandableChanged";
    return e;
  }();
  var Ae = {
    numericColumn: {
      headerClass: "ag-right-aligned-header",
      cellClass: "ag-right-aligned-cell"
    },
    rightAligned: {
      headerClass: "ag-right-aligned-header",
      cellClass: "ag-right-aligned-cell"
    }
  };
  var je = ["touchstart", "touchend", "touchmove", "touchcancel"];
  var Ne = {};
  function Re(e) {
    e.__ag_Grid_Stop_Propagation = true;
  }
  function ke(e) {
    return true === e.__ag_Grid_Stop_Propagation;
  }
  var xe = function () {
    var e = {
      select: "input",
      change: "input",
      submit: "form",
      reset: "form",
      error: "img",
      load: "img",
      abort: "img"
    };
    return function (t) {
      if ("boolean" === typeof Ne[t]) {
        return Ne[t];
      }
      var n = document.createElement(e[t] || "div");
      var r = (t = "on" + t) in n;
      if (!r) {
        n.setAttribute(t, "return;");
        r = "function" == typeof n[t];
      }
      return Ne[t] = r;
    };
  }();
  function De(e, t, n) {
    for (var r = Me(t); r;) {
      var o = e.getDomData(r, n);
      if (o) {
        return o;
      }
      r = r.parentElement;
    }
    return null;
  }
  function Me(e) {
    var t = e;
    return t.target || t.srcElement;
  }
  function Le(e, t) {
    return !(!t || !e) && Be(t).indexOf(e) >= 0;
  }
  function Pe(e) {
    for (var t = [], n = Me(e); n;) {
      t.push(n);
      n = n.parentElement;
    }
    return t;
  }
  function Be(e) {
    var t = e;
    return t.deepPath ? t.deepPath() : t.path ? t.path : t.composedPath ? t.composedPath() : t.__agGridEventPath ? t.__agGridEventPath : Pe(e);
  }
  function Fe(e, t, n, r) {
    var o = O(je, n) ? {
      passive: true
    } : undefined;
    if (e && e.addEventListener) {
      e.addEventListener(t, n, r, o);
    }
  }
  var Ge = Object.freeze({
    __proto__: null,
    stopPropagationForAgGrid: Re,
    isStopPropagationForAgGrid: ke,
    isEventSupported: xe,
    getComponentForEvent: De,
    addChangeListener: function (e, t) {
      e.addEventListener("changed", t);
      e.addEventListener("paste", t);
      e.addEventListener("input", t);
      e.addEventListener("keydown", t);
      e.addEventListener("keyup", t);
    },
    getTarget: Me,
    isElementInEventPath: Le,
    createEventPath: Pe,
    addAgGridEventPath: function (e) {
      e.__agGridEventPath = Be(e);
    },
    getEventPath: Be,
    addSafePassiveEventListener: Fe
  });
  var Ue = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var We = function () {
    function e() {
      var e = this;
      this.destroyFunctions = [];
      this.destroyed = false;
      this.__v_skip = true;
      this.getContext = function () {
        return e.context;
      };
      this.isAlive = function () {
        return !e.destroyed;
      };
    }
    e.prototype.getFrameworkOverrides = function () {
      return this.frameworkOverrides;
    };
    e.prototype.destroy = function () {
      this.destroyFunctions.forEach(function (e) {
        return e();
      });
      this.destroyFunctions.length = 0;
      this.destroyed = true;
      this.dispatchEvent({
        type: e.EVENT_DESTROYED
      });
    };
    e.prototype.addEventListener = function (e, t) {
      if (!this.localEventService) {
        this.localEventService = new ye();
      }
      this.localEventService.addEventListener(e, t);
    };
    e.prototype.removeEventListener = function (e, t) {
      if (this.localEventService) {
        this.localEventService.removeEventListener(e, t);
      }
    };
    e.prototype.dispatchEventAsync = function (e) {
      var t = this;
      window.setTimeout(function () {
        return t.dispatchEvent(e);
      }, 0);
    };
    e.prototype.dispatchEvent = function (e) {
      if (this.localEventService) {
        this.localEventService.dispatchEvent(e);
      }
    };
    e.prototype.addManagedListener = function (e, t, n) {
      var r = this;
      if (!this.destroyed) {
        if (e instanceof HTMLElement) {
          Fe(this.getFrameworkOverrides(), e, t, n);
        } else {
          e.addEventListener(t, n);
        }
        var o = function o() {
          e.removeEventListener(t, n);
          r.destroyFunctions = r.destroyFunctions.filter(function (e) {
            return e !== o;
          });
          return null;
        };
        this.destroyFunctions.push(o);
        return o;
      }
    };
    e.prototype.addDestroyFunc = function (e) {
      if (this.isAlive()) {
        this.destroyFunctions.push(e);
      } else {
        e();
      }
    };
    e.prototype.createManagedBean = function (e, t) {
      var n = this.createBean(e, t);
      this.addDestroyFunc(this.destroyBean.bind(this, e, t));
      return n;
    };
    e.prototype.createBean = function (e, t, n) {
      return (t || this.getContext()).createBean(e, n);
    };
    e.prototype.destroyBean = function (e, t) {
      return (t || this.getContext()).destroyBean(e);
    };
    e.prototype.destroyBeans = function (e, t) {
      var n = this;
      if (e) {
        I(e, function (e) {
          return n.destroyBean(e, t);
        });
      }
      return [];
    };
    e.EVENT_DESTROYED = "destroyed";
    Ue([pe("frameworkOverrides")], e.prototype, "frameworkOverrides", undefined);
    Ue([pe("context")], e.prototype, "context", undefined);
    Ue([pe("eventService")], e.prototype, "eventService", undefined);
    Ue([pe("gridOptionsWrapper")], e.prototype, "gridOptionsWrapper", undefined);
    Ue([ue], e.prototype, "destroy", null);
    return e;
  }();
  var He = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ve = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var ze = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var Ye = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    He(t, e);
    t.prototype.setBeans = function (e) {
      this.logger = e.create("ColumnFactory");
    };
    t.prototype.createColumnTree = function (e, t, n) {
      var r = new f();
      var o = this.extractExistingTreeData(n);
      var i = o.existingCols;
      var a = o.existingGroups;
      var s = o.existingColKeys;
      r.addExistingKeys(s);
      var c = this.recursivelyCreateColumns(e, 0, t, i, r, a);
      var l = this.findMaxDept(c, 0);
      this.logger.log("Number of levels for grouped columns is " + l);
      var u = this.balanceColumnTree(c, 0, l, r);
      this.columnUtils.depthFirstOriginalTreeSearch(null, u, function (e, t) {
        if (e instanceof Ie) {
          e.setupExpandable();
        }
        e.setOriginalParent(t);
      });
      return {
        columnTree: u,
        treeDept: l
      };
    };
    t.prototype.extractExistingTreeData = function (e) {
      var t = [];
      var n = [];
      var r = [];
      if (e) {
        this.columnUtils.depthFirstOriginalTreeSearch(null, e, function (e) {
          if (e instanceof Ie) {
            var o = e;
            n.push(o);
          } else {
            var i = e;
            r.push(i.getId());
            t.push(i);
          }
        });
      }
      return {
        existingCols: t,
        existingGroups: n,
        existingColKeys: r
      };
    };
    t.prototype.createForAutoGroups = function (e, t) {
      var n = this;
      var r = [];
      e.forEach(function (e) {
        var o = n.createAutoGroupTreeItem(t, e);
        r.push(o);
      });
      return r;
    };
    t.prototype.createAutoGroupTreeItem = function (e, t) {
      for (var n = t, r = this.findDepth(e) - 1; r >= 0; r--) {
        var o = new Ie(null, "FAKE_PATH_" + t.getId() + "}_" + r, true, r);
        this.context.createBean(o);
        o.setChildren([n]);
        n.setOriginalParent(o);
        n = o;
      }
      return n;
    };
    t.prototype.findDepth = function (e) {
      for (var t = 0, n = e; n && n[0] && n[0] instanceof Ie;) {
        t++;
        n = n[0].getChildren();
      }
      return t;
    };
    t.prototype.balanceColumnTree = function (e, t, n, r) {
      for (var o = [], i = 0; i < e.length; i++) {
        var a = e[i];
        if (a instanceof Ie) {
          var s = a;
          var c = this.balanceColumnTree(s.getChildren(), t + 1, n, r);
          s.setChildren(c);
          o.push(s);
        } else {
          for (var l = undefined, u = undefined, d = n - 1; d >= t; d--) {
            var p = r.getUniqueKey(null, null);
            var f = this.createMergedColGroupDef(null);
            var h = new Ie(f, p, true, t);
            this.context.createBean(h);
            if (u) {
              u.setChildren([h]);
            }
            u = h;
            if (!l) {
              l = u;
            }
          }
          if (l && u) {
            o.push(l);
            if (e.some(function (e) {
              return e instanceof Ie;
            })) {
              u.setChildren([a]);
              continue;
            }
            u.setChildren(e);
            break;
          }
          o.push(a);
        }
      }
      return o;
    };
    t.prototype.findMaxDept = function (e, t) {
      for (var n = t, r = 0; r < e.length; r++) {
        var o = e[r];
        if (o instanceof Ie) {
          var i = o;
          var a = this.findMaxDept(i.getChildren(), t + 1);
          if (n < a) {
            n = a;
          }
        }
      }
      return n;
    };
    t.prototype.recursivelyCreateColumns = function (e, t, n, r, o, i) {
      var a = this;
      var s = [];
      return e ? (e.forEach(function (e) {
        var c;
        c = a.isColumnGroup(e) ? a.createColumnGroup(n, e, t, r, o, i) : a.createColumn(n, e, r, o);
        s.push(c);
      }), s) : s;
    };
    t.prototype.createColumnGroup = function (e, t, n, r, o, i) {
      var a = this.createMergedColGroupDef(t);
      var s = o.getUniqueKey(a.groupId || null, null);
      var c = new Ie(a, s, false, n);
      this.context.createBean(c);
      var l = this.findExistingGroup(t, i);
      if (l && l.isExpanded()) {
        c.setExpanded(true);
      }
      var u = this.recursivelyCreateColumns(a.children, n + 1, e, r, o, i);
      c.setChildren(u);
      return c;
    };
    t.prototype.createMergedColGroupDef = function (e) {
      var t = {};
      G(t, this.gridOptionsWrapper.getDefaultColGroupDef());
      G(t, e);
      this.checkForDeprecatedItems(t);
      return t;
    };
    t.prototype.createColumn = function (e, t, n, r) {
      var o = this.mergeColDefs(t);
      this.checkForDeprecatedItems(o);
      var i = this.findExistingColumn(t, n);
      if (i) {
        i.setColDef(o, t);
        this.applyColumnState(i, o);
      } else {
        var a = r.getUniqueKey(o.colId, o.field);
        i = new Ce(o, t, a, e);
        this.context.createBean(i);
      }
      return i;
    };
    t.prototype.applyColumnState = function (e, t) {
      var n = s(t.flex);
      if (undefined !== n) {
        e.setFlex(n);
      }
      if (e.getFlex() <= 0) {
        var r = s(t.width);
        if (null != r) {
          e.setActualWidth(r);
        } else {
          var o = e.getActualWidth();
          e.setActualWidth(o);
        }
      }
      if (undefined !== t.sort) {
        if (t.sort == Ee.SORT_ASC || t.sort == Ee.SORT_DESC) {
          e.setSort(t.sort);
        } else {
          e.setSort(undefined);
        }
      }
      var i = s(t.sortIndex);
      if (undefined !== i) {
        e.setSortIndex(i);
      }
      var a = c(t.hide);
      if (undefined !== a) {
        e.setVisible(!a);
      }
      if (undefined !== t.pinned) {
        e.setPinned(t.pinned);
      }
    };
    t.prototype.findExistingColumn = function (e, t) {
      var n = u(t, function (t) {
        var n = t.getUserProvidedColDef();
        if (!n) {
          return false;
        }
        var r = null != e.colId;
        var o = null != e.field;
        return r ? t.getId() === e.colId : o ? n.field === e.field : n === e;
      });
      if (t && n) {
        v(t, n);
      }
      return n;
    };
    t.prototype.findExistingGroup = function (e, t) {
      var n = u(t, function (t) {
        return !!t.getColGroupDef() && !(null == e.groupId) && t.getId() === e.groupId;
      });
      if (n) {
        v(t, n);
      }
      return n;
    };
    t.prototype.mergeColDefs = function (e) {
      var t = {};
      var n = this.gridOptionsWrapper.getDefaultColDef();
      F(t, n, true, true);
      var r = e.type;
      if (!r) {
        r = n && n.type;
      }
      if (r) {
        this.assignColumnTypes(r, t);
      }
      F(t, e, true, true);
      return t;
    };
    t.prototype.assignColumnTypes = function (e, t) {
      var n = [];
      if (e instanceof Array) {
        if (e.some(function (e) {
          return "string" !== typeof e;
        })) {
          console.warn("ag-grid: if colDef.type is supplied an array it should be of type 'string[]'");
        } else {
          n = e;
        }
      } else {
        if ("string" !== typeof e) {
          return void console.warn("ag-grid: colDef.type should be of type 'string' | 'string[]'");
        }
        n = e.split(",");
      }
      var r = G({}, Ae);
      R(this.gridOptionsWrapper.getColumnTypes() || {}, function (e, t) {
        if (e in r) {
          console.warn("AG Grid: the column type '" + e + "' is a default column type and cannot be overridden.");
        } else {
          r[e] = t;
        }
      });
      n.forEach(function (e) {
        var n = r[e.trim()];
        if (n) {
          F(t, n, true, true);
        } else {
          console.warn("ag-grid: colDef.type '" + e + "' does not correspond to defined gridOptions.columnTypes");
        }
      });
    };
    t.prototype.checkForDeprecatedItems = function (e) {
      if (e) {
        var t = e;
        if (undefined !== t.group) {
          console.warn("ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3");
        }
        if (undefined !== t.headerGroup) {
          console.warn("ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3");
        }
        if (undefined !== t.headerGroupShow) {
          console.warn("ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3");
        }
        if (undefined !== t.suppressRowGroup) {
          console.warn("ag-grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead");
        }
        if (undefined !== t.suppressAggregation) {
          console.warn("ag-grid: colDef.suppressAggregation is deprecated, please use colDef.type instead");
        }
        if (t.suppressRowGroup || t.suppressAggregation) {
          console.warn("ag-grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead");
        }
        if (t.displayName) {
          console.warn("ag-grid: Found displayName " + t.displayName + ", please use headerName instead, displayName is deprecated.");
          t.headerName = t.displayName;
        }
      }
    };
    t.prototype.isColumnGroup = function (e) {
      return undefined !== e.children;
    };
    Ve([pe("columnUtils")], t.prototype, "columnUtils", undefined);
    Ve([ze(0, me("loggerFactory"))], t.prototype, "setBeans", null);
    return t = Ve([de("columnFactory")], t);
  }(We);
  var Ke = function () {
    function e() {}
    e.EVENT_COLUMN_EVERYTHING_CHANGED = "columnEverythingChanged";
    e.EVENT_NEW_COLUMNS_LOADED = "newColumnsLoaded";
    e.EVENT_COLUMN_PIVOT_MODE_CHANGED = "columnPivotModeChanged";
    e.EVENT_COLUMN_ROW_GROUP_CHANGED = "columnRowGroupChanged";
    e.EVENT_EXPAND_COLLAPSE_ALL = "expandOrCollapseAll";
    e.EVENT_COLUMN_PIVOT_CHANGED = "columnPivotChanged";
    e.EVENT_GRID_COLUMNS_CHANGED = "gridColumnsChanged";
    e.EVENT_COLUMN_VALUE_CHANGED = "columnValueChanged";
    e.EVENT_COLUMN_MOVED = "columnMoved";
    e.EVENT_COLUMN_VISIBLE = "columnVisible";
    e.EVENT_COLUMN_PINNED = "columnPinned";
    e.EVENT_COLUMN_GROUP_OPENED = "columnGroupOpened";
    e.EVENT_COLUMN_RESIZED = "columnResized";
    e.EVENT_DISPLAYED_COLUMNS_CHANGED = "displayedColumnsChanged";
    e.EVENT_VIRTUAL_COLUMNS_CHANGED = "virtualColumnsChanged";
    e.EVENT_ASYNC_TRANSACTIONS_FLUSHED = "asyncTransactionsFlushed";
    e.EVENT_ROW_GROUP_OPENED = "rowGroupOpened";
    e.EVENT_ROW_DATA_CHANGED = "rowDataChanged";
    e.EVENT_ROW_DATA_UPDATED = "rowDataUpdated";
    e.EVENT_PINNED_ROW_DATA_CHANGED = "pinnedRowDataChanged";
    e.EVENT_RANGE_SELECTION_CHANGED = "rangeSelectionChanged";
    e.EVENT_CHART_CREATED = "chartCreated";
    e.EVENT_CHART_RANGE_SELECTION_CHANGED = "chartRangeSelectionChanged";
    e.EVENT_CHART_OPTIONS_CHANGED = "chartOptionsChanged";
    e.EVENT_CHART_DESTROYED = "chartDestroyed";
    e.EVENT_TOOL_PANEL_VISIBLE_CHANGED = "toolPanelVisibleChanged";
    e.EVENT_MODEL_UPDATED = "modelUpdated";
    e.EVENT_PASTE_START = "pasteStart";
    e.EVENT_PASTE_END = "pasteEnd";
    e.EVENT_FILL_START = "fillStart";
    e.EVENT_FILL_END = "fillEnd";
    e.EVENT_CELL_CLICKED = "cellClicked";
    e.EVENT_CELL_DOUBLE_CLICKED = "cellDoubleClicked";
    e.EVENT_CELL_MOUSE_DOWN = "cellMouseDown";
    e.EVENT_CELL_CONTEXT_MENU = "cellContextMenu";
    e.EVENT_CELL_VALUE_CHANGED = "cellValueChanged";
    e.EVENT_ROW_VALUE_CHANGED = "rowValueChanged";
    e.EVENT_CELL_FOCUSED = "cellFocused";
    e.EVENT_ROW_SELECTED = "rowSelected";
    e.EVENT_SELECTION_CHANGED = "selectionChanged";
    e.EVENT_CELL_KEY_DOWN = "cellKeyDown";
    e.EVENT_CELL_KEY_PRESS = "cellKeyPress";
    e.EVENT_CELL_MOUSE_OVER = "cellMouseOver";
    e.EVENT_CELL_MOUSE_OUT = "cellMouseOut";
    e.EVENT_FILTER_CHANGED = "filterChanged";
    e.EVENT_FILTER_MODIFIED = "filterModified";
    e.EVENT_FILTER_OPENED = "filterOpened";
    e.EVENT_SORT_CHANGED = "sortChanged";
    e.EVENT_VIRTUAL_ROW_REMOVED = "virtualRowRemoved";
    e.EVENT_ROW_CLICKED = "rowClicked";
    e.EVENT_ROW_DOUBLE_CLICKED = "rowDoubleClicked";
    e.EVENT_GRID_READY = "gridReady";
    e.EVENT_GRID_SIZE_CHANGED = "gridSizeChanged";
    e.EVENT_VIEWPORT_CHANGED = "viewportChanged";
    e.EVENT_SCROLLBAR_WIDTH_CHANGED = "scrollbarWidthChanged";
    e.EVENT_FIRST_DATA_RENDERED = "firstDataRendered";
    e.EVENT_DRAG_STARTED = "dragStarted";
    e.EVENT_DRAG_STOPPED = "dragStopped";
    e.EVENT_CHECKBOX_CHANGED = "checkboxChanged";
    e.EVENT_ROW_EDITING_STARTED = "rowEditingStarted";
    e.EVENT_ROW_EDITING_STOPPED = "rowEditingStopped";
    e.EVENT_CELL_EDITING_STARTED = "cellEditingStarted";
    e.EVENT_CELL_EDITING_STOPPED = "cellEditingStopped";
    e.EVENT_BODY_SCROLL = "bodyScroll";
    e.EVENT_ANIMATION_QUEUE_EMPTY = "animationQueueEmpty";
    e.EVENT_HEIGHT_SCALE_CHANGED = "heightScaleChanged";
    e.EVENT_PAGINATION_CHANGED = "paginationChanged";
    e.EVENT_COMPONENT_STATE_CHANGED = "componentStateChanged";
    e.EVENT_BODY_HEIGHT_CHANGED = "bodyHeightChanged";
    e.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = "displayedColumnsWidthChanged";
    e.EVENT_SCROLL_VISIBILITY_CHANGED = "scrollVisibilityChanged";
    e.EVENT_COLUMN_HOVER_CHANGED = "columnHoverChanged";
    e.EVENT_FLASH_CELLS = "flashCells";
    e.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED = "paginationPixelOffsetChanged";
    e.EVENT_DISPLAYED_ROWS_CHANGED = "displayedRowsChanged";
    e.EVENT_LEFT_PINNED_WIDTH_CHANGED = "leftPinnedWidthChanged";
    e.EVENT_RIGHT_PINNED_WIDTH_CHANGED = "rightPinnedWidthChanged";
    e.EVENT_ROW_CONTAINER_HEIGHT_CHANGED = "rowContainerHeightChanged";
    e.EVENT_ROW_DRAG_ENTER = "rowDragEnter";
    e.EVENT_ROW_DRAG_MOVE = "rowDragMove";
    e.EVENT_ROW_DRAG_LEAVE = "rowDragLeave";
    e.EVENT_ROW_DRAG_END = "rowDragEnd";
    e.EVENT_POPUP_TO_FRONT = "popupToFront";
    e.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = "columnRowGroupChangeRequest";
    e.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = "columnPivotChangeRequest";
    e.EVENT_COLUMN_VALUE_CHANGE_REQUEST = "columnValueChangeRequest";
    e.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = "columnAggFuncChangeRequest";
    e.EVENT_KEYBOARD_FOCUS = "keyboardFocus";
    e.EVENT_MOUSE_FOCUS = "mouseFocus";
    e.EVENT_STORE_UPDATED = "storeUpdated";
    return e;
  }();
  var qe = function () {
    function e() {
      this.existingIds = {};
    }
    e.prototype.getInstanceIdForKey = function (e) {
      var t;
      var n = this.existingIds[e];
      t = "number" !== typeof n ? 0 : n + 1;
      this.existingIds[e] = t;
      return t;
    };
    return e;
  }();
  var Xe = /[&<>"']/g;
  var Qe = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    "\"": "&quot;",
    "'": "&#39;"
  };
  function Ze(e, t) {
    t = Math.floor(t);
    if (0 === e.length || 0 === t) {
      return "";
    }
    var n = e.length * t;
    for (t = Math.floor(Math.log(t) / Math.log(2)); t;) {
      e += e;
      t--;
    }
    return e += e.substring(0, n - e.length);
  }
  function Je(e, t, n) {
    return e.length > t ? e : ((t -= e.length) > n.length && (n += Ze(n, t / n.length)), n.slice(0, t) + e);
  }
  function $e(e) {
    return null === e || undefined === e ? null : e.replace(/([A-Z])/g, function (e) {
      return "-" + e[0].toLowerCase();
    });
  }
  function et(e) {
    return null === e || undefined === e ? null : e.replace(/-([a-z])/g, function (e) {
      return e[1].toUpperCase();
    });
  }
  function tt(e) {
    return e[0].toUpperCase() + e.substr(1).toLowerCase();
  }
  function nt(e) {
    return null == e ? null : e.toString().toString().replace(Xe, function (e) {
      return Qe[e];
    });
  }
  function rt(e) {
    if (!e || null == e) {
      return null;
    }
    return e.replace(/([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g, "$1$4 $2$3$5").replace(".", " ").split(" ").map(function (e) {
      return e.substring(0, 1).toUpperCase() + (e.length > 1 ? e.substring(1, e.length) : "");
    }).join(" ");
  }
  function ot(e, t) {
    return e === t || null != e && e.slice(0, t.length) === t;
  }
  var it = Object.freeze({
    __proto__: null,
    utf8_encode: function (e) {
      var t = String.fromCharCode;
      function n(e, n) {
        return t(e >> n & 63 | 128);
      }
      function r(e) {
        if (e >= 0 && e <= 7 || e >= 14 && e <= 31) {
          return Je("_x" + e.toString(16).toUpperCase() + "_", 4, "0");
        }
        if (0 == (4294967168 & e)) {
          return t(e);
        }
        var r = "";
        if (0 == (4294965248 & e)) {
          r = t(e >> 6 & 31 | 192);
        } else {
          if (0 == (4294901760 & e)) {
            !function (e) {
              if (e >= 55296 && e <= 57343) {
                throw Error("Lone surrogate U+" + e.toString(16).toUpperCase() + " is not a scalar value");
              }
            }(e);
            r = t(e >> 12 & 15 | 224);
            r += n(e, 6);
          } else {
            if (0 == (4292870144 & e)) {
              r = t(e >> 18 & 7 | 240);
              r += n(e, 12);
              r += n(e, 6);
            }
          }
        }
        return r += t(63 & e | 128);
      }
      for (var o = function (e) {
          var t = [];
          if (!e) {
            return [];
          }
          for (var n, r, o = e.length, i = 0; i < o;) {
            if ((n = e.charCodeAt(i++)) >= 55296 && n <= 56319 && i < o) {
              if (56320 == (64512 & (r = e.charCodeAt(i++)))) {
                t.push(((1023 & n) << 10) + (1023 & r) + 65536);
              } else {
                t.push(n);
                i--;
              }
            } else {
              t.push(n);
            }
          }
          return t;
        }(e), i = o.length, a = -1, s = ""; ++a < i;) {
        s += r(o[a]);
      }
      return s;
    },
    stringRepeat: Ze,
    padStart: Je,
    camelCaseToHyphen: $e,
    hyphenToCamelCase: et,
    capitalise: tt,
    escapeString: nt,
    camelCaseToHumanText: rt,
    startsWith: ot
  });
  function at(e) {
    var t = new Map();
    e.forEach(function (e) {
      return t.set(e[0], e[1]);
    });
    return t;
  }
  var st = Object.freeze({
    __proto__: null,
    convertToMap: at,
    keys: function (e) {
      var t = [];
      e.forEach(function (e, n) {
        return t.push(n);
      });
      return t;
    }
  });
  var ct = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var lt = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var ut = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var dt = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.primaryHeaderRowCount = 0;
      t.secondaryHeaderRowCount = 0;
      t.secondaryColumnsPresent = false;
      t.gridHeaderRowCount = 0;
      t.displayedColumnsLeft = [];
      t.displayedColumnsRight = [];
      t.displayedColumnsCenter = [];
      t.displayedColumns = [];
      t.displayedColumnsAndGroupsMap = {};
      t.viewportColumns = [];
      t.viewportColumnsCenter = [];
      t.rowGroupColumns = [];
      t.valueColumns = [];
      t.pivotColumns = [];
      t.ready = false;
      t.autoGroupsNeedBuilding = false;
      t.forceRecreateAutoGroups = false;
      t.pivotMode = false;
      t.bodyWidth = 0;
      t.leftWidth = 0;
      t.rightWidth = 0;
      t.bodyWidthDirty = true;
      t.colDefVersion = 0;
      t.flexColsCalculatedAtLestOnce = false;
      return t;
    }
    ct(t, e);
    t.prototype.init = function () {
      this.suppressColumnVirtualisation = this.gridOptionsWrapper.isSuppressColumnVirtualisation();
      var e = this.gridOptionsWrapper.isPivotMode();
      if (this.isPivotSettingAllowed(e)) {
        this.pivotMode = e;
      }
      this.usingTreeData = this.gridOptionsWrapper.isTreeData();
      this.addManagedListener(this.gridOptionsWrapper, "autoGroupColumnDef", this.onAutoGroupColumnDefChanged.bind(this));
    };
    t.prototype.onAutoGroupColumnDefChanged = function () {
      this.autoGroupsNeedBuilding = true;
      this.forceRecreateAutoGroups = true;
      this.updateGridColumns();
      this.updateDisplayedColumns("gridOptionsChanged");
    };
    t.prototype.getColDefVersion = function () {
      return this.colDefVersion;
    };
    t.prototype.setColumnDefs = function (e, t) {
      var n = this;
      if (undefined === t) {
        t = "api";
      }
      var r = !!this.columnDefs;
      this.colDefVersion++;
      var o = this.compareColumnStatesAndRaiseEvents(t);
      this.columnDefs = e;
      this.valueCache.expire();
      this.autoGroupsNeedBuilding = true;
      var i = this.primaryColumns;
      var a = this.primaryColumnTree;
      var s = this.columnFactory.createColumnTree(e, true, a);
      this.primaryColumnTree = s.columnTree;
      this.primaryHeaderRowCount = s.treeDept + 1;
      this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
      this.primaryColumnsMap = {};
      this.primaryColumns.forEach(function (e) {
        return n.primaryColumnsMap[e.getId()] = e;
      });
      this.extractRowGroupColumns(t, i);
      this.extractPivotColumns(t, i);
      this.extractValueColumns(t, i);
      this.ready = true;
      this.updateGridColumns();
      if (r && this.gridColsArePrimary && this.gridOptionsWrapper.isApplyColumnDefOrder()) {
        this.orderGridColumnsLikePrimary();
      }
      this.updateDisplayedColumns(t);
      this.checkViewportColumns();
      this.dispatchEverythingChanged(t);
      o();
      this.dispatchNewColumnsLoaded();
    };
    t.prototype.dispatchNewColumnsLoaded = function () {
      var e = {
        type: Ke.EVENT_NEW_COLUMNS_LOADED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(e);
    };
    t.prototype.dispatchEverythingChanged = function (e) {
      if (undefined === e) {
        e = "api";
      }
      var t = {
        type: Ke.EVENT_COLUMN_EVERYTHING_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: e
      };
      this.eventService.dispatchEvent(t);
    };
    t.prototype.orderGridColumnsLikePrimary = function () {
      var e = this;
      this.gridColumns.sort(function (t, n) {
        var r = e.primaryColumns.indexOf(t);
        var o = e.primaryColumns.indexOf(n);
        var i = r >= 0;
        var a = o >= 0;
        return i && a ? r - o : i ? 1 : a ? -1 : e.gridColumns.indexOf(t) - e.gridColumns.indexOf(n);
      });
    };
    t.prototype.isAutoRowHeightActive = function () {
      return this.autoRowHeightColumns && this.autoRowHeightColumns.length > 0;
    };
    t.prototype.getAllAutoRowHeightCols = function () {
      return this.autoRowHeightColumns;
    };
    t.prototype.setViewport = function () {
      if (this.gridOptionsWrapper.isEnableRtl()) {
        this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
        this.viewportRight = this.bodyWidth - this.scrollPosition;
      } else {
        this.viewportLeft = this.scrollPosition;
        this.viewportRight = this.scrollWidth + this.scrollPosition;
      }
    };
    t.prototype.getDisplayedColumnsStartingAt = function (e) {
      for (var t = e, n = []; null != t;) {
        n.push(t);
        t = this.getDisplayedColAfter(t);
      }
      return n;
    };
    t.prototype.checkViewportColumns = function () {
      if (null != this.displayedColumnsCenter) {
        var e = this.viewportColumns.map(function (e) {
          return e.getId();
        }).join("#");
        this.extractViewport();
        if (e !== this.viewportColumns.map(function (e) {
          return e.getId();
        }).join("#")) {
          var t = {
            type: Ke.EVENT_VIRTUAL_COLUMNS_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(t);
        }
      }
    };
    t.prototype.setViewportPosition = function (e, t) {
      if (e !== this.scrollWidth || t !== this.scrollPosition || this.bodyWidthDirty) {
        this.scrollWidth = e;
        this.scrollPosition = t;
        this.bodyWidthDirty = true;
        this.setViewport();
        if (this.ready) {
          this.checkViewportColumns();
        }
      }
    };
    t.prototype.isPivotMode = function () {
      return this.pivotMode;
    };
    t.prototype.isPivotSettingAllowed = function (e) {
      return !e || !this.gridOptionsWrapper.isTreeData() || (console.warn("AG Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'"), false);
    };
    t.prototype.setPivotMode = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      if (e !== this.pivotMode && this.isPivotSettingAllowed(this.pivotMode)) {
        this.pivotMode = e;
        this.autoGroupsNeedBuilding = true;
        this.updateGridColumns();
        this.updateDisplayedColumns(t);
        var n = {
          type: Ke.EVENT_COLUMN_PIVOT_MODE_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(n);
      }
    };
    t.prototype.getSecondaryPivotColumn = function (e, t) {
      if (!this.secondaryColumnsPresent || !this.secondaryColumns) {
        return null;
      }
      var n = this.getPrimaryColumn(t);
      var r = null;
      this.secondaryColumns.forEach(function (t) {
        var o = t.getColDef().pivotKeys;
        var i = t.getColDef().pivotValueColumn;
        if (g(o, e) && i === n) {
          r = t;
        }
      });
      return r;
    };
    t.prototype.setBeans = function (e) {
      this.logger = e.create("ColumnController");
    };
    t.prototype.setFirstRightAndLastLeftPinned = function (e) {
      var t;
      var n;
      if (this.gridOptionsWrapper.isEnableRtl()) {
        t = this.displayedColumnsLeft ? this.displayedColumnsLeft[0] : null;
        n = this.displayedColumnsRight ? m(this.displayedColumnsRight) : null;
      } else {
        t = this.displayedColumnsLeft ? m(this.displayedColumnsLeft) : null;
        n = this.displayedColumnsRight ? this.displayedColumnsRight[0] : null;
      }
      this.gridColumns.forEach(function (r) {
        r.setLastLeftPinned(r === t, e);
        r.setFirstRightPinned(r === n, e);
      });
    };
    t.prototype.autoSizeColumns = function (e, t, n) {
      var r = this;
      if (undefined === n) {
        n = "api";
      }
      this.animationFrameService.flushAllFrames();
      var o = [];
      var i = -1;
      for (null == t && (t = this.gridOptionsWrapper.isSkipHeaderOnAutoSize()); 0 !== i;) {
        i = 0;
        this.actionOnGridColumns(e, function (e) {
          if (o.indexOf(e) >= 0) {
            return false;
          }
          var a = r.autoWidthCalculator.getPreferredWidthForColumn(e, t);
          if (a > 0) {
            var s = r.normaliseColumnWidth(e, a);
            e.setActualWidth(s, n);
            o.push(e);
            i++;
          }
          return true;
        }, n);
      }
      this.fireColumnResizedEvent(o, true, "autosizeColumns");
    };
    t.prototype.fireColumnResizedEvent = function (e, t, n, r) {
      if (undefined === r) {
        r = null;
      }
      if (e && e.length) {
        var o = {
          type: Ke.EVENT_COLUMN_RESIZED,
          columns: e,
          column: 1 === e.length ? e[0] : null,
          flexColumns: r,
          finished: t,
          api: this.gridApi,
          columnApi: this.columnApi,
          source: n
        };
        this.eventService.dispatchEvent(o);
      }
    };
    t.prototype.autoSizeColumn = function (e, t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (e) {
        this.autoSizeColumns([e], t, n);
      }
    };
    t.prototype.autoSizeAllColumns = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      var n = this.getAllDisplayedColumns();
      this.autoSizeColumns(n, e, t);
    };
    t.prototype.getColumnsFromTree = function (e) {
      var t = [];
      (function e(n) {
        for (var r = 0; r < n.length; r++) {
          var o = n[r];
          if (o instanceof Ce) {
            t.push(o);
          } else {
            if (o instanceof Ie) {
              e(o.getChildren());
            }
          }
        }
      })(e);
      return t;
    };
    t.prototype.getAllDisplayedTrees = function () {
      return this.displayedTreeLeft && this.displayedTreeRight && this.displayedTreeCentre ? this.displayedTreeLeft.concat(this.displayedTreeCentre).concat(this.displayedTreeRight) : null;
    };
    t.prototype.getPrimaryColumnTree = function () {
      return this.primaryColumnTree;
    };
    t.prototype.getHeaderRowCount = function () {
      return this.gridHeaderRowCount;
    };
    t.prototype.getDisplayedTreeLeft = function () {
      return this.displayedTreeLeft;
    };
    t.prototype.getDisplayedTreeRight = function () {
      return this.displayedTreeRight;
    };
    t.prototype.getDisplayedTreeCentre = function () {
      return this.displayedTreeCentre;
    };
    t.prototype.isColumnDisplayed = function (e) {
      return this.getAllDisplayedColumns().indexOf(e) >= 0;
    };
    t.prototype.getAllDisplayedColumns = function () {
      return this.displayedColumns;
    };
    t.prototype.getViewportColumns = function () {
      return this.viewportColumns;
    };
    t.prototype.getDisplayedLeftColumnsForRow = function (e) {
      return this.colSpanActive ? this.getDisplayedColumnsForRow(e, this.displayedColumnsLeft) : this.displayedColumnsLeft;
    };
    t.prototype.getDisplayedRightColumnsForRow = function (e) {
      return this.colSpanActive ? this.getDisplayedColumnsForRow(e, this.displayedColumnsRight) : this.displayedColumnsRight;
    };
    t.prototype.getDisplayedColumnsForRow = function (e, t, n, r) {
      for (var o, i = [], a = null, s = function (s) {
          var c;
          var l = t[s];
          var u = t.length - s;
          var d = Math.min(l.getColSpan(e), u);
          var p = [l];
          if (d > 1) {
            for (var f = d - 1, h = 1; h <= f; h++) {
              p.push(t[s + h]);
            }
            s += f;
          }
          if (n) {
            c = false;
            p.forEach(function (e) {
              if (n(e)) {
                c = true;
              }
            });
          } else {
            c = true;
          }
          if (c) {
            if (0 === i.length && a) {
              if (!!r && r(l)) {
                i.push(a);
              }
            }
            i.push(l);
          }
          a = l;
          o = s;
        }, c = 0; c < t.length; c++) {
        s(c);
        c = o;
      }
      return i;
    };
    t.prototype.getViewportCenterColumnsForRow = function (e) {
      var t = this;
      if (!this.colSpanActive) {
        return this.viewportColumnsCenter;
      }
      var n = this.suppressColumnVirtualisation ? null : this.isColumnInViewport.bind(this);
      return this.getDisplayedColumnsForRow(e, this.displayedColumnsCenter, n, function (e) {
        var n = e.getLeft();
        return r(n) && n > t.viewportLeft;
      });
    };
    t.prototype.getAriaColumnIndex = function (e) {
      return this.getAllGridColumns().indexOf(e) + 1;
    };
    t.prototype.isColumnInViewport = function (e) {
      var t = e.getLeft() || 0;
      var n = t + e.getActualWidth();
      var r = this.viewportLeft - 200;
      var o = this.viewportRight + 200;
      return !(t < r && n < r) && !(t > o && n > o);
    };
    t.prototype.getDisplayedColumnsLeftWidth = function () {
      return this.getWidthOfColsInList(this.displayedColumnsLeft);
    };
    t.prototype.getDisplayedColumnsRightWidth = function () {
      return this.getWidthOfColsInList(this.displayedColumnsRight);
    };
    t.prototype.updatePrimaryColumnList = function (e, t, n, r, o, a) {
      var s = this;
      if (undefined === a) {
        a = "api";
      }
      if (e && !i(e)) {
        var c = false;
        e.forEach(function (e) {
          var o = s.getPrimaryColumn(e);
          if (o) {
            if (n) {
              if (t.indexOf(o) >= 0) {
                return;
              }
              t.push(o);
            } else {
              if (t.indexOf(o) < 0) {
                return;
              }
              v(t, o);
            }
            r(o);
            c = true;
          }
        });
        if (c) {
          if (this.autoGroupsNeedBuilding) {
            this.updateGridColumns();
          }
          this.updateDisplayedColumns(a);
          var l = {
            type: o,
            columns: t,
            column: 1 === t.length ? t[0] : null,
            api: this.gridApi,
            columnApi: this.columnApi,
            source: a
          };
          this.eventService.dispatchEvent(l);
        }
      }
    };
    t.prototype.setRowGroupColumns = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.autoGroupsNeedBuilding = true;
      this.setPrimaryColumnList(e, this.rowGroupColumns, Ke.EVENT_COLUMN_ROW_GROUP_CHANGED, this.setRowGroupActive.bind(this), t);
    };
    t.prototype.setRowGroupActive = function (e, t, n) {
      if (e !== t.isRowGroupActive()) {
        t.setRowGroupActive(e, n);
        if (!(e || this.gridOptionsWrapper.isSuppressMakeColumnVisibleAfterUnGroup())) {
          t.setVisible(true, n);
        }
      }
    };
    t.prototype.addRowGroupColumn = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      if (e) {
        this.addRowGroupColumns([e], t);
      }
    };
    t.prototype.addRowGroupColumns = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.autoGroupsNeedBuilding = true;
      this.updatePrimaryColumnList(e, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), Ke.EVENT_COLUMN_ROW_GROUP_CHANGED, t);
    };
    t.prototype.removeRowGroupColumns = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.autoGroupsNeedBuilding = true;
      this.updatePrimaryColumnList(e, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), Ke.EVENT_COLUMN_ROW_GROUP_CHANGED, t);
    };
    t.prototype.removeRowGroupColumn = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      if (e) {
        this.removeRowGroupColumns([e], t);
      }
    };
    t.prototype.addPivotColumns = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.updatePrimaryColumnList(e, this.pivotColumns, true, function (e) {
        return e.setPivotActive(true, t);
      }, Ke.EVENT_COLUMN_PIVOT_CHANGED, t);
    };
    t.prototype.setPivotColumns = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.setPrimaryColumnList(e, this.pivotColumns, Ke.EVENT_COLUMN_PIVOT_CHANGED, function (e, n) {
        n.setPivotActive(e, t);
      }, t);
    };
    t.prototype.addPivotColumn = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.addPivotColumns([e], t);
    };
    t.prototype.removePivotColumns = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.updatePrimaryColumnList(e, this.pivotColumns, false, function (e) {
        return e.setPivotActive(false, t);
      }, Ke.EVENT_COLUMN_PIVOT_CHANGED, t);
    };
    t.prototype.removePivotColumn = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.removePivotColumns([e], t);
    };
    t.prototype.setPrimaryColumnList = function (e, t, n, o, i) {
      var a = this;
      t.length = 0;
      if (r(e)) {
        e.forEach(function (e) {
          var n = a.getPrimaryColumn(e);
          if (n) {
            t.push(n);
          }
        });
      }
      this.primaryColumns.forEach(function (e) {
        var n = t.indexOf(e) >= 0;
        o(n, e);
      });
      if (this.autoGroupsNeedBuilding) {
        this.updateGridColumns();
      }
      this.updateDisplayedColumns(i);
      this.fireColumnEvent(n, t, i);
    };
    t.prototype.setValueColumns = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.setPrimaryColumnList(e, this.valueColumns, Ke.EVENT_COLUMN_VALUE_CHANGED, this.setValueActive.bind(this), t);
    };
    t.prototype.setValueActive = function (e, t, n) {
      if (e !== t.isValueActive() && (t.setValueActive(e, n), e && !t.getAggFunc())) {
        var r = this.aggFuncService.getDefaultAggFunc(t);
        t.setAggFunc(r);
      }
    };
    t.prototype.addValueColumns = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.updatePrimaryColumnList(e, this.valueColumns, true, this.setValueActive.bind(this, true), Ke.EVENT_COLUMN_VALUE_CHANGED, t);
    };
    t.prototype.addValueColumn = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      if (e) {
        this.addValueColumns([e], t);
      }
    };
    t.prototype.removeValueColumn = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.removeValueColumns([e], t);
    };
    t.prototype.removeValueColumns = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.updatePrimaryColumnList(e, this.valueColumns, false, this.setValueActive.bind(this, false), Ke.EVENT_COLUMN_VALUE_CHANGED, t);
    };
    t.prototype.normaliseColumnWidth = function (e, t) {
      var n = e.getMinWidth();
      if (r(n) && t < n) {
        t = n;
      }
      var o = e.getMaxWidth();
      if (r(o) && e.isGreaterThanMax(t)) {
        t = o;
      }
      return t;
    };
    t.prototype.getPrimaryOrGridColumn = function (e) {
      return this.getPrimaryColumn(e) || this.getGridColumn(e);
    };
    t.prototype.setColumnWidths = function (e, t, n, r) {
      var o = this;
      if (undefined === r) {
        r = "api";
      }
      var i = [];
      e.forEach(function (e) {
        var n = o.getPrimaryOrGridColumn(e.key);
        if (n && (i.push({
          width: e.newWidth,
          ratios: [1],
          columns: [n]
        }), "shift" === o.gridOptionsWrapper.getColResizeDefault() && (t = !t), t)) {
          var r = o.getDisplayedColAfter(n);
          if (!r) {
            return;
          }
          var a = n.getActualWidth() - e.newWidth;
          var s = r.getActualWidth() + a;
          i.push({
            width: s,
            ratios: [1],
            columns: [r]
          });
        }
      });
      if (0 !== i.length) {
        this.resizeColumnSets(i, n, r);
      }
    };
    t.prototype.checkMinAndMaxWidthsForSet = function (e) {
      var t = e.columns;
      var n = e.width;
      var o = 0;
      var i = 0;
      var a = true;
      t.forEach(function (e) {
        var t = e.getMinWidth();
        o += t || 0;
        var n = e.getMaxWidth();
        if (r(n) && n > 0) {
          i += n;
        } else {
          a = false;
        }
      });
      return n >= o && (!a || n <= i);
    };
    t.prototype.resizeColumnSets = function (e, t, n) {
      if (!e || e.every(this.checkMinAndMaxWidthsForSet.bind(this))) {
        var o = [];
        var i = [];
        e.forEach(function (e) {
          var t = e.width;
          var a = e.columns;
          var s = e.ratios;
          var c = {};
          var l = {};
          a.forEach(function (e) {
            return i.push(e);
          });
          for (var u = true, d = 0, p = function () {
              if (++d > 1e3) {
                console.error("AG Grid: infinite loop in resizeColumnSets");
                return "break";
              }
              u = false;
              var e = [];
              var n = 0;
              var o = t;
              a.forEach(function (t, r) {
                if (l[t.getId()]) {
                  o -= c[t.getId()];
                } else {
                  e.push(t);
                  var i = s[r];
                  n += i;
                }
              });
              var i = 1 / n;
              e.forEach(function (n, a) {
                var d;
                if (a === e.length - 1) {
                  d = o;
                } else {
                  d = Math.round(s[a] * t * i);
                  o -= d;
                }
                var p = n.getMinWidth();
                var f = n.getMaxWidth();
                if (r(p) && d < p) {
                  d = p;
                  l[n.getId()] = true;
                  u = true;
                } else {
                  if (r(f) && f > 0 && d > f) {
                    d = f;
                    l[n.getId()] = true;
                    u = true;
                  }
                }
                c[n.getId()] = d;
              });
            }; u;) {
            if ("break" === p()) {
              break;
            }
          }
          a.forEach(function (e) {
            var t = c[e.getId()];
            if (e.getActualWidth() !== t) {
              e.setActualWidth(t, n);
              o.push(e);
            }
          });
        });
        var a = o.length > 0;
        var s = this.refreshFlexedColumns({
          resizingCols: i,
          skipSetLeft: true
        });
        if (a) {
          this.setLeftValues(n);
          this.updateBodyWidths();
          this.checkViewportColumns();
        }
        var c = i.concat(s);
        if (a || t) {
          this.fireColumnResizedEvent(c, t, n, s);
        }
      } else if (t) {
        var l = e && e.length > 0 ? e[0].columns : null;
        this.fireColumnResizedEvent(l, t, n);
      }
    };
    t.prototype.setColumnAggFunc = function (e, t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (e) {
        var r = this.getPrimaryColumn(e);
        if (r) {
          r.setAggFunc(t);
          this.fireColumnEvent(Ke.EVENT_COLUMN_VALUE_CHANGED, [r], n);
        }
      }
    };
    t.prototype.fireColumnEvent = function (e, t, n) {
      var r = {
        type: e,
        columns: t,
        column: t && 1 == t.length ? t[0] : null,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: n
      };
      this.eventService.dispatchEvent(r);
    };
    t.prototype.moveRowGroupColumn = function (e, t, n) {
      if (undefined === n) {
        n = "api";
      }
      var r = this.rowGroupColumns[e];
      this.rowGroupColumns.splice(e, 1);
      this.rowGroupColumns.splice(t, 0, r);
      var o = {
        type: Ke.EVENT_COLUMN_ROW_GROUP_CHANGED,
        columns: this.rowGroupColumns,
        column: 1 === this.rowGroupColumns.length ? this.rowGroupColumns[0] : null,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: n
      };
      this.eventService.dispatchEvent(o);
    };
    t.prototype.moveColumns = function (e, t, n) {
      if (undefined === n) {
        n = "api";
      }
      this.columnAnimationService.start();
      if (t > this.gridColumns.length - e.length) {
        console.warn("AG Grid: tried to insert columns in invalid location, toIndex = " + t);
        return void console.warn("AG Grid: remember that you should not count the moving columns when calculating the new index");
      }
      var r = this.getGridColumns(e);
      if (!!this.doesMovePassRules(r, t)) {
        E(this.gridColumns, r, t);
        this.updateDisplayedColumns(n);
        var o = {
          type: Ke.EVENT_COLUMN_MOVED,
          columns: r,
          column: 1 === r.length ? r[0] : null,
          toIndex: t,
          api: this.gridApi,
          columnApi: this.columnApi,
          source: n
        };
        this.eventService.dispatchEvent(o);
        this.columnAnimationService.finish();
      }
    };
    t.prototype.doesMovePassRules = function (e, t) {
      var n = this.gridColumns.slice();
      E(n, e, t);
      return !!this.doesMovePassMarryChildren(n) && !!this.doesMovePassLockedPositions(n);
    };
    t.prototype.sortColumnsLikeGridColumns = function (e) {
      var t = this;
      if (!(!e || e.length <= 1)) {
        if (!(e.filter(function (e) {
          return t.gridColumns.indexOf(e) < 0;
        }).length > 0)) {
          e.sort(function (e, n) {
            return t.gridColumns.indexOf(e) - t.gridColumns.indexOf(n);
          });
        }
      }
    };
    t.prototype.doesMovePassLockedPositions = function (e) {
      var t = false;
      var n = true;
      e.forEach(function (e) {
        if (e.getColDef().lockPosition) {
          if (t) {
            n = false;
          }
        } else {
          t = true;
        }
      });
      return n;
    };
    t.prototype.doesMovePassMarryChildren = function (e) {
      var t = true;
      this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function (n) {
        if (n instanceof Ie) {
          var r = n;
          var o = r.getColGroupDef();
          if (o && o.marryChildren) {
            var i = [];
            r.getLeafColumns().forEach(function (t) {
              var n = e.indexOf(t);
              i.push(n);
            });
            if (Math.max.apply(Math, i) - Math.min.apply(Math, i) > r.getLeafColumns().length - 1) {
              t = false;
            }
          }
        }
      });
      return t;
    };
    t.prototype.moveColumn = function (e, t, n) {
      if (undefined === n) {
        n = "api";
      }
      this.moveColumns([e], t, n);
    };
    t.prototype.moveColumnByIndex = function (e, t, n) {
      if (undefined === n) {
        n = "api";
      }
      var r = this.gridColumns[e];
      this.moveColumn(r, t, n);
    };
    t.prototype.getColumnDefs = function () {
      var e = this;
      var t = this.primaryColumns.slice();
      if (this.gridColsArePrimary) {
        t.sort(function (t, n) {
          return e.gridColumns.indexOf(t) - e.gridColumns.indexOf(n);
        });
      } else {
        if (this.lastPrimaryOrder) {
          t.sort(function (t, n) {
            return e.lastPrimaryOrder.indexOf(t) - e.lastPrimaryOrder.indexOf(n);
          });
        }
      }
      return this.columnDefFactory.buildColumnDefs(t, this.rowGroupColumns, this.pivotColumns);
    };
    t.prototype.getBodyContainerWidth = function () {
      return this.bodyWidth;
    };
    t.prototype.getContainerWidth = function (e) {
      switch (e) {
        case Ee.PINNED_LEFT:
          return this.leftWidth;
        case Ee.PINNED_RIGHT:
          return this.rightWidth;
        default:
          return this.bodyWidth;
      }
    };
    t.prototype.updateBodyWidths = function () {
      var e = this.getWidthOfColsInList(this.displayedColumnsCenter);
      var t = this.getWidthOfColsInList(this.displayedColumnsLeft);
      var n = this.getWidthOfColsInList(this.displayedColumnsRight);
      this.bodyWidthDirty = this.bodyWidth !== e;
      if (this.bodyWidth !== e || this.leftWidth !== t || this.rightWidth !== n) {
        this.bodyWidth = e;
        this.leftWidth = t;
        this.rightWidth = n;
        var r = {
          type: Ke.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(r);
      }
    };
    t.prototype.getValueColumns = function () {
      return this.valueColumns ? this.valueColumns : [];
    };
    t.prototype.getPivotColumns = function () {
      return this.pivotColumns ? this.pivotColumns : [];
    };
    t.prototype.isPivotActive = function () {
      return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
    };
    t.prototype.getRowGroupColumns = function () {
      return this.rowGroupColumns ? this.rowGroupColumns : [];
    };
    t.prototype.getDisplayedCenterColumns = function () {
      return this.displayedColumnsCenter;
    };
    t.prototype.getDisplayedLeftColumns = function () {
      return this.displayedColumnsLeft;
    };
    t.prototype.getDisplayedRightColumns = function () {
      return this.displayedColumnsRight;
    };
    t.prototype.getDisplayedColumns = function (e) {
      switch (e) {
        case Ee.PINNED_LEFT:
          return this.getDisplayedLeftColumns();
        case Ee.PINNED_RIGHT:
          return this.getDisplayedRightColumns();
        default:
          return this.getDisplayedCenterColumns();
      }
    };
    t.prototype.getAllPrimaryColumns = function () {
      return this.primaryColumns ? this.primaryColumns.slice() : null;
    };
    t.prototype.getSecondaryColumns = function () {
      return this.secondaryColumns ? this.secondaryColumns.slice() : null;
    };
    t.prototype.getAllColumnsForQuickFilter = function () {
      return this.columnsForQuickFilter;
    };
    t.prototype.getAllGridColumns = function () {
      return this.gridColumns;
    };
    t.prototype.isEmpty = function () {
      return i(this.gridColumns);
    };
    t.prototype.isRowGroupEmpty = function () {
      return i(this.rowGroupColumns);
    };
    t.prototype.setColumnVisible = function (e, t, n) {
      if (undefined === n) {
        n = "api";
      }
      this.setColumnsVisible([e], t, n);
    };
    t.prototype.setColumnsVisible = function (e, t, n) {
      var r = this;
      if (undefined === t) {
        t = false;
      }
      if (undefined === n) {
        n = "api";
      }
      this.columnAnimationService.start();
      this.actionOnGridColumns(e, function (e) {
        return e.isVisible() !== t && (e.setVisible(t, n), true);
      }, n, function () {
        return {
          type: Ke.EVENT_COLUMN_VISIBLE,
          visible: t,
          column: null,
          columns: null,
          api: r.gridApi,
          columnApi: r.columnApi,
          source: n
        };
      });
      this.columnAnimationService.finish();
    };
    t.prototype.setColumnPinned = function (e, t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (e) {
        this.setColumnsPinned([e], t, n);
      }
    };
    t.prototype.setColumnsPinned = function (e, t, n) {
      var r;
      var o = this;
      if (undefined === n) {
        n = "api";
      }
      if ("print" !== this.gridOptionsWrapper.getDomLayout()) {
        this.columnAnimationService.start();
        r = true === t || t === Ee.PINNED_LEFT ? Ee.PINNED_LEFT : t === Ee.PINNED_RIGHT ? Ee.PINNED_RIGHT : null;
        this.actionOnGridColumns(e, function (e) {
          return e.getPinned() !== r && (e.setPinned(r), true);
        }, n, function () {
          return {
            type: Ke.EVENT_COLUMN_PINNED,
            pinned: r,
            column: null,
            columns: null,
            api: o.gridApi,
            columnApi: o.columnApi,
            source: n
          };
        });
        this.columnAnimationService.finish();
      } else {
        console.warn("Changing the column pinning status is not allowed with domLayout='print'");
      }
    };
    t.prototype.actionOnGridColumns = function (e, t, n, o) {
      var a = this;
      if (!i(e)) {
        var s = [];
        e.forEach(function (e) {
          var n = a.getGridColumn(e);
          if (n) {
            if (false !== t(n)) {
              s.push(n);
            }
          }
        });
        if (s.length && (this.updateDisplayedColumns(n), r(o) && o)) {
          var c = o();
          c.columns = s;
          c.column = 1 === s.length ? s[0] : null;
          this.eventService.dispatchEvent(c);
        }
      }
    };
    t.prototype.getDisplayedColBefore = function (e) {
      var t = this.getAllDisplayedColumns();
      var n = t.indexOf(e);
      return n > 0 ? t[n - 1] : null;
    };
    t.prototype.getDisplayedColAfter = function (e) {
      var t = this.getAllDisplayedColumns();
      var n = t.indexOf(e);
      return n < t.length - 1 ? t[n + 1] : null;
    };
    t.prototype.getDisplayedGroupAfter = function (e) {
      return this.getDisplayedGroupAtDirection(e, "After");
    };
    t.prototype.getDisplayedGroupBefore = function (e) {
      return this.getDisplayedGroupAtDirection(e, "Before");
    };
    t.prototype.getDisplayedGroupAtDirection = function (e, t) {
      for (var n = e.getOriginalColumnGroup().getLevel() + e.getPaddingLevel(), r = e.getDisplayedLeafColumns(), o = "After" === t ? m(r) : r[0], i = "getDisplayedCol" + t;;) {
        var a = this[i](o);
        if (!a) {
          return null;
        }
        var s = this.getColumnGroupAtLevel(a, n);
        if (s !== e) {
          return s;
        }
      }
    };
    t.prototype.getColumnGroupAtLevel = function (e, t) {
      for (var n = e.getParent();;) {
        if (n.getOriginalColumnGroup().getLevel() + n.getPaddingLevel() <= t) {
          break;
        }
        n = n.getParent();
      }
      return n;
    };
    t.prototype.isPinningLeft = function () {
      return this.displayedColumnsLeft.length > 0;
    };
    t.prototype.isPinningRight = function () {
      return this.displayedColumnsRight.length > 0;
    };
    t.prototype.getPrimaryAndSecondaryAndAutoColumns = function () {
      var e = this.primaryColumns ? this.primaryColumns.slice(0) : [];
      if (this.groupAutoColumns && r(this.groupAutoColumns)) {
        this.groupAutoColumns.forEach(function (t) {
          return e.push(t);
        });
      }
      if (this.secondaryColumnsPresent && this.secondaryColumns) {
        this.secondaryColumns.forEach(function (t) {
          return e.push(t);
        });
      }
      return e;
    };
    t.prototype.createStateItemFromColumn = function (e) {
      var t = e.isRowGroupActive() ? this.rowGroupColumns.indexOf(e) : null;
      var n = e.isPivotActive() ? this.pivotColumns.indexOf(e) : null;
      var r = e.isValueActive() ? e.getAggFunc() : null;
      var o = null != e.getSort() ? e.getSort() : null;
      var i = null != e.getSortIndex() ? e.getSortIndex() : null;
      var a = null != e.getFlex() && e.getFlex() > 0 ? e.getFlex() : null;
      return {
        colId: e.getColId(),
        width: e.getActualWidth(),
        hide: !e.isVisible(),
        pinned: e.getPinned(),
        sort: o,
        sortIndex: i,
        aggFunc: r,
        rowGroup: e.isRowGroupActive(),
        rowGroupIndex: t,
        pivot: e.isPivotActive(),
        pivotIndex: n,
        flex: a
      };
    };
    t.prototype.getColumnState = function () {
      if (o(this.primaryColumns) || !this.isAlive()) {
        return [];
      }
      var e = this.primaryColumns.map(this.createStateItemFromColumn.bind(this));
      var t = (this.groupAutoColumns ? this.groupAutoColumns.map(this.createStateItemFromColumn.bind(this)) : []).concat(e);
      if (!this.pivotMode) {
        this.orderColumnStateList(t);
      }
      return t;
    };
    t.prototype.orderColumnStateList = function (e) {
      var t = at(this.gridColumns.map(function (e, t) {
        return [e.getColId(), t];
      }));
      e.sort(function (e, n) {
        return (t.has(e.colId) ? t.get(e.colId) : -1) - (t.has(n.colId) ? t.get(n.colId) : -1);
      });
    };
    t.prototype.resetColumnState = function (e) {
      if (undefined === e) {
        e = "api";
      }
      var t = this.getColumnsFromTree(this.primaryColumnTree);
      var n = [];
      var r = 1e3;
      var i = 1e3;
      var a = [];
      if (this.groupAutoColumns) {
        a = a.concat(this.groupAutoColumns);
      }
      if (t) {
        a = a.concat(t);
      }
      a.forEach(function (e) {
        var t = e.getColDef();
        var a = null != t.sort ? t.sort : null;
        var s = t.sortIndex;
        var c = !!t.hide;
        var l = t.pinned ? t.pinned : null;
        var u = t.width;
        var d = null != t.flex ? t.flex : null;
        var p = t.rowGroupIndex;
        var f = t.rowGroup;
        if (!(null != p || null != f && 0 != f)) {
          p = null;
          f = null;
        }
        var h = t.pivotIndex;
        var m = t.pivot;
        if (!(null != h || null != m && 0 != m)) {
          h = null;
          m = null;
        }
        var g = null != t.aggFunc ? t.aggFunc : null;
        var _ = {
          colId: e.getColId(),
          sort: a,
          sortIndex: s,
          hide: c,
          pinned: l,
          width: u,
          flex: d,
          rowGroup: f,
          rowGroupIndex: p,
          pivot: m,
          pivotIndex: h,
          aggFunc: g
        };
        if (o(p) && f) {
          _.rowGroupIndex = r++;
        }
        if (o(h) && m) {
          _.pivotIndex = i++;
        }
        n.push(_);
      });
      this.applyColumnState({
        state: n,
        applyOrder: true
      }, e);
    };
    t.prototype.applyColumnState = function (e, t) {
      var n = this;
      if (undefined === t) {
        t = "api";
      }
      if (i(this.primaryColumns)) {
        return false;
      }
      if (e && e.state && !e.state.forEach) {
        console.warn("AG Grid: applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.");
        return false;
      }
      this.columnAnimationService.start();
      var r = this.compareColumnStatesAndRaiseEvents(t);
      this.autoGroupsNeedBuilding = true;
      var o = this.primaryColumns.slice();
      var a = true;
      var s = {};
      var c = {};
      var l = [];
      var u = this.rowGroupColumns.slice();
      var d = this.pivotColumns.slice();
      if (e.state) {
        e.state.forEach(function (r) {
          var i = Ee.GROUP_AUTO_COLUMN_ID;
          var u = r.colId || "";
          if (ot(u, i)) {
            l.push(r);
          } else {
            var d = n.getPrimaryColumn(u);
            if (d) {
              n.syncColumnWithStateItem(d, r, e.defaultState, s, c, false, t);
              v(o, d);
            } else {
              a = false;
            }
          }
        });
      }
      var p = function (r) {
        return n.syncColumnWithStateItem(r, null, e.defaultState, s, c, false, t);
      };
      o.forEach(p);
      var f = function (e, t, n, r) {
        var o = e[n.getId()];
        var i = e[r.getId()];
        var a = null != o;
        var s = null != i;
        if (a && s) {
          return o - i;
        }
        if (a) {
          return -1;
        }
        if (s) {
          return 1;
        }
        var c = t.indexOf(n);
        var l = t.indexOf(r);
        var u = c >= 0;
        return u && l >= 0 ? c - l : u ? -1 : 1;
      };
      this.rowGroupColumns.sort(f.bind(this, s, u));
      this.pivotColumns.sort(f.bind(this, c, d));
      this.updateGridColumns();
      var h = this.groupAutoColumns ? this.groupAutoColumns.slice() : [];
      l.forEach(function (r) {
        var o = n.getAutoColumn(r.colId);
        v(h, o);
        n.syncColumnWithStateItem(o, r, e.defaultState, null, null, true, t);
      });
      h.forEach(p);
      this.applyOrderAfterApplyState(e);
      this.updateDisplayedColumns(t);
      this.dispatchEverythingChanged(t);
      r();
      this.columnAnimationService.finish();
      return a;
    };
    t.prototype.applyOrderAfterApplyState = function (e) {
      if (this.gridColsArePrimary && e.applyOrder && e.state) {
        var t = [];
        var n = {};
        var r = {};
        this.gridColumns.forEach(function (e) {
          return r[e.getId()] = e;
        });
        e.state.forEach(function (e) {
          if (e.colId && !n[e.colId]) {
            var o = r[e.colId];
            if (o) {
              t.push(o);
              n[e.colId] = true;
            }
          }
        });
        this.gridColumns.forEach(function (e) {
          if (!n[e.getColId()]) {
            t.push(e);
          }
        });
        t = this.putFixedColumnsFirst(t);
        if (this.doesMovePassMarryChildren(t)) {
          this.gridColumns = t;
        } else {
          console.warn("AG Grid: Applying column order broke a group where columns should be married together. Applying new order has been discarded.");
        }
      }
    };
    t.prototype.compareColumnStatesAndRaiseEvents = function (e) {
      var t = this;
      if (!!!this.columnDefs) {
        return function () {};
      }
      var n = {
        rowGroupColumns: this.rowGroupColumns.slice(),
        pivotColumns: this.pivotColumns.slice(),
        valueColumns: this.valueColumns.slice()
      };
      var r = this.getColumnState();
      var o = {};
      r.forEach(function (e) {
        o[e.colId] = e;
      });
      return function () {
        if (!t.gridOptionsWrapper.isSuppressColumnStateEvents()) {
          var i = function (n, r, o, i) {
            if (!g(r.map(i).sort(), o.map(i).sort())) {
              var a = {
                type: n,
                columns: o,
                column: 1 === o.length ? o[0] : null,
                api: t.gridApi,
                columnApi: t.columnApi,
                source: e
              };
              t.eventService.dispatchEvent(a);
            }
          };
          var a = function (e) {
            var n = [];
            t.gridColumns.forEach(function (t) {
              var r = o[t.getColId()];
              if (r && e(r, t)) {
                n.push(t);
              }
            });
            return n;
          };
          var s = function (e) {
            return e.getColId();
          };
          i(Ke.EVENT_COLUMN_ROW_GROUP_CHANGED, n.rowGroupColumns, t.rowGroupColumns, s);
          i(Ke.EVENT_COLUMN_PIVOT_CHANGED, n.pivotColumns, t.pivotColumns, s);
          if (a(function (e, t) {
            var n = null != e.aggFunc;
            var r = n != t.isValueActive();
            var o = n && e.aggFunc != t.getAggFunc();
            return r || o;
          }).length > 0) {
            t.fireColumnEvent(Ke.EVENT_COLUMN_VALUE_CHANGED, t.valueColumns, e);
          }
          t.fireColumnResizedEvent(a(function (e, t) {
            return e.width != t.getActualWidth();
          }), true, e);
          t.raiseColumnPinnedEvent(a(function (e, t) {
            return e.pinned != t.getPinned();
          }), e);
          t.raiseColumnVisibleEvent(a(function (e, t) {
            return e.hide == t.isVisible();
          }), e);
          if (a(function (e, t) {
            return e.sort != t.getSort() || e.sortIndex != t.getSortIndex();
          }).length > 0) {
            t.sortController.dispatchSortChangedEvents();
          }
          t.raiseColumnMovedEvent(r, e);
        }
      };
    };
    t.prototype.raiseColumnPinnedEvent = function (e, t) {
      if (e.length) {
        var n = 1 === e.length ? e[0] : null;
        var r = this.getCommonValue(e, function (e) {
          return e.getPinned();
        });
        var o = {
          type: Ke.EVENT_COLUMN_PINNED,
          pinned: null != r ? r : null,
          columns: e,
          column: n,
          api: this.gridApi,
          columnApi: this.columnApi,
          source: t
        };
        this.eventService.dispatchEvent(o);
      }
    };
    t.prototype.getCommonValue = function (e, t) {
      if (e && 0 != e.length) {
        for (var n = t(e[0]), r = 1; r < e.length; r++) {
          if (n !== t(e[r])) {
            return;
          }
        }
        return n;
      }
    };
    t.prototype.raiseColumnVisibleEvent = function (e, t) {
      if (e.length) {
        var n = 1 === e.length ? e[0] : null;
        var r = this.getCommonValue(e, function (e) {
          return e.isVisible();
        });
        var o = {
          type: Ke.EVENT_COLUMN_VISIBLE,
          visible: r,
          columns: e,
          column: n,
          api: this.gridApi,
          columnApi: this.columnApi,
          source: t
        };
        this.eventService.dispatchEvent(o);
      }
    };
    t.prototype.raiseColumnMovedEvent = function (e, t) {
      var n = this;
      var r = this.getColumnState();
      var o = {};
      r.forEach(function (e) {
        return o[e.colId] = e;
      });
      var i = {};
      e.forEach(function (e) {
        if (o[e.colId]) {
          i[e.colId] = true;
        }
      });
      var a = j(e, function (e) {
        return i[e.colId];
      });
      var s = j(r, function (e) {
        return i[e.colId];
      });
      var c = [];
      s.forEach(function (e, t) {
        var r = a && a[t];
        if (r && r.colId !== e.colId) {
          var o = n.getGridColumn(r.colId);
          if (o) {
            c.push(o);
          }
        }
      });
      if (c.length) {
        var l = {
          type: Ke.EVENT_COLUMN_MOVED,
          columns: c,
          column: null,
          api: this.gridApi,
          columnApi: this.columnApi,
          source: t
        };
        this.eventService.dispatchEvent(l);
      }
    };
    t.prototype.syncColumnWithStateItem = function (e, t, n, o, i, a, s) {
      if (e) {
        var c = function (e, o) {
          var i = t;
          var a = n;
          var s = {
            value1: undefined,
            value2: undefined
          };
          var c = false;
          if (i) {
            if (undefined !== i[e]) {
              s.value1 = i[e];
              c = true;
            }
            if (r(o) && undefined !== i[o]) {
              s.value2 = i[o];
              c = true;
            }
          }
          if (!c && a) {
            if (undefined !== a[e]) {
              s.value1 = a[e];
            }
            if (r(o) && undefined !== a[o]) {
              s.value2 = a[o];
            }
          }
          return s;
        };
        var l = c("hide").value1;
        if (undefined !== l) {
          e.setVisible(!l, s);
        }
        var u = c("pinned").value1;
        if (undefined !== u) {
          e.setPinned(u);
        }
        var d = this.gridOptionsWrapper.getMinColWidth();
        var p = c("flex").value1;
        if (undefined !== p) {
          e.setFlex(p);
        }
        if (e.getFlex() <= 0) {
          var f = c("width").value1;
          if (null != f && d && f >= d) {
            e.setActualWidth(f, s);
          }
        }
        var h = c("sort").value1;
        if (undefined !== h) {
          if (h === Ee.SORT_DESC || h === Ee.SORT_ASC) {
            e.setSort(h);
          } else {
            e.setSort(undefined);
          }
        }
        var m = c("sortIndex").value1;
        if (undefined !== m) {
          e.setSortIndex(m);
        }
        if (!a) {
          var g = c("aggFunc").value1;
          if (undefined !== g) {
            if ("string" === typeof g) {
              e.setAggFunc(g);
              if (!e.isValueActive()) {
                e.setValueActive(true, s);
                this.valueColumns.push(e);
              }
            } else {
              if (r(g)) {
                console.warn("AG Grid: stateItem.aggFunc must be a string. if using your own aggregation functions, register the functions first before using them in get/set state. This is because it is intended for the column state to be stored and retrieved as simple JSON.");
              }
              e.setAggFunc(null);
              if (e.isValueActive()) {
                e.setValueActive(false, s);
                v(this.valueColumns, e);
              }
            }
          }
          var _ = c("rowGroup", "rowGroupIndex");
          var b = _.value1;
          var y = _.value2;
          if (!(undefined === b && undefined === y)) {
            if ("number" === typeof y || b) {
              if (!e.isRowGroupActive()) {
                e.setRowGroupActive(true, s);
                this.rowGroupColumns.push(e);
              }
              if (o && "number" === typeof y) {
                o[e.getId()] = y;
              }
            } else {
              if (e.isRowGroupActive()) {
                e.setRowGroupActive(false, s);
                v(this.rowGroupColumns, e);
              }
            }
          }
          var E = c("pivot", "pivotIndex");
          var O = E.value1;
          var w = E.value2;
          if (!(undefined === O && undefined === w)) {
            if ("number" === typeof w || O) {
              if (!e.isPivotActive()) {
                e.setPivotActive(true, s);
                this.pivotColumns.push(e);
              }
              if (i && "number" === typeof w) {
                i[e.getId()] = w;
              }
            } else {
              if (e.isPivotActive()) {
                e.setPivotActive(false, s);
                v(this.pivotColumns, e);
              }
            }
          }
        }
      }
    };
    t.prototype.getGridColumns = function (e) {
      return this.getColumns(e, this.getGridColumn.bind(this));
    };
    t.prototype.getColumns = function (e, t) {
      var n = [];
      if (e) {
        e.forEach(function (e) {
          var r = t(e);
          if (r) {
            n.push(r);
          }
        });
      }
      return n;
    };
    t.prototype.getColumnWithValidation = function (e) {
      if (null == e) {
        return null;
      }
      var t = this.getGridColumn(e);
      if (!t) {
        console.warn("AG Grid: could not find column " + e);
      }
      return t;
    };
    t.prototype.getPrimaryColumn = function (e) {
      return this.getColumn(e, this.primaryColumns, this.primaryColumnsMap);
    };
    t.prototype.getGridColumn = function (e) {
      return this.getColumn(e, this.gridColumns, this.gridColumnsMap);
    };
    t.prototype.getColumn = function (e, t, n) {
      if (!e) {
        return null;
      }
      if ("string" == typeof e && n[e]) {
        return n[e];
      }
      for (var r = 0; r < t.length; r++) {
        if (this.columnsMatch(t[r], e)) {
          return t[r];
        }
      }
      return this.getAutoColumn(e);
    };
    t.prototype.getAutoColumn = function (e) {
      var t = this;
      return this.groupAutoColumns && r(this.groupAutoColumns) && !o(this.groupAutoColumns) ? u(this.groupAutoColumns, function (n) {
        return t.columnsMatch(n, e);
      }) : null;
    };
    t.prototype.columnsMatch = function (e, t) {
      var n = e === t;
      var r = e.getColDef() === t;
      var o = e.getColId() == t;
      return n || r || o;
    };
    t.prototype.getDisplayNameForColumn = function (e, t, n) {
      if (undefined === n) {
        n = false;
      }
      if (!e) {
        return null;
      }
      var r = this.getHeaderName(e.getColDef(), e, null, null, t);
      return n ? this.wrapHeaderNameWithAggFunc(e, r) : r;
    };
    t.prototype.getDisplayNameForOriginalColumnGroup = function (e, t, n) {
      var r = t ? t.getColGroupDef() : null;
      return r ? this.getHeaderName(r, null, e, t, n) : null;
    };
    t.prototype.getDisplayNameForColumnGroup = function (e, t) {
      return this.getDisplayNameForOriginalColumnGroup(e, e.getOriginalColumnGroup(), t);
    };
    t.prototype.getHeaderName = function (e, t, n, r, o) {
      var i = e.headerValueGetter;
      if (i) {
        var a = {
          colDef: e,
          column: t,
          columnGroup: n,
          originalColumnGroup: r,
          location: o,
          api: this.gridOptionsWrapper.getApi(),
          context: this.gridOptionsWrapper.getContext()
        };
        return "function" === typeof i ? i(a) : "string" === typeof i ? this.expressionService.evaluate(i, a) : (console.warn("ag-grid: headerValueGetter must be a function or a string"), "");
      }
      return null != e.headerName ? e.headerName : e.field ? rt(e.field) : "";
    };
    t.prototype.wrapHeaderNameWithAggFunc = function (e, t) {
      if (this.gridOptionsWrapper.isSuppressAggFuncInHeader()) {
        return t;
      }
      var n;
      var o = e.getColDef().pivotValueColumn;
      var i = null;
      if (r(o)) {
        i = o ? o.getAggFunc() : null;
        n = true;
      } else {
        var a = e.isValueActive();
        var s = this.pivotMode || !this.isRowGroupEmpty();
        if (a && s) {
          i = e.getAggFunc();
          n = true;
        } else {
          n = false;
        }
      }
      if (n) {
        var c = "string" === typeof i ? i : "func";
        return this.gridOptionsWrapper.getLocaleTextFunc()(c, c) + "(" + t + ")";
      }
      return t;
    };
    t.prototype.getColumnGroup = function (e, t) {
      if (!e) {
        return null;
      }
      if (e instanceof Se) {
        return e;
      }
      var n = this.getAllDisplayedTrees();
      var r = "number" === typeof t;
      var o = null;
      this.columnUtils.depthFirstAllColumnTreeSearch(n, function (n) {
        if (n instanceof Se) {
          var i = n;
          if (r ? e === i.getGroupId() && t === i.getInstanceId() : e === i.getGroupId()) {
            o = i;
          }
        }
      });
      return o;
    };
    t.prototype.isReady = function () {
      return this.ready;
    };
    t.prototype.extractValueColumns = function (e, t) {
      this.valueColumns = this.extractColumns(t, this.valueColumns, function (t, n) {
        return t.setValueActive(n, e);
      }, function () {}, function () {}, function (e) {
        var t = e.aggFunc;
        return null === t || "" === t ? null : undefined !== t ? !!t : undefined;
      }, function (e) {
        return null != e.initialAggFunc && "" != e.initialAggFunc;
      });
      this.valueColumns.forEach(function (e) {
        var t = e.getColDef();
        if (null != t.aggFunc && "" != t.aggFunc) {
          e.setAggFunc(t.aggFunc);
        } else {
          if (!e.getAggFunc()) {
            e.setAggFunc(t.initialAggFunc);
          }
        }
      });
    };
    t.prototype.extractRowGroupColumns = function (e, t) {
      this.rowGroupColumns = this.extractColumns(t, this.rowGroupColumns, function (t, n) {
        return t.setRowGroupActive(n, e);
      }, function (e) {
        return e.rowGroupIndex;
      }, function (e) {
        return e.initialRowGroupIndex;
      }, function (e) {
        return e.rowGroup;
      }, function (e) {
        return e.initialRowGroup;
      });
    };
    t.prototype.extractColumns = function (e, t, n, r, o, i, a) {
      if (undefined === e) {
        e = [];
      }
      if (undefined === t) {
        t = [];
      }
      var l = [];
      var u = [];
      this.primaryColumns.forEach(function (n) {
        var d;
        var p = e.indexOf(n) < 0;
        var f = n.getColDef();
        var h = c(i(f));
        var m = c(a(f));
        var g = s(r(f));
        var _ = s(o(f));
        if (p) {
          d = undefined !== h || undefined !== g ? undefined !== h ? h : g >= 0 : m || _ >= 0;
        } else {
          d = undefined !== h ? h : undefined !== g ? null !== g && g >= 0 : t.indexOf(n) >= 0;
        }
        if (d) {
          if (p ? null != g || null != _ : null != g) {
            l.push(n);
          } else {
            u.push(n);
          }
        }
      });
      var d = function (e) {
        var t = r(e.getColDef());
        var n = o(e.getColDef());
        return null != t ? t : n;
      };
      l.sort(function (e, t) {
        var n = d(e);
        var r = d(t);
        return n === r ? 0 : n < r ? -1 : 1;
      });
      var p = [].concat(l);
      t.forEach(function (e) {
        if (u.indexOf(e) >= 0) {
          p.push(e);
        }
      });
      u.forEach(function (e) {
        if (p.indexOf(e) < 0) {
          p.push(e);
        }
      });
      t.forEach(function (e) {
        if (p.indexOf(e) < 0) {
          n(e, false);
        }
      });
      p.forEach(function (e) {
        if (t.indexOf(e) < 0) {
          n(e, true);
        }
      });
      return p;
    };
    t.prototype.extractPivotColumns = function (e, t) {
      this.pivotColumns = this.extractColumns(t, this.pivotColumns, function (t, n) {
        return t.setPivotActive(n, e);
      }, function (e) {
        return e.pivotIndex;
      }, function (e) {
        return e.initialPivotIndex;
      }, function (e) {
        return e.pivot;
      }, function (e) {
        return e.initialPivot;
      });
    };
    t.prototype.resetColumnGroupState = function (e) {
      if (undefined === e) {
        e = "api";
      }
      var t = [];
      this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, function (e) {
        if (e instanceof Ie) {
          var n = e.getColGroupDef();
          var r = {
            groupId: e.getGroupId(),
            open: n ? n.openByDefault : undefined
          };
          t.push(r);
        }
      });
      this.setColumnGroupState(t, e);
    };
    t.prototype.getColumnGroupState = function () {
      var e = [];
      this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function (t) {
        if (t instanceof Ie) {
          var n = t;
          e.push({
            groupId: n.getGroupId(),
            open: n.isExpanded()
          });
        }
      });
      return e;
    };
    t.prototype.setColumnGroupState = function (e, t) {
      var n = this;
      if (undefined === t) {
        t = "api";
      }
      this.columnAnimationService.start();
      var r = [];
      e.forEach(function (e) {
        var t = e.groupId;
        var o = e.open;
        var i = n.getOriginalColumnGroup(t);
        if (i && i.isExpanded() !== o) {
          n.logger.log("columnGroupOpened(" + i.getGroupId() + "," + o + ")");
          i.setExpanded(o);
          r.push(i);
        }
      });
      this.updateGroupsAndDisplayedColumns(t);
      this.setFirstRightAndLastLeftPinned(t);
      r.forEach(function (e) {
        var t = {
          type: Ke.EVENT_COLUMN_GROUP_OPENED,
          columnGroup: e,
          api: n.gridApi,
          columnApi: n.columnApi
        };
        n.eventService.dispatchEvent(t);
      });
      this.columnAnimationService.finish();
    };
    t.prototype.setColumnGroupOpened = function (e, t, n) {
      var r;
      if (undefined === n) {
        n = "api";
      }
      r = e instanceof Ie ? e.getId() : e || "";
      this.setColumnGroupState([{
        groupId: r,
        open: t
      }], n);
    };
    t.prototype.getOriginalColumnGroup = function (e) {
      if (e instanceof Ie) {
        return e;
      }
      if ("string" !== typeof e) {
        console.error("AG Grid: group key must be a string");
      }
      var t = null;
      this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function (n) {
        if (n instanceof Ie) {
          var r = n;
          if (r.getId() === e) {
            t = r;
          }
        }
      });
      return t;
    };
    t.prototype.calculateColumnsForDisplay = function () {
      var e = this;
      return this.pivotMode && !this.secondaryColumnsPresent ? this.gridColumns.filter(function (t) {
        var n = e.groupAutoColumns && O(e.groupAutoColumns, t);
        var r = e.valueColumns && O(e.valueColumns, t);
        return n || r;
      }) : this.gridColumns.filter(function (t) {
        return e.groupAutoColumns && O(e.groupAutoColumns, t) || t.isVisible();
      });
    };
    t.prototype.checkColSpanActiveInCols = function (e) {
      var t = false;
      e.forEach(function (e) {
        if (r(e.getColDef().colSpan)) {
          t = true;
        }
      });
      return t;
    };
    t.prototype.calculateColumnsForGroupDisplay = function () {
      var e = this;
      this.groupDisplayColumns = [];
      var t = function (t) {
        var n = t.getColDef();
        if (n && r(n.showRowGroup)) {
          e.groupDisplayColumns.push(t);
        }
      };
      this.gridColumns.forEach(t);
      if (this.groupAutoColumns) {
        this.groupAutoColumns.forEach(t);
      }
    };
    t.prototype.getGroupDisplayColumns = function () {
      return this.groupDisplayColumns;
    };
    t.prototype.updateDisplayedColumns = function (e) {
      var t = this.calculateColumnsForDisplay();
      this.buildDisplayedTrees(t);
      this.calculateColumnsForGroupDisplay();
      this.updateGroupsAndDisplayedColumns(e);
      this.setFirstRightAndLastLeftPinned(e);
    };
    t.prototype.isSecondaryColumnsPresent = function () {
      return this.secondaryColumnsPresent;
    };
    t.prototype.setSecondaryColumns = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      var n = e && e.length > 0;
      if (n || this.secondaryColumnsPresent) {
        if (n) {
          this.processSecondaryColumnDefinitions(e);
          var r = this.columnFactory.createColumnTree(e, false);
          this.secondaryBalancedTree = r.columnTree;
          this.secondaryHeaderRowCount = r.treeDept + 1;
          this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
          this.secondaryColumnsPresent = true;
        } else {
          this.secondaryBalancedTree = null;
          this.secondaryHeaderRowCount = -1;
          this.secondaryColumns = null;
          this.secondaryColumnsPresent = false;
        }
        this.updateGridColumns();
        this.updateDisplayedColumns(t);
      }
    };
    t.prototype.processSecondaryColumnDefinitions = function (e) {
      var t = this.gridOptionsWrapper.getProcessSecondaryColDefFunc();
      var n = this.gridOptionsWrapper.getProcessSecondaryColGroupDefFunc();
      if (t || n) {
        if (e) {
          (function e(o) {
            o.forEach(function (o) {
              if (r(o.children)) {
                var i = o;
                if (n) {
                  n(i);
                }
                e(i.children);
              } else {
                if (t) {
                  t(o);
                }
              }
            });
          })(e);
        }
      }
    };
    t.prototype.updateGridColumns = function () {
      var e = this;
      if (this.gridColsArePrimary) {
        this.lastPrimaryOrder = this.gridColumns;
      }
      if (this.secondaryColumns && this.secondaryBalancedTree) {
        this.gridBalancedTree = this.secondaryBalancedTree.slice();
        this.gridHeaderRowCount = this.secondaryHeaderRowCount;
        this.gridColumns = this.secondaryColumns.slice();
        this.gridColsArePrimary = false;
      } else {
        this.gridBalancedTree = this.primaryColumnTree.slice();
        this.gridHeaderRowCount = this.primaryHeaderRowCount;
        this.gridColumns = this.primaryColumns.slice();
        this.gridColsArePrimary = true;
        this.orderGridColsLikeLastPrimary();
      }
      this.addAutoGroupToGridColumns();
      this.autoRowHeightColumns = this.gridColumns.filter(function (e) {
        return e.getColDef().autoHeight;
      });
      this.gridColumns = this.putFixedColumnsFirst(this.gridColumns);
      this.setupQuickFilterColumns();
      this.clearDisplayedAndViewportColumns();
      this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
      this.gridColumnsMap = {};
      this.gridColumns.forEach(function (t) {
        return e.gridColumnsMap[t.getId()] = t;
      });
      var t = {
        type: Ke.EVENT_GRID_COLUMNS_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(t);
    };
    t.prototype.orderGridColsLikeLastPrimary = function () {
      if (!o(this.lastPrimaryOrder)) {
        var e = at(this.lastPrimaryOrder.map(function (e, t) {
          return [e, t];
        }));
        var t = true;
        this.gridColumns.forEach(function (n) {
          if (e.has(n)) {
            t = false;
          }
        });
        if (!t) {
          var n = at(this.gridColumns.map(function (e) {
            return [e, true];
          }));
          var r = this.lastPrimaryOrder.filter(function (e) {
            return n.has(e);
          });
          var i = at(r.map(function (e) {
            return [e, true];
          }));
          var a = this.gridColumns.filter(function (e) {
            return !i.has(e);
          });
          var s = r.slice();
          a.forEach(function (e) {
            var t = e.getOriginalParent();
            if (t) {
              for (var n = []; !n.length && t;) {
                t.getLeafColumns().forEach(function (e) {
                  var t = s.indexOf(e) >= 0;
                  var r = n.indexOf(e) < 0;
                  if (t && r) {
                    n.push(e);
                  }
                });
                t = t.getOriginalParent();
              }
              if (n.length) {
                var r = n.map(function (e) {
                  return s.indexOf(e);
                });
                var o = Math.max.apply(Math, r);
                y(s, e, o + 1);
              } else {
                s.push(e);
              }
            } else {
              s.push(e);
            }
          });
          this.gridColumns = s;
        }
      }
    };
    t.prototype.isPrimaryColumnGroupsPresent = function () {
      return this.primaryHeaderRowCount > 1;
    };
    t.prototype.setupQuickFilterColumns = function () {
      if (this.groupAutoColumns) {
        this.columnsForQuickFilter = this.primaryColumns.concat(this.groupAutoColumns);
      } else {
        this.columnsForQuickFilter = this.primaryColumns;
      }
    };
    t.prototype.putFixedColumnsFirst = function (e) {
      var t = e.filter(function (e) {
        return e.getColDef().lockPosition;
      });
      var n = e.filter(function (e) {
        return !e.getColDef().lockPosition;
      });
      return t.concat(n);
    };
    t.prototype.addAutoGroupToGridColumns = function () {
      this.createGroupAutoColumnsIfNeeded();
      if (!o(this.groupAutoColumns)) {
        this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;
        var e = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);
        this.gridBalancedTree = e.concat(this.gridBalancedTree);
      }
    };
    t.prototype.clearDisplayedAndViewportColumns = function () {
      this.displayedTreeLeft = [];
      this.displayedTreeRight = [];
      this.displayedTreeCentre = [];
      this.viewportRowLeft = {};
      this.viewportRowRight = {};
      this.viewportRowCenter = {};
      this.displayedColumnsLeft = [];
      this.displayedColumnsRight = [];
      this.displayedColumnsCenter = [];
      this.displayedColumns = [];
      this.viewportColumns = [];
    };
    t.prototype.updateGroupsAndDisplayedColumns = function (e) {
      this.updateOpenClosedVisibilityInColumnGroups();
      this.deriveDisplayedColumns(e);
      this.refreshFlexedColumns();
      this.extractViewport();
      this.updateBodyWidths();
      var t = {
        type: Ke.EVENT_DISPLAYED_COLUMNS_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(t);
    };
    t.prototype.deriveDisplayedColumns = function (e) {
      this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeLeft, this.displayedColumnsLeft);
      this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeCentre, this.displayedColumnsCenter);
      this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeRight, this.displayedColumnsRight);
      this.joinDisplayedColumns();
      this.setLeftValues(e);
    };
    t.prototype.joinDisplayedColumns = function () {
      if (this.gridOptionsWrapper.isEnableRtl()) {
        this.displayedColumns = this.displayedColumnsRight.concat(this.displayedColumnsCenter).concat(this.displayedColumnsLeft);
      } else {
        this.displayedColumns = this.displayedColumnsLeft.concat(this.displayedColumnsCenter).concat(this.displayedColumnsRight);
      }
    };
    t.prototype.setLeftValues = function (e) {
      this.setLeftValuesOfColumns(e);
      this.setLeftValuesOfGroups();
    };
    t.prototype.setLeftValuesOfColumns = function (e) {
      var t = this;
      var n = this.primaryColumns.slice(0);
      var r = this.gridOptionsWrapper.isEnableRtl();
      [this.displayedColumnsLeft, this.displayedColumnsRight, this.displayedColumnsCenter].forEach(function (o) {
        if (r) {
          var i = t.getWidthOfColsInList(o);
          o.forEach(function (t) {
            i -= t.getActualWidth();
            t.setLeft(i, e);
          });
        } else {
          var a = 0;
          o.forEach(function (t) {
            t.setLeft(a, e);
            a += t.getActualWidth();
          });
        }
        b(n, o);
      });
      n.forEach(function (t) {
        t.setLeft(null, e);
      });
    };
    t.prototype.setLeftValuesOfGroups = function () {
      [this.displayedTreeLeft, this.displayedTreeRight, this.displayedTreeCentre].forEach(function (e) {
        e.forEach(function (e) {
          if (e instanceof Se) {
            e.checkLeft();
          }
        });
      });
    };
    t.prototype.derivedDisplayedColumnsFromDisplayedTree = function (e, t) {
      t.length = 0;
      this.columnUtils.depthFirstDisplayedColumnTreeSearch(e, function (e) {
        if (e instanceof Ce) {
          t.push(e);
        }
      });
    };
    t.prototype.extractViewportColumns = function () {
      if (this.suppressColumnVirtualisation) {
        this.viewportColumnsCenter = this.displayedColumnsCenter;
      } else {
        this.viewportColumnsCenter = this.filterOutColumnsWithinViewport();
      }
      this.viewportColumns = this.viewportColumnsCenter.concat(this.displayedColumnsLeft).concat(this.displayedColumnsRight);
    };
    t.prototype.getVirtualHeaderGroupRow = function (e, t) {
      var n;
      switch (e) {
        case Ee.PINNED_LEFT:
          n = this.viewportRowLeft[t];
          break;
        case Ee.PINNED_RIGHT:
          n = this.viewportRowRight[t];
          break;
        default:
          n = this.viewportRowCenter[t];
      }
      if (o(n)) {
        n = [];
      }
      return n;
    };
    t.prototype.extractViewportRows = function () {
      this.viewportRowLeft = {};
      this.viewportRowRight = {};
      this.viewportRowCenter = {};
      var e = {};
      this.viewportColumns.forEach(function (t) {
        return e[t.getId()] = true;
      });
      var t = function t(n, r, o) {
        for (var i = false, a = 0; a < n.length; a++) {
          var s = n[a];
          var c = false;
          if (s instanceof Ce) {
            c = true === e[s.getId()];
          } else {
            var l = s.getDisplayedChildren();
            if (l) {
              c = t(l, r, o + 1);
            }
          }
          if (c) {
            i = true;
            if (!r[o]) {
              r[o] = [];
            }
            r[o].push(s);
          }
        }
        return i;
      };
      t(this.displayedTreeLeft, this.viewportRowLeft, 0);
      t(this.displayedTreeRight, this.viewportRowRight, 0);
      t(this.displayedTreeCentre, this.viewportRowCenter, 0);
    };
    t.prototype.extractViewport = function () {
      this.extractViewportColumns();
      this.extractViewportRows();
    };
    t.prototype.filterOutColumnsWithinViewport = function () {
      return this.displayedColumnsCenter.filter(this.isColumnInViewport.bind(this));
    };
    t.prototype.refreshFlexedColumns = function (e) {
      var t = this;
      if (undefined === e) {
        e = {};
      }
      var n = e.source ? e.source : "flex";
      if (null != e.viewportWidth) {
        this.flexViewportWidth = e.viewportWidth;
      }
      if (!this.flexViewportWidth) {
        return [];
      }
      var o = -1;
      if (e.resizingCols) {
        e.resizingCols.forEach(function (e) {
          var n = t.displayedColumnsCenter.indexOf(e);
          if (o < n) {
            o = n;
          }
        });
      }
      var i = function (e) {
        var n = t.displayedColumnsCenter.indexOf(e) > o;
        return e.getFlex() && n;
      };
      var a = this.displayedColumnsCenter.filter(function (e) {
        return !i(e);
      });
      var s = this.displayedColumnsCenter.filter(function (e) {
        return i(e);
      });
      var c = [];
      if (!s.length) {
        return [];
      }
      var l;
      var u = [];
      e: for (;;) {
        var d = s.reduce(function (e, t) {
          return e + t.getFlex();
        }, 0);
        l = this.flexViewportWidth - this.getWidthOfColsInList(a);
        for (var p = 0; p < s.length; p++) {
          var f = s[p];
          var h = l * f.getFlex() / d;
          var m = 0;
          var g = f.getMinWidth();
          var _ = f.getMaxWidth();
          if (r(g) && h < g) {
            m = g;
          } else {
            if (r(_) && h > _) {
              m = _;
            }
          }
          if (m) {
            f.setActualWidth(m, n);
            v(s, f);
            c.push(f);
            a.push(f);
            continue e;
          }
          u[p] = Math.round(h);
        }
        break;
      }
      var b = l;
      s.forEach(function (e, t) {
        e.setActualWidth(Math.min(u[t], b), n);
        c.push(e);
        b -= u[t];
      });
      if (!e.skipSetLeft) {
        this.setLeftValues(n);
      }
      if (e.updateBodyWidths) {
        this.updateBodyWidths();
      }
      if (e.fireResizedEvent) {
        this.fireColumnResizedEvent(c, true, n, s);
      }
      if (!this.flexColsCalculatedAtLestOnce) {
        if (this.gridOptionsWrapper.isRowModelDefault()) {
          this.rowModel.resetRowHeights();
        }
        this.flexColsCalculatedAtLestOnce = true;
      }
      return s;
    };
    t.prototype.sizeColumnsToFit = function (e, t, n) {
      if (undefined === t) {
        t = "sizeColumnsToFit";
      }
      var o = this.getAllDisplayedColumns();
      if (!(e <= 0) && o.length) {
        var i = [];
        var a = [];
        o.forEach(function (e) {
          if (true === e.getColDef().suppressSizeToFit) {
            a.push(e);
          } else {
            i.push(e);
          }
        });
        var s = i.slice(0);
        var c = false;
        var l = function (e) {
          v(i, e);
          a.push(e);
        };
        for (i.forEach(function (e) {
          return e.resetActualWidth(t);
        }); !c;) {
          c = true;
          var u = e - this.getWidthOfColsInList(a);
          if (u <= 0) {
            i.forEach(function (e) {
              e.setMinimum(t);
            });
          } else {
            for (var d = u / this.getWidthOfColsInList(i), p = u, f = i.length - 1; f >= 0; f--) {
              var h = i[f];
              var m = h.getMinWidth();
              var g = h.getMaxWidth();
              var _ = Math.round(h.getActualWidth() * d);
              if (r(m) && _ < m) {
                _ = m;
                l(h);
                c = false;
              } else {
                if (r(g) && h.isGreaterThanMax(_)) {
                  _ = g;
                  l(h);
                  c = false;
                } else {
                  if (0 === f) {
                    _ = p;
                  }
                }
              }
              h.setActualWidth(_, t, true);
              p -= _;
            }
          }
        }
        s.forEach(function (e) {
          e.fireColumnWidthChangedEvent(t);
        });
        this.setLeftValues(t);
        this.updateBodyWidths();
        if (!n) {
          this.fireColumnResizedEvent(s, true, t);
        }
      }
    };
    t.prototype.buildDisplayedTrees = function (e) {
      var t = [];
      var n = [];
      var r = [];
      e.forEach(function (e) {
        switch (e.getPinned()) {
          case "left":
            t.push(e);
            break;
          case "right":
            n.push(e);
            break;
          default:
            r.push(e);
        }
      });
      var o = new qe();
      this.displayedTreeLeft = this.displayedGroupCreator.createDisplayedGroups(t, this.gridBalancedTree, o, Ee.PINNED_LEFT, this.displayedTreeLeft);
      this.displayedTreeRight = this.displayedGroupCreator.createDisplayedGroups(n, this.gridBalancedTree, o, Ee.PINNED_RIGHT, this.displayedTreeRight);
      this.displayedTreeCentre = this.displayedGroupCreator.createDisplayedGroups(r, this.gridBalancedTree, o, null, this.displayedTreeCentre);
      this.updateDisplayedMap();
    };
    t.prototype.updateDisplayedMap = function () {
      var e = this;
      this.displayedColumnsAndGroupsMap = {};
      var t = function (t) {
        e.displayedColumnsAndGroupsMap[t.getUniqueId()] = t;
      };
      this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeCentre, t);
      this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeLeft, t);
      this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeRight, t);
    };
    t.prototype.isDisplayed = function (e) {
      return this.displayedColumnsAndGroupsMap[e.getUniqueId()] === e;
    };
    t.prototype.updateOpenClosedVisibilityInColumnGroups = function () {
      var e = this.getAllDisplayedTrees();
      this.columnUtils.depthFirstAllColumnTreeSearch(e, function (e) {
        if (e instanceof Se) {
          e.calculateDisplayedColumns();
        }
      });
    };
    t.prototype.getGroupAutoColumns = function () {
      return this.groupAutoColumns;
    };
    t.prototype.createGroupAutoColumnsIfNeeded = function () {
      if (this.autoGroupsNeedBuilding) {
        this.autoGroupsNeedBuilding = false;
        var e = this.gridOptionsWrapper.isGroupUseEntireRow(this.pivotMode);
        var t = this.pivotMode ? this.gridOptionsWrapper.isPivotSuppressAutoColumn() : this.gridOptionsWrapper.isGroupSuppressAutoColumn();
        if ((this.rowGroupColumns.length > 0 || this.usingTreeData) && !t && !e) {
          var n = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
          if (!this.autoColsEqual(n, this.groupAutoColumns) || this.forceRecreateAutoGroups) {
            this.groupAutoColumns = n;
          }
        } else {
          this.groupAutoColumns = null;
        }
      }
    };
    t.prototype.autoColsEqual = function (e, t) {
      return g(e, t, function (e, t) {
        return e.getColId() === t.getColId();
      });
    };
    t.prototype.getWidthOfColsInList = function (e) {
      return e.reduce(function (e, t) {
        return e + t.getActualWidth();
      }, 0);
    };
    t.prototype.getGridBalancedTree = function () {
      return this.gridBalancedTree;
    };
    t.prototype.hasFloatingFilters = function () {
      return !!this.gridColumns && this.gridColumns.some(function (e) {
        return e.getColDef().floatingFilter;
      });
    };
    t.prototype.getFirstDisplayedColumn = function () {
      var e = this.gridOptionsWrapper.isEnableRtl();
      var t = ["getDisplayedLeftColumns", "getDisplayedCenterColumns", "getDisplayedRightColumns"];
      if (e) {
        t.reverse();
      }
      for (var n = 0; n < t.length; n++) {
        var r = this[t[n]]();
        if (r.length) {
          return e ? m(r) : r[0];
        }
      }
      return null;
    };
    lt([pe("expressionService")], t.prototype, "expressionService", undefined);
    lt([pe("columnFactory")], t.prototype, "columnFactory", undefined);
    lt([pe("displayedGroupCreator")], t.prototype, "displayedGroupCreator", undefined);
    lt([pe("autoWidthCalculator")], t.prototype, "autoWidthCalculator", undefined);
    lt([pe("columnUtils")], t.prototype, "columnUtils", undefined);
    lt([pe("columnAnimationService")], t.prototype, "columnAnimationService", undefined);
    lt([pe("autoGroupColService")], t.prototype, "autoGroupColService", undefined);
    lt([fe("aggFuncService")], t.prototype, "aggFuncService", undefined);
    lt([fe("valueCache")], t.prototype, "valueCache", undefined);
    lt([fe("animationFrameService")], t.prototype, "animationFrameService", undefined);
    lt([pe("rowModel")], t.prototype, "rowModel", undefined);
    lt([pe("columnApi")], t.prototype, "columnApi", undefined);
    lt([pe("gridApi")], t.prototype, "gridApi", undefined);
    lt([pe("sortController")], t.prototype, "sortController", undefined);
    lt([pe("columnDefFactory")], t.prototype, "columnDefFactory", undefined);
    lt([le], t.prototype, "init", null);
    lt([ut(0, me("loggerFactory"))], t.prototype, "setBeans", null);
    return t = lt([de("columnController")], t);
  }(We);
  function pt(e, t) {
    return Je(e.toString(), t, "0");
  }
  function ft(e, t) {
    for (var n = [], r = e; r <= t; r++) {
      n.push(r);
    }
    return n;
  }
  function ht(e) {
    return "" !== e && !isNaN(parseFloat(e)) && isFinite(e);
  }
  function mt() {
    return Number.MAX_SAFE_INTEGER || 9007199254740991;
  }
  function gt(e) {
    return "number" !== typeof e ? "" : e.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
  }
  var _t;
  var vt;
  var bt;
  var yt;
  var Et;
  var Ot;
  var wt;
  var Ct;
  var Tt = Object.freeze({
    __proto__: null,
    padStartWidthZeros: pt,
    createArrayOfNumbers: ft,
    isNumeric: ht,
    getMaxSafeInteger: mt,
    cleanNumber: function (e) {
      if ("string" === typeof e) {
        e = parseInt(e, 10);
      }
      return "number" === typeof e ? Math.floor(e) : null;
    },
    decToHex: function (e, t) {
      for (var n = "", r = 0; r < t; r++) {
        n += String.fromCharCode(255 & e);
        e >>>= 8;
      }
      return n;
    },
    formatNumberTwoDecimalPlacesAndCommas: function (e) {
      return "number" !== typeof e ? "" : gt(Math.round(100 * e) / 100);
    },
    formatNumberCommas: gt,
    sum: function (e) {
      return null == e ? null : e.reduce(function (e, t) {
        return e + t;
      }, 0);
    }
  });
  var St = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var It = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var At = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    St(t, e);
    t.prototype.calculateColInitialWidth = function (e) {
      var t;
      var n = this.gridOptionsWrapper;
      var r = null != e.minWidth ? e.minWidth : n.getMinColWidth();
      var o = null != e.maxWidth ? e.maxWidth : n.getMaxColWidth() || mt();
      var i = s(e.width);
      var a = s(e.initialWidth);
      t = null != i ? i : null != a ? a : n.getColWidth();
      return Math.max(Math.min(t, o), r);
    };
    t.prototype.getOriginalPathForColumn = function (e, t) {
      var n = [];
      var r = false;
      (function t(o, i) {
        for (var a = 0; a < o.length; a++) {
          if (r) {
            return;
          }
          var s = o[a];
          if (s instanceof Ie) {
            t(s.getChildren(), i + 1);
            n[i] = s;
          } else if (s === e) {
            r = true;
          }
        }
      })(t, 0);
      return r ? n : null;
    };
    t.prototype.depthFirstOriginalTreeSearch = function (e, t, n) {
      var r = this;
      if (t) {
        t.forEach(function (t) {
          if (t instanceof Ie) {
            r.depthFirstOriginalTreeSearch(t, t.getChildren(), n);
          }
          n(t, e);
        });
      }
    };
    t.prototype.depthFirstAllColumnTreeSearch = function (e, t) {
      var n = this;
      if (e) {
        e.forEach(function (e) {
          if (e instanceof Se) {
            n.depthFirstAllColumnTreeSearch(e.getChildren(), t);
          }
          t(e);
        });
      }
    };
    t.prototype.depthFirstDisplayedColumnTreeSearch = function (e, t) {
      var n = this;
      if (e) {
        e.forEach(function (e) {
          if (e instanceof Se) {
            n.depthFirstDisplayedColumnTreeSearch(e.getDisplayedChildren(), t);
          }
          t(e);
        });
      }
    };
    return t = It([de("columnUtils")], t);
  }(We);
  var jt = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Nt = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Rt = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    jt(t, e);
    t.prototype.createDisplayedGroups = function (e, t, n, r, o) {
      var i;
      var a;
      var s = this;
      var c = [];
      var l = this.mapOldGroupsById(o);
      e.forEach(function (e) {
        for (var o = s.getOriginalPathForColumn(t, e), u = [], d = !a, p = 0; p < o.length; p++) {
          if (d || o[p] !== a[p]) {
            var f = s.createColumnGroup(o[p], n, l, r);
            u[p] = f;
            if (0 == p) {
              c.push(f);
            } else {
              u[p - 1].addChild(f);
            }
          } else {
            u[p] = i[p];
          }
        }
        if (0 === u.length) {
          c.push(e);
        } else {
          m(u).addChild(e);
        }
        i = u;
        a = o;
      });
      this.setupParentsIntoColumns(c, null);
      return c;
    };
    t.prototype.createColumnGroup = function (e, t, n, o) {
      var i = e.getGroupId();
      var a = t.getInstanceIdForKey(i);
      var s = n[Se.createUniqueId(i, a)];
      if (s && s.getOriginalColumnGroup() !== e) {
        s = null;
      }
      if (r(s)) {
        s.reset();
      } else {
        s = new Se(e, i, a, o);
        this.context.createBean(s);
      }
      return s;
    };
    t.prototype.mapOldGroupsById = function (e) {
      var t = {};
      if (e) {
        (function e(n) {
          n.forEach(function (n) {
            if (n instanceof Se) {
              var r = n;
              t[n.getUniqueId()] = r;
              e(r.getChildren());
            }
          });
        })(e);
      }
      return t;
    };
    t.prototype.setupParentsIntoColumns = function (e, t) {
      var n = this;
      e.forEach(function (e) {
        e.setParent(t);
        if (e instanceof Se) {
          var r = e;
          n.setupParentsIntoColumns(r.getChildren(), r);
        }
      });
    };
    t.prototype.getOriginalPathForColumn = function (e, t) {
      var n = [];
      var r = false;
      (function e(o, i) {
        for (var a = 0; a < o.length; a++) {
          if (r) {
            return;
          }
          var s = o[a];
          if (s instanceof Ie) {
            e(s.getChildren(), i + 1);
            n[i] = s;
          } else if (s === t) {
            r = true;
          }
        }
      })(e, 0);
      return r ? n : (console.warn("could not get path"), null);
    };
    return t = Nt([de("displayedGroupCreator")], t);
  }(We);
  var kt = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var xt = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Dt = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    var n;
    kt(t, e);
    n = t;
    t.prototype.getHeaderRows = function () {
      return this.headerRows;
    };
    t.prototype.getRows = function () {
      return this.rows;
    };
    t.prototype.getCenterRowContainer = function () {
      return this.centerRowContainer;
    };
    t.prototype.postConstruct = function () {
      var e = this;
      this.createHeaderRows();
      this.onPageLoaded();
      this.addManagedListener(this.eventService, Ke.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, function () {
        e.createHeaderRows();
        e.onPageLoaded();
      });
    };
    t.prototype.createHeaderRows = function () {
      this.headerRows = [];
      for (var e = this.columnController.getHeaderRowCount(), t = 0; t < e; t++) {
        var r = t === e - 1;
        this.headerRows.push(this.createHeaderRow(t, r));
      }
      this.dispatchEvent({
        type: n.EVENT_HEADERS_UPDATED
      });
    };
    t.prototype.onPageLoaded = function () {
      var e = this;
      this.rows = [];
      var t = this.paginationProxy.getPageFirstRow();
      var r = this.paginationProxy.getPageLastRow();
      if (!(t < 0 || r < 0)) {
        for (var o = this.columnController.getDisplayedColumns(null), i = function (t) {
            var n = a.paginationProxy.getRow(t);
            if (!n) {
              return "continue";
            }
            var r = [];
            var i = {
              cells: r,
              index: t,
              id: n.id,
              height: n.rowHeight,
              top: n.rowTop
            };
            o.forEach(function (t) {
              r.push({
                value: e.valueService.getValue(t, n),
                colId: t.getId(),
                width: t.getActualWidth(),
                left: t.getLeft()
              });
            });
            a.rows.push(i);
          }, a = this, s = t; s <= r; s++) {
          i(s);
        }
        this.dispatchEvent({
          type: n.EVENT_ROWS_UPDATED
        });
        this.centerRowContainer = {
          height: Math.max(this.paginationProxy.getCurrentPageHeight(), 1),
          width: this.columnController.getBodyContainerWidth()
        };
        this.dispatchEvent({
          type: n.EVENT_ROW_CONTAINER_UPDATED
        });
      }
    };
    t.prototype.createHeaderRow = function (e, t) {
      var n = this;
      return {
        headerRowIndex: e,
        groupLevel: t,
        columns: this.columnController.getVirtualHeaderGroupRow(null, e).map(function (e) {
          return {
            name: e instanceof Ce ? n.columnController.getDisplayNameForColumn(e, "header") : n.columnController.getDisplayNameForColumnGroup(e, "header"),
            id: e.getUniqueId()
          };
        })
      };
    };
    t.EVENT_ROWS_UPDATED = "rowsUpdated";
    t.EVENT_HEADERS_UPDATED = "headersUpdated";
    t.EVENT_ROW_CONTAINER_UPDATED = "rowContainerUpdated";
    xt([pe("columnController")], t.prototype, "columnController", undefined);
    xt([pe("paginationProxy")], t.prototype, "paginationProxy", undefined);
    xt([pe("valueService")], t.prototype, "valueService", undefined);
    xt([le], t.prototype, "postConstruct", null);
    return t = n = xt([de("headlessService")], t);
  }(We);
  function Mt() {
    if (undefined === vt) {
      vt = !!document.documentMode;
    }
    return vt;
  }
  function Lt() {
    if (undefined === bt) {
      bt = !Mt() && !!window.StyleMedia;
    }
    return bt;
  }
  function Pt() {
    if (undefined === _t) {
      _t = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    }
    return _t;
  }
  function Bt() {
    if (undefined === yt) {
      var e = window;
      yt = !!e.chrome && (!!e.chrome.webstore || !!e.chrome.runtime) || /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
    }
    return yt;
  }
  function Ft() {
    if (undefined === Et) {
      var e = window;
      Et = "undefined" !== typeof e.InstallTrigger;
    }
    return Et;
  }
  function Gt() {
    if (undefined === Ot) {
      Ot = (/iPad|iPhone|iPod/.test(navigator.platform) || "MacIntel" === navigator.platform && navigator.maxTouchPoints > 1) && !window.MSStream;
    }
    return Ot;
  }
  function Ut(e) {
    if (!e) {
      return null;
    }
    var t = e.tabIndex;
    var n = e.getAttribute("tabIndex");
    if (Mt() && 0 === t && null === n) {
      return true === {
        a: true,
        body: true,
        button: true,
        frame: true,
        iframe: true,
        img: true,
        input: true,
        isindex: true,
        object: true,
        select: true,
        textarea: true
      }[e.nodeName.toLowerCase()] ? "0" : null;
    }
    return -1 !== t || null !== n && ("" !== n || Ft()) ? t.toString() : null;
  }
  function Wt() {
    if (!document.body) {
      return -1;
    }
    var e = 1e6;
    var t = navigator.userAgent.toLowerCase().match(/firefox/) ? 6e6 : 1e9;
    var n = document.createElement("div");
    for (document.body.appendChild(n);;) {
      var r = 2 * e;
      n.style.height = r + "px";
      if (r > t || n.clientHeight !== r) {
        break;
      }
      e = r;
    }
    document.body.removeChild(n);
    return e;
  }
  function Ht() {
    if (null == Ct) {
      Vt();
    }
    return Ct;
  }
  function Vt() {
    var e = document.body;
    var t = document.createElement("div");
    t.style.width = t.style.height = "100px";
    t.style.opacity = "0";
    t.style.overflow = "scroll";
    t.style.msOverflowStyle = "scrollbar";
    t.style.position = "absolute";
    e.appendChild(t);
    var n = t.offsetWidth - t.clientWidth;
    if (0 === n && 0 === t.clientWidth) {
      n = null;
    }
    if (t.parentNode) {
      t.parentNode.removeChild(t);
    }
    if (null != n) {
      Ct = n;
      wt = 0 === n;
    }
  }
  function zt() {
    if (null == wt) {
      Vt();
    }
    return wt;
  }
  function Yt() {
    return document.body ? document.body.clientWidth : window.innerHeight ? window.innerWidth : document.documentElement && document.documentElement.clientWidth ? document.documentElement.clientWidth : -1;
  }
  function Kt() {
    return document.body ? document.body.clientHeight : window.innerHeight ? window.innerHeight : document.documentElement && document.documentElement.clientHeight ? document.documentElement.clientHeight : -1;
  }
  var qt;
  var Xt = Object.freeze({
    __proto__: null,
    isBrowserIE: Mt,
    isBrowserEdge: Lt,
    isBrowserSafari: Pt,
    isBrowserChrome: Bt,
    isBrowserFirefox: Ft,
    isIOSUserAgent: Gt,
    getTabIndex: Ut,
    getMaxDivHeight: Wt,
    getScrollbarWidth: Ht,
    isInvisibleScrollbar: zt,
    hasOverflowScrolling: function () {
      var e = ["webkit", "moz", "o", "ms"];
      var t = document.createElement("div");
      var n = false;
      document.getElementsByTagName("body")[0].appendChild(t);
      t.setAttribute("style", e.map(function (e) {
        return "-" + e + "-overflow-scrolling: touch";
      }).concat("overflow-scrolling: touch").join(";"));
      var r = window.getComputedStyle(t);
      if ("touch" === r.overflowScrolling) {
        n = true;
      }
      if (!n) {
        for (var o = 0, i = e; o < i.length; o++) {
          if ("touch" === r[i[o] + "OverflowScrolling"]) {
            n = true;
            break;
          }
        }
      }
      if (t.parentNode) {
        t.parentNode.removeChild(t);
      }
      return n;
    },
    getBodyWidth: Yt,
    getBodyHeight: Kt
  });
  function Qt(e, t) {
    if (e && t && 0 !== t.length) {
      if (!(t.indexOf(" ") >= 0)) {
        if (e.classList) {
          e.classList.add(t);
        } else if (e.className && e.className.length > 0) {
          var n = e.className.split(" ");
          if (n.indexOf(t) < 0) {
            n.push(t);
            e.setAttribute("class", n.join(" "));
          }
        } else {
          e.setAttribute("class", t);
        }
        return e;
      }
      t.split(" ").forEach(function (t) {
        return Qt(e, t);
      });
    }
  }
  function Zt(e, t) {
    if (e && t && 0 !== t.length) {
      if (t.indexOf(" ") >= 0) {
        t.split(" ").forEach(function (t) {
          return Zt(e, t);
        });
      } else if (e.classList) {
        e.classList.remove(t);
      } else if (e.className && e.className.length > 0) {
        var n = e.className.split(" ").filter(function (e) {
          return e !== t;
        }).join(" ");
        e.setAttribute("class", n);
      }
    }
  }
  function Jt(e, t, n) {
    if (n) {
      Qt(e, t);
    } else {
      Zt(e, t);
    }
  }
  function $t(e, t) {
    if (e.classList) {
      return e.classList.contains(t);
    }
    if (e.className) {
      var n = e.className === t;
      var r = e.className.indexOf(" " + t + " ") >= 0;
      var o = 0 === e.className.indexOf(t + " ");
      var i = e.className.lastIndexOf(" " + t) === e.className.length - t.length - 1;
      return n || r || o || i;
    }
    return false;
  }
  function en(e) {
    var t = Element.prototype.matches || Element.prototype.msMatchesSelector;
    var n = t.call(e, Ee.INPUT_SELECTOR);
    var r = t.call(e, Ee.FOCUSABLE_EXCLUDE);
    var o = gn(e);
    return n && !r && o;
  }
  function tn(e, t) {
    Jt(e, "ag-hidden", !t);
  }
  function nn(e, t) {
    Jt(e, "ag-invisible", !t);
  }
  function rn(e, t) {
    var n = t ? function (e) {
      return e.setAttribute("disabled", "");
    } : function (e) {
      return e.removeAttribute("disabled");
    };
    n(e);
    Ln(e.querySelectorAll("input"), function (e) {
      return n(e);
    });
  }
  function on(e, t, n) {
    for (var r = 0; e;) {
      if ($t(e, t)) {
        return true;
      }
      e = e.parentElement;
      if (n && ++r > n) {
        break;
      }
    }
    return false;
  }
  function an(e) {
    var t = window.getComputedStyle(e);
    var n = t.height;
    var r = t.width;
    var o = t.paddingTop;
    var i = t.paddingRight;
    var a = t.paddingBottom;
    var s = t.paddingLeft;
    var c = t.marginTop;
    var l = t.marginRight;
    var u = t.marginBottom;
    var d = t.marginLeft;
    var p = t.boxSizing;
    return {
      height: parseFloat(n),
      width: parseFloat(r),
      paddingTop: parseFloat(o),
      paddingRight: parseFloat(i),
      paddingBottom: parseFloat(a),
      paddingLeft: parseFloat(s),
      marginTop: parseFloat(c),
      marginRight: parseFloat(l),
      marginBottom: parseFloat(u),
      marginLeft: parseFloat(d),
      boxSizing: p
    };
  }
  function sn(e) {
    var t = an(e);
    return "border-box" === t.boxSizing ? t.height - t.paddingTop - t.paddingBottom : t.height;
  }
  function cn(e) {
    var t = an(e);
    return "border-box" === t.boxSizing ? t.width - t.paddingLeft - t.paddingRight : t.width;
  }
  function ln(e) {
    var t = an(e);
    var n = t.marginBottom + t.marginTop;
    return Math.ceil(e.offsetHeight + n);
  }
  function un(e) {
    var t = an(e);
    var n = t.marginLeft + t.marginRight;
    return Math.ceil(e.offsetWidth + n);
  }
  function dn() {
    if ("boolean" === typeof qt) {
      return qt;
    }
    var e = document.createElement("div");
    e.style.direction = "rtl";
    e.style.width = "1px";
    e.style.height = "1px";
    e.style.position = "fixed";
    e.style.top = "0px";
    e.style.overflow = "hidden";
    e.dir = "rtl";
    e.innerHTML = "<div style=\"width: 2px\">\n            <span style=\"display: inline-block; width: 1px\"></span>\n            <span style=\"display: inline-block; width: 1px\"></span>\n        </div>";
    document.body.appendChild(e);
    e.scrollLeft = 1;
    qt = 0 === Math.floor(e.scrollLeft);
    document.body.removeChild(e);
    return qt;
  }
  function pn(e, t) {
    var n = e.scrollLeft;
    if (t) {
      n = Math.abs(n);
      if (Bt() && !dn()) {
        n = e.scrollWidth - e.clientWidth - n;
      }
    }
    return n;
  }
  function fn(e, t, n) {
    if (n) {
      if (dn()) {
        t *= -1;
      } else {
        if (Pt() || Bt()) {
          t = e.scrollWidth - e.clientWidth - t;
        }
      }
    }
    e.scrollLeft = t;
  }
  function hn(e) {
    for (; e && e.firstChild;) {
      e.removeChild(e.firstChild);
    }
  }
  function mn(e) {
    if (e && e.parentNode) {
      e.parentNode.removeChild(e);
    }
  }
  function gn(e) {
    return null !== e.offsetParent;
  }
  function _n(e) {
    var t = document.createElement("div");
    t.innerHTML = (e || "").trim();
    return t.firstChild;
  }
  function vn(e) {
    return e && e.clientHeight ? e.clientHeight : 0;
  }
  function bn(e) {
    return e && e.clientWidth ? e.clientWidth : 0;
  }
  function yn(e, t, n) {
    if (!(n && n.nextSibling === t)) {
      if (n) {
        if (n.nextSibling) {
          e.insertBefore(t, n.nextSibling);
        } else {
          e.appendChild(t);
        }
      } else {
        if (e.firstChild && e.firstChild !== t) {
          e.insertAdjacentElement("afterbegin", t);
        }
      }
    }
  }
  function En(e, t) {
    for (var n = 0; n < t.length; n++) {
      var r = t[n];
      var o = e.children[n];
      if (o !== r) {
        e.insertBefore(r, o);
      }
    }
  }
  function On(e, t, n) {
    if (n) {
      n.insertAdjacentElement("afterend", t);
    } else {
      if (e.firstChild) {
        e.insertAdjacentElement("afterbegin", t);
      } else {
        e.appendChild(t);
      }
    }
  }
  function wn(e, t) {
    if (t) {
      Object.keys(t).forEach(function (n) {
        var r = et(n);
        if (r) {
          e.style[r] = t[n];
        }
      });
    }
  }
  function Cn(e) {
    return e.clientWidth < e.scrollWidth;
  }
  function Tn(e) {
    return e.clientHeight < e.scrollHeight;
  }
  function Sn(e, t) {
    if ("flex" === t) {
      e.style.removeProperty("width");
      e.style.removeProperty("minWidth");
      e.style.removeProperty("maxWidth");
      e.style.flex = "1 1 auto";
    } else {
      In(e, t);
    }
  }
  function In(e, t) {
    t = jn(t);
    e.style.width = t.toString();
    e.style.maxWidth = t.toString();
    e.style.minWidth = t.toString();
  }
  function An(e, t) {
    t = jn(t);
    e.style.height = t.toString();
    e.style.maxHeight = t.toString();
    e.style.minHeight = t.toString();
  }
  function jn(e) {
    return "number" === typeof e ? e + "px" : e;
  }
  function Nn(e) {
    return "function" === typeof Node ? e instanceof Node : e && "object" === typeof e && "number" === typeof e.nodeType && "string" === typeof e.nodeName;
  }
  function Rn(e) {
    return "function" === typeof HTMLElement ? e instanceof HTMLElement : e && V(e) && 1 === e.nodeType && "string" === typeof e.nodeName;
  }
  function kn(e) {
    return Nn(e) || Rn(e);
  }
  function xn(e) {
    if (null == e) {
      return [];
    }
    var t = [];
    Ln(e, function (e) {
      return t.push(e);
    });
    return t;
  }
  function Dn(e, t) {
    if (e) {
      for (var n = 0; n < e.length; n++) {
        var r = e[n];
        t(r.name, r.value);
      }
    }
  }
  function Mn(e, t, n) {
    if (null == n) {
      e.removeAttribute(t);
    } else {
      e.setAttribute(t, n.toString());
    }
  }
  function Ln(e, t) {
    if (null != e) {
      for (var n = 0; n < e.length; n++) {
        t(e[n]);
      }
    }
  }
  var Pn = Object.freeze({
    __proto__: null,
    addCssClass: Qt,
    removeCssClass: Zt,
    addOrRemoveCssClass: Jt,
    radioCssClass: function (e, t, n) {
      for (var r = e.parentElement, o = r && r.firstChild; o;) {
        if (t) {
          Jt(o, t, o === e);
        }
        if (n) {
          Jt(o, n, o !== e);
        }
        o = o.nextSibling;
      }
    },
    containsClass: $t,
    isFocusableFormField: en,
    setDisplayed: tn,
    setVisible: nn,
    setDisabled: rn,
    isElementChildOfClass: on,
    getElementSize: an,
    getInnerHeight: sn,
    getInnerWidth: cn,
    getAbsoluteHeight: ln,
    getAbsoluteWidth: un,
    isRtlNegativeScroll: dn,
    getScrollLeft: pn,
    setScrollLeft: fn,
    clearElement: hn,
    removeElement: function (e, t) {
      mn(e.querySelector(t));
    },
    removeFromParent: mn,
    isVisible: gn,
    loadTemplate: _n,
    appendHtml: function (e, t) {
      if (e.lastChild) {
        e.insertAdjacentHTML("afterbegin", t);
      } else {
        e.innerHTML = t;
      }
    },
    getElementAttribute: function (e, t) {
      return e.attributes && e.attributes[t] ? e.attributes[t].value : null;
    },
    offsetHeight: vn,
    offsetWidth: bn,
    ensureDomOrder: yn,
    setDomChildOrder: En,
    insertWithDomOrder: On,
    prependDC: function (e, t) {
      if (r(e.firstChild)) {
        e.insertBefore(t, e.firstChild);
      } else {
        e.appendChild(t);
      }
    },
    addStylesToElement: wn,
    isHorizontalScrollShowing: Cn,
    isVerticalScrollShowing: Tn,
    setElementWidth: Sn,
    setFixedWidth: In,
    setElementHeight: function (e, t) {
      if ("flex" === t) {
        e.style.removeProperty("height");
        e.style.removeProperty("minHeight");
        e.style.removeProperty("maxHeight");
        e.style.flex = "1 1 auto";
      } else {
        An(e, t);
      }
    },
    setFixedHeight: An,
    formatSize: jn,
    isNode: Nn,
    isElement: Rn,
    isNodeOrElement: kn,
    copyNodeList: xn,
    iterateNamedNodeMap: Dn,
    setCheckboxState: function (e, t) {
      if ("boolean" === typeof t) {
        e.checked = t;
        e.indeterminate = false;
      } else {
        e.indeterminate = true;
      }
    },
    addOrRemoveAttribute: Mn,
    nodeListForEach: Ln
  });
  var Bn = function () {
    function e() {}
    e.prototype.doSomething = function (e, t) {
      var n = t.api.headlessService;
      var r = n.getHeaderRows();
      var o = n.getRows();
      hn(e);
      var i = document.createElement("table");
      r.forEach(function (e) {
        var t = document.createElement("tr");
        i.appendChild(t);
        e.columns.forEach(function (e) {
          var n = document.createElement("th");
          t.appendChild(n);
          if (null != e.name) {
            n.innerText = e.name;
          }
        });
      });
      o.forEach(function (e) {
        var t = document.createElement("tr");
        i.appendChild(t);
        e.cells.forEach(function (e) {
          var n = document.createElement("td");
          t.appendChild(n);
          if (null != e.value) {
            n.innerText = e.value.toString();
          }
        });
      });
      e.append(i);
      console.warn("TestHeadless.doSomething");
    };
    return e;
  }();
  var Fn = function () {
    for (var e = 0, t = 0, n = arguments.length; t < n; t++) {
      e += arguments[t].length;
    }
    var r = Array(e);
    var o = 0;
    for (t = 0; t < n; t++) {
      for (var i = arguments[t], a = 0, s = i.length; a < s; a++, o++) {
        r[o] = i[a];
      }
    }
    return r;
  };
  var Gn = function () {
    function e() {}
    e.STRING_PROPERTIES = ["sortingOrder", "rowClass", "rowSelection", "overlayLoadingTemplate", "overlayNoRowsTemplate", "quickFilterText", "rowModelType", "editType", "domLayout", "clipboardDeliminator", "rowGroupPanelShow", "multiSortKey", "pivotColumnGroupTotals", "pivotRowTotals", "pivotPanelShow", "fillHandleDirection", "serverSideStoreType"];
    e.OBJECT_PROPERTIES = ["components", "frameworkComponents", "rowStyle", "context", "autoGroupColumnDef", "localeText", "icons", "datasource", "serverSideDatasource", "viewportDatasource", "groupRowRendererParams", "aggFuncs", "fullWidthCellRendererParams", "defaultColGroupDef", "defaultColDef", "defaultExportParams", "defaultCsvExportParams", "defaultExcelExportParams", "columnTypes", "rowClassRules", "detailGridOptions", "detailCellRendererParams", "loadingCellRendererParams", "loadingOverlayComponentParams", "noRowsOverlayComponentParams", "popupParent", "colResizeDefault", "reduxStore", "statusBar", "sideBar", "chartThemeOverrides", "customChartThemes"];
    e.ARRAY_PROPERTIES = ["alignedGrids", "rowData", "columnDefs", "excelStyles", "pinnedTopRowData", "pinnedBottomRowData", "chartThemes"];
    e.NUMBER_PROPERTIES = ["rowHeight", "detailRowHeight", "rowBuffer", "colWidth", "headerHeight", "groupHeaderHeight", "floatingFiltersHeight", "pivotHeaderHeight", "pivotGroupHeaderHeight", "groupDefaultExpanded", "minColWidth", "maxColWidth", "viewportRowModelPageSize", "viewportRowModelBufferSize", "autoSizePadding", "maxBlocksInCache", "maxConcurrentDatasourceRequests", "tooltipShowDelay", "cacheOverflowSize", "paginationPageSize", "cacheBlockSize", "infiniteInitialRowCount", "scrollbarWidth", "batchUpdateWaitMillis", "asyncTransactionWaitMillis", "blockLoadDebounceMillis", "keepDetailRowsCount", "undoRedoCellEditingLimit", "cellFlashDelay", "cellFadeDelay", "tabIndex"];
    e.BOOLEAN_PROPERTIES = ["suppressMakeColumnVisibleAfterUnGroup", "suppressRowClickSelection", "suppressCellSelection", "suppressHorizontalScroll", "alwaysShowHorizontalScroll", "alwaysShowVerticalScroll", "debug", "enableBrowserTooltips", "enableCellExpressions", "angularCompileRows", "angularCompileFilters", "groupSuppressAutoColumn", "groupSelectsChildren", "groupIncludeFooter", "groupIncludeTotalFooter", "groupUseEntireRow", "groupSuppressBlankHeader", "suppressMenuHide", "suppressRowDeselection", "unSortIcon", "suppressMultiSort", "singleClickEdit", "suppressLoadingOverlay", "suppressNoRowsOverlay", "suppressAutoSize", "skipHeaderOnAutoSize", "suppressParentsInRowNodes", "suppressColumnMoveAnimation", "suppressMovableColumns", "suppressFieldDotNotation", "enableRangeSelection", "enableRangeHandle", "enableFillHandle", "suppressClearOnFillReduction", "deltaSort", "suppressTouch", "suppressAsyncEvents", "allowContextMenuWithControlKey", "suppressContextMenu", "rememberGroupStateWhenNewData", "enableCellChangeFlash", "suppressDragLeaveHidesColumns", "suppressMiddleClickScrolls", "suppressPreventDefaultOnMouseWheel", "suppressCopyRowsToClipboard", "copyHeadersToClipboard", "pivotMode", "suppressAggFuncInHeader", "suppressColumnVirtualisation", "suppressAggAtRootLevel", "suppressFocusAfterRefresh", "functionsPassive", "functionsReadOnly", "animateRows", "groupSelectsFiltered", "groupRemoveSingleChildren", "groupRemoveLowestSingleChildren", "enableRtl", "suppressClickEdit", "rowDragManaged", "suppressRowDrag", "suppressMoveWhenRowDragging", "enableMultiRowDragging", "enableGroupEdit", "embedFullWidthRows", "deprecatedEmbedFullWidthRows", "suppressPaginationPanel", "floatingFilter", "groupHideOpenParents", "groupMultiAutoColumn", "pagination", "stopEditingWhenGridLosesFocus", "paginationAutoPageSize", "suppressScrollOnNewData", "purgeClosedRowNodes", "cacheQuickFilter", "deltaRowDataMode", "ensureDomOrder", "accentedSort", "suppressChangeDetection", "valueCache", "valueCacheNeverExpires", "aggregateOnlyChangedColumns", "suppressAnimationFrame", "suppressExcelExport", "suppressCsvExport", "treeData", "masterDetail", "suppressMultiRangeSelection", "enterMovesDownAfterEdit", "enterMovesDown", "suppressPropertyNamesCheck", "rowMultiSelectWithClick", "suppressEnterpriseResetOnNewColumns", "enableOldSetFilterModel", "suppressRowHoverHighlight", "suppressRowTransform", "suppressClipboardPaste", "suppressLastEmptyLineOnPaste", "serverSideSortingAlwaysResets", "reactNext", "suppressSetColumnStateEvents", "suppressColumnStateEvents", "enableCharts", "deltaColumnMode", "suppressMaintainUnsortedOrder", "enableCellTextSelection", "suppressBrowserResizeObserver", "suppressMaxRenderedRowRestriction", "excludeChildrenWhenTreeDataFiltering", "tooltipMouseTrack", "keepDetailRows", "paginateChildRows", "preventDefaultOnContextMenu", "undoRedoCellEditing", "allowDragFromColumnsToolPanel", "immutableData", "immutableColumns", "pivotSuppressAutoColumn", "suppressExpandablePivotGroups", "applyColumnDefOrder", "debounceVerticalScrollbar", "detailRowAutoHeight", "serverSideFilteringAlwaysResets", "suppressAggFilteredOnly", "showOpenedGroup", "suppressClipboardApi", "suppressModelUpdateAfterUpdateTransaction", "stopEditingWhenCellsLoseFocus"];
    e.FUNCTION_PROPERTIES = ["localeTextFunc", "groupRowInnerRenderer", "groupRowInnerRendererFramework", "dateComponent", "dateComponentFramework", "groupRowRenderer", "groupRowRendererFramework", "isExternalFilterPresent", "getRowHeight", "doesExternalFilterPass", "getRowClass", "getRowStyle", "getRowClassRules", "traverseNode", "getContextMenuItems", "getMainMenuItems", "processRowPostCreate", "processCellForClipboard", "groupRowAggNodes", "getRowNodeId", "isFullWidthCell", "fullWidthCellRenderer", "fullWidthCellRendererFramework", "processSecondaryColDef", "processSecondaryColGroupDef", "getBusinessKeyForNode", "sendToClipboard", "navigateToNextHeader", "tabToNextHeader", "navigateToNextCell", "tabToNextCell", "getDetailRowData", "processCellFromClipboard", "getDocument", "postProcessPopup", "getChildCount", "getDataPath", "loadingCellRenderer", "loadingCellRendererFramework", "loadingOverlayComponent", "loadingOverlayComponentFramework", "noRowsOverlayComponent", "noRowsOverlayComponentFramework", "detailCellRenderer", "detailCellRendererFramework", "defaultGroupSortComparator", "isRowMaster", "isRowSelectable", "postSort", "processHeaderForClipboard", "paginationNumberFormatter", "processDataFromClipboard", "getServerSideGroupKey", "isServerSideGroup", "suppressKeyboardEvent", "createChartContainer", "processChartOptions", "getChartToolbarItems", "fillOperation", "isApplyServerSideTransaction", "getServerSideStoreParams", "isServerSideGroupOpenByDefault", "isGroupOpenByDefault"];
    e.ALL_PROPERTIES = Fn(e.ARRAY_PROPERTIES, e.OBJECT_PROPERTIES, e.STRING_PROPERTIES, e.NUMBER_PROPERTIES, e.FUNCTION_PROPERTIES, e.BOOLEAN_PROPERTIES);
    e.FRAMEWORK_PROPERTIES = ["__ob__", "__v_skip", "__metadata__", "mappedColumnProperties", "hasChildColumns", "toColDef", "createColDefFromGridColumn"];
    return e;
  }();
  var Un = function () {
    return (Un = Object.assign || function (e) {
      for (var t, n = 1, r = arguments.length; n < r; n++) {
        for (var o in t = arguments[n]) if (Object.prototype.hasOwnProperty.call(t, o)) {
          e[o] = t[o];
        }
      }
      return e;
    }).apply(this, arguments);
  };
  var Wn = function () {
    for (var e = 0, t = 0, n = arguments.length; t < n; t++) {
      e += arguments[t].length;
    }
    var r = Array(e);
    var o = 0;
    for (t = 0; t < n; t++) {
      for (var i = arguments[t], a = 0, s = i.length; a < s; a++, o++) {
        r[o] = i[a];
      }
    }
    return r;
  };
  var Hn = function () {
    function e() {}
    e.getEventCallbacks = function () {
      if (!e.EVENT_CALLBACKS) {
        e.EVENT_CALLBACKS = e.EVENTS.map(function (t) {
          return e.getCallbackForEvent(t);
        });
      }
      return e.EVENT_CALLBACKS;
    };
    e.copyAttributesToGridOptions = function (t, n, r) {
      if ("object" !== typeof t) {
        t = {};
      }
      var o = t;
      var i = function (e) {
        return "undefined" !== typeof n[e];
      };
      Wn(e.ARRAY_PROPERTIES, e.STRING_PROPERTIES, e.OBJECT_PROPERTIES, e.FUNCTION_PROPERTIES, e.getEventCallbacks()).filter(i).forEach(function (e) {
        return o[e] = n[e];
      });
      e.BOOLEAN_PROPERTIES.filter(i).forEach(function (t) {
        return o[t] = e.toBoolean(n[t]);
      });
      e.NUMBER_PROPERTIES.filter(i).forEach(function (t) {
        return o[t] = e.toNumber(n[t]);
      });
      return t;
    };
    e.getCallbackForEvent = function (e) {
      return !e || e.length < 2 ? e : "on" + e[0].toUpperCase() + e.substr(1);
    };
    e.processOnChange = function (t, n, r, o) {
      if (t) {
        var i = Un({}, t);
        var a = n;
        var s = function (e) {
          return i[e];
        };
        Wn(e.ARRAY_PROPERTIES, e.OBJECT_PROPERTIES, e.STRING_PROPERTIES, e.getEventCallbacks()).filter(s).forEach(function (e) {
          return a[e] = i[e].currentValue;
        });
        e.BOOLEAN_PROPERTIES.filter(s).forEach(function (t) {
          return a[t] = e.toBoolean(i[t].currentValue);
        });
        e.NUMBER_PROPERTIES.filter(s).forEach(function (t) {
          return a[t] = e.toNumber(i[t].currentValue);
        });
        if (i.enableCellTextSelection) {
          r.setEnableCellTextSelection(e.toBoolean(i.enableCellTextSelection.currentValue));
          delete i.enableCellTextSelection;
        }
        if (i.quickFilterText) {
          r.setQuickFilter(i.quickFilterText.currentValue);
          delete i.quickFilterText;
        }
        if (i.autoGroupColumnDef) {
          r.setAutoGroupColumnDef(i.autoGroupColumnDef.currentValue, "gridOptionsChanged");
          delete i.autoGroupColumnDef;
        }
        if (i.columnDefs) {
          r.setColumnDefs(i.columnDefs.currentValue, "gridOptionsChanged");
          delete i.columnDefs;
        }
        if (i.paginationPageSize) {
          r.paginationSetPageSize(e.toNumber(i.paginationPageSize.currentValue));
          delete i.paginationPageSize;
        }
        if (i.pivotMode) {
          o.setPivotMode(e.toBoolean(i.pivotMode.currentValue));
          delete i.pivotMode;
        }
        if (i.groupRemoveSingleChildren) {
          r.setGroupRemoveSingleChildren(e.toBoolean(i.groupRemoveSingleChildren.currentValue));
          delete i.groupRemoveSingleChildren;
        }
        if (i.suppressRowDrag) {
          r.setSuppressRowDrag(e.toBoolean(i.suppressRowDrag.currentValue));
          delete i.suppressRowDrag;
        }
        if (i.suppressMoveWhenRowDragging) {
          r.setSuppressMoveWhenRowDragging(e.toBoolean(i.suppressMoveWhenRowDragging.currentValue));
          delete i.suppressMoveWhenRowDragging;
        }
        if (i.suppressRowClickSelection) {
          r.setSuppressRowClickSelection(e.toBoolean(i.suppressRowClickSelection.currentValue));
          delete i.suppressRowClickSelection;
        }
        if (i.suppressClipboardPaste) {
          r.setSuppressClipboardPaste(e.toBoolean(i.suppressClipboardPaste.currentValue));
          delete i.suppressClipboardPaste;
        }
        if (i.headerHeight) {
          r.setHeaderHeight(e.toNumber(i.headerHeight.currentValue));
          delete i.headerHeight;
        }
        var c = r;
        Object.keys(i).forEach(function (e) {
          var n = "set" + e.charAt(0).toUpperCase() + e.substring(1);
          if (c[n]) {
            c[n](t[e].currentValue);
          }
        });
        var l = {
          type: Ke.EVENT_COMPONENT_STATE_CHANGED,
          api: n.api,
          columnApi: n.columnApi
        };
        R(t, function (e, t) {
          l[e] = t;
        });
        r.dispatchEvent(l);
      }
    };
    e.toBoolean = function (e) {
      return "boolean" === typeof e ? e : "string" === typeof e && ("TRUE" === e.toUpperCase() || "" == e);
    };
    e.toNumber = function (e) {
      return "number" === typeof e ? e : "string" === typeof e ? Number(e) : undefined;
    };
    e.EVENTS = [];
    e.STRING_PROPERTIES = Gn.STRING_PROPERTIES;
    e.OBJECT_PROPERTIES = Gn.OBJECT_PROPERTIES;
    e.ARRAY_PROPERTIES = Gn.ARRAY_PROPERTIES;
    e.NUMBER_PROPERTIES = Gn.NUMBER_PROPERTIES;
    e.BOOLEAN_PROPERTIES = Gn.BOOLEAN_PROPERTIES;
    e.FUNCTION_PROPERTIES = Gn.FUNCTION_PROPERTIES;
    e.ALL_PROPERTIES = Gn.ALL_PROPERTIES;
    return e;
  }();
  Hn.EVENTS = d(Ke);
  var Vn = function () {
    for (var e = 0, t = 0, n = arguments.length; t < n; t++) {
      e += arguments[t].length;
    }
    var r = Array(e);
    var o = 0;
    for (t = 0; t < n; t++) {
      for (var i = arguments[t], a = 0, s = i.length; a < s; a++, o++) {
        r[o] = i[a];
      }
    }
    return r;
  };
  var zn = function () {
    function e() {}
    e.STRING_PROPERTIES = ["headerName", "columnGroupShow", "headerClass", "toolPanelClass", "headerValueGetter", "pivotKeys", "groupId", "colId", "sort", "initialSort", "field", "type", "tooltipComponent", "tooltipField", "headerTooltip", "cellClass", "showRowGroup", "template", "templateUrl", "filter", "initialAggFunc", "aggFunc", "cellRenderer", "cellEditor", "pinned", "initialPinned", "chartDataType"];
    e.OBJECT_PROPERTIES = ["headerGroupComponent", "headerGroupComponentFramework", "headerGroupComponentParams", "cellStyle", "cellRendererParams", "cellEditorFramework", "cellEditorParams", "pinnedRowCellRendererFramework", "pinnedRowCellRendererParams", "filterFramework", "filterParams", "pivotValueColumn", "headerComponent", "headerComponentFramework", "headerComponentParams", "floatingFilterComponent", "floatingFilterComponentParams", "floatingFilterComponentFramework", "tooltipComponent", "tooltipComponentParams", "tooltipComponentFramework", "refData", "columnsMenuParams"];
    e.ARRAY_PROPERTIES = ["children", "sortingOrder", "allowedAggFuncs", "menuTabs", "pivotTotalColumnIds", "cellClassRules", "icons"];
    e.NUMBER_PROPERTIES = ["sortedAt", "sortIndex", "initialSortIndex", "flex", "initialFlex", "width", "initialWidth", "minWidth", "maxWidth", "rowGroupIndex", "initialRowGroupIndex", "pivotIndex", "initialPivotIndex"];
    e.BOOLEAN_PROPERTIES = ["suppressCellFlash", "suppressColumnsToolPanel", "suppressFiltersToolPanel", "openByDefault", "marryChildren", "hide", "initialHide", "rowGroup", "initialRowGroup", "pivot", "initialPivot", "checkboxSelection", "headerCheckboxSelection", "headerCheckboxSelectionFilteredOnly", "suppressMenu", "suppressMovable", "lockPosition", "lockVisible", "lockPinned", "unSortIcon", "suppressSizeToFit", "suppressAutoSize", "enableRowGroup", "enablePivot", "enableValue", "editable", "suppressPaste", "suppressNavigable", "enableCellChangeFlash", "rowDrag", "dndSource", "autoHeight", "wrapText", "sortable", "resizable", "singleClickEdit", "floatingFilter"];
    e.FUNCTION_PROPERTIES = ["dndSourceOnRowDrag", "valueGetter", "valueSetter", "filterValueGetter", "keyCreator", "cellRenderer", "cellRendererFramework", "pinnedRowCellRenderer", "valueFormatter", "pinnedRowValueFormatter", "valueParser", "comparator", "equals", "pivotComparator", "suppressKeyboardEvent", "suppressHeaderKeyboardEvent", "colSpan", "rowSpan", "getQuickFilterText", "newValueHandler", "onCellValueChanged", "onCellClicked", "onCellDoubleClicked", "onCellContextMenu", "rowDragText", "tooltipValueGetter", "tooltipComponent", "tooltipComponentFramework", "cellRendererSelector", "cellEditorSelector"];
    e.ALL_PROPERTIES = Vn(e.ARRAY_PROPERTIES, e.OBJECT_PROPERTIES, e.STRING_PROPERTIES, e.NUMBER_PROPERTIES, e.FUNCTION_PROPERTIES, e.BOOLEAN_PROPERTIES);
    e.FRAMEWORK_PROPERTIES = ["__ob__", "__v_skip", "__metadata__", "mappedColumnProperties", "hasChildColumns", "toColDef", "createColDefFromGridColumn"];
    return e;
  }();
  var Yn = function () {
    function e(e, t, n, r) {
      if (undefined === r) {
        r = 1;
      }
      this.r = Math.min(1, Math.max(0, e || 0));
      this.g = Math.min(1, Math.max(0, t || 0));
      this.b = Math.min(1, Math.max(0, n || 0));
      this.a = Math.min(1, Math.max(0, r || 0));
    }
    e.fromString = function (t) {
      if (t.indexOf("#") >= 0) {
        return e.fromHexString(t);
      }
      var n = e.nameToHex[t];
      if (n) {
        return e.fromHexString(n);
      }
      if (t.indexOf("rgb") >= 0) {
        return e.fromRgbaString(t);
      }
      throw new Error("Invalid color string: '" + t + "'");
    };
    e.fromHexString = function (t) {
      var n = t.match(e.hexRe);
      if (n) {
        return new e((r = parseInt(n[1], 16)) / 255, (o = parseInt(n[2], 16)) / 255, (i = parseInt(n[3], 16)) / 255, (a = undefined !== n[4] ? parseInt(n[4], 16) : 255) / 255);
      }
      if (n = t.match(e.shortHexRe)) {
        var r = parseInt(n[1], 16);
        var o = parseInt(n[2], 16);
        var i = parseInt(n[3], 16);
        var a = undefined !== n[4] ? parseInt(n[4], 16) : 15;
        return new e((r += 16 * r) / 255, (o += 16 * o) / 255, (i += 16 * i) / 255, (a += 16 * a) / 255);
      }
      throw new Error("Malformed hexadecimal color string: '" + t + "'");
    };
    e.fromRgbaString = function (t) {
      var n = t.match(e.rgbRe);
      if (n) {
        return new e(+n[1] / 255, +n[2] / 255, +n[3] / 255);
      }
      if (n = t.match(e.rgbaRe)) {
        return new e(+n[1] / 255, +n[2] / 255, +n[3] / 255, +n[4]);
      }
      throw new Error("Malformed rgb/rgba color string: '" + t + "'");
    };
    e.fromArray = function (t) {
      if (4 === t.length) {
        return new e(t[0], t[1], t[2], t[3]);
      }
      if (3 === t.length) {
        return new e(t[0], t[1], t[2]);
      }
      throw new Error("The given array should contain 3 or 4 color components (numbers).");
    };
    e.fromHSB = function (t, n, r, o) {
      if (undefined === o) {
        o = 1;
      }
      var i = e.HSBtoRGB(t, n, r);
      return new e(i[0], i[1], i[2], o);
    };
    e.padHex = function (e) {
      return 1 === e.length ? "0" + e : e;
    };
    e.prototype.toHexString = function () {
      var t = "#" + e.padHex(Math.round(255 * this.r).toString(16)) + e.padHex(Math.round(255 * this.g).toString(16)) + e.padHex(Math.round(255 * this.b).toString(16));
      if (this.a < 1) {
        t += e.padHex(Math.round(255 * this.a).toString(16));
      }
      return t;
    };
    e.prototype.toRgbaString = function (e) {
      if (undefined === e) {
        e = 3;
      }
      var t = [Math.round(255 * this.r), Math.round(255 * this.g), Math.round(255 * this.b)];
      var n = Math.pow(10, e);
      return 1 !== this.a ? (t.push(Math.round(this.a * n) / n), "rgba(" + t.join(", ") + ")") : "rgb(" + t.join(", ") + ")";
    };
    e.prototype.toString = function () {
      return 1 === this.a ? this.toHexString() : this.toRgbaString();
    };
    e.prototype.toHSB = function () {
      return e.RGBtoHSB(this.r, this.g, this.b);
    };
    e.RGBtoHSB = function (e, t, n) {
      var r = Math.min(e, t, n);
      var o = Math.max(e, t, n);
      var i = NaN;
      if (r !== o) {
        var a = o - r;
        var s = (o - e) / a;
        var c = (o - t) / a;
        var l = (o - n) / a;
        i = e === o ? l - c : t === o ? 2 + s - l : 4 + c - s;
        if ((i /= 6) < 0) {
          i += 1;
        }
      }
      return [360 * i, 0 !== o ? (o - r) / o : 0, o];
    };
    e.HSBtoRGB = function (e, t, n) {
      if (isNaN(e)) {
        e = 0;
      }
      e = (e % 360 + 360) % 360 / 360;
      var r = 0;
      var o = 0;
      var i = 0;
      if (0 === t) {
        r = o = i = n;
      } else {
        var a = 6 * (e - Math.floor(e));
        var s = a - Math.floor(a);
        var c = n * (1 - t);
        var l = n * (1 - t * s);
        var u = n * (1 - t * (1 - s));
        switch (a >> 0) {
          case 0:
            r = n;
            o = u;
            i = c;
            break;
          case 1:
            r = l;
            o = n;
            i = c;
            break;
          case 2:
            r = c;
            o = n;
            i = u;
            break;
          case 3:
            r = c;
            o = l;
            i = n;
            break;
          case 4:
            r = u;
            o = c;
            i = n;
            break;
          case 5:
            r = n;
            o = c;
            i = l;
        }
      }
      return [r, o, i];
    };
    e.prototype.derive = function (t, n, r, o) {
      var i = e.RGBtoHSB(this.r, this.g, this.b);
      var a = i[2];
      if (0 == a && r > 1) {
        a = .05;
      }
      var s = ((i[0] + t) % 360 + 360) % 360;
      var c = Math.max(Math.min(i[1] * n, 1), 0);
      a = Math.max(Math.min(a * r, 1), 0);
      var l = Math.max(Math.min(this.a * o, 1), 0);
      var u = e.HSBtoRGB(s, c, a);
      u.push(l);
      return e.fromArray(u);
    };
    e.prototype.brighter = function () {
      return this.derive(0, 1, 1 / .7, 1);
    };
    e.prototype.darker = function () {
      return this.derive(0, 1, .7, 1);
    };
    e.hexRe = /\s*#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?\s*$/;
    e.shortHexRe = /\s*#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])?\s*$/;
    e.rgbRe = /\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)\s*/;
    e.rgbaRe = /\s*rgba\((\d+),\s*(\d+),\s*(\d+),\s*([.\d]+)\)\s*/;
    e.nameToHex = Object.freeze({
      aliceblue: "#F0F8FF",
      antiquewhite: "#FAEBD7",
      aqua: "#00FFFF",
      aquamarine: "#7FFFD4",
      azure: "#F0FFFF",
      beige: "#F5F5DC",
      bisque: "#FFE4C4",
      black: "#000000",
      blanchedalmond: "#FFEBCD",
      blue: "#0000FF",
      blueviolet: "#8A2BE2",
      brown: "#A52A2A",
      burlywood: "#DEB887",
      cadetblue: "#5F9EA0",
      chartreuse: "#7FFF00",
      chocolate: "#D2691E",
      coral: "#FF7F50",
      cornflowerblue: "#6495ED",
      cornsilk: "#FFF8DC",
      crimson: "#DC143C",
      cyan: "#00FFFF",
      darkblue: "#00008B",
      darkcyan: "#008B8B",
      darkgoldenrod: "#B8860B",
      darkgray: "#A9A9A9",
      darkgreen: "#006400",
      darkgrey: "#A9A9A9",
      darkkhaki: "#BDB76B",
      darkmagenta: "#8B008B",
      darkolivegreen: "#556B2F",
      darkorange: "#FF8C00",
      darkorchid: "#9932CC",
      darkred: "#8B0000",
      darksalmon: "#E9967A",
      darkseagreen: "#8FBC8F",
      darkslateblue: "#483D8B",
      darkslategray: "#2F4F4F",
      darkslategrey: "#2F4F4F",
      darkturquoise: "#00CED1",
      darkviolet: "#9400D3",
      deeppink: "#FF1493",
      deepskyblue: "#00BFFF",
      dimgray: "#696969",
      dimgrey: "#696969",
      dodgerblue: "#1E90FF",
      firebrick: "#B22222",
      floralwhite: "#FFFAF0",
      forestgreen: "#228B22",
      fuchsia: "#FF00FF",
      gainsboro: "#DCDCDC",
      ghostwhite: "#F8F8FF",
      gold: "#FFD700",
      goldenrod: "#DAA520",
      gray: "#808080",
      green: "#008000",
      greenyellow: "#ADFF2F",
      grey: "#808080",
      honeydew: "#F0FFF0",
      hotpink: "#FF69B4",
      indianred: "#CD5C5C",
      indigo: "#4B0082",
      ivory: "#FFFFF0",
      khaki: "#F0E68C",
      lavender: "#E6E6FA",
      lavenderblush: "#FFF0F5",
      lawngreen: "#7CFC00",
      lemonchiffon: "#FFFACD",
      lightblue: "#ADD8E6",
      lightcoral: "#F08080",
      lightcyan: "#E0FFFF",
      lightgoldenrodyellow: "#FAFAD2",
      lightgray: "#D3D3D3",
      lightgreen: "#90EE90",
      lightgrey: "#D3D3D3",
      lightpink: "#FFB6C1",
      lightsalmon: "#FFA07A",
      lightseagreen: "#20B2AA",
      lightskyblue: "#87CEFA",
      lightslategray: "#778899",
      lightslategrey: "#778899",
      lightsteelblue: "#B0C4DE",
      lightyellow: "#FFFFE0",
      lime: "#00FF00",
      limegreen: "#32CD32",
      linen: "#FAF0E6",
      magenta: "#FF00FF",
      maroon: "#800000",
      mediumaquamarine: "#66CDAA",
      mediumblue: "#0000CD",
      mediumorchid: "#BA55D3",
      mediumpurple: "#9370DB",
      mediumseagreen: "#3CB371",
      mediumslateblue: "#7B68EE",
      mediumspringgreen: "#00FA9A",
      mediumturquoise: "#48D1CC",
      mediumvioletred: "#C71585",
      midnightblue: "#191970",
      mintcream: "#F5FFFA",
      mistyrose: "#FFE4E1",
      moccasin: "#FFE4B5",
      navajowhite: "#FFDEAD",
      navy: "#000080",
      oldlace: "#FDF5E6",
      olive: "#808000",
      olivedrab: "#6B8E23",
      orange: "#FFA500",
      orangered: "#FF4500",
      orchid: "#DA70D6",
      palegoldenrod: "#EEE8AA",
      palegreen: "#98FB98",
      paleturquoise: "#AFEEEE",
      palevioletred: "#DB7093",
      papayawhip: "#FFEFD5",
      peachpuff: "#FFDAB9",
      peru: "#CD853F",
      pink: "#FFC0CB",
      plum: "#DDA0DD",
      powderblue: "#B0E0E6",
      purple: "#800080",
      rebeccapurple: "#663399",
      red: "#FF0000",
      rosybrown: "#BC8F8F",
      royalblue: "#4169E1",
      saddlebrown: "#8B4513",
      salmon: "#FA8072",
      sandybrown: "#F4A460",
      seagreen: "#2E8B57",
      seashell: "#FFF5EE",
      sienna: "#A0522D",
      silver: "#C0C0C0",
      skyblue: "#87CEEB",
      slateblue: "#6A5ACD",
      slategray: "#708090",
      slategrey: "#708090",
      snow: "#FFFAFA",
      springgreen: "#00FF7F",
      steelblue: "#4682B4",
      tan: "#D2B48C",
      teal: "#008080",
      thistle: "#D8BFD8",
      tomato: "#FF6347",
      turquoise: "#40E0D0",
      violet: "#EE82EE",
      wheat: "#F5DEB3",
      white: "#FFFFFF",
      whitesmoke: "#F5F5F5",
      yellow: "#FFFF00",
      yellowgreen: "#9ACD32"
    });
    return e;
  }();
  function Kn(e, t) {
    if (undefined === t) {
      t = ",";
    }
    var n = [];
    var r = function (e) {
      return "\r" === e || "\n" === e;
    };
    var o = false;
    if ("" === e) {
      return [[""]];
    }
    for (var i, a, s, c = function (c, l, u) {
        var d = e[u - 1];
        var p = e[u];
        var f = e[u + 1];
        var h = function () {
          if (!n[c]) {
            n[c] = [];
          }
          if (!n[c][l]) {
            n[c][l] = "";
          }
        };
        h();
        if ("\"" === p) {
          if (o) {
            if ("\"" === f) {
              n[c][l] += "\"";
              u++;
            } else {
              o = false;
            }
            i = c;
            a = l;
            s = u;
            return "continue";
          }
          if (undefined === d || d === t || r(d)) {
            o = true;
            i = c;
            a = l;
            s = u;
            return "continue";
          }
        }
        if (!o) {
          if (p === t) {
            l++;
            h();
            i = c;
            a = l;
            s = u;
            return "continue";
          }
          if (r(p)) {
            l = 0;
            c++;
            h();
            if ("\r" === p && "\n" === f) {
              u++;
            }
            i = c;
            a = l;
            s = u;
            return "continue";
          }
        }
        n[c][l] += p;
        i = c;
        a = l;
        s = u;
      }, l = 0, u = 0, d = 0; d < e.length; d++) {
      c(l, u, d);
      l = i;
      u = a;
      d = s;
    }
    return n;
  }
  var qn = Object.freeze({
    __proto__: null,
    stringToArray: Kn
  });
  function Xn(e) {
    if (!e) {
      return "";
    }
    var t = [];
    R(e, function (e, n) {
      var r = $e(e);
      t.push(r + ": " + n + ";");
    });
    return t.join(" ");
  }
  function Qn(e, t) {
    e.then(function (e) {
      var n = e.getGui();
      if (null != n) {
        if ("object" === typeof n) {
          t.appendChild(n);
        } else {
          t.innerHTML = n;
        }
      }
    });
  }
  var Zn = Object.freeze({
    __proto__: null,
    getNameOfClass: function (e) {
      var t = e.toString();
      var n = /function (.{1,})\(/.exec(t);
      return n && n.length > 1 ? n[1] : "";
    },
    findLineByLeastSquares: function (e) {
      var t = e.length;
      var n = 0;
      if (t <= 1) {
        return e;
      }
      for (var r = 0; r < e.length; r++) {
        var o = e[r];
        if (Math.floor(o) !== o) {
          n = Math.max(n, o.toString().split(".")[1].length);
        }
      }
      for (var i = 0, a = 0, s = 0, c = 0, l = 0, u = 0; u < t; u++) {
        i += u;
        a += l = e[u];
        c += u * u;
        s += u * l;
      }
      var d = (t * s - i * a) / (t * c - i * i);
      var p = a / t - d * i / t;
      var f = [];
      for (u = 0; u <= t; u++) {
        f.push(parseFloat((u * d + p).toFixed(n)));
      }
      return f;
    },
    cssStyleObjectToMarkup: Xn,
    message: function (e) {
      var t = document.createElement("div");
      var n = document.querySelector("#__ag__message");
      t.innerHTML = e;
      if (!n) {
        n = _n("<div id=\"__ag__message\" style=\"display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;\"></div>");
        if (document.body) {
          document.body.appendChild(n);
        }
      }
      n.insertBefore(t, n.children[0]);
    },
    bindCellRendererToHtmlElement: Qn
  });
  function Jn(e, t, n) {
    e.setAttribute(er(t), n.toString());
  }
  function $n(e, t) {
    e.removeAttribute(er(t));
  }
  function er(e) {
    return "aria-" + e;
  }
  function tr(e) {
    return e.isSortAscending() ? "ascending" : e.isSortDescending() ? "descending" : "none";
  }
  function nr(e) {
    return parseInt(e.getAttribute("aria-posinset"), 10);
  }
  function rr(e) {
    return e.getAttribute("aria-describedby") || "";
  }
  function or(e, t) {
    Jn(e, "label", t);
  }
  function ir(e, t) {
    Jn(e, "labelledby", t);
  }
  function ar(e, t) {
    Jn(e, "describedby", t);
  }
  function sr(e, t) {
    Jn(e, "disabled", t);
  }
  function cr(e, t) {
    Jn(e, "expanded", t);
  }
  function lr(e) {
    $n(e, "expanded");
  }
  function ur(e, t) {
    Jn(e, "setsize", t);
  }
  function dr(e, t) {
    Jn(e, "posinset", t);
  }
  function pr(e, t) {
    Jn(e, "multiselectable", t);
  }
  function fr(e, t) {
    Jn(e, "rowcount", t);
  }
  function hr(e, t) {
    Jn(e, "rowindex", t);
  }
  function mr(e, t) {
    Jn(e, "colcount", t);
  }
  function gr(e, t) {
    Jn(e, "colindex", t);
  }
  function _r(e, t) {
    Jn(e, "colspan", t);
  }
  function vr(e, t) {
    Jn(e, "sort", t);
  }
  function br(e) {
    $n(e, "sort");
  }
  function yr(e, t) {
    if (t) {
      Jn(e, "selected", t);
    } else {
      $n(e, "selected");
    }
  }
  function Er(e, t) {
    Jn(e, "checked", undefined === t ? "mixed" : t);
  }
  var Or = Object.freeze({
    __proto__: null,
    getAriaSortState: tr,
    getAriaLevel: function (e) {
      return parseInt(e.getAttribute("aria-level"), 10);
    },
    getAriaPosInSet: nr,
    getAriaDescribedBy: rr,
    setAriaLabel: or,
    setAriaLabelledBy: ir,
    setAriaDescribedBy: ar,
    setAriaLevel: function (e, t) {
      Jn(e, "level", t);
    },
    setAriaDisabled: sr,
    setAriaExpanded: cr,
    removeAriaExpanded: lr,
    setAriaSetSize: ur,
    setAriaPosInSet: dr,
    setAriaMultiSelectable: pr,
    setAriaRowCount: fr,
    setAriaRowIndex: hr,
    setAriaColCount: mr,
    setAriaColIndex: gr,
    setAriaColSpan: _r,
    setAriaSort: vr,
    removeAriaSort: br,
    setAriaSelected: yr,
    setAriaChecked: Er
  });
  function wr(e, t, n) {
    if (undefined === t) {
      t = true;
    }
    if (undefined === n) {
      n = "-";
    }
    if (!e) {
      return null;
    }
    var r = [e.getFullYear(), e.getMonth() + 1, e.getDate()].map(function (e) {
      return pt(e, 2);
    }).join(n);
    if (t) {
      r += " " + [e.getHours(), e.getMinutes(), e.getSeconds()].map(function (e) {
        return pt(e, 2);
      }).join(":");
    }
    return r;
  }
  function Cr(e) {
    if (!e) {
      return null;
    }
    var t = e.split(" ");
    var n = t[0];
    var r = t[1];
    if (!n) {
      return null;
    }
    var o = n.split("-").map(function (e) {
      return parseInt(e, 10);
    });
    if (3 !== o.filter(function (e) {
      return !isNaN(e);
    }).length) {
      return null;
    }
    var i = o[0];
    var a = o[1];
    var s = o[2];
    var c = new Date(i, a - 1, s);
    if (c.getFullYear() !== i || c.getMonth() !== a - 1 || c.getDate() !== s) {
      return null;
    }
    if (!r || "00:00:00" === r) {
      return c;
    }
    var l = r.split(":").map(function (e) {
      return parseInt(e, 10);
    });
    var u = l[0];
    var d = l[1];
    var p = l[2];
    if (u >= 0 && u < 24) {
      c.setHours(u);
    }
    if (d >= 0 && d < 60) {
      c.setMinutes(d);
    }
    if (p >= 0 && p < 60) {
      c.setSeconds(p);
    }
    return c;
  }
  var Tr = Object.freeze({
    __proto__: null,
    serialiseDate: wr,
    parseDateTimeFromString: Cr
  });
  function Sr(e, t, n) {
    var r = {};
    var o = e.filter(function (e) {
      return !t.some(function (t) {
        return t === e;
      });
    });
    if (o.length > 0) {
      o.forEach(function (e) {
        return r[e] = Ir(e, n);
      });
    }
    return r;
  }
  function Ir(e, t, n, r) {
    var o = r ? Nr : jr;
    var i = t.map(function (t) {
      return {
        value: t,
        relevance: o(e.toLowerCase(), t.toLocaleLowerCase())
      };
    });
    i.sort(function (e, t) {
      return t.relevance - e.relevance;
    });
    if (n) {
      i = i.filter(function (e) {
        return 0 !== e.relevance;
      });
    }
    return i.map(function (e) {
      return e.value;
    });
  }
  function Ar(e) {
    var t;
    var n;
    var r;
    var o = e.toLowerCase();
    var i = new Array(o.length - 1);
    for (t = n = 0, r = i.length; n <= r; t = n += 1) {
      i[t] = o.slice(t, t + 2);
    }
    return i;
  }
  function jr(e, t) {
    if (0 === e.length && 0 === t.length) {
      return 0;
    }
    var n;
    var r;
    var o = Ar(e);
    var i = Ar(t);
    var a = o.length + i.length;
    var s = 0;
    for (n = 0, r = o.length; n < r; n++) {
      var c;
      var l = o[n];
      var u = undefined;
      for (u = 0, c = i.length; u < c; u++) {
        if (l === i[u]) {
          s++;
        }
      }
    }
    return s > 0 ? 2 * s / a : 0;
  }
  function Nr(e, t) {
    for (var n = e.replace(/\s/g, ""), r = t.replace(/\s/g, ""), o = 0, i = 0, a = 0; a < n.length; a++) {
      var s = r.indexOf(n[a], i);
      if (-1 !== s) {
        o += 100 - 100 * (i = s) / 1e4 * 100;
      }
    }
    return o;
  }
  var Rr = Object.freeze({
    __proto__: null,
    fuzzyCheckStrings: Sr,
    fuzzySuggestions: Ir,
    get_bigrams: Ar,
    string_distances: jr,
    string_weighted_distances: Nr
  });
  var kr = {
    columnGroupOpened: "expanded",
    columnGroupClosed: "contracted",
    columnSelectClosed: "tree-closed",
    columnSelectOpen: "tree-open",
    columnSelectIndeterminate: "tree-indeterminate",
    columnMovePin: "pin",
    columnMoveHide: "eye-slash",
    columnMoveMove: "arrows",
    columnMoveLeft: "left",
    columnMoveRight: "right",
    columnMoveGroup: "group",
    columnMoveValue: "aggregation",
    columnMovePivot: "pivot",
    dropNotAllowed: "not-allowed",
    groupContracted: "tree-closed",
    groupExpanded: "tree-open",
    chart: "chart",
    close: "cross",
    cancel: "cancel",
    check: "tick",
    first: "first",
    previous: "previous",
    next: "next",
    last: "last",
    linked: "linked",
    unlinked: "unlinked",
    colorPicker: "color-picker",
    groupLoading: "loading",
    menu: "menu",
    filter: "filter",
    columns: "columns",
    maximize: "maximize",
    minimize: "minimize",
    menuPin: "pin",
    menuValue: "aggregation",
    menuAddRowGroup: "group",
    menuRemoveRowGroup: "group",
    clipboardCopy: "copy",
    clipboardPaste: "paste",
    pivotPanel: "pivot",
    rowGroupPanel: "group",
    valuePanel: "aggregation",
    columnDrag: "grip",
    rowDrag: "grip",
    save: "save",
    csvExport: "csv",
    excelExport: "excel",
    smallDown: "small-down",
    smallLeft: "small-left",
    smallRight: "small-right",
    smallUp: "small-up",
    sortAscending: "asc",
    sortDescending: "desc",
    sortUnSort: "none"
  };
  function xr(e, t, n) {
    var r = Dr(e, t, n);
    if (r && r.className.indexOf("ag-icon") > -1) {
      return r;
    }
    var o = document.createElement("span");
    o.appendChild(r);
    return o;
  }
  function Dr(e, t, n, r) {
    var o = null;
    var i = n && n.getColDef().icons;
    if (i) {
      o = i[e];
    }
    if (t && !o) {
      var a = t.getIcons();
      if (a) {
        o = a[e];
      }
    }
    if (!o) {
      var s = document.createElement("span");
      var c = kr[e];
      if (!c) {
        if (r) {
          c = e;
        } else {
          console.warn("AG Grid: Did not find icon " + e);
          c = "";
        }
      }
      s.setAttribute("class", "ag-icon ag-icon-" + c);
      s.setAttribute("unselectable", "on");
      s.setAttribute("role", "presentation");
      return s;
    }
    var l = undefined;
    if ("function" === typeof o) {
      l = o();
    } else {
      if ("string" !== typeof o) {
        throw new Error("icon from grid options needs to be a string or a function");
      }
      l = o;
    }
    return "string" === typeof l ? _n(l) : kn(l) ? l : void console.warn("AG Grid: iconRenderer should return back a string or a dom object");
  }
  var Mr = Object.freeze({
    __proto__: null,
    iconNameClassMap: kr,
    createIcon: xr,
    createIconNoSpan: Dr
  });
  function Lr(e, t) {
    return (e.which || e.keyCode) === t;
  }
  function Pr(e) {
    if (e.altKey || e.ctrlKey || e.metaKey) {
      return false;
    }
    var t = 1 === e.key.length;
    var n = function (e) {
      return (Lt() || Mt()) && "Del" === e.key && 46 === e.charCode;
    }(e);
    return t || n;
  }
  function Br(e, t, n, r, o) {
    var i = e.getSuppressKeyboardEventFunc();
    var a = r ? r.getColDef().suppressKeyboardEvent : undefined;
    if (!i && !a) {
      return false;
    }
    var s = {
      event: t,
      editing: o,
      column: r,
      api: e.getApi(),
      node: n,
      data: n.data,
      colDef: r.getColDef(),
      context: e.getContext(),
      columnApi: e.getColumnApi()
    };
    if (a && a(s)) {
      return true;
    }
    return !!i && i(s);
  }
  function Fr(e, t, n, o) {
    var i = o.getDefinition();
    var a = i && i.suppressHeaderKeyboardEvent;
    return !!r(a) && !!a({
      api: e.getApi(),
      columnApi: e.getColumnApi(),
      context: e.getContext(),
      colDef: i,
      column: o,
      headerRowIndex: n,
      event: t
    });
  }
  var Gr = Object.freeze({
    __proto__: null,
    isKeyPressed: Lr,
    isEventFromPrintableCharacter: Pr,
    isUserSuppressingKeyboardEvent: Br,
    isUserSuppressingHeaderKeyboardEvent: Fr
  });
  function Ur(e, t, n) {
    if (0 === n) {
      return false;
    }
    var r = Math.abs(e.clientX - t.clientX);
    var o = Math.abs(e.clientY - t.clientY);
    return Math.max(r, o) <= n;
  }
  var Wr = Object.freeze({
    __proto__: null,
    normalizeWheel: function (e) {
      var t = 0;
      var n = 0;
      var r = 0;
      var o = 0;
      if ("detail" in e) {
        n = e.detail;
      }
      if ("wheelDelta" in e) {
        n = -e.wheelDelta / 120;
      }
      if ("wheelDeltaY" in e) {
        n = -e.wheelDeltaY / 120;
      }
      if ("wheelDeltaX" in e) {
        t = -e.wheelDeltaX / 120;
      }
      if ("axis" in e && e.axis === e.HORIZONTAL_AXIS) {
        t = n;
        n = 0;
      }
      r = 10 * t;
      o = 10 * n;
      if ("deltaY" in e) {
        o = e.deltaY;
      }
      if ("deltaX" in e) {
        r = e.deltaX;
      }
      if ((r || o) && e.deltaMode) {
        if (1 == e.deltaMode) {
          r *= 40;
          o *= 40;
        } else {
          r *= 800;
          o *= 800;
        }
      }
      if (r && !t) {
        t = r < 1 ? -1 : 1;
      }
      if (o && !n) {
        n = o < 1 ? -1 : 1;
      }
      return {
        spinX: t,
        spinY: n,
        pixelX: r,
        pixelY: o
      };
    },
    isLeftClick: function (e) {
      return "buttons" in e ? 1 == e.buttons : 1 == (e.which || e.button);
    },
    areEventsNear: Ur
  });
  var Hr = Object.freeze({
    __proto__: null,
    sortRowNodesByOrder: function (e, t) {
      if (e) {
        for (var n = function (e, n) {
            var r = t[e.id];
            var o = t[n.id];
            var i = undefined !== r;
            var a = undefined !== o;
            return i && a ? r - o : !i && !a ? e.__objectId - n.__objectId : i ? 1 : -1;
          }, r = false, o = 0; o < e.length - 1; o++) {
          if (n(e[o], e[o + 1]) > 0) {
            r = true;
            break;
          }
        }
        if (r) {
          e.sort(n);
        }
      }
    },
    traverseNodesWithKey: function (e, t) {
      var n = [];
      !function e(r) {
        if (!r) {
          return;
        }
        r.forEach(function (r) {
          if (r.group || r.hasChildren()) {
            n.push(r.key);
            var o = n.join("|");
            t(r, o);
            e(r.childrenAfterGroup);
            n.pop();
          }
        });
      }(e);
    }
  });
  function Vr(e) {
    var t = new Set();
    e.forEach(function (e) {
      return t.add(e);
    });
    return t;
  }
  var zr;
  var Yr = Object.freeze({
    __proto__: null,
    convertToSet: Vr
  });
  var Kr = function () {
    return (Kr = Object.assign || function (e) {
      for (var t, n = 1, r = arguments.length; n < r; n++) {
        for (var o in t = arguments[n]) if (Object.prototype.hasOwnProperty.call(t, o)) {
          e[o] = t[o];
        }
      }
      return e;
    }).apply(this, arguments);
  };
  var qr = Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr(Kr({}, Zn), Or), N), Xt), qn), Tr), Pn), Ge), ae), Rr), p), Mr), Gr), st), Wr), Tt), z), Hr), Yr), it);
  var Xr = function () {
    function e(e, t) {
      if (undefined === e) {
        e = 0;
      }
      if (undefined === t) {
        t = 1;
      }
      this.nextValue = e;
      this.step = t;
    }
    e.prototype.next = function () {
      var e = this.nextValue;
      this.nextValue += this.step;
      return e;
    };
    e.prototype.peek = function () {
      return this.nextValue;
    };
    e.prototype.skip = function (e) {
      this.nextValue += e;
    };
    return e;
  }();
  (zr = exports.AgPromiseStatus || (exports.AgPromiseStatus = {}))[zr.IN_PROGRESS = 0] = "IN_PROGRESS";
  zr[zr.RESOLVED = 1] = "RESOLVED";
  var Qr;
  var Zr = function () {
    function e(e) {
      var n = this;
      this.status = exports.AgPromiseStatus.IN_PROGRESS;
      this.resolution = null;
      this.waiters = [];
      e(function (e) {
        return n.onDone(e);
      }, function (e) {
        return n.onReject(e);
      });
    }
    e.all = function (t) {
      return new e(function (e) {
        var n = t.length;
        var r = new Array(n);
        I(t, function (t, o) {
          t.then(function (t) {
            r[o] = t;
            if (0 === --n) {
              e(r);
            }
          });
        });
      });
    };
    e.resolve = function (t) {
      if (undefined === t) {
        t = null;
      }
      return new e(function (e) {
        return e(t);
      });
    };
    e.prototype.then = function (n) {
      var r = this;
      return new e(function (e) {
        if (r.status === exports.AgPromiseStatus.RESOLVED) {
          e(n(r.resolution));
        } else {
          r.waiters.push(function (t) {
            return e(n(t));
          });
        }
      });
    };
    e.prototype.resolveNow = function (e, n) {
      return this.status === exports.AgPromiseStatus.RESOLVED ? n(this.resolution) : e;
    };
    e.prototype.onDone = function (e) {
      this.status = exports.AgPromiseStatus.RESOLVED;
      this.resolution = e;
      I(this.waiters, function (t) {
        return t(e);
      });
    };
    e.prototype.onReject = function (e) {
      console.warn("TBI");
    };
    return e;
  }();
  var Jr = function () {
    function e() {
      this.timestamp = new Date().getTime();
    }
    e.prototype.print = function (e) {
      var t = new Date().getTime() - this.timestamp;
      console.info(e + " = " + t);
      this.timestamp = new Date().getTime();
    };
    return e;
  }();
  var $r = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var eo = function () {
    return (eo = Object.assign || function (e) {
      for (var t, n = 1, r = arguments.length; n < r; n++) {
        for (var o in t = arguments[n]) if (Object.prototype.hasOwnProperty.call(t, o)) {
          e[o] = t[o];
        }
      }
      return e;
    }).apply(this, arguments);
  };
  var to = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  !function (e) {
    e[e.NOTHING = 0] = "NOTHING";
    e[e.WAITING_TO_SHOW = 1] = "WAITING_TO_SHOW";
    e[e.SHOWING = 2] = "SHOWING";
  }(Qr || (Qr = {}));
  var no;
  var ro = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.DEFAULT_HIDE_TOOLTIP_TIMEOUT = 1e4;
      n.SHOW_QUICK_TOOLTIP_DIFF = 1e3;
      n.FADE_OUT_TOOLTIP_TIMEOUT = 1e3;
      n.state = Qr.NOTHING;
      n.tooltipInstanceCount = 0;
      n.tooltipMouseTrack = false;
      n.parentComp = t;
      return n;
    }
    $r(t, e);
    t.prototype.postConstruct = function () {
      this.tooltipShowDelay = this.gridOptionsWrapper.getTooltipShowDelay() || 2e3;
      this.tooltipMouseTrack = this.gridOptionsWrapper.isTooltipMouseTrack();
      var e = this.parentComp.getGui();
      this.addManagedListener(e, "mouseenter", this.onMouseEnter.bind(this));
      this.addManagedListener(e, "mouseleave", this.onMouseLeave.bind(this));
      this.addManagedListener(e, "mousemove", this.onMouseMove.bind(this));
      this.addManagedListener(e, "mousedown", this.onMouseDown.bind(this));
      this.addManagedListener(e, "keydown", this.onKeyDown.bind(this));
    };
    t.prototype.destroy = function () {
      this.setToDoNothing();
      e.prototype.destroy.call(this);
    };
    t.prototype.onMouseEnter = function (e) {
      if (this.state == Qr.NOTHING) {
        var t = this.isLastTooltipHiddenRecently() ? 200 : this.tooltipShowDelay;
        this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), t);
        this.lastMouseEvent = e;
        this.state = Qr.WAITING_TO_SHOW;
      }
    };
    t.prototype.onMouseLeave = function () {
      this.setToDoNothing();
    };
    t.prototype.onKeyDown = function () {
      this.setToDoNothing();
    };
    t.prototype.setToDoNothing = function () {
      if (this.state === Qr.SHOWING) {
        this.hideTooltip();
      }
      this.clearTimeouts();
      this.state = Qr.NOTHING;
    };
    t.prototype.onMouseMove = function (e) {
      this.lastMouseEvent = e;
      if (this.tooltipMouseTrack && this.state === Qr.SHOWING && this.tooltipComp) {
        this.positionTooltipUnderLastMouseEvent();
      }
    };
    t.prototype.onMouseDown = function () {
      this.setToDoNothing();
    };
    t.prototype.hideTooltip = function () {
      if (this.tooltipComp) {
        this.destroyTooltipComp();
        t.lastTooltipHideTime = new Date().getTime();
      }
      this.state = Qr.NOTHING;
    };
    t.prototype.destroyTooltipComp = function () {
      var e = this;
      Qt(this.tooltipComp.getGui(), "ag-tooltip-hiding");
      var t = this.tooltipPopupDestroyFunc;
      var n = this.tooltipComp;
      window.setTimeout(function () {
        t();
        e.getContext().destroyBean(n);
      }, this.FADE_OUT_TOOLTIP_TIMEOUT);
      this.tooltipPopupDestroyFunc = undefined;
      this.tooltipComp = undefined;
    };
    t.prototype.isLastTooltipHiddenRecently = function () {
      return new Date().getTime() - t.lastTooltipHideTime < this.SHOW_QUICK_TOOLTIP_DIFF;
    };
    t.prototype.showTooltip = function () {
      var e = eo({
        api: this.gridApi,
        columnApi: this.columnApi,
        context: this.gridOptionsWrapper.getContext()
      }, this.parentComp.getTooltipParams());
      if (r(e.value)) {
        this.state = Qr.SHOWING;
        this.tooltipInstanceCount++;
        var t = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);
        this.userComponentFactory.newTooltipComponent(e).then(t);
      } else {
        this.setToDoNothing();
      }
    };
    t.prototype.newTooltipComponentCallback = function (e, t) {
      if (this.state !== Qr.SHOWING || this.tooltipInstanceCount !== e) {
        this.getContext().destroyBean(t);
      } else {
        var n = t.getGui();
        this.tooltipComp = t;
        if (!$t(n, "ag-tooltip")) {
          Qt(n, "ag-tooltip-custom");
        }
        var r = this.popupService.addPopup({
          eChild: n
        });
        if (r) {
          this.tooltipPopupDestroyFunc = r.hideFunc;
        }
        this.positionTooltipUnderLastMouseEvent();
        this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.DEFAULT_HIDE_TOOLTIP_TIMEOUT);
      }
    };
    t.prototype.positionTooltipUnderLastMouseEvent = function () {
      this.popupService.positionPopupUnderMouseEvent({
        type: "tooltip",
        mouseEvent: this.lastMouseEvent,
        ePopup: this.tooltipComp.getGui(),
        nudgeY: 18
      });
    };
    t.prototype.clearTimeouts = function () {
      if (this.showTooltipTimeoutId) {
        window.clearTimeout(this.showTooltipTimeoutId);
        this.showTooltipTimeoutId = undefined;
      }
      if (this.hideTooltipTimeoutId) {
        window.clearTimeout(this.hideTooltipTimeoutId);
        this.hideTooltipTimeoutId = undefined;
      }
    };
    to([pe("popupService")], t.prototype, "popupService", undefined);
    to([pe("userComponentFactory")], t.prototype, "userComponentFactory", undefined);
    to([pe("columnApi")], t.prototype, "columnApi", undefined);
    to([pe("gridApi")], t.prototype, "gridApi", undefined);
    to([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var oo = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var io = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var ao = new Xr();
  var so = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.annotatedGuiListeners = [];
      n.displayed = true;
      n.visible = true;
      n.compId = ao.next();
      n.cssClassStates = {};
      if (t) {
        n.setTemplate(t);
      }
      return n;
    }
    oo(t, e);
    t.prototype.preConstructOnComponent = function () {
      this.usingBrowserTooltips = this.gridOptionsWrapper.isEnableBrowserTooltips();
    };
    t.prototype.getCompId = function () {
      return this.compId;
    };
    t.prototype.getTooltipParams = function () {
      return {
        value: this.tooltipText,
        location: "UNKNOWN"
      };
    };
    t.prototype.setTooltip = function (e) {
      var t = this;
      if (this.tooltipText != e) {
        if (this.tooltipText) {
          if (t.usingBrowserTooltips) {
            t.getGui().removeAttribute("title");
          } else {
            t.tooltipFeature = t.destroyBean(t.tooltipFeature);
          }
        }
        if (null != e) {
          this.tooltipText = e;
          if (this.tooltipText) {
            if (t.usingBrowserTooltips) {
              t.getGui().setAttribute("title", t.tooltipText);
            } else {
              t.tooltipFeature = t.createBean(new ro(t));
            }
          }
        }
      }
    };
    t.prototype.createChildComponentsFromTags = function (e, t) {
      var n = this;
      I(xn(e.childNodes), function (r) {
        if (r instanceof HTMLElement) {
          var o = n.createComponentFromElement(r, function (e) {
            n.copyAttributesFromNode(r, e.getGui());
          }, t);
          if (o) {
            if (o.addItems && r.children.length) {
              n.createChildComponentsFromTags(r, t);
              var i = Array.prototype.slice.call(r.children);
              o.addItems(i);
            }
            n.swapComponentForNode(o, e, r);
          } else if (r.childNodes) {
            n.createChildComponentsFromTags(r, t);
          }
        }
      });
    };
    t.prototype.createComponentFromElement = function (e, t, n) {
      var r = e.nodeName;
      var o = n ? n[e.getAttribute("ref")] : undefined;
      var i = this.agStackComponentsRegistry.getComponentClass(r);
      if (i) {
        no = e;
        var a = new i(o);
        a.setParentComponent(this);
        this.createBean(a, null, t);
        return a;
      }
      return null;
    };
    t.prototype.copyAttributesFromNode = function (e, t) {
      Dn(e.attributes, function (e, n) {
        return t.setAttribute(e, n);
      });
    };
    t.prototype.swapComponentForNode = function (e, t, n) {
      var r = e.getGui();
      t.replaceChild(r, n);
      t.insertBefore(document.createComment(n.nodeName), r);
      this.addDestroyFunc(this.destroyBean.bind(this, e));
      this.swapInComponentForQuerySelectors(e, n);
    };
    t.prototype.swapInComponentForQuerySelectors = function (e, t) {
      var n = this;
      this.iterateOverQuerySelectors(function (r) {
        if (n[r.attributeName] === t) {
          n[r.attributeName] = e;
        }
      });
    };
    t.prototype.iterateOverQuerySelectors = function (e) {
      for (var t = Object.getPrototypeOf(this); null != t;) {
        var n = t.__agComponentMetaData;
        var r = Q(t.constructor);
        if (n && n[r] && n[r].querySelectors) {
          I(n[r].querySelectors, function (t) {
            return e(t);
          });
        }
        t = Object.getPrototypeOf(t);
      }
    };
    t.prototype.setTemplate = function (e, t) {
      var n = _n(e);
      this.setTemplateFromElement(n, t);
    };
    t.prototype.setTemplateFromElement = function (e, t) {
      this.eGui = e;
      this.eGui.__agComponent = this;
      this.addAnnotatedGuiEventListeners();
      this.wireQuerySelectors();
      if (this.getContext()) {
        this.createChildComponentsFromTags(this.getGui(), t);
      }
    };
    t.prototype.createChildComponentsPreConstruct = function () {
      if (this.getGui()) {
        this.createChildComponentsFromTags(this.getGui());
      }
    };
    t.prototype.wireQuerySelectors = function () {
      var e = this;
      if (this.eGui) {
        var t = this;
        this.iterateOverQuerySelectors(function (n) {
          var r = function (e) {
            return t[n.attributeName] = e;
          };
          if (n.refSelector && e.eGui.getAttribute("ref") === n.refSelector) {
            r(e.eGui);
          } else {
            var o = e.eGui.querySelector(n.querySelector);
            if (o) {
              r(o.__agComponent || o);
            }
          }
        });
      }
    };
    t.prototype.addAnnotatedGuiEventListeners = function () {
      var e = this;
      this.removeAnnotatedGuiEventListeners();
      if (this.eGui) {
        var t = this.getAgComponentMetaData("guiListenerMethods");
        if (t) {
          if (!this.annotatedGuiListeners) {
            this.annotatedGuiListeners = [];
          }
          t.forEach(function (t) {
            var n = e.getRefElement(t.ref);
            if (n) {
              var r = e[t.methodName].bind(e);
              n.addEventListener(t.eventName, r);
              e.annotatedGuiListeners.push({
                eventName: t.eventName,
                listener: r,
                element: n
              });
            }
          });
        }
      }
    };
    t.prototype.addAnnotatedGridEventListeners = function () {
      var e = this;
      var t = this.getAgComponentMetaData("gridListenerMethods");
      if (t) {
        t.forEach(function (t) {
          var n = e[t.methodName].bind(e);
          e.addManagedListener(e.eventService, t.eventName, n);
        });
      }
    };
    t.prototype.getAgComponentMetaData = function (e) {
      for (var t = [], n = Object.getPrototypeOf(this); null != n;) {
        var r = n.__agComponentMetaData;
        var o = Q(n.constructor);
        if (r && r[o] && r[o][e]) {
          t = t.concat(r[o][e]);
        }
        n = Object.getPrototypeOf(n);
      }
      return t;
    };
    t.prototype.removeAnnotatedGuiEventListeners = function () {
      if (this.annotatedGuiListeners) {
        I(this.annotatedGuiListeners, function (e) {
          e.element.removeEventListener(e.eventName, e.listener);
        });
        this.annotatedGuiListeners = [];
      }
    };
    t.prototype.getGui = function () {
      return this.eGui;
    };
    t.prototype.getFocusableElement = function () {
      return this.eGui;
    };
    t.prototype.setParentComponent = function (e) {
      this.parentComponent = e;
    };
    t.prototype.getParentComponent = function () {
      return this.parentComponent;
    };
    t.prototype.setGui = function (e) {
      this.eGui = e;
    };
    t.prototype.queryForHtmlElement = function (e) {
      return this.eGui.querySelector(e);
    };
    t.prototype.queryForHtmlInputElement = function (e) {
      return this.eGui.querySelector(e);
    };
    t.prototype.appendChild = function (e, t) {
      if (!t) {
        t = this.eGui;
      }
      if (null != e) {
        if (kn(e)) {
          t.appendChild(e);
        } else {
          var n = e;
          t.appendChild(n.getGui());
          this.addDestroyFunc(this.destroyBean.bind(this, n));
        }
      }
    };
    t.prototype.isDisplayed = function () {
      return this.displayed;
    };
    t.prototype.setVisible = function (e) {
      if (e !== this.visible) {
        this.visible = e;
        nn(this.eGui, e);
      }
    };
    t.prototype.setDisplayed = function (e) {
      if (e !== this.displayed) {
        this.displayed = e;
        tn(this.eGui, e);
        var n = {
          type: t.EVENT_DISPLAYED_CHANGED,
          visible: this.displayed
        };
        this.dispatchEvent(n);
      }
    };
    t.prototype.destroy = function () {
      this.removeAnnotatedGuiEventListeners();
      if (this.tooltipFeature) {
        this.tooltipFeature = this.destroyBean(this.tooltipFeature);
      }
      e.prototype.destroy.call(this);
    };
    t.prototype.addGuiEventListener = function (e, t) {
      var n = this;
      this.eGui.addEventListener(e, t);
      this.addDestroyFunc(function () {
        return n.eGui.removeEventListener(e, t);
      });
    };
    t.prototype.addCssClass = function (e) {
      if (true !== this.cssClassStates[e]) {
        Qt(this.eGui, e);
        this.cssClassStates[e] = true;
      }
    };
    t.prototype.removeCssClass = function (e) {
      if (false !== this.cssClassStates[e]) {
        Zt(this.eGui, e);
        this.cssClassStates[e] = false;
      }
    };
    t.prototype.addOrRemoveCssClass = function (e, t) {
      if (this.cssClassStates[e] !== t) {
        Jt(this.eGui, e, t);
        this.cssClassStates[e] = t;
      }
    };
    t.prototype.getAttribute = function (e) {
      var t = this.eGui;
      return t ? t.getAttribute(e) : null;
    };
    t.prototype.getRefElement = function (e) {
      return this.queryForHtmlElement("[ref=\"" + e + "\"]");
    };
    t.EVENT_DISPLAYED_CHANGED = "displayedChanged";
    io([pe("agStackComponentsRegistry")], t.prototype, "agStackComponentsRegistry", undefined);
    io([ce], t.prototype, "preConstructOnComponent", null);
    io([ce], t.prototype, "createChildComponentsPreConstruct", null);
    io([le], t.prototype, "addAnnotatedGridEventListeners", null);
    return t;
  }(We);
  var co = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var lo = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    co(t, e);
    t.prototype.isPopup = function () {
      return true;
    };
    t.prototype.setParentComponent = function (t) {
      Qt(t.getGui(), "ag-has-popup");
      e.prototype.setParentComponent.call(this, t);
    };
    t.prototype.destroy = function () {
      var t = this.parentComponent;
      if (t && t.isAlive()) {
        Zt(t.getGui(), "ag-has-popup");
      }
      e.prototype.destroy.call(this);
    };
    return t;
  }(so);
  function uo(e) {
    return po.bind(this, "[ref=" + e + "]", e);
  }
  function po(e, t, n, r, o) {
    if (null !== e) {
      if ("number" !== typeof o) {
        mo(n, "querySelectors", {
          attributeName: r,
          querySelector: e,
          refSelector: t
        });
      } else {
        console.error("AG Grid: QuerySelector should be on an attribute");
      }
    } else {
      console.error("AG Grid: QuerySelector selector should not be null");
    }
  }
  function fo(e, t, n) {
    if (null != e) {
      mo(t, "gridListenerMethods", {
        methodName: n,
        eventName: e
      });
    } else {
      console.error("AG Grid: GridListener eventName is missing");
    }
  }
  function ho(e, t, n, r) {
    if (null != t) {
      mo(n, "guiListenerMethods", {
        methodName: r,
        eventName: t,
        ref: e
      });
    } else {
      console.error("AG Grid: GuiListener eventName is missing");
    }
  }
  function mo(e, t, n) {
    var r = function (e, t) {
      if (!e.__agComponentMetaData) {
        e.__agComponentMetaData = {};
      }
      if (!e.__agComponentMetaData[t]) {
        e.__agComponentMetaData[t] = {};
      }
      return e.__agComponentMetaData[t];
    }(e, Q(e.constructor));
    if (!r[t]) {
      r[t] = [];
    }
    r[t].push(n);
  }
  var go;
  var _o = function () {
    function e() {}
    e.BACKSPACE = 8;
    e.TAB = 9;
    e.ENTER = 13;
    e.SHIFT = 16;
    e.ESCAPE = 27;
    e.SPACE = 32;
    e.LEFT = 37;
    e.UP = 38;
    e.RIGHT = 39;
    e.DOWN = 40;
    e.DELETE = 46;
    e.A = 65;
    e.C = 67;
    e.V = 86;
    e.D = 68;
    e.Z = 90;
    e.Y = 89;
    e.F2 = 113;
    e.PAGE_UP = 33;
    e.PAGE_DOWN = 34;
    e.PAGE_HOME = 36;
    e.PAGE_END = 35;
    return e;
  }();
  var vo = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var bo = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var yo = function (e) {
    function t() {
      return e.call(this, t.TEMPLATE) || this;
    }
    vo(t, e);
    t.prototype.init = function (e) {
      this.params = e;
      var t;
      var n = this.eInput;
      if (e.cellStartedEdit) {
        this.focusAfterAttached = true;
        if (e.keyPress === _o.BACKSPACE || e.keyPress === _o.DELETE) {
          t = "";
        } else {
          if (e.charPress) {
            t = e.charPress;
          } else {
            t = this.getStartValue(e);
            if (e.keyPress !== _o.F2) {
              this.highlightAllOnFocus = true;
            }
          }
        }
      } else {
        this.focusAfterAttached = false;
        t = this.getStartValue(e);
      }
      if (null != t) {
        n.setValue(t, true);
      }
      this.addManagedListener(n.getGui(), "keydown", function (e) {
        var t = e.keyCode;
        if (!(t !== _o.PAGE_UP && t !== _o.PAGE_DOWN)) {
          e.preventDefault();
        }
      });
    };
    t.prototype.afterGuiAttached = function () {
      var e = this.gridOptionsWrapper.getLocaleTextFunc();
      var t = this.eInput;
      t.setInputAriaLabel(e("ariaInputEditor", "Input Editor"));
      if (this.focusAfterAttached) {
        if (!Pt()) {
          t.getFocusableElement().focus();
        }
        var n = t.getInputElement();
        if (this.highlightAllOnFocus) {
          n.select();
        } else {
          var o = t.getValue();
          var i = r(o) && o.length || 0;
          if (i) {
            n.setSelectionRange(i, i);
          }
        }
      }
    };
    t.prototype.focusIn = function () {
      var e = this.eInput;
      var t = e.getFocusableElement();
      var n = e.getInputElement();
      t.focus();
      n.select();
    };
    t.prototype.focusOut = function () {
      var e = this.eInput.getInputElement();
      if (Mt()) {
        e.setSelectionRange(0, 0);
      }
    };
    t.prototype.getValue = function () {
      var e = this.eInput;
      return this.params.parseValue(e.getValue());
    };
    t.prototype.getStartValue = function (e) {
      return e.useFormatter || e.column.getColDef().refData ? e.formatValue(e.value) : e.value;
    };
    t.prototype.isPopup = function () {
      return false;
    };
    t.TEMPLATE = "<div class=\"ag-cell-edit-wrapper\"><ag-input-text-field class=\"ag-cell-editor\" ref=\"eInput\"></ag-input-text-field></div>";
    bo([uo("eInput")], t.prototype, "eInput", undefined);
    return t;
  }(lo);
  var Eo = function () {
    function e(e, t, n, r) {
      var o = this;
      this.alive = true;
      this.context = e;
      t.newDateComponent(n).then(function (t) {
        if (o.alive) {
          o.dateComp = t;
          if (t) {
            r.appendChild(t.getGui());
            if (t.afterGuiAttached) {
              t.afterGuiAttached();
            }
            if (o.tempValue) {
              t.setDate(o.tempValue);
            }
          }
        } else {
          e.destroyBean(t);
        }
      });
    }
    e.prototype.destroy = function () {
      this.alive = false;
      this.dateComp = this.context.destroyBean(this.dateComp);
    };
    e.prototype.getDate = function () {
      return this.dateComp ? this.dateComp.getDate() : this.tempValue;
    };
    e.prototype.setDate = function (e) {
      if (this.dateComp) {
        this.dateComp.setDate(e);
      } else {
        this.tempValue = e;
      }
    };
    e.prototype.setInputPlaceholder = function (e) {
      if (this.dateComp && this.dateComp.setInputPlaceholder) {
        this.dateComp.setInputPlaceholder(e);
      }
    };
    e.prototype.setInputAriaLabel = function (e) {
      if (this.dateComp && this.dateComp.setInputAriaLabel) {
        this.dateComp.setInputAriaLabel(e);
      }
    };
    e.prototype.afterGuiAttached = function (e) {
      if (this.dateComp && "function" === typeof this.dateComp.afterGuiAttached) {
        this.dateComp.afterGuiAttached(e);
      }
    };
    return e;
  }();
  var Oo = function () {
    function e() {
      this.customFilterOptions = {};
    }
    e.prototype.init = function (e, t) {
      this.filterOptions = e.filterOptions || t;
      this.mapCustomOptions();
      this.selectDefaultItem(e);
    };
    e.prototype.getFilterOptions = function () {
      return this.filterOptions;
    };
    e.prototype.mapCustomOptions = function () {
      var e = this;
      if (this.filterOptions) {
        this.filterOptions.forEach(function (t) {
          if ("string" !== typeof t) {
            if (T(["displayKey", "displayName", "test"], function (e) {
              return !!t[e] || (console.warn("AG Grid: ignoring FilterOptionDef as it doesn't contain a '" + e + "'"), false);
            })) {
              e.customFilterOptions[t.displayKey] = t;
            }
          }
        });
      }
    };
    e.prototype.selectDefaultItem = function (e) {
      if (e.defaultOption) {
        this.defaultOption = e.defaultOption;
      } else if (this.filterOptions.length >= 1) {
        var t = this.filterOptions[0];
        if ("string" === typeof t) {
          this.defaultOption = t;
        } else {
          if (t.displayKey) {
            this.defaultOption = t.displayKey;
          } else {
            console.warn("AG Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'");
          }
        }
      } else {
        console.warn("AG Grid: no filter options for filter");
      }
    };
    e.prototype.getDefaultOption = function () {
      return this.defaultOption;
    };
    e.prototype.getCustomOption = function (e) {
      return this.customFilterOptions[e];
    };
    return e;
  }();
  var wo = {
    applyFilter: "Apply",
    clearFilter: "Clear",
    resetFilter: "Reset",
    cancelFilter: "Cancel",
    textFilter: "Text Filter",
    numberFilter: "Number Filter",
    dateFilter: "Date Filter",
    setFilter: "Set Filter",
    filterOoo: "Filter...",
    empty: "Choose One",
    equals: "Equals",
    notEqual: "Not equal",
    lessThan: "Less than",
    greaterThan: "Greater than",
    inRange: "In range",
    inRangeStart: "From",
    inRangeEnd: "To",
    lessThanOrEqual: "Less than or equals",
    greaterThanOrEqual: "Greater than or equals",
    contains: "Contains",
    notContains: "Not contains",
    startsWith: "Starts with",
    endsWith: "Ends with",
    andCondition: "AND",
    orCondition: "OR",
    dateFormatOoo: "yyyy-mm-dd"
  };
  var Co = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var To = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var So = function (e) {
    function t(t, n) {
      if (undefined === n) {
        n = false;
      }
      var r = e.call(this, t) || this;
      r.isFocusableContainer = n;
      r.skipTabGuardFocus = false;
      return r;
    }
    Co(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      var n = this.getFocusableElement();
      if (n) {
        Qt(n, t.FOCUS_MANAGED_CLASS);
        if (this.isFocusableContainer) {
          this.topTabGuard = this.createTabGuard("top");
          this.bottomTabGuard = this.createTabGuard("bottom");
          this.addTabGuards();
          this.activateTabGuards();
          this.forEachTabGuard(function (t) {
            return e.addManagedListener(t, "focus", e.onFocus.bind(e));
          });
        }
        this.addKeyDownListeners(n);
        this.addManagedListener(n, "focusin", this.onFocusIn.bind(this));
        this.addManagedListener(n, "focusout", this.onFocusOut.bind(this));
      }
    };
    t.prototype.focusInnerElement = function (e) {
      if (undefined === e) {
        e = false;
      }
      var t = this.focusController.findFocusableElements(this.getFocusableElement());
      if (this.isFocusableContainer && this.tabGuardsAreActive()) {
        t.splice(0, 1);
        t.splice(t.length - 1, 1);
      }
      if (t.length) {
        t[e ? t.length - 1 : 0].focus();
      }
    };
    t.prototype.onTabKeyDown = function (e) {
      var t = this;
      if (!e.defaultPrevented) {
        var n = this.tabGuardsAreActive();
        if (this.isFocusableContainer && n) {
          this.deactivateTabGuards();
        }
        var r = this.focusController.findNextFocusableElement(this.getFocusableElement(), false, e.shiftKey);
        if (this.isFocusableContainer && n) {
          setTimeout(function () {
            return t.activateTabGuards();
          }, 0);
        }
        if (r) {
          r.focus();
          e.preventDefault();
        }
      }
    };
    t.prototype.onFocusIn = function (e) {
      if (this.isFocusableContainer) {
        this.deactivateTabGuards();
      }
    };
    t.prototype.onFocusOut = function (e) {
      if (this.isFocusableContainer && !this.getFocusableElement().contains(e.relatedTarget)) {
        this.activateTabGuards();
      }
    };
    t.prototype.forceFocusOutOfContainer = function (e) {
      if (undefined === e) {
        e = false;
      }
      if (this.isFocusableContainer) {
        this.activateTabGuards();
        this.skipTabGuardFocus = true;
        var t = e ? this.topTabGuard : this.bottomTabGuard;
        if (t) {
          t.focus();
        }
      }
    };
    t.prototype.appendChild = function (t, n) {
      if (this.isFocusableContainer) {
        if (!kn(t)) {
          t = t.getGui();
        }
        var r = this.bottomTabGuard;
        if (r) {
          r.insertAdjacentElement("beforebegin", t);
        } else {
          e.prototype.appendChild.call(this, t, n);
        }
      } else {
        e.prototype.appendChild.call(this, t, n);
      }
    };
    t.prototype.createTabGuard = function (e) {
      var t = document.createElement("div");
      t.classList.add("ag-tab-guard");
      t.classList.add("ag-tab-guard-" + e);
      t.setAttribute("role", "presentation");
      return t;
    };
    t.prototype.addTabGuards = function () {
      var e = this.getFocusableElement();
      e.insertAdjacentElement("afterbegin", this.topTabGuard);
      e.insertAdjacentElement("beforeend", this.bottomTabGuard);
    };
    t.prototype.forEachTabGuard = function (e) {
      if (this.topTabGuard) {
        e(this.topTabGuard);
      }
      if (this.bottomTabGuard) {
        e(this.bottomTabGuard);
      }
    };
    t.prototype.addKeyDownListeners = function (e) {
      var t = this;
      this.addManagedListener(e, "keydown", function (e) {
        if (!(e.defaultPrevented || ke(e))) {
          if (t.shouldStopEventPropagation(e)) {
            Re(e);
          } else {
            if (e.keyCode === _o.TAB) {
              t.onTabKeyDown(e);
            } else {
              if (t.handleKeyDown) {
                t.handleKeyDown(e);
              }
            }
          }
        }
      });
    };
    t.prototype.shouldStopEventPropagation = function (e) {
      return false;
    };
    t.prototype.onFocus = function (e) {
      if (this.skipTabGuardFocus) {
        this.skipTabGuardFocus = false;
      } else {
        this.focusInnerElement(e.target === this.bottomTabGuard);
      }
    };
    t.prototype.activateTabGuards = function () {
      var e = this;
      this.forEachTabGuard(function (t) {
        return t.setAttribute("tabIndex", e.gridOptionsWrapper.getGridTabIndex());
      });
    };
    t.prototype.deactivateTabGuards = function () {
      this.forEachTabGuard(function (e) {
        return e.removeAttribute("tabIndex");
      });
    };
    t.prototype.tabGuardsAreActive = function () {
      return !!this.topTabGuard && this.topTabGuard.hasAttribute("tabIndex");
    };
    t.prototype.clearGui = function () {
      var e = this.tabGuardsAreActive();
      hn(this.getFocusableElement());
      if (this.isFocusableContainer) {
        this.addTabGuards();
        if (e) {
          this.activateTabGuards();
        }
      }
    };
    t.FOCUS_MANAGED_CLASS = "ag-focus-managed";
    To([pe("focusController")], t.prototype, "focusController", undefined);
    To([le], t.prototype, "postConstruct", null);
    return t;
  }(so);
  var Io = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ao = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var jo = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.filterNameKey = t;
      n.applyActive = false;
      n.hidePopup = null;
      n.appliedModel = null;
      return n;
    }
    Io(t, e);
    t.prototype.getFilterTitle = function () {
      return this.translate(this.filterNameKey);
    };
    t.prototype.onFilterChanged = function () {
      console.warn("AG Grid: you should not call onFilterChanged() directly on the filter, please call\n        gridApi.onFilterChanged() instead. onFilterChanged is not part of the exposed filter interface (it was\n        a method that existed on an old version of the filters that was not intended for public use.");
      this.providedFilterParams.filterChangedCallback();
    };
    t.prototype.isFilterActive = function () {
      return !!this.appliedModel;
    };
    t.prototype.postConstruct = function () {
      this.resetTemplate();
      e.prototype.postConstruct.call(this);
    };
    t.prototype.resetTemplate = function (e) {
      var t = "\n            <div class=\"ag-filter-wrapper\">\n                <div class=\"ag-filter-body-wrapper ag-" + this.getCssIdentifier() + "-body-wrapper\">\n                    " + this.createBodyTemplate() + "\n                </div>\n            </div>";
      this.setTemplate(t, e);
    };
    t.prototype.init = function (e) {
      var t = this;
      this.setParams(e);
      this.resetUiToDefaults(true).then(function () {
        t.updateUiVisibility();
        t.setupOnBtApplyDebounce();
      });
    };
    t.prototype.setParams = function (e) {
      t.checkForDeprecatedParams(e);
      this.providedFilterParams = e;
      if ("keep" === e.newRowsAction) {
        this.newRowsActionKeep = true;
      } else if ("clear" === e.newRowsAction) {
        this.newRowsActionKeep = false;
      } else {
        var n = [Ee.ROW_MODEL_TYPE_SERVER_SIDE, Ee.ROW_MODEL_TYPE_INFINITE];
        this.newRowsActionKeep = n.indexOf(this.rowModel.getType()) >= 0;
      }
      this.applyActive = t.isUseApplyButton(e);
      this.createButtonPanel();
    };
    t.prototype.createButtonPanel = function () {
      var e = this;
      var t = this.providedFilterParams.buttons;
      if (t && !(t.length < 1)) {
        var n = document.createElement("div");
        Qt(n, "ag-filter-apply-panel");
        Vr(t).forEach(function (t) {
          return function (t) {
            var r;
            var o;
            switch (t) {
              case "apply":
                r = e.translate("applyFilter");
                o = function (t) {
                  return e.onBtApply(false, false, t);
                };
                break;
              case "clear":
                r = e.translate("clearFilter");
                o = function () {
                  return e.onBtClear();
                };
                break;
              case "reset":
                r = e.translate("resetFilter");
                o = function () {
                  return e.onBtReset();
                };
                break;
              case "cancel":
                r = e.translate("cancelFilter");
                o = function (t) {
                  e.onBtCancel(t);
                };
                break;
              default:
                return void console.warn("Unknown button type specified");
            }
            var i = _n("<button\n                    type=\"button\"\n                    ref=\"" + t + "FilterButton\"\n                    class=\"ag-standard-button ag-filter-apply-panel-button\"\n                >" + r + "\n                </button>");
            n.appendChild(i);
            e.addManagedListener(i, "click", o);
          }(t);
        });
        this.getGui().appendChild(n);
      }
    };
    t.checkForDeprecatedParams = function (e) {
      var t = e.buttons || [];
      if (!(t.length > 0)) {
        var n = e.applyButton;
        var r = e.resetButton;
        if (e.clearButton) {
          console.warn("AG Grid: as of AG Grid v23.2, filterParams.clearButton is deprecated. Please use filterParams.buttons instead");
          t.push("clear");
        }
        if (r) {
          console.warn("AG Grid: as of AG Grid v23.2, filterParams.resetButton is deprecated. Please use filterParams.buttons instead");
          t.push("reset");
        }
        if (n) {
          console.warn("AG Grid: as of AG Grid v23.2, filterParams.applyButton is deprecated. Please use filterParams.buttons instead");
          t.push("apply");
        }
        if (e.apply) {
          console.warn("AG Grid: as of AG Grid v21, filterParams.apply is deprecated. Please use filterParams.buttons instead");
          t.push("apply");
        }
        e.buttons = t;
      }
    };
    t.prototype.getDefaultDebounceMs = function () {
      return 0;
    };
    t.prototype.setupOnBtApplyDebounce = function () {
      var e = t.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());
      this.onBtApplyDebounce = re(this.onBtApply.bind(this), e);
    };
    t.prototype.getModel = function () {
      return this.appliedModel;
    };
    t.prototype.setModel = function (e) {
      var t = this;
      return (e ? this.setModelIntoUi(e) : this.resetUiToDefaults()).then(function () {
        t.updateUiVisibility();
        t.applyModel();
      });
    };
    t.prototype.onBtCancel = function (e) {
      var t = this;
      var n = this.getModel();
      var r = function () {
        t.onUiChanged(false, "prevent");
        if (t.providedFilterParams.closeOnApply) {
          t.close(e);
        }
      };
      if (null != n) {
        this.setModelIntoUi(n).then(r);
      } else {
        this.resetUiToDefaults().then(r);
      }
    };
    t.prototype.onBtClear = function () {
      var e = this;
      this.resetUiToDefaults().then(function () {
        return e.onUiChanged();
      });
    };
    t.prototype.onBtReset = function () {
      this.onBtClear();
      this.onBtApply();
    };
    t.prototype.applyModel = function () {
      var e = this.getModelFromUi();
      if (!this.isModelValid(e)) {
        return false;
      }
      var t = this.appliedModel;
      this.appliedModel = e;
      return !this.areModelsEqual(t, e);
    };
    t.prototype.isModelValid = function (e) {
      return true;
    };
    t.prototype.onBtApply = function (e, t, n) {
      if (undefined === e) {
        e = false;
      }
      if (undefined === t) {
        t = false;
      }
      if (this.applyModel()) {
        this.providedFilterParams.filterChangedCallback({
          afterFloatingFilter: e,
          afterDataChange: t
        });
      }
      if (this.providedFilterParams.closeOnApply && this.applyActive && !e && !t) {
        this.close(n);
      }
    };
    t.prototype.onNewRowsLoaded = function () {
      var e = this;
      if (!this.newRowsActionKeep) {
        this.resetUiToDefaults().then(function () {
          return e.appliedModel = null;
        });
      }
    };
    t.prototype.close = function (e) {
      if (this.hidePopup) {
        var t;
        var n = e;
        var r = n && n.key;
        if (!("Enter" !== r && "Space" !== r)) {
          t = {
            keyboardEvent: n
          };
        }
        this.hidePopup(t);
        this.hidePopup = null;
      }
    };
    t.prototype.isNewRowsActionKeep = function () {
      return this.newRowsActionKeep;
    };
    t.prototype.onUiChanged = function (e, t) {
      if (undefined === e) {
        e = false;
      }
      this.updateUiVisibility();
      this.providedFilterParams.filterModifiedCallback();
      if (this.applyActive) {
        var n = this.isModelValid(this.getModelFromUi());
        rn(this.getRefElement("applyFilterButton"), !n);
      }
      if (e && !t || "immediately" === t) {
        this.onBtApply(e);
      } else {
        if (!((this.applyActive || t) && "debounce" !== t)) {
          this.onBtApplyDebounce();
        }
      }
    };
    t.prototype.afterGuiAttached = function (e) {
      if (null != e) {
        this.hidePopup = e.hidePopup;
      }
    };
    t.getDebounceMs = function (e, n) {
      return t.isUseApplyButton(e) ? (null != e.debounceMs && console.warn("AG Grid: debounceMs is ignored when apply button is present"), 0) : null != e.debounceMs ? e.debounceMs : n;
    };
    t.isUseApplyButton = function (e) {
      t.checkForDeprecatedParams(e);
      return !!e.buttons && e.buttons.indexOf("apply") >= 0;
    };
    t.prototype.destroy = function () {
      this.hidePopup = null;
      e.prototype.destroy.call(this);
    };
    t.prototype.translate = function (e) {
      return this.gridOptionsWrapper.getLocaleTextFunc()(e, wo[e]);
    };
    Ao([pe("rowModel")], t.prototype, "rowModel", undefined);
    Ao([le], t.prototype, "postConstruct", null);
    return t;
  }(So);
  var No = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ro = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  !function (e) {
    e[e.One = 0] = "One";
    e[e.Two = 1] = "Two";
  }(go || (go = {}));
  var ko;
  var xo = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    No(t, e);
    t.prototype.showValueFrom = function (e) {
      return !this.doesFilterHaveHiddenInput(e) && e !== t.EMPTY;
    };
    t.prototype.showValueTo = function (e) {
      return e === t.IN_RANGE;
    };
    t.prototype.onFloatingFilterChanged = function (e, t) {
      this.setTypeFromFloatingFilter(e);
      this.setValueFromFloatingFilter(t);
      this.onUiChanged(true);
    };
    t.prototype.setTypeFromFloatingFilter = function (e) {
      this.eType1.setValue(e);
      this.eType2.setValue(this.optionsFactory.getDefaultOption());
      (this.isDefaultOperator("AND") ? this.eJoinOperatorAnd : this.eJoinOperatorOr).setValue(true);
    };
    t.prototype.getModelFromUi = function () {
      return this.isConditionUiComplete(go.One) ? this.isAllowTwoConditions() && this.isConditionUiComplete(go.Two) ? {
        filterType: this.getFilterType(),
        operator: this.getJoinOperator(),
        condition1: this.createCondition(go.One),
        condition2: this.createCondition(go.Two)
      } : this.createCondition(go.One) : null;
    };
    t.prototype.getCondition1Type = function () {
      return this.eType1.getValue();
    };
    t.prototype.getCondition2Type = function () {
      return this.eType2.getValue();
    };
    t.prototype.getJoinOperator = function () {
      return true === this.eJoinOperatorOr.getValue() ? "OR" : "AND";
    };
    t.prototype.areModelsEqual = function (e, t) {
      if (!e && !t) {
        return true;
      }
      if (!e && t || e && !t) {
        return false;
      }
      var n;
      var r = !e.operator;
      var o = !t.operator;
      if (!r && o || r && !o) {
        return false;
      }
      if (r) {
        var i = e;
        var a = t;
        n = this.areSimpleModelsEqual(i, a);
      } else {
        var s = e;
        var c = t;
        n = s.operator === c.operator && this.areSimpleModelsEqual(s.condition1, c.condition1) && this.areSimpleModelsEqual(s.condition2, c.condition2);
      }
      return n;
    };
    t.prototype.setModelIntoUi = function (e) {
      if (e.operator) {
        var t = e;
        var n = "OR" === t.operator;
        this.eJoinOperatorAnd.setValue(!n);
        this.eJoinOperatorOr.setValue(n);
        this.eType1.setValue(t.condition1.type);
        this.eType2.setValue(t.condition2.type);
        this.setConditionIntoUi(t.condition1, go.One);
        this.setConditionIntoUi(t.condition2, go.Two);
      } else {
        var r = e;
        this.eJoinOperatorAnd.setValue(this.isDefaultOperator("AND"));
        this.eJoinOperatorOr.setValue(this.isDefaultOperator("OR"));
        this.eType1.setValue(r.type);
        this.eType2.setValue(this.optionsFactory.getDefaultOption());
        this.setConditionIntoUi(r, go.One);
        this.setConditionIntoUi(null, go.Two);
      }
      return Zr.resolve();
    };
    t.prototype.doesFilterPass = function (e) {
      var t = this;
      var n = this.getModel();
      if (null == n) {
        return true;
      }
      var r = n.operator;
      var o = [];
      if (r) {
        var i = n;
        o.push(i.condition1, i.condition2);
      } else {
        o.push(n);
      }
      return (r && "OR" === r ? S : T)(o, function (n) {
        return t.individualConditionPasses(e, n);
      });
    };
    t.prototype.setParams = function (t) {
      e.prototype.setParams.call(this, t);
      this.optionsFactory = new Oo();
      this.optionsFactory.init(t, this.getDefaultFilterOptions());
      this.allowTwoConditions = !t.suppressAndOrCondition;
      this.alwaysShowBothConditions = !!t.alwaysShowBothConditions;
      this.defaultJoinOperator = this.getDefaultJoinOperator(t.defaultJoinOperator);
      this.putOptionsIntoDropdown();
      this.addChangedListeners();
    };
    t.prototype.getDefaultJoinOperator = function (e) {
      return O(["AND", "OR"], e) ? e : "AND";
    };
    t.prototype.putOptionsIntoDropdown = function () {
      var e = this;
      var t = this.optionsFactory.getFilterOptions();
      I(t, function (t) {
        var n;
        var r;
        if ("string" === typeof t) {
          n = t;
          r = e.translate(n);
        } else {
          n = t.displayKey;
          var o = e.optionsFactory.getCustomOption(n);
          r = o ? e.gridOptionsWrapper.getLocaleTextFunc()(o.displayKey, o.displayName) : e.translate(n);
        }
        var i = function () {
          return {
            value: n,
            text: r
          };
        };
        e.eType1.addOption(i());
        e.eType2.addOption(i());
      });
      var n = t.length <= 1;
      this.eType1.setDisabled(n);
      this.eType2.setDisabled(n);
    };
    t.prototype.isAllowTwoConditions = function () {
      return this.allowTwoConditions;
    };
    t.prototype.createBodyTemplate = function () {
      return "\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions1\"></ag-select>\n            " + this.createValueTemplate(go.One) + "\n            <div class=\"ag-filter-condition\" ref=\"eJoinOperatorPanel\">\n               <ag-radio-button ref=\"eJoinOperatorAnd\" class=\"ag-filter-condition-operator ag-filter-condition-operator-and\"></ag-radio-button>\n               <ag-radio-button ref=\"eJoinOperatorOr\" class=\"ag-filter-condition-operator ag-filter-condition-operator-or\"></ag-radio-button>\n            </div>\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions2\"></ag-select>\n            " + this.createValueTemplate(go.Two);
    };
    t.prototype.getCssIdentifier = function () {
      return "simple-filter";
    };
    t.prototype.updateUiVisibility = function () {
      var e = this.isCondition2Enabled();
      if (this.alwaysShowBothConditions) {
        this.eJoinOperatorAnd.setDisabled(!e);
        this.eJoinOperatorOr.setDisabled(!e);
        this.eType2.setDisabled(!e);
        rn(this.eCondition2Body, !e);
      } else {
        tn(this.eJoinOperatorPanel, e);
        tn(this.eType2.getGui(), e);
        tn(this.eCondition2Body, e);
      }
    };
    t.prototype.isCondition2Enabled = function () {
      return this.allowTwoConditions && this.isConditionUiComplete(go.One);
    };
    t.prototype.resetUiToDefaults = function (e) {
      var t = this.gridOptionsWrapper.getLocaleTextFunc()("ariaFilteringOperator", "Filtering operator");
      var n = "ag-simple-filter-and-or-" + this.getCompId();
      var r = this.optionsFactory.getDefaultOption();
      this.eType1.setValue(r, e).setAriaLabel(t);
      this.eType2.setValue(r, e).setAriaLabel(t);
      this.eJoinOperatorAnd.setValue(this.isDefaultOperator("AND"), e).setName(n).setLabel(this.translate("andCondition"));
      this.eJoinOperatorOr.setValue(this.isDefaultOperator("OR"), e).setName(n).setLabel(this.translate("orCondition"));
      return Zr.resolve();
    };
    t.prototype.isDefaultOperator = function (e) {
      return e === this.defaultJoinOperator;
    };
    t.prototype.addChangedListeners = function () {
      var e = this;
      var t = function () {
        return e.onUiChanged();
      };
      this.eType1.onValueChange(t);
      this.eType2.onValueChange(t);
      this.eJoinOperatorOr.onValueChange(t);
      this.eJoinOperatorAnd.onValueChange(t);
    };
    t.prototype.doesFilterHaveHiddenInput = function (e) {
      var t = this.optionsFactory.getCustomOption(e);
      return t && t.hideFilterInput;
    };
    t.EMPTY = "empty";
    t.EQUALS = "equals";
    t.NOT_EQUAL = "notEqual";
    t.LESS_THAN = "lessThan";
    t.LESS_THAN_OR_EQUAL = "lessThanOrEqual";
    t.GREATER_THAN = "greaterThan";
    t.GREATER_THAN_OR_EQUAL = "greaterThanOrEqual";
    t.IN_RANGE = "inRange";
    t.CONTAINS = "contains";
    t.NOT_CONTAINS = "notContains";
    t.STARTS_WITH = "startsWith";
    t.ENDS_WITH = "endsWith";
    Ro([uo("eOptions1")], t.prototype, "eType1", undefined);
    Ro([uo("eOptions2")], t.prototype, "eType2", undefined);
    Ro([uo("eJoinOperatorPanel")], t.prototype, "eJoinOperatorPanel", undefined);
    Ro([uo("eJoinOperatorAnd")], t.prototype, "eJoinOperatorAnd", undefined);
    Ro([uo("eJoinOperatorOr")], t.prototype, "eJoinOperatorOr", undefined);
    Ro([uo("eCondition1Body")], t.prototype, "eCondition1Body", undefined);
    Ro([uo("eCondition2Body")], t.prototype, "eCondition2Body", undefined);
    return t;
  }(jo);
  var Do = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Mo = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Do(t, e);
    t.prototype.setParams = function (t) {
      e.prototype.setParams.call(this, t);
      this.scalarFilterParams = t;
      this.checkDeprecatedParams();
    };
    t.prototype.checkDeprecatedParams = function () {
      if (this.scalarFilterParams.nullComparator) {
        console.warn("AG Grid: Since v21.0, the property filterParams.nullComparator is deprecated. Please use filterParams.includeBlanksInEquals, filterParams.includeBlanksInLessThan and filterParams.includeBlanksInGreaterThan instead.");
        this.scalarFilterParams.includeBlanksInEquals = this.scalarFilterParams.nullComparator.equals;
        this.scalarFilterParams.includeBlanksInLessThan = this.scalarFilterParams.nullComparator.lessThan;
        this.scalarFilterParams.includeBlanksInGreaterThan = this.scalarFilterParams.nullComparator.greaterThan;
      }
    };
    t.prototype.individualConditionPasses = function (e, n) {
      var r = this.scalarFilterParams.valueGetter(e.node);
      var o = this.mapRangeFromModel(n);
      var i = o.from;
      var a = o.to;
      var s = n.type;
      var c = this.optionsFactory.getCustomOption(s);
      if (c && (null != i || c.hideFilterInput)) {
        return c.test(i, r);
      }
      if (null == r) {
        switch (s) {
          case t.EQUALS:
          case t.NOT_EQUAL:
            if (this.scalarFilterParams.includeBlanksInEquals) {
              return true;
            }
            break;
          case t.GREATER_THAN:
          case t.GREATER_THAN_OR_EQUAL:
            if (this.scalarFilterParams.includeBlanksInGreaterThan) {
              return true;
            }
            break;
          case t.LESS_THAN:
          case t.LESS_THAN_OR_EQUAL:
            if (this.scalarFilterParams.includeBlanksInLessThan) {
              return true;
            }
            break;
          case t.IN_RANGE:
            if (this.scalarFilterParams.includeBlanksInRange) {
              return true;
            }
        }
        return false;
      }
      var l = this.comparator();
      var u = l(i, r);
      switch (s) {
        case t.EQUALS:
          return 0 === u;
        case t.NOT_EQUAL:
          return 0 !== u;
        case t.GREATER_THAN:
          return u > 0;
        case t.GREATER_THAN_OR_EQUAL:
          return u >= 0;
        case t.LESS_THAN:
          return u < 0;
        case t.LESS_THAN_OR_EQUAL:
          return u <= 0;
        case t.IN_RANGE:
          var d = l(a, r);
          return this.scalarFilterParams.inRangeInclusive ? u >= 0 && d <= 0 : u > 0 && d < 0;
        default:
          console.warn("AG Grid: Unexpected type of filter \"" + s + "\", it looks like the filter was configured with incorrect Filter Options");
          return true;
      }
    };
    return t;
  }(xo);
  var Lo = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Po = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Bo = function (e) {
    function t() {
      return e.call(this, "dateFilter") || this;
    }
    Lo(t, e);
    t.prototype.afterGuiAttached = function (t) {
      e.prototype.afterGuiAttached.call(this, t);
      this.dateCondition1FromComp.afterGuiAttached(t);
    };
    t.prototype.mapRangeFromModel = function (e) {
      return {
        from: Cr(e.dateFrom),
        to: Cr(e.dateTo)
      };
    };
    t.prototype.setValueFromFloatingFilter = function (e) {
      this.dateCondition1FromComp.setDate(null == e ? null : Cr(e));
      this.dateCondition1ToComp.setDate(null);
      this.dateCondition2FromComp.setDate(null);
      this.dateCondition2ToComp.setDate(null);
    };
    t.prototype.setConditionIntoUi = function (e, t) {
      var n = e ? [Cr(e.dateFrom), Cr(e.dateTo)] : [null, null];
      var r = n[0];
      var o = n[1];
      var i = this.getFromToComponents(t);
      var a = i[0];
      var s = i[1];
      a.setDate(r);
      s.setDate(o);
    };
    t.prototype.resetUiToDefaults = function (t) {
      var n = this;
      return e.prototype.resetUiToDefaults.call(this, t).then(function () {
        n.dateCondition1FromComp.setDate(null);
        n.dateCondition1ToComp.setDate(null);
        n.dateCondition2FromComp.setDate(null);
        n.dateCondition2ToComp.setDate(null);
      });
    };
    t.prototype.comparator = function () {
      return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);
    };
    t.prototype.defaultComparator = function (e, t) {
      return null == t || t < e ? -1 : t > e ? 1 : 0;
    };
    t.prototype.setParams = function (t) {
      e.prototype.setParams.call(this, t);
      this.dateFilterParams = t;
      this.createDateComponents();
    };
    t.prototype.createDateComponents = function () {
      var e = this;
      var t = function (t) {
        return new Eo(e.getContext(), e.userComponentFactory, {
          onDateChanged: function () {
            return e.onUiChanged();
          },
          filterParams: e.dateFilterParams
        }, t);
      };
      this.dateCondition1FromComp = t(this.eCondition1PanelFrom);
      this.dateCondition1ToComp = t(this.eCondition1PanelTo);
      this.dateCondition2FromComp = t(this.eCondition2PanelFrom);
      this.dateCondition2ToComp = t(this.eCondition2PanelTo);
      this.addDestroyFunc(function () {
        e.dateCondition1FromComp.destroy();
        e.dateCondition1ToComp.destroy();
        e.dateCondition2FromComp.destroy();
        e.dateCondition2ToComp.destroy();
      });
    };
    t.prototype.getDefaultFilterOptions = function () {
      return t.DEFAULT_FILTER_OPTIONS;
    };
    t.prototype.createValueTemplate = function (e) {
      var t = e === go.One ? "1" : "2";
      return "\n            <div class=\"ag-filter-body\" ref=\"eCondition" + t + "Body\">\n                <div class=\"ag-filter-from ag-filter-date-from\" ref=\"eCondition" + t + "PanelFrom\"></div>\n                <div class=\"ag-filter-to ag-filter-date-to\" ref=\"eCondition" + t + "PanelTo\"></div>\n            </div>";
    };
    t.prototype.isConditionUiComplete = function (e) {
      var t = e === go.One ? this.getCondition1Type() : this.getCondition2Type();
      if (t === xo.EMPTY) {
        return false;
      }
      if (this.doesFilterHaveHiddenInput(t)) {
        return true;
      }
      var n = this.getFromToComponents(e);
      var r = n[0];
      var o = n[1];
      var i = null == this.dateFilterParams.minValidYear ? 1e3 : this.dateFilterParams.minValidYear;
      var a = function (e) {
        return null != e && e.getUTCFullYear() > i;
      };
      return a(r.getDate()) && (!this.showValueTo(t) || a(o.getDate()));
    };
    t.prototype.areSimpleModelsEqual = function (e, t) {
      return e.dateFrom === t.dateFrom && e.dateTo === t.dateTo && e.type === t.type;
    };
    t.prototype.getFilterType = function () {
      return "date";
    };
    t.prototype.createCondition = function (e) {
      var t = e === go.One ? this.getCondition1Type() : this.getCondition2Type();
      var n = this.getFromToComponents(e);
      var r = n[0];
      var o = n[1];
      return {
        dateFrom: wr(r.getDate()),
        dateTo: wr(o.getDate()),
        type: t,
        filterType: this.getFilterType()
      };
    };
    t.prototype.resetPlaceholder = function () {
      var e = this.gridOptionsWrapper.getLocaleTextFunc();
      var t = this.translate("dateFormatOoo");
      var n = e("ariaFilterValue", "Filter Value");
      this.dateCondition1FromComp.setInputPlaceholder(t);
      this.dateCondition1FromComp.setInputAriaLabel(n);
      this.dateCondition1ToComp.setInputPlaceholder(t);
      this.dateCondition1ToComp.setInputAriaLabel(n);
      this.dateCondition2FromComp.setInputPlaceholder(t);
      this.dateCondition2FromComp.setInputAriaLabel(n);
      this.dateCondition2ToComp.setInputPlaceholder(t);
      this.dateCondition2ToComp.setInputAriaLabel(n);
    };
    t.prototype.updateUiVisibility = function () {
      e.prototype.updateUiVisibility.call(this);
      this.resetPlaceholder();
      var t = this.getCondition1Type();
      tn(this.eCondition1PanelFrom, this.showValueFrom(t));
      tn(this.eCondition1PanelTo, this.showValueTo(t));
      var n = this.getCondition2Type();
      tn(this.eCondition2PanelFrom, this.showValueFrom(n));
      tn(this.eCondition2PanelTo, this.showValueTo(n));
    };
    t.prototype.getFromToComponents = function (e) {
      return e === go.One ? [this.dateCondition1FromComp, this.dateCondition1ToComp] : [this.dateCondition2FromComp, this.dateCondition2ToComp];
    };
    t.DEFAULT_FILTER_OPTIONS = [Mo.EQUALS, Mo.GREATER_THAN, Mo.LESS_THAN, Mo.NOT_EQUAL, Mo.IN_RANGE];
    Po([uo("eCondition1PanelFrom")], t.prototype, "eCondition1PanelFrom", undefined);
    Po([uo("eCondition1PanelTo")], t.prototype, "eCondition1PanelTo", undefined);
    Po([uo("eCondition2PanelFrom")], t.prototype, "eCondition2PanelFrom", undefined);
    Po([uo("eCondition2PanelTo")], t.prototype, "eCondition2PanelTo", undefined);
    Po([pe("userComponentFactory")], t.prototype, "userComponentFactory", undefined);
    return t;
  }(Mo);
  var Fo = function () {
    function e(e, t) {
      var n = this;
      if (undefined === t) {
        t = false;
      }
      this.destroyFuncs = [];
      this.touching = false;
      this.eventService = new ye();
      this.eElement = e;
      this.preventMouseClick = t;
      var r = this.onTouchStart.bind(this);
      var o = this.onTouchMove.bind(this);
      var i = this.onTouchEnd.bind(this);
      this.eElement.addEventListener("touchstart", r, {
        passive: true
      });
      this.eElement.addEventListener("touchmove", o, {
        passive: true
      });
      this.eElement.addEventListener("touchend", i, {
        passive: false
      });
      this.destroyFuncs.push(function () {
        n.eElement.removeEventListener("touchstart", r, {
          passive: true
        });
        n.eElement.removeEventListener("touchmove", o, {
          passive: true
        });
        n.eElement.removeEventListener("touchend", i, {
          passive: false
        });
      });
    }
    e.prototype.getActiveTouch = function (e) {
      for (var t = 0; t < e.length; t++) {
        if (e[t].identifier === this.touchStart.identifier) {
          return e[t];
        }
      }
      return null;
    };
    e.prototype.addEventListener = function (e, t) {
      this.eventService.addEventListener(e, t);
    };
    e.prototype.removeEventListener = function (e, t) {
      this.eventService.removeEventListener(e, t);
    };
    e.prototype.onTouchStart = function (t) {
      var n = this;
      if (!this.touching) {
        this.touchStart = t.touches[0];
        this.touching = true;
        this.moved = false;
        var r = this.touchStart;
        window.setTimeout(function () {
          var o = n.touchStart === r;
          if (n.touching && o && !n.moved) {
            n.moved = true;
            var i = {
              type: e.EVENT_LONG_TAP,
              touchStart: n.touchStart,
              touchEvent: t
            };
            n.eventService.dispatchEvent(i);
          }
        }, 500);
      }
    };
    e.prototype.onTouchMove = function (e) {
      if (this.touching) {
        var t = this.getActiveTouch(e.touches);
        if (t) {
          if (!Ur(t, this.touchStart, 4)) {
            this.moved = true;
          }
        }
      }
    };
    e.prototype.onTouchEnd = function (t) {
      if (this.touching) {
        if (!this.moved) {
          var n = {
            type: e.EVENT_TAP,
            touchStart: this.touchStart
          };
          this.eventService.dispatchEvent(n);
          this.checkForDoubleTap();
        }
        if (this.preventMouseClick) {
          t.preventDefault();
        }
        this.touching = false;
      }
    };
    e.prototype.checkForDoubleTap = function () {
      var t = new Date().getTime();
      if (this.lastTapTime && this.lastTapTime > 0) {
        if (t - this.lastTapTime > e.DOUBLE_TAP_MILLIS) {
          var n = {
            type: e.EVENT_DOUBLE_TAP,
            touchStart: this.touchStart
          };
          this.eventService.dispatchEvent(n);
          this.lastTapTime = null;
        } else {
          this.lastTapTime = t;
        }
      } else {
        this.lastTapTime = t;
      }
    };
    e.prototype.destroy = function () {
      this.destroyFuncs.forEach(function (e) {
        return e();
      });
    };
    e.EVENT_TAP = "tap";
    e.EVENT_DOUBLE_TAP = "doubleTap";
    e.EVENT_LONG_TAP = "longTap";
    e.DOUBLE_TAP_MILLIS = 500;
    return e;
  }();
  var Go = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Uo = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Wo = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.lastMovingChanged = 0;
      return t;
    }
    Go(t, e);
    t.prototype.destroy = function () {
      e.prototype.destroy.call(this);
    };
    t.prototype.refresh = function (e) {
      this.params = e;
      return this.workOutTemplate() == this.currentTemplate && this.workOutShowMenu() == this.currentShowMenu && this.workOutSort() == this.currentSort && (this.setDisplayName(e), true);
    };
    t.prototype.workOutTemplate = function () {
      var e = h(this.params.template, t.TEMPLATE);
      return e = e && e.trim ? e.trim() : e;
    };
    t.prototype.init = function (e) {
      this.params = e;
      this.currentTemplate = this.workOutTemplate();
      this.setTemplate(this.currentTemplate);
      this.setupTap();
      this.setupIcons(e.column);
      this.setMenu();
      this.setupSort();
      this.setupFilterIcon();
      this.setDisplayName(e);
    };
    t.prototype.setDisplayName = function (e) {
      if (this.currentDisplayName != e.displayName) {
        this.currentDisplayName = e.displayName;
        var t = nt(this.currentDisplayName);
        if (this.eText) {
          this.eText.innerHTML = t;
        }
      }
    };
    t.prototype.setupIcons = function (e) {
      this.addInIcon("sortAscending", this.eSortAsc, e);
      this.addInIcon("sortDescending", this.eSortDesc, e);
      this.addInIcon("sortUnSort", this.eSortNone, e);
      this.addInIcon("menu", this.eMenu, e);
      this.addInIcon("filter", this.eFilter, e);
    };
    t.prototype.addInIcon = function (e, t, n) {
      if (null != t) {
        var r = Dr(e, this.gridOptionsWrapper, n);
        if (r) {
          t.appendChild(r);
        }
      }
    };
    t.prototype.setupTap = function () {
      var e = this;
      var t = this.gridOptionsWrapper;
      if (!t.isSuppressTouch()) {
        var n = new Fo(this.getGui(), true);
        var o = t.isSuppressMenuHide();
        var i = o && r(this.eMenu);
        var a = i ? new Fo(this.eMenu, true) : n;
        if (this.params.enableMenu) {
          var s = i ? "EVENT_TAP" : "EVENT_LONG_TAP";
          this.addManagedListener(a, Fo[s], function (n) {
            t.getApi().showColumnMenuAfterMouseClick(e.params.column, n.touchStart);
          });
        }
        if (this.params.enableSorting) {
          this.addManagedListener(n, Fo.EVENT_TAP, function (t) {
            var n = t.touchStart.target;
            if (!(o && e.eMenu.contains(n))) {
              e.sortController.progressSort(e.params.column, false, "uiColumnSorted");
            }
          });
        }
        this.addDestroyFunc(function () {
          return n.destroy();
        });
        if (i) {
          this.addDestroyFunc(function () {
            return a.destroy();
          });
        }
      }
    };
    t.prototype.workOutShowMenu = function () {
      var e = !this.gridOptionsWrapper.isSuppressMenuHide();
      var t = Gt() && e;
      return this.params.enableMenu && !t;
    };
    t.prototype.setMenu = function () {
      var e = this;
      if (this.eMenu) {
        this.currentShowMenu = this.workOutShowMenu();
        if (this.currentShowMenu) {
          var t = this.gridOptionsWrapper.isSuppressMenuHide();
          this.addManagedListener(this.eMenu, "click", function () {
            return e.showMenu(e.eMenu);
          });
          Jt(this.eMenu, "ag-header-menu-always-show", t);
        } else {
          mn(this.eMenu);
        }
      }
    };
    t.prototype.showMenu = function (e) {
      if (!e) {
        e = this.eMenu;
      }
      this.menuFactory.showMenuAfterButtonClick(this.params.column, e);
    };
    t.prototype.removeSortIcons = function () {
      mn(this.eSortAsc);
      mn(this.eSortDesc);
      mn(this.eSortNone);
      mn(this.eSortOrder);
    };
    t.prototype.workOutSort = function () {
      return this.params.enableSorting;
    };
    t.prototype.setupSort = function () {
      var e = this;
      this.currentSort = this.params.enableSorting;
      if (this.currentSort) {
        var t = this.gridOptionsWrapper.isMultiSortKeyCtrl();
        this.addManagedListener(this.params.column, Ce.EVENT_MOVING_CHANGED, function () {
          e.lastMovingChanged = new Date().getTime();
        });
        if (this.eLabel) {
          this.addManagedListener(this.eLabel, "click", function (n) {
            var r = e.params.column.isMoving();
            var o = new Date().getTime() - e.lastMovingChanged < 50;
            if (!(r || o)) {
              var i = t ? n.ctrlKey || n.metaKey : n.shiftKey;
              e.params.progressSort(i);
            }
          });
        }
        this.addManagedListener(this.params.column, Ce.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.onSortChanged();
        this.addManagedListener(this.eventService, Ke.EVENT_SORT_CHANGED, this.setMultiSortOrder.bind(this));
        this.setMultiSortOrder();
      } else {
        this.removeSortIcons();
      }
    };
    t.prototype.onSortChanged = function () {
      Jt(this.getGui(), "ag-header-cell-sorted-asc", this.params.column.isSortAscending());
      Jt(this.getGui(), "ag-header-cell-sorted-desc", this.params.column.isSortDescending());
      Jt(this.getGui(), "ag-header-cell-sorted-none", this.params.column.isSortNone());
      if (this.eSortAsc) {
        Jt(this.eSortAsc, "ag-hidden", !this.params.column.isSortAscending());
      }
      if (this.eSortDesc) {
        Jt(this.eSortDesc, "ag-hidden", !this.params.column.isSortDescending());
      }
      if (this.eSortNone) {
        var e = !this.params.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();
        Jt(this.eSortNone, "ag-hidden", e || !this.params.column.isSortNone());
      }
    };
    t.prototype.setMultiSortOrder = function () {
      if (this.eSortOrder) {
        var e = this.params.column;
        var t = this.sortController.getColumnsWithSortingOrdered();
        var n = t.indexOf(e);
        var r = t.length > 1;
        var o = e.isSorting() && r;
        tn(this.eSortOrder, o);
        if (n >= 0) {
          this.eSortOrder.innerHTML = (n + 1).toString();
        } else {
          hn(this.eSortOrder);
        }
      }
    };
    t.prototype.setupFilterIcon = function () {
      if (this.eFilter) {
        this.addManagedListener(this.params.column, Ce.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.onFilterChanged();
      }
    };
    t.prototype.onFilterChanged = function () {
      var e = this.params.column.isFilterActive();
      Jt(this.eFilter, "ag-hidden", !e);
    };
    t.TEMPLATE = "<div class=\"ag-cell-label-container\" role=\"presentation\">\n            <span ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\" aria-hidden=\"true\"></span>\n            <div ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\" unselectable=\"on\">\n                <span ref=\"eText\" class=\"ag-header-cell-text\" unselectable=\"on\"></span>\n                <span ref=\"eFilter\" class=\"ag-header-icon ag-header-label-icon ag-filter-icon\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortOrder\" class=\"ag-header-icon ag-header-label-icon ag-sort-order\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortAsc\" class=\"ag-header-icon ag-header-label-icon ag-sort-ascending-icon\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortDesc\" class=\"ag-header-icon ag-header-label-icon ag-sort-descending-icon\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortNone\" class=\"ag-header-icon ag-header-label-icon ag-sort-none-icon\" aria-hidden=\"true\"></span>\n            </div>\n        </div>";
    Uo([pe("sortController")], t.prototype, "sortController", undefined);
    Uo([pe("menuFactory")], t.prototype, "menuFactory", undefined);
    Uo([uo("eFilter")], t.prototype, "eFilter", undefined);
    Uo([uo("eSortAsc")], t.prototype, "eSortAsc", undefined);
    Uo([uo("eSortDesc")], t.prototype, "eSortDesc", undefined);
    Uo([uo("eSortNone")], t.prototype, "eSortNone", undefined);
    Uo([uo("eSortOrder")], t.prototype, "eSortOrder", undefined);
    Uo([uo("eMenu")], t.prototype, "eMenu", undefined);
    Uo([uo("eLabel")], t.prototype, "eLabel", undefined);
    Uo([uo("eText")], t.prototype, "eText", undefined);
    return t;
  }(so);
  var Ho = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Vo = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var zo = function (e) {
    function t() {
      return e.call(this, t.TEMPLATE) || this;
    }
    Ho(t, e);
    t.prototype.destroy = function () {
      e.prototype.destroy.call(this);
    };
    t.prototype.init = function (e) {
      this.params = e;
      this.checkWarnings();
      this.setupLabel();
      this.addGroupExpandIcon();
      this.setupExpandIcons();
    };
    t.prototype.checkWarnings = function () {
      if (this.params.template) {
        X(function () {
          return console.warn("A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)");
        }, "HeaderGroupComp.templateNotSupported");
      }
    };
    t.prototype.setupExpandIcons = function () {
      var e = this;
      this.addInIcon("columnGroupOpened", "agOpened");
      this.addInIcon("columnGroupClosed", "agClosed");
      var t = function (t) {
        if (!ke(t)) {
          var n = !e.params.columnGroup.isExpanded();
          e.columnController.setColumnGroupOpened(e.params.columnGroup.getOriginalColumnGroup(), n, "uiColumnExpanded");
        }
      };
      this.addTouchAndClickListeners(this.eCloseIcon, t);
      this.addTouchAndClickListeners(this.eOpenIcon, t);
      var n = function (e) {
        Re(e);
      };
      this.addManagedListener(this.eCloseIcon, "dblclick", n);
      this.addManagedListener(this.eOpenIcon, "dblclick", n);
      this.addManagedListener(this.getGui(), "dblclick", t);
      this.updateIconVisibility();
      var r = this.params.columnGroup.getOriginalColumnGroup();
      this.addManagedListener(r, Ie.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
      this.addManagedListener(r, Ie.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
    };
    t.prototype.addTouchAndClickListeners = function (e, t) {
      var n = new Fo(e, true);
      this.addManagedListener(n, Fo.EVENT_TAP, t);
      this.addDestroyFunc(function () {
        return n.destroy();
      });
      this.addManagedListener(e, "click", t);
    };
    t.prototype.updateIconVisibility = function () {
      if (this.params.columnGroup.isExpandable()) {
        var e = this.params.columnGroup.isExpanded();
        tn(this.eOpenIcon, e);
        tn(this.eCloseIcon, !e);
      } else {
        tn(this.eOpenIcon, false);
        tn(this.eCloseIcon, false);
      }
    };
    t.prototype.addInIcon = function (e, t) {
      var n = Dr(e, this.gridOptionsWrapper, null);
      if (n) {
        this.getRefElement(t).appendChild(n);
      }
    };
    t.prototype.addGroupExpandIcon = function () {
      if (!this.params.columnGroup.isExpandable()) {
        tn(this.eOpenIcon, false);
        return void tn(this.eCloseIcon, false);
      }
    };
    t.prototype.setupLabel = function () {
      var e = this.params.displayName;
      if (r(e)) {
        var t = nt(e);
        this.getRefElement("agLabel").innerHTML = t;
      }
    };
    t.TEMPLATE = "<div class=\"ag-header-group-cell-label\" ref=\"agContainer\" role=\"presentation\">\n            <span ref=\"agLabel\" class=\"ag-header-group-text\" role=\"presentation\"></span>\n            <span ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>\n            <span ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>\n        </div>";
    Vo([pe("columnController")], t.prototype, "columnController", undefined);
    Vo([uo("agOpened")], t.prototype, "eOpenIcon", undefined);
    Vo([uo("agClosed")], t.prototype, "eCloseIcon", undefined);
    return t;
  }(so);
  var Yo = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ko = function () {
    function e() {
      this.rowIndex = null;
      this.key = null;
      this.childrenMapped = {};
      this.displayed = false;
      this.rowTop = null;
      this.oldRowTop = null;
      this.selectable = true;
      this.__objectId = e.OBJECT_ID_SEQUENCE++;
      this.alreadyRendered = false;
      this.highlighted = null;
      this.selected = false;
    }
    e.prototype.setData = function (e) {
      this.setDataCommon(e, false);
    };
    e.prototype.updateData = function (e) {
      this.setDataCommon(e, true);
    };
    e.prototype.setDataCommon = function (e, t) {
      var n = this.data;
      this.data = e;
      this.valueCache.onDataChanged();
      this.updateDataOnDetailNode();
      this.checkRowSelectable();
      var r = this.createDataChangedEvent(e, n, t);
      this.dispatchLocalEvent(r);
    };
    e.prototype.updateDataOnDetailNode = function () {
      if (this.detailNode) {
        this.detailNode.data = this.data;
      }
    };
    e.prototype.createDataChangedEvent = function (t, n, r) {
      return {
        type: e.EVENT_DATA_CHANGED,
        node: this,
        oldData: n,
        newData: t,
        update: r
      };
    };
    e.prototype.createLocalRowEvent = function (e) {
      return {
        type: e,
        node: this
      };
    };
    e.prototype.getRowIndexString = function () {
      return this.rowPinned === Ee.PINNED_TOP ? "t-" + this.rowIndex : this.rowPinned === Ee.PINNED_BOTTOM ? "b-" + this.rowIndex : this.rowIndex.toString();
    };
    e.prototype.createDaemonNode = function () {
      var t = new e();
      this.context.createBean(t);
      t.id = this.id;
      t.data = this.data;
      t.daemon = true;
      t.selected = this.selected;
      t.level = this.level;
      return t;
    };
    e.prototype.setDataAndId = function (e, t) {
      var n = r(this.id) ? this.createDaemonNode() : null;
      var o = this.data;
      this.data = e;
      this.updateDataOnDetailNode();
      this.setId(t);
      this.selectionController.syncInRowNode(this, n);
      this.checkRowSelectable();
      var i = this.createDataChangedEvent(e, o, false);
      this.dispatchLocalEvent(i);
    };
    e.prototype.checkRowSelectable = function () {
      var e = this.gridOptionsWrapper.getIsRowSelectableFunc();
      this.setRowSelectable(!e || e(this));
    };
    e.prototype.setRowSelectable = function (t) {
      if (this.selectable !== t) {
        this.selectable = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_SELECTABLE_CHANGED));
        }
      }
    };
    e.prototype.setId = function (t) {
      var n = this.gridOptionsWrapper.getRowNodeIdFunc();
      if (n) {
        if (this.data) {
          this.id = n(this.data);
          if (this.id && "string" === typeof this.id && ot(this.id, e.ID_PREFIX_ROW_GROUP)) {
            console.error("AG Grid: Row ID's cannot start with " + e.ID_PREFIX_ROW_GROUP + ", this is a reserved prefix for AG Grid's row grouping feature.");
          }
        } else {
          this.id = undefined;
        }
      } else {
        this.id = t;
      }
    };
    e.prototype.isPixelInRange = function (e) {
      return !(!r(this.rowTop) || !r(this.rowHeight)) && e >= this.rowTop && e < this.rowTop + this.rowHeight;
    };
    e.prototype.setFirstChild = function (t) {
      if (this.firstChild !== t) {
        this.firstChild = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_FIRST_CHILD_CHANGED));
        }
      }
    };
    e.prototype.setLastChild = function (t) {
      if (this.lastChild !== t) {
        this.lastChild = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_LAST_CHILD_CHANGED));
        }
      }
    };
    e.prototype.setChildIndex = function (t) {
      if (this.childIndex !== t) {
        this.childIndex = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_CHILD_INDEX_CHANGED));
        }
      }
    };
    e.prototype.setRowTop = function (t) {
      this.oldRowTop = this.rowTop;
      if (this.rowTop !== t) {
        this.rowTop = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_TOP_CHANGED));
        }
        this.setDisplayed(null !== t);
      }
    };
    e.prototype.clearRowTopAndRowIndex = function () {
      this.oldRowTop = null;
      this.setRowTop(null);
      this.setRowIndex(null);
    };
    e.prototype.setDisplayed = function (t) {
      if (this.displayed !== t) {
        this.displayed = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_DISPLAYED_CHANGED));
        }
      }
    };
    e.prototype.setDragging = function (t) {
      if (this.dragging !== t) {
        this.dragging = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_DRAGGING_CHANGED));
        }
      }
    };
    e.prototype.setHighlighted = function (t) {
      if (t !== this.highlighted) {
        this.highlighted = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_HIGHLIGHT_CHANGED));
        }
      }
    };
    e.prototype.setAllChildrenCount = function (t) {
      if (this.allChildrenCount !== t) {
        this.allChildrenCount = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_ALL_CHILDREN_COUNT_CHANGED));
        }
      }
    };
    e.prototype.setMaster = function (t) {
      if (this.master !== t) {
        if (this.master && !t) {
          this.expanded = false;
        }
        this.master = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_MASTER_CHANGED));
        }
      }
    };
    e.prototype.setRowHeight = function (t, n) {
      if (undefined === n) {
        n = false;
      }
      this.rowHeight = t;
      this.rowHeightEstimated = n;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_HEIGHT_CHANGED));
      }
    };
    e.prototype.setRowIndex = function (t) {
      if (this.rowIndex !== t) {
        this.rowIndex = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_ROW_INDEX_CHANGED));
        }
      }
    };
    e.prototype.setUiLevel = function (t) {
      if (this.uiLevel !== t) {
        this.uiLevel = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_UI_LEVEL_CHANGED));
        }
      }
    };
    e.prototype.setExpanded = function (t) {
      if (this.expanded !== t) {
        this.expanded = t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_EXPANDED_CHANGED));
        }
        var n = G({}, this.createGlobalRowEvent(Ke.EVENT_ROW_GROUP_OPENED), {
          expanded: t
        });
        this.mainEventService.dispatchEvent(n);
        if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
          this.rowRenderer.refreshCells({
            rowNodes: [this]
          });
        }
      }
    };
    e.prototype.createGlobalRowEvent = function (e) {
      return {
        type: e,
        node: this,
        data: this.data,
        rowIndex: this.rowIndex,
        rowPinned: this.rowPinned,
        context: this.gridOptionsWrapper.getContext(),
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi()
      };
    };
    e.prototype.dispatchLocalEvent = function (e) {
      if (this.eventService) {
        this.eventService.dispatchEvent(e);
      }
    };
    e.prototype.setDataValue = function (e, t) {
      var n = this.columnController.getPrimaryColumn(e);
      var r = this.valueService.getValue(n, this);
      this.valueService.setValue(this, n, t);
      this.dispatchCellChangedEvent(n, t, r);
    };
    e.prototype.setGroupValue = function (e, t) {
      var n = this.columnController.getGridColumn(e);
      if (o(this.groupData)) {
        this.groupData = {};
      }
      var r = n.getColId();
      var i = this.groupData[r];
      if (i !== t) {
        this.groupData[r] = t;
        this.dispatchCellChangedEvent(n, t, i);
      }
    };
    e.prototype.setAggData = function (e) {
      var t = this;
      var n = P([this.aggData, e]);
      var r = this.aggData;
      this.aggData = e;
      if (this.eventService) {
        n.forEach(function (e) {
          var n = t.columnController.getGridColumn(e);
          var o = t.aggData ? t.aggData[e] : undefined;
          var i = r ? r[e] : undefined;
          t.dispatchCellChangedEvent(n, o, i);
        });
      }
    };
    e.prototype.updateHasChildren = function () {
      var t = this.group && !this.footer || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;
      if (t !== this.__hasChildren) {
        this.__hasChildren = !!t;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(e.EVENT_HAS_CHILDREN_CHANGED));
        }
      }
    };
    e.prototype.hasChildren = function () {
      if (null == this.__hasChildren) {
        this.updateHasChildren();
      }
      return this.__hasChildren;
    };
    e.prototype.isEmptyRowGroupNode = function () {
      return this.group && i(this.childrenAfterGroup);
    };
    e.prototype.dispatchCellChangedEvent = function (t, n, r) {
      var o = {
        type: e.EVENT_CELL_CHANGED,
        node: this,
        column: t,
        newValue: n,
        oldValue: r
      };
      this.dispatchLocalEvent(o);
    };
    e.prototype.resetQuickFilterAggregateText = function () {
      this.quickFilterAggregateText = null;
    };
    e.prototype.isExpandable = function () {
      return !(!this.hasChildren() && !this.master);
    };
    e.prototype.isSelected = function () {
      return this.footer ? this.sibling.isSelected() : this.selected;
    };
    e.prototype.depthFirstSearch = function (e) {
      if (this.childrenAfterGroup) {
        this.childrenAfterGroup.forEach(function (t) {
          return t.depthFirstSearch(e);
        });
      }
      e(this);
    };
    e.prototype.calculateSelectedFromChildren = function () {
      var e;
      var t = false;
      var n = false;
      var r = false;
      if (this.childrenAfterGroup) {
        for (var o = 0; o < this.childrenAfterGroup.length; o++) {
          var i = this.childrenAfterGroup[o];
          if (i.selectable) {
            switch (i.isSelected()) {
              case true:
                t = true;
                break;
              case false:
                n = true;
                break;
              default:
                r = true;
            }
          }
        }
      }
      e = r ? undefined : !(!t || n) || !(!t && n) && undefined;
      this.selectThisNode(e);
    };
    e.prototype.setSelectedInitialValue = function (e) {
      this.selected = e;
    };
    e.prototype.setSelected = function (e, t, n) {
      if (undefined === t) {
        t = false;
      }
      if (undefined === n) {
        n = false;
      }
      this.setSelectedParams({
        newValue: e,
        clearSelection: t,
        suppressFinishActions: n,
        rangeSelect: false
      });
    };
    e.prototype.isRowPinned = function () {
      return this.rowPinned === Ee.PINNED_TOP || this.rowPinned === Ee.PINNED_BOTTOM;
    };
    e.prototype.setSelectedParams = function (e) {
      var t = this.gridOptionsWrapper.isGroupSelectsChildren();
      var n = true === e.newValue;
      var r = true === e.clearSelection;
      var o = true === e.suppressFinishActions;
      var i = true === e.rangeSelect;
      var a = t && true === e.groupSelectsFiltered;
      if (undefined === this.id) {
        console.warn("AG Grid: cannot select node until id for node is known");
        return 0;
      }
      if (this.rowPinned) {
        console.warn("AG Grid: cannot select pinned rows");
        return 0;
      }
      if (this.footer) {
        return this.sibling.setSelectedParams(e);
      }
      if (i && this.selectionController.getLastSelectedNode()) {
        var s = this.selectionController.getLastSelectedNode() !== this;
        var c = this.gridOptionsWrapper.isRowSelectionMulti();
        if (s && c) {
          var l = this.doRowRangeSelection(e.newValue);
          this.selectionController.setLastSelectedNode(this);
          return l;
        }
      }
      var u = 0;
      if (!(a && this.group)) {
        if (this.selectThisNode(n)) {
          u++;
        }
      }
      if (t && this.group) {
        u += this.selectChildNodes(n, a);
      }
      if (!o) {
        if (n && (r || !this.gridOptionsWrapper.isRowSelectionMulti())) {
          u += this.selectionController.clearOtherNodes(this);
        }
        if (u > 0) {
          this.selectionController.updateGroupsFromChildrenSelections();
          var d = {
            type: Ke.EVENT_SELECTION_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.mainEventService.dispatchEvent(d);
        }
        if (n) {
          this.selectionController.setLastSelectedNode(this);
        }
      }
      return u;
    };
    e.prototype.doRowRangeSelection = function (e) {
      var t = this;
      if (undefined === e) {
        e = true;
      }
      var n = this.gridOptionsWrapper.isGroupSelectsChildren();
      var r = this.selectionController.getLastSelectedNode();
      var o = this.rowModel.getNodesInRangeForSelection(this, r);
      var i = 0;
      o.forEach(function (r) {
        if (!(r.group && n || false === e && t === r)) {
          if (r.selectThisNode(e)) {
            i++;
          }
        }
      });
      this.selectionController.updateGroupsFromChildrenSelections();
      var a = {
        type: Ke.EVENT_SELECTION_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.mainEventService.dispatchEvent(a);
      return i;
    };
    e.prototype.isParentOfNode = function (e) {
      for (var t = this.parent; t;) {
        if (t === e) {
          return true;
        }
        t = t.parent;
      }
      return false;
    };
    e.prototype.selectThisNode = function (t) {
      var n = !this.selectable && t;
      var r = this.selected === t;
      if (n || r) {
        return false;
      }
      this.selected = t;
      if (this.eventService) {
        this.dispatchLocalEvent(this.createLocalRowEvent(e.EVENT_ROW_SELECTED));
      }
      var o = this.createGlobalRowEvent(Ke.EVENT_ROW_SELECTED);
      this.mainEventService.dispatchEvent(o);
      return true;
    };
    e.prototype.selectChildNodes = function (e, t) {
      var n = t ? this.childrenAfterFilter : this.childrenAfterGroup;
      if (o(n)) {
        return 0;
      }
      for (var r = 0, i = 0; i < n.length; i++) {
        r += n[i].setSelectedParams({
          newValue: e,
          clearSelection: false,
          suppressFinishActions: true,
          groupSelectsFiltered: t
        });
      }
      return r;
    };
    e.prototype.addEventListener = function (e, t) {
      if (!this.eventService) {
        this.eventService = new ye();
      }
      this.eventService.addEventListener(e, t);
    };
    e.prototype.removeEventListener = function (e, t) {
      if (this.eventService) {
        this.eventService.removeEventListener(e, t);
        if (this.eventService.noRegisteredListenersExist()) {
          this.eventService = null;
        }
      }
    };
    e.prototype.onMouseEnter = function () {
      this.dispatchLocalEvent(this.createLocalRowEvent(e.EVENT_MOUSE_ENTER));
    };
    e.prototype.onMouseLeave = function () {
      this.dispatchLocalEvent(this.createLocalRowEvent(e.EVENT_MOUSE_LEAVE));
    };
    e.prototype.getFirstChildOfFirstChild = function (e) {
      for (var t = this, n = true, o = false, i = null; n && !o;) {
        var a = t.parent;
        if (r(a) && t.firstChild) {
          if (a.rowGroupColumn === e) {
            o = true;
            i = a;
          }
        } else {
          n = false;
        }
        t = a;
      }
      return o ? i : null;
    };
    e.prototype.isFullWidthCell = function () {
      var e = this.gridOptionsWrapper.getIsFullWidthCellFunc();
      return !!e && e(this);
    };
    e.prototype.getRoute = function () {
      if (null != this.key) {
        for (var e = [], t = this; null != t.key;) {
          e.push(t.key);
          t = t.parent;
        }
        return e.reverse();
      }
    };
    e.ID_PREFIX_ROW_GROUP = "row-group-";
    e.ID_PREFIX_TOP_PINNED = "t-";
    e.ID_PREFIX_BOTTOM_PINNED = "b-";
    e.OBJECT_ID_SEQUENCE = 0;
    e.EVENT_ROW_SELECTED = "rowSelected";
    e.EVENT_DATA_CHANGED = "dataChanged";
    e.EVENT_CELL_CHANGED = "cellChanged";
    e.EVENT_ALL_CHILDREN_COUNT_CHANGED = "allChildrenCountChanged";
    e.EVENT_MASTER_CHANGED = "masterChanged";
    e.EVENT_MOUSE_ENTER = "mouseEnter";
    e.EVENT_MOUSE_LEAVE = "mouseLeave";
    e.EVENT_HEIGHT_CHANGED = "heightChanged";
    e.EVENT_TOP_CHANGED = "topChanged";
    e.EVENT_DISPLAYED_CHANGED = "displayedChanged";
    e.EVENT_FIRST_CHILD_CHANGED = "firstChildChanged";
    e.EVENT_LAST_CHILD_CHANGED = "lastChildChanged";
    e.EVENT_CHILD_INDEX_CHANGED = "childIndexChanged";
    e.EVENT_ROW_INDEX_CHANGED = "rowIndexChanged";
    e.EVENT_EXPANDED_CHANGED = "expandedChanged";
    e.EVENT_HAS_CHILDREN_CHANGED = "hasChildrenChanged";
    e.EVENT_SELECTABLE_CHANGED = "selectableChanged";
    e.EVENT_UI_LEVEL_CHANGED = "uiLevelChanged";
    e.EVENT_HIGHLIGHT_CHANGED = "rowHighlightChanged";
    e.EVENT_DRAGGING_CHANGED = "draggingChanged";
    Yo([pe("eventService")], e.prototype, "mainEventService", undefined);
    Yo([pe("rowRenderer")], e.prototype, "rowRenderer", undefined);
    Yo([pe("gridOptionsWrapper")], e.prototype, "gridOptionsWrapper", undefined);
    Yo([pe("selectionController")], e.prototype, "selectionController", undefined);
    Yo([pe("columnController")], e.prototype, "columnController", undefined);
    Yo([pe("valueService")], e.prototype, "valueService", undefined);
    Yo([pe("rowModel")], e.prototype, "rowModel", undefined);
    Yo([pe("context")], e.prototype, "context", undefined);
    Yo([pe("valueCache")], e.prototype, "valueCache", undefined);
    Yo([pe("columnApi")], e.prototype, "columnApi", undefined);
    Yo([pe("gridApi")], e.prototype, "gridApi", undefined);
    return e;
  }();
  var qo = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Xo = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Qo = function (e) {
    function t() {
      return e.call(this, "\n            <div class=\"ag-selection-checkbox\" role=\"presentation\">\n                <ag-checkbox role=\"presentation\" ref=\"eCheckbox\"></ag-checkbox>\n            </div>") || this;
    }
    qo(t, e);
    t.prototype.postConstruct = function () {
      this.eCheckbox.setPassive(true);
    };
    t.prototype.getCheckboxId = function () {
      return this.eCheckbox.getInputElement().id;
    };
    t.prototype.onDataChanged = function () {
      this.onSelectionChanged();
    };
    t.prototype.onSelectableChanged = function () {
      this.showOrHideSelect();
    };
    t.prototype.onSelectionChanged = function () {
      var e = this.gridOptionsWrapper.getLocaleTextFunc();
      var t = this.rowNode.isSelected();
      var n = undefined === t ? e("ariaIndeterminate", "indeterminate") : true === t ? e("ariaChecked", "checked") : e("ariaUnchecked", "unchecked");
      var r = e("ariaRowToggleSelection", "Press Space to toggle row selection");
      this.eCheckbox.setValue(t, true);
      this.eCheckbox.setInputAriaLabel(r + " (" + n + ")");
    };
    t.prototype.onCheckedClicked = function (e) {
      var t = this.gridOptionsWrapper.isGroupSelectsFiltered();
      return this.rowNode.setSelectedParams({
        newValue: false,
        rangeSelect: e.shiftKey,
        groupSelectsFiltered: t
      });
    };
    t.prototype.onUncheckedClicked = function (e) {
      var t = this.gridOptionsWrapper.isGroupSelectsFiltered();
      return this.rowNode.setSelectedParams({
        newValue: true,
        rangeSelect: e.shiftKey,
        groupSelectsFiltered: t
      });
    };
    t.prototype.init = function (e) {
      var t = this;
      this.rowNode = e.rowNode;
      this.column = e.column;
      this.onSelectionChanged();
      this.addGuiEventListener("click", function (e) {
        return Re(e);
      });
      this.addGuiEventListener("dblclick", function (e) {
        return Re(e);
      });
      this.addManagedListener(this.eCheckbox.getInputElement(), "click", function (e) {
        var n = t.eCheckbox.getValue();
        if (undefined === t.eCheckbox.getPreviousValue()) {
          if (0 === t.onUncheckedClicked(e || {})) {
            t.onCheckedClicked(e);
          }
        } else {
          if (n) {
            t.onCheckedClicked(e);
          } else {
            t.onUncheckedClicked(e || {});
          }
        }
      });
      this.addManagedListener(this.rowNode, Ko.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));
      if (this.gridOptionsWrapper.getIsRowSelectableFunc() || this.checkboxCallbackExists()) {
        var n = this.showOrHideSelect.bind(this);
        this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, n);
        this.addManagedListener(this.rowNode, Ko.EVENT_DATA_CHANGED, n);
        this.addManagedListener(this.rowNode, Ko.EVENT_CELL_CHANGED, n);
        this.showOrHideSelect();
      }
      this.eCheckbox.getInputElement().setAttribute("tabindex", "-1");
    };
    t.prototype.showOrHideSelect = function () {
      var e = this.rowNode.selectable;
      if (e && this.checkboxCallbackExists()) {
        e = this.column.isCellCheckboxSelection(this.rowNode);
      }
      this.setVisible(e);
    };
    t.prototype.checkboxCallbackExists = function () {
      var e = this.column ? this.column.getColDef() : null;
      return !!e && "function" === typeof e.checkboxSelection;
    };
    Xo([uo("eCheckbox")], t.prototype, "eCheckbox", undefined);
    Xo([le], t.prototype, "postConstruct", null);
    return t;
  }(so);
  var Zo = {
    propertyName: "dateComponent",
    isCellRenderer: function () {
      return false;
    }
  };
  var Jo = {
    propertyName: "headerComponent",
    isCellRenderer: function () {
      return false;
    }
  };
  var $o = {
    propertyName: "headerGroupComponent",
    isCellRenderer: function () {
      return false;
    }
  };
  var ei = {
    propertyName: "cellRenderer",
    isCellRenderer: function () {
      return true;
    }
  };
  var ti = {
    propertyName: "pinnedRowCellRenderer",
    isCellRenderer: function () {
      return true;
    }
  };
  var ni = {
    propertyName: "cellEditor",
    isCellRenderer: function () {
      return false;
    }
  };
  var ri = {
    propertyName: "innerRenderer",
    isCellRenderer: function () {
      return true;
    }
  };
  var oi = {
    propertyName: "loadingOverlayComponent",
    isCellRenderer: function () {
      return false;
    }
  };
  var ii = {
    propertyName: "noRowsOverlayComponent",
    isCellRenderer: function () {
      return false;
    }
  };
  var ai = {
    propertyName: "tooltipComponent",
    isCellRenderer: function () {
      return false;
    }
  };
  var si = {
    propertyName: "filter",
    isCellRenderer: function () {
      return false;
    }
  };
  var ci = {
    propertyName: "floatingFilterComponent",
    isCellRenderer: function () {
      return false;
    }
  };
  var li = {
    propertyName: "toolPanel",
    isCellRenderer: function () {
      return false;
    }
  };
  var ui = {
    propertyName: "statusPanel",
    isCellRenderer: function () {
      return false;
    }
  };
  var di = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var pi = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  !function (e) {
    e[e.DEFAULT = 0] = "DEFAULT";
    e[e.REGISTERED_BY_NAME = 1] = "REGISTERED_BY_NAME";
    e[e.HARDCODED = 2] = "HARDCODED";
  }(ko || (ko = {}));
  var fi;
  var hi;
  var mi;
  var gi = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    di(t, e);
    t.prototype.newDateComponent = function (e) {
      return this.createAndInitUserComponent(this.gridOptions, e, Zo, "agDateInput");
    };
    t.prototype.newHeaderComponent = function (e) {
      return this.createAndInitUserComponent(e.column.getColDef(), e, Jo, "agColumnHeader");
    };
    t.prototype.newHeaderGroupComponent = function (e) {
      return this.createAndInitUserComponent(e.columnGroup.getColGroupDef(), e, $o, "agColumnGroupHeader");
    };
    t.prototype.newFullWidthGroupRowInnerCellRenderer = function (e) {
      return this.createAndInitUserComponent(this.gridOptions.groupRowRendererParams, e, ri, null, true);
    };
    t.prototype.newFullWidthCellRenderer = function (e, t, n) {
      return this.createAndInitUserComponent(null, e, {
        propertyName: t,
        isCellRenderer: function () {
          return true;
        }
      }, n);
    };
    t.prototype.newCellRenderer = function (e, t, n) {
      if (undefined === n) {
        n = false;
      }
      return this.createAndInitUserComponent(e, t, n ? ti : ei, null, true);
    };
    t.prototype.newCellEditor = function (e, t) {
      return this.createAndInitUserComponent(e, t, ni, "agCellEditor");
    };
    t.prototype.newInnerCellRenderer = function (e, t) {
      return this.createAndInitUserComponent(e, t, ri, null);
    };
    t.prototype.newLoadingOverlayComponent = function (e) {
      return this.createAndInitUserComponent(this.gridOptions, e, oi, "agLoadingOverlay");
    };
    t.prototype.newNoRowsOverlayComponent = function (e) {
      return this.createAndInitUserComponent(this.gridOptions, e, ii, "agNoRowsOverlay");
    };
    t.prototype.newTooltipComponent = function (e) {
      return this.createAndInitUserComponent(e.colDef, e, ai, "agTooltipComponent");
    };
    t.prototype.newFilterComponent = function (e, t, n) {
      return this.createAndInitUserComponent(e, t, si, n, false);
    };
    t.prototype.newSetFilterCellRenderer = function (e, t) {
      return this.createAndInitUserComponent(e, t, ei, null, true);
    };
    t.prototype.newFloatingFilterComponent = function (e, t, n) {
      return this.createAndInitUserComponent(e, t, ci, n, true);
    };
    t.prototype.newToolPanelComponent = function (e, t) {
      return this.createAndInitUserComponent(e, t, li);
    };
    t.prototype.newStatusPanelComponent = function (e, t) {
      return this.createAndInitUserComponent(e, t, ui);
    };
    t.prototype.createAndInitUserComponent = function (e, t, n, r, o) {
      if (undefined === o) {
        o = false;
      }
      if (!e) {
        e = this.gridOptions;
      }
      var i = this.createComponentInstance(e, n, t, r, o);
      if (!i) {
        return null;
      }
      var a = i.componentInstance;
      var s = this.createFinalParams(e, n.propertyName, t, i.paramsFromSelector);
      this.addReactHacks(s);
      var c = this.initComponent(a, s);
      return null == c ? Zr.resolve(a) : c.then(function () {
        return a;
      });
    };
    t.prototype.addReactHacks = function (e) {
      var t = this.context.getBean("agGridReact");
      if (t) {
        e.agGridReact = k(t);
      }
      var n = this.context.getBean("frameworkComponentWrapper");
      if (n) {
        e.frameworkComponentWrapper = n;
      }
    };
    t.prototype.createUserComponentFromConcreteClass = function (e, t) {
      var n = new e();
      this.initComponent(n, t);
      return n;
    };
    t.prototype.lookupComponentClassDef = function (e, t, n, r) {
      if (undefined === n) {
        n = null;
      }
      var o = null;
      var i = null;
      var a = null;
      var s = null;
      var c = null;
      if (null != e) {
        var l = e[t];
        if (!(null == l || true === l)) {
          if ("string" === typeof l) {
            o = l;
          } else {
            if (!("boolean" === typeof l)) {
              if (this.agComponentUtils.doesImplementIComponent(l)) {
                i = l;
              } else {
                a = l;
              }
            }
          }
        }
        s = e[t + "Framework"];
        c = e[t + "Selector"];
      }
      if (i && s || o && s || a && s) {
        throw Error("ag-grid: you are trying to specify: " + t + " twice as a component.");
      }
      if (s && !this.frameworkComponentWrapper) {
        throw Error("ag-grid: you are specifying a framework component but you are not using a framework version of ag-grid for : " + t);
      }
      if (c && (o || i || a || s)) {
        throw Error("ag-grid: you can't specify both, the selector and the component of ag-grid for : " + t);
      }
      if (s) {
        return {
          componentFromFramework: true,
          component: s,
          source: ko.HARDCODED,
          paramsFromSelector: null
        };
      }
      if (i) {
        return {
          componentFromFramework: false,
          component: i,
          source: ko.HARDCODED,
          paramsFromSelector: null
        };
      }
      if (a) {
        return this.agComponentUtils.adaptFunction(t, a, false, ko.HARDCODED);
      }
      var u;
      var d = c ? c(n) : null;
      if (!(u = d && d.component ? d.component : o || r)) {
        return null;
      }
      var p = this.lookupFromRegisteredComponents(t, u);
      return p ? {
        componentFromFramework: p.componentFromFramework,
        component: p.component,
        source: p.source,
        paramsFromSelector: d ? d.params : null
      } : null;
    };
    t.prototype.lookupFromRegisteredComponents = function (e, t) {
      var n = null != t ? t : e;
      var r = this.userComponentRegistry.retrieve(n);
      return null == r ? null : r.componentFromFramework ? {
        component: r.component,
        componentFromFramework: true,
        source: ko.REGISTERED_BY_NAME,
        paramsFromSelector: null
      } : this.agComponentUtils.doesImplementIComponent(r.component) ? {
        component: r.component,
        componentFromFramework: false,
        source: r.source == bi.REGISTERED ? ko.REGISTERED_BY_NAME : ko.DEFAULT,
        paramsFromSelector: null
      } : this.agComponentUtils.adaptFunction(e, r.component, r.componentFromFramework, r.source == bi.REGISTERED ? ko.REGISTERED_BY_NAME : ko.DEFAULT);
    };
    t.prototype.createFinalParams = function (e, t, n, r) {
      if (undefined === r) {
        r = null;
      }
      var o = {};
      F(o, n);
      var i = e ? e[t + "Params"] : null;
      if (null != i) {
        if ("function" === typeof i) {
          F(o, i(n));
        } else {
          if ("object" === typeof i) {
            F(o, i);
          }
        }
      }
      F(o, r);
      return o;
    };
    t.prototype.createComponentInstance = function (e, t, n, r, o) {
      var i;
      var a = t.propertyName;
      var s = this.lookupComponentClassDef(e, a, n, r);
      if (!s || !s.component) {
        var c = e ? e[a] : r;
        var l = c || r;
        if (!o) {
          console.error("Could not find component " + l + ", did you forget to configure this component?");
        }
        return null;
      }
      if (s.componentFromFramework) {
        var u = s.component;
        var d = this.componentMetadataProvider.retrieve(a);
        i = this.frameworkComponentWrapper.wrap(u, d.mandatoryMethodList, d.optionalMethodList, t, r);
      } else {
        i = new s.component();
      }
      return {
        componentInstance: i,
        paramsFromSelector: s.paramsFromSelector
      };
    };
    t.prototype.initComponent = function (e, t) {
      this.context.createBean(e);
      if (null != e.init) {
        return e.init(t);
      }
    };
    pi([pe("gridOptions")], t.prototype, "gridOptions", undefined);
    pi([pe("agComponentUtils")], t.prototype, "agComponentUtils", undefined);
    pi([pe("componentMetadataProvider")], t.prototype, "componentMetadataProvider", undefined);
    pi([pe("userComponentRegistry")], t.prototype, "userComponentRegistry", undefined);
    pi([fe("frameworkComponentWrapper")], t.prototype, "frameworkComponentWrapper", undefined);
    return t = pi([de("userComponentFactory")], t);
  }(We);
  var _i = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var vi = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  (fi = exports.DragSourceType || (exports.DragSourceType = {}))[fi.ToolPanel = 0] = "ToolPanel";
  fi[fi.HeaderCell = 1] = "HeaderCell";
  fi[fi.RowDrag = 2] = "RowDrag";
  fi[fi.ChartPanel = 3] = "ChartPanel";
  (hi = exports.VerticalDirection || (exports.VerticalDirection = {}))[hi.Up = 0] = "Up";
  hi[hi.Down = 1] = "Down";
  (mi = exports.HorizontalDirection || (exports.HorizontalDirection = {}))[mi.Left = 0] = "Left";
  mi[mi.Right = 1] = "Right";
  var bi;
  var yi = function (e) {
    function n() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.dragSourceAndParamsList = [];
      t.dropTargets = [];
      return t;
    }
    var r;
    _i(n, e);
    r = n;
    n.prototype.init = function () {
      this.ePinnedIcon = xr("columnMovePin", this.gridOptionsWrapper, null);
      this.eHideIcon = xr("columnMoveHide", this.gridOptionsWrapper, null);
      this.eMoveIcon = xr("columnMoveMove", this.gridOptionsWrapper, null);
      this.eLeftIcon = xr("columnMoveLeft", this.gridOptionsWrapper, null);
      this.eRightIcon = xr("columnMoveRight", this.gridOptionsWrapper, null);
      this.eGroupIcon = xr("columnMoveGroup", this.gridOptionsWrapper, null);
      this.eAggregateIcon = xr("columnMoveValue", this.gridOptionsWrapper, null);
      this.ePivotIcon = xr("columnMovePivot", this.gridOptionsWrapper, null);
      this.eDropNotAllowedIcon = xr("dropNotAllowed", this.gridOptionsWrapper, null);
    };
    n.prototype.addDragSource = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      var n = {
        eElement: e.eElement,
        dragStartPixels: e.dragStartPixels,
        onDragStart: this.onDragStart.bind(this, e),
        onDragStop: this.onDragStop.bind(this),
        onDragging: this.onDragging.bind(this)
      };
      this.dragSourceAndParamsList.push({
        params: n,
        dragSource: e
      });
      this.dragService.addDragSource(n, t);
    };
    n.prototype.removeDragSource = function (e) {
      var t = u(this.dragSourceAndParamsList, function (t) {
        return t.dragSource === e;
      });
      if (t) {
        this.dragService.removeDragSource(t.params);
        v(this.dragSourceAndParamsList, t);
      }
    };
    n.prototype.clearDragSourceParamsList = function () {
      var e = this;
      this.dragSourceAndParamsList.forEach(function (t) {
        return e.dragService.removeDragSource(t.params);
      });
      this.dragSourceAndParamsList.length = 0;
    };
    n.prototype.nudge = function () {
      if (this.dragging) {
        this.onDragging(this.eventLastTime, true);
      }
    };
    n.prototype.onDragStart = function (e, t) {
      this.dragging = true;
      this.dragSource = e;
      this.eventLastTime = t;
      this.dragItem = this.dragSource.getDragItem();
      this.lastDropTarget = this.dragSource.dragSourceDropTarget;
      if (this.dragSource.onDragStarted) {
        this.dragSource.onDragStarted();
      }
      this.createGhost();
    };
    n.prototype.onDragStop = function (e) {
      this.eventLastTime = null;
      this.dragging = false;
      if (this.dragSource.onDragStopped) {
        this.dragSource.onDragStopped();
      }
      if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
        var t = this.createDropTargetEvent(this.lastDropTarget, e, null, null, false);
        this.lastDropTarget.onDragStop(t);
      }
      this.lastDropTarget = null;
      this.dragItem = null;
      this.removeGhost();
    };
    n.prototype.onDragging = function (e, t) {
      var n = this;
      var r = this.getHorizontalDirection(e);
      var o = this.getVerticalDirection(e);
      this.eventLastTime = e;
      this.positionGhost(e);
      var i = this.dropTargets.filter(function (t) {
        return n.isMouseOnDropTarget(e, t);
      });
      var a = i.length;
      var s = null;
      if (a > 0) {
        s = 1 === a ? i[0] : i.reduce(function (e, t) {
          if (!e) {
            return t;
          }
          var n = e.getContainer();
          var r = t.getContainer();
          return n.contains(r) ? t : e;
        });
      }
      if (s !== this.lastDropTarget) {
        this.leaveLastTargetIfExists(e, r, o, t);
        this.enterDragTargetIfExists(s, e, r, o, t);
        this.lastDropTarget = s;
      } else if (s && s.onDragging) {
        var c = this.createDropTargetEvent(s, e, r, o, t);
        s.onDragging(c);
      }
    };
    n.prototype.enterDragTargetIfExists = function (e, t, n, r, o) {
      if (e) {
        if (e.onDragEnter) {
          var i = this.createDropTargetEvent(e, t, n, r, o);
          e.onDragEnter(i);
        }
        this.setGhostIcon(e.getIconName ? e.getIconName() : null);
      }
    };
    n.prototype.leaveLastTargetIfExists = function (e, t, n, r) {
      if (this.lastDropTarget) {
        if (this.lastDropTarget.onDragLeave) {
          var o = this.createDropTargetEvent(this.lastDropTarget, e, t, n, r);
          this.lastDropTarget.onDragLeave(o);
        }
        this.setGhostIcon(null);
      }
    };
    n.prototype.getAllContainersFromDropTarget = function (e) {
      var t = [e.getContainer()];
      var n = e.getSecondaryContainers ? e.getSecondaryContainers() : null;
      if (n) {
        t = t.concat(n);
      }
      return t;
    };
    n.prototype.isMouseOnDropTarget = function (e, t) {
      var n = false;
      this.getAllContainersFromDropTarget(t).filter(function (e) {
        return e;
      }).forEach(function (t) {
        var r = t.getBoundingClientRect();
        if (0 !== r.width && 0 !== r.height) {
          var o = e.clientX >= r.left && e.clientX < r.right;
          var i = e.clientY >= r.top && e.clientY < r.bottom;
          if (o && i) {
            n = true;
          }
        }
      });
      return n && t.isInterestedIn(this.dragSource.type);
    };
    n.prototype.addDropTarget = function (e) {
      this.dropTargets.push(e);
    };
    n.prototype.removeDropTarget = function (e) {
      this.dropTargets = this.dropTargets.filter(function (t) {
        return t.getContainer() !== e.getContainer();
      });
    };
    n.prototype.hasExternalDropZones = function () {
      return this.dropTargets.some(function (e) {
        return e.external;
      });
    };
    n.prototype.findExternalZone = function (e) {
      return u(this.dropTargets.filter(function (e) {
        return e.external;
      }), function (t) {
        return t.getContainer() === e.getContainer();
      });
    };
    n.prototype.getHorizontalDirection = function (e) {
      var n = this.eventLastTime && this.eventLastTime.clientX;
      var r = e.clientX;
      return n === r ? null : n > r ? exports.HorizontalDirection.Left : exports.HorizontalDirection.Right;
    };
    n.prototype.getVerticalDirection = function (e) {
      var n = this.eventLastTime && this.eventLastTime.clientY;
      var r = e.clientY;
      return n === r ? null : n > r ? exports.VerticalDirection.Up : exports.VerticalDirection.Down;
    };
    n.prototype.createDropTargetEvent = function (e, t, n, r, o) {
      var i = e.getContainer();
      var a = i.getBoundingClientRect();
      var s = this.gridApi;
      var c = this.columnApi;
      var l = this.dragItem;
      var u = this.dragSource;
      return {
        event: t,
        x: t.clientX - a.left,
        y: t.clientY - a.top,
        vDirection: r,
        hDirection: n,
        dragSource: u,
        fromNudge: o,
        dragItem: l,
        api: s,
        columnApi: c,
        dropZoneTarget: i
      };
    };
    n.prototype.positionGhost = function (e) {
      var t = this.eGhost;
      if (t) {
        var n = t.getBoundingClientRect().height;
        var r = Yt() - 2;
        var o = Kt() - 2;
        var i = e.pageY - n / 2;
        var a = e.pageX - 10;
        var s = this.gridOptionsWrapper.getDocument();
        var c = window.pageYOffset || s.documentElement.scrollTop;
        var l = window.pageXOffset || s.documentElement.scrollLeft;
        if (r > 0 && a + t.clientWidth > r + l) {
          a = r + l - t.clientWidth;
        }
        if (a < 0) {
          a = 0;
        }
        if (o > 0 && i + t.clientHeight > o + c) {
          i = o + c - t.clientHeight;
        }
        if (i < 0) {
          i = 0;
        }
        t.style.left = a + "px";
        t.style.top = i + "px";
      }
    };
    n.prototype.removeGhost = function () {
      if (this.eGhost && this.eGhostParent) {
        this.eGhostParent.removeChild(this.eGhost);
      }
      this.eGhost = null;
    };
    n.prototype.createGhost = function () {
      this.eGhost = _n(r.GHOST_TEMPLATE);
      var e = this.environment.getTheme().theme;
      if (e) {
        Qt(this.eGhost, e);
      }
      this.eGhostIcon = this.eGhost.querySelector(".ag-dnd-ghost-icon");
      this.setGhostIcon(null);
      var t = this.eGhost.querySelector(".ag-dnd-ghost-label");
      var n = this.dragSource.dragItemName;
      if (Z(n)) {
        n = n();
      }
      t.innerHTML = nt(n) || "";
      this.eGhost.style.height = "25px";
      this.eGhost.style.top = "20px";
      this.eGhost.style.left = "20px";
      var o = this.gridOptionsWrapper.getDocument();
      var i = o.fullscreenElement || o.querySelector("body");
      this.eGhostParent = i;
      if (this.eGhostParent) {
        this.eGhostParent.appendChild(this.eGhost);
      } else {
        console.warn("AG Grid: could not find document body, it is needed for dragging columns");
      }
    };
    n.prototype.setGhostIcon = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      hn(this.eGhostIcon);
      var n = null;
      switch (e || (e = this.dragSource.defaultIconName || r.ICON_NOT_ALLOWED), e) {
        case r.ICON_PINNED:
          n = this.ePinnedIcon;
          break;
        case r.ICON_MOVE:
          n = this.eMoveIcon;
          break;
        case r.ICON_LEFT:
          n = this.eLeftIcon;
          break;
        case r.ICON_RIGHT:
          n = this.eRightIcon;
          break;
        case r.ICON_GROUP:
          n = this.eGroupIcon;
          break;
        case r.ICON_AGGREGATE:
          n = this.eAggregateIcon;
          break;
        case r.ICON_PIVOT:
          n = this.ePivotIcon;
          break;
        case r.ICON_NOT_ALLOWED:
          n = this.eDropNotAllowedIcon;
          break;
        case r.ICON_HIDE:
          n = this.eHideIcon;
      }
      Jt(this.eGhostIcon, "ag-shake-left-to-right", t);
      if (!(n === this.eHideIcon && this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns())) {
        if (n) {
          this.eGhostIcon.appendChild(n);
        }
      }
    };
    n.ICON_PINNED = "pinned";
    n.ICON_MOVE = "move";
    n.ICON_LEFT = "left";
    n.ICON_RIGHT = "right";
    n.ICON_GROUP = "group";
    n.ICON_AGGREGATE = "aggregate";
    n.ICON_PIVOT = "pivot";
    n.ICON_NOT_ALLOWED = "notAllowed";
    n.ICON_HIDE = "hide";
    n.GHOST_TEMPLATE = "<div class=\"ag-dnd-ghost ag-unselectable\">\n            <span class=\"ag-dnd-ghost-icon ag-shake-left-to-right\"></span>\n            <div class=\"ag-dnd-ghost-label\"></div>\n        </div>";
    vi([pe("dragService")], n.prototype, "dragService", undefined);
    vi([pe("environment")], n.prototype, "environment", undefined);
    vi([pe("columnApi")], n.prototype, "columnApi", undefined);
    vi([pe("gridApi")], n.prototype, "gridApi", undefined);
    vi([le], n.prototype, "init", null);
    vi([ue], n.prototype, "clearDragSourceParamsList", null);
    return n = r = vi([de("dragAndDropService")], n);
  }(We);
  var Ei = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Oi = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var wi = function (e) {
    function n(t, n, r, o, i) {
      var a = e.call(this) || this;
      a.cellValueFn = t;
      a.rowNode = n;
      a.column = r;
      a.customGui = o;
      a.dragStartPixels = i;
      a.isCustomGui = false;
      a.dragSource = null;
      return a;
    }
    Ei(n, e);
    n.prototype.postConstruct = function () {
      if (this.customGui) {
        this.isCustomGui = true;
        this.setDragElement(this.customGui, this.dragStartPixels);
      } else {
        this.setTemplate("<div class=\"ag-drag-handle ag-row-drag\" aria-hidden=\"true\"></div>");
        this.getGui().appendChild(Dr("rowDrag", this.beans.gridOptionsWrapper, null));
        this.addDragSource();
      }
      this.checkCompatibility();
      var e = this.beans.gridOptionsWrapper.isRowDragManaged() ? new Si(this, this.beans, this.rowNode, this.column) : new Ti(this, this.beans, this.rowNode, this.column);
      this.createManagedBean(e, this.beans.context);
    };
    n.prototype.setDragElement = function (e, t) {
      this.setTemplateFromElement(e);
      this.addDragSource(t);
    };
    n.prototype.getSelectedCount = function () {
      if (!this.beans.gridOptionsWrapper.isEnableMultiRowDragging()) {
        return 1;
      }
      var e = this.beans.selectionController.getSelectedNodes();
      return -1 !== e.indexOf(this.rowNode) ? e.length : 1;
    };
    n.prototype.checkCompatibility = function () {
      var e = this.beans.gridOptionsWrapper.isRowDragManaged();
      if (this.beans.gridOptionsWrapper.isTreeData() && e) {
        X(function () {
          return console.warn("AG Grid: If using row drag with tree data, you cannot have rowDragManaged=true");
        }, "RowDragComp.managedAndTreeData");
      }
    };
    n.prototype.addDragSource = function (e) {
      var n = this;
      if (undefined === e) {
        e = 4;
      }
      if (this.dragSource) {
        this.removeDragSource();
      }
      var r = {
        rowNode: this.rowNode,
        columns: this.column ? [this.column] : undefined,
        defaultTextValue: this.cellValueFn()
      };
      var o = this.column && this.column.getColDef().rowDragText;
      this.dragSource = {
        type: exports.DragSourceType.RowDrag,
        eElement: this.getGui(),
        dragItemName: function () {
          var e = n.getSelectedCount();
          return o ? o(r, e) : 1 === e ? n.cellValueFn() : e + " rows";
        },
        getDragItem: function () {
          return r;
        },
        dragStartPixels: e,
        dragSourceDomDataKey: this.beans.gridOptionsWrapper.getDomDataKey()
      };
      this.beans.dragAndDropService.addDragSource(this.dragSource, true);
    };
    n.prototype.removeDragSource = function () {
      if (this.dragSource) {
        this.beans.dragAndDropService.removeDragSource(this.dragSource);
      }
      this.dragSource = null;
    };
    Oi([pe("beans")], n.prototype, "beans", undefined);
    Oi([le], n.prototype, "postConstruct", null);
    Oi([ue], n.prototype, "removeDragSource", null);
    return n;
  }(so);
  var Ci = function (e) {
    function t(t, n, r) {
      var o = e.call(this) || this;
      o.parent = t;
      o.column = r;
      o.rowNode = n;
      return o;
    }
    Ei(t, e);
    t.prototype.setDisplayedOrVisible = function (e) {
      if (e) {
        this.parent.setDisplayed(false);
      } else {
        var t = true;
        var n = false;
        if (this.column) {
          t = this.column.isRowDrag(this.rowNode) || this.parent.isCustomGui;
          n = Z(this.column.getColDef().rowDrag);
        }
        if (n) {
          this.parent.setDisplayed(true);
          this.parent.setVisible(t);
        } else {
          this.parent.setDisplayed(t);
        }
      }
    };
    return t;
  }(We);
  var Ti = function (e) {
    function t(t, n, r, o) {
      var i = e.call(this, t, r, o) || this;
      i.beans = n;
      return i;
    }
    Ei(t, e);
    t.prototype.postConstruct = function () {
      this.addManagedListener(this.beans.gridOptionsWrapper, "suppressRowDrag", this.onSuppressRowDrag.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
      this.workOutVisibility();
    };
    t.prototype.onSuppressRowDrag = function () {
      this.workOutVisibility();
    };
    t.prototype.workOutVisibility = function () {
      var e = this.beans.gridOptionsWrapper.isSuppressRowDrag();
      this.setDisplayedOrVisible(e);
    };
    Oi([le], t.prototype, "postConstruct", null);
    return t;
  }(Ci);
  var Si = function (e) {
    function t(t, n, r, o) {
      var i = e.call(this, t, r, o) || this;
      i.beans = n;
      return i;
    }
    Ei(t, e);
    t.prototype.postConstruct = function () {
      this.addManagedListener(this.beans.eventService, Ke.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.beans.eventService, Ke.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.beans.eventService, Ke.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.beans.gridOptionsWrapper, "suppressRowDrag", this.onSuppressRowDrag.bind(this));
      this.workOutVisibility();
    };
    t.prototype.onSuppressRowDrag = function () {
      this.workOutVisibility();
    };
    t.prototype.workOutVisibility = function () {
      var e = this.beans.controllersService.getGridBodyController().getRowDragFeature();
      var t = e && e.shouldPreventRowMove();
      var n = this.beans.gridOptionsWrapper.isSuppressRowDrag();
      var r = this.beans.dragAndDropService.hasExternalDropZones();
      var o = t && !r || n;
      this.setDisplayedOrVisible(o);
    };
    Oi([le], t.prototype, "postConstruct", null);
    return t;
  }(Ci);
  var Ii = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ai = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var ji = function (e) {
    function t() {
      return e.call(this, t.TEMPLATE) || this;
    }
    Ii(t, e);
    t.prototype.isTopLevelFooter = function () {
      if (!this.gridOptionsWrapper.isGroupIncludeTotalFooter()) {
        return false;
      }
      if (null != this.params.value || -1 != this.params.node.level) {
        return false;
      }
      var e = this.params.colDef;
      if (null == e) {
        return true;
      }
      if (true === e.showRowGroup) {
        return true;
      }
      var t = this.columnController.getRowGroupColumns();
      return !t || 0 === t.length || t[0].getId() === e.showRowGroup;
    };
    t.prototype.init = function (e) {
      this.params = e;
      var t = this.isTopLevelFooter();
      var n = this.isEmbeddedRowMismatch();
      var r = null == e.value;
      var o = false;
      if (this.gridOptionsWrapper.isGroupIncludeFooter() && this.gridOptionsWrapper.isGroupHideOpenParents()) {
        var i = e.node;
        if (i.footer) {
          o = (e.colDef && e.colDef.showRowGroup) !== (i.rowGroupColumn && i.rowGroupColumn.getColId());
        }
      }
      this.cellIsBlank = !t && (n || r || o);
      if (!this.cellIsBlank) {
        this.setupDragOpenParents();
        this.addFullWidthRowDraggerIfNeeded();
        this.addExpandAndContract();
        this.addCheckboxIfNeeded();
        this.addValueElement();
        this.setupIndent();
      }
    };
    t.prototype.isEmbeddedRowMismatch = function () {
      if (!this.params.fullWidth || !this.gridOptionsWrapper.isEmbedFullWidthRows()) {
        return false;
      }
      var e = this.params.pinned === Ee.PINNED_LEFT;
      var t = this.params.pinned === Ee.PINNED_RIGHT;
      var n = !e && !t;
      return this.gridOptionsWrapper.isEnableRtl() ? this.columnController.isPinningLeft() ? !t : !n : this.columnController.isPinningLeft() ? !e : !n;
    };
    t.prototype.setIndent = function () {
      if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
        var e = this.params;
        var t = e.node;
        var n = !!!e.colDef || true === e.colDef.showRowGroup ? t.uiLevel : 0;
        if (e.padding >= 0) {
          this.setPaddingDeprecatedWay(n, e.padding);
        } else {
          if (this.indentClass) {
            this.removeCssClass(this.indentClass);
          }
          this.indentClass = "ag-row-group-indent-" + n;
          this.addCssClass(this.indentClass);
        }
      }
    };
    t.prototype.setPaddingDeprecatedWay = function (e, t) {
      X(function () {
        return console.warn("AG Grid: since v14.2, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the AG Grid documentation page for Themes, in particular the property $row-group-indent-size.");
      }, "groupCellRenderer->doDeprecatedWay");
      var n = e * t;
      var r = this.getGui();
      var o = this.gridOptionsWrapper.isEnableRtl() ? "paddingRight" : "paddingLeft";
      r.style[o] = n + "px";
    };
    t.prototype.setupIndent = function () {
      var e = this.params.node;
      if (!this.params.suppressPadding) {
        this.addManagedListener(e, Ko.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));
        this.setIndent();
      }
    };
    t.prototype.addValueElement = function () {
      if (this.displayedGroup.footer) {
        this.addFooterValue();
      } else {
        this.addGroupValue();
        this.addChildCount();
      }
    };
    t.prototype.addFooterValue = function () {
      var e;
      var t = this.params.footerValueGetter;
      if (t) {
        var n = k(this.params);
        n.value = this.params.value;
        if ("function" === typeof t) {
          e = t(n);
        } else {
          if ("string" === typeof t) {
            e = this.expressionService.evaluate(t, n);
          } else {
            console.warn("AG Grid: footerValueGetter should be either a function or a string (expression)");
          }
        }
      } else {
        e = "Total " + (null != this.params.value ? this.params.value : "");
      }
      this.eValue.innerHTML = e;
    };
    t.prototype.addGroupValue = function () {
      var e;
      var t = this;
      var n = this.params;
      var r = this.displayedGroup.rowGroupColumn;
      var o = r || n.column;
      var i = this.params.value;
      var a = o ? this.valueFormatterService.formatValue(o, n.node, n.scope, i) : null;
      n.valueFormatted = a;
      if (e = n.fullWidth ? this.useFullWidth(n) : this.useInnerRenderer(this.params.colDef.cellRendererParams, o.getColDef(), n)) {
        e.then(function (e) {
          t.innerCellRenderer = e;
        });
      }
    };
    t.prototype.useInnerRenderer = function (e, t, n) {
      var r = this;
      var o = null;
      var i = this.userComponentFactory.lookupComponentClassDef(e, "innerRenderer");
      if (i && null != i.component && i.source != ko.DEFAULT) {
        o = this.userComponentFactory.newInnerCellRenderer(e, n);
      } else {
        var a = this.userComponentFactory.lookupComponentClassDef(t, "cellRenderer");
        o = a && a.source != ko.DEFAULT ? this.userComponentFactory.newCellRenderer(t, n) : a && a.source == ko.DEFAULT && U(t, "cellRendererParams.innerRenderer", null) ? this.userComponentFactory.newInnerCellRenderer(t.cellRendererParams, n) : this.userComponentFactory.newCellRenderer({}, n);
      }
      if (null != o) {
        o.then(function (e) {
          if (null != e) {
            Qn(o, r.eValue);
          } else {
            r.eValue.innerText = null != n.valueFormatted ? n.valueFormatted : n.value;
          }
        });
      } else {
        this.eValue.innerText = null != n.valueFormatted ? n.valueFormatted : n.value;
      }
      return o;
    };
    t.prototype.useFullWidth = function (e) {
      var t = this.userComponentFactory.newFullWidthGroupRowInnerCellRenderer(e);
      if (null != t) {
        Qn(t, this.eValue);
      } else {
        this.eValue.innerText = null != e.valueFormatted ? e.valueFormatted : e.value;
      }
      return t;
    };
    t.prototype.addFullWidthRowDraggerIfNeeded = function () {
      var e = this;
      if (this.params.fullWidth && this.params.rowDrag) {
        var t = new wi(function () {
          return e.params.value;
        }, this.params.node);
        this.createManagedBean(t, this.context);
        this.getGui().insertAdjacentElement("afterbegin", t.getGui());
      }
    };
    t.prototype.addChildCount = function () {
      if (!this.params.suppressCount) {
        this.addManagedListener(this.displayedGroup, Ko.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));
        this.updateChildCount();
      }
    };
    t.prototype.updateChildCount = function () {
      var e = this.displayedGroup.allChildrenCount;
      var t = this.isShowRowGroupForThisRow() && null != e && e >= 0 ? "(" + e + ")" : "";
      this.eChildCount.innerHTML = t;
    };
    t.prototype.isUserWantsSelected = function () {
      var e = this.params.checkbox;
      return "function" === typeof e ? e(this.params) : true === e;
    };
    t.prototype.addCheckboxIfNeeded = function () {
      var e = this;
      var t = this.displayedGroup;
      var n = this.isUserWantsSelected() && !t.footer && !t.rowPinned && !t.detail;
      if (n) {
        var r = new Qo();
        this.getContext().createBean(r);
        r.init({
          rowNode: t,
          column: this.params.column
        });
        this.eCheckbox.appendChild(r.getGui());
        this.addDestroyFunc(function () {
          return e.getContext().destroyBean(r);
        });
      }
      Jt(this.eCheckbox, "ag-invisible", !n);
    };
    t.prototype.addExpandAndContract = function () {
      var e = this.params;
      var t = e.eGridCell;
      var n = Dr("groupExpanded", this.gridOptionsWrapper, null);
      var r = Dr("groupContracted", this.gridOptionsWrapper, null);
      cr(t, !!e.node.expanded);
      if (n) {
        this.eExpanded.appendChild(n);
      }
      if (r) {
        this.eContracted.appendChild(r);
      }
      this.addManagedListener(this.eExpanded, "click", this.onExpandClicked.bind(this));
      this.addManagedListener(this.eContracted, "click", this.onExpandClicked.bind(this));
      this.addManagedListener(t, "keydown", this.onKeyDown.bind(this));
      this.addManagedListener(e.node, Ko.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
      this.showExpandAndContractIcons();
      var o = this.onRowNodeIsExpandableChanged.bind(this);
      this.addManagedListener(this.displayedGroup, Ko.EVENT_ALL_CHILDREN_COUNT_CHANGED, o);
      this.addManagedListener(this.displayedGroup, Ko.EVENT_MASTER_CHANGED, o);
      this.addManagedListener(this.displayedGroup, Ko.EVENT_HAS_CHILDREN_CHANGED, o);
      if (!(this.gridOptionsWrapper.isEnableGroupEdit() || !this.isExpandable() || e.suppressDoubleClickExpand)) {
        this.addManagedListener(t, "dblclick", this.onCellDblClicked.bind(this));
      }
    };
    t.prototype.onRowNodeIsExpandableChanged = function () {
      this.showExpandAndContractIcons();
      this.setIndent();
    };
    t.prototype.onKeyDown = function (e) {
      if (Lr(e, _o.ENTER) && !this.params.suppressEnterExpand) {
        if (!(this.params.column && this.params.column.isCellEditable(this.params.node))) {
          this.onExpandOrContract();
        }
      }
    };
    t.prototype.setupDragOpenParents = function () {
      var e = this.params.column;
      var t = this.params.node;
      if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
        if (t.hasChildren()) {
          var n = t.rowGroupColumn;
          this.draggedFromHideOpenParents = !!n && !e.isRowGroupDisplayed(n.getId());
        } else {
          this.draggedFromHideOpenParents = true;
        }
      } else {
        this.draggedFromHideOpenParents = false;
      }
      if (this.draggedFromHideOpenParents) {
        for (var r = t.parent; !o(r);) {
          if (r.rowGroupColumn && e.isRowGroupDisplayed(r.rowGroupColumn.getId())) {
            this.displayedGroup = r;
            break;
          }
          r = r.parent;
        }
      }
      if (o(this.displayedGroup)) {
        this.displayedGroup = t;
      }
    };
    t.prototype.onExpandClicked = function (e) {
      if (!ke(e)) {
        Re(e);
        this.onExpandOrContract();
      }
    };
    t.prototype.onCellDblClicked = function (e) {
      if (!ke(e)) {
        if (!(Le(this.eExpanded, e) || Le(this.eContracted, e))) {
          this.onExpandOrContract();
        }
      }
    };
    t.prototype.onExpandOrContract = function () {
      var e = this.displayedGroup;
      var t = this.params;
      var n = !e.expanded;
      e.setExpanded(n);
      cr(t.eGridCell, n);
    };
    t.prototype.isShowRowGroupForThisRow = function () {
      if (this.gridOptionsWrapper.isTreeData()) {
        return true;
      }
      var e = this.displayedGroup.rowGroupColumn;
      if (!e) {
        return false;
      }
      var t = this.params.column;
      return null == t || t.isRowGroupDisplayed(e.getId());
    };
    t.prototype.isExpandable = function () {
      if (this.draggedFromHideOpenParents) {
        return true;
      }
      var e = this.displayedGroup;
      var t = this.columnController.isPivotMode() && e.leafGroup;
      if (!(e.isExpandable() && !e.footer && !t)) {
        return false;
      }
      var n = this.params.column;
      return null == n || "string" !== typeof n.getColDef().showRowGroup || this.isShowRowGroupForThisRow();
    };
    t.prototype.showExpandAndContractIcons = function () {
      var e = this;
      var t = e.eContracted;
      var n = e.eExpanded;
      var r = e.params;
      var o = e.displayedGroup;
      var i = e.columnController;
      var a = r.eGridCell;
      var s = r.node;
      var c = this.isExpandable();
      if (c) {
        var l = !!this.draggedFromHideOpenParents || s.expanded;
        tn(t, !l);
        tn(n, l);
      } else {
        lr(a);
        tn(n, false);
        tn(t, false);
      }
      var u = i.isPivotMode();
      var d = u && o.leafGroup;
      var p = c && !d;
      var f = s.footer && -1 === s.level;
      this.addOrRemoveCssClass("ag-cell-expandable", p);
      this.addOrRemoveCssClass("ag-row-group", p);
      if (u) {
        this.addOrRemoveCssClass("ag-pivot-leaf-group", d);
      } else {
        if (!f) {
          this.addOrRemoveCssClass("ag-row-group-leaf-indent", !p);
        }
      }
    };
    t.prototype.destroy = function () {
      this.getContext().destroyBean(this.innerCellRenderer);
      e.prototype.destroy.call(this);
    };
    t.prototype.refresh = function () {
      return false;
    };
    t.TEMPLATE = "<span class=\"ag-cell-wrapper\">\n            <span class=\"ag-group-expanded\" ref=\"eExpanded\"></span>\n            <span class=\"ag-group-contracted\" ref=\"eContracted\"></span>\n            <span class=\"ag-group-checkbox ag-invisible\" ref=\"eCheckbox\"></span>\n            <span class=\"ag-group-value\" ref=\"eValue\"></span>\n            <span class=\"ag-group-child-count\" ref=\"eChildCount\"></span>\n        </span>";
    Ai([pe("rowRenderer")], t.prototype, "rowRenderer", undefined);
    Ai([pe("expressionService")], t.prototype, "expressionService", undefined);
    Ai([pe("valueFormatterService")], t.prototype, "valueFormatterService", undefined);
    Ai([pe("columnController")], t.prototype, "columnController", undefined);
    Ai([pe("userComponentFactory")], t.prototype, "userComponentFactory", undefined);
    Ai([uo("eExpanded")], t.prototype, "eExpanded", undefined);
    Ai([uo("eContracted")], t.prototype, "eContracted", undefined);
    Ai([uo("eCheckbox")], t.prototype, "eCheckbox", undefined);
    Ai([uo("eValue")], t.prototype, "eValue", undefined);
    Ai([uo("eChildCount")], t.prototype, "eChildCount", undefined);
    return t;
  }(so);
  var Ni = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ri = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var ki = function (e) {
    function t() {
      var n = e.call(this, t.TEMPLATE) || this;
      n.refreshCount = 0;
      return n;
    }
    Ni(t, e);
    t.prototype.init = function (e) {
      this.eValue = this.queryForHtmlElement(".ag-value-change-value");
      this.eDelta = this.queryForHtmlElement(".ag-value-change-delta");
      this.refresh(e);
    };
    t.prototype.showDelta = function (e, t) {
      var n = Math.abs(t);
      var o = e.formatValue(n);
      var i = r(o) ? o : n;
      var a = t >= 0;
      this.eDelta.innerHTML = a ? "↑" + i : "↓" + i;
      Jt(this.eDelta, "ag-value-change-delta-up", a);
      Jt(this.eDelta, "ag-value-change-delta-down", !a);
    };
    t.prototype.setTimerToRemoveDelta = function () {
      var e = this;
      this.refreshCount++;
      var t = this.refreshCount;
      window.setTimeout(function () {
        if (t === e.refreshCount) {
          e.hideDeltaValue();
        }
      }, 2e3);
    };
    t.prototype.hideDeltaValue = function () {
      Zt(this.eValue, "ag-value-change-value-highlight");
      hn(this.eDelta);
    };
    t.prototype.refresh = function (e) {
      var t = e.value;
      if (t === this.lastValue) {
        return false;
      }
      if (r(e.valueFormatted)) {
        this.eValue.innerHTML = e.valueFormatted;
      } else {
        if (r(e.value)) {
          this.eValue.innerHTML = t;
        } else {
          hn(this.eValue);
        }
      }
      if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
        return false;
      }
      if ("number" === typeof t && "number" === typeof this.lastValue) {
        var n = t - this.lastValue;
        this.showDelta(e, n);
      }
      if (this.lastValue) {
        Qt(this.eValue, "ag-value-change-value-highlight");
      }
      this.setTimerToRemoveDelta();
      this.lastValue = t;
      return true;
    };
    t.TEMPLATE = "<span><span class=\"ag-value-change-delta\"></span><span class=\"ag-value-change-value\"></span></span>";
    Ri([pe("filterManager")], t.prototype, "filterManager", undefined);
    return t;
  }(so);
  var xi = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Di = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Mi = function (e) {
    function t() {
      var n = e.call(this, t.TEMPLATE) || this;
      n.refreshCount = 0;
      n.eCurrent = n.queryForHtmlElement(".ag-value-slide-current");
      return n;
    }
    xi(t, e);
    t.prototype.init = function (e) {
      this.refresh(e);
    };
    t.prototype.addSlideAnimation = function () {
      var e = this;
      this.refreshCount++;
      var t = this.refreshCount;
      if (this.ePrevious) {
        this.getGui().removeChild(this.ePrevious);
      }
      this.ePrevious = _n("<span class=\"ag-value-slide-previous ag-value-slide-out\"></span>");
      this.ePrevious.innerHTML = this.eCurrent.innerHTML;
      this.getGui().insertBefore(this.ePrevious, this.eCurrent);
      window.setTimeout(function () {
        if (t === e.refreshCount) {
          Qt(e.ePrevious, "ag-value-slide-out-end");
        }
      }, 50);
      window.setTimeout(function () {
        if (t === e.refreshCount) {
          e.getGui().removeChild(e.ePrevious);
          e.ePrevious = null;
        }
      }, 3e3);
    };
    t.prototype.refresh = function (e) {
      var t = e.value;
      if (o(t)) {
        t = "";
      }
      return t !== this.lastValue && !this.filterManager.isSuppressFlashingCellsBecauseFiltering() && (this.addSlideAnimation(), this.lastValue = t, r(e.valueFormatted) ? this.eCurrent.innerHTML = e.valueFormatted : r(e.value) ? this.eCurrent.innerHTML = t : hn(this.eCurrent), true);
    };
    t.TEMPLATE = "<span>\n            <span class=\"ag-value-slide-current\"></span>\n        </span>";
    Di([pe("filterManager")], t.prototype, "filterManager", undefined);
    return t;
  }(so);
  var Li = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Pi = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Bi = function (e) {
    function t() {
      return e.call(this, t.TEMPLATE) || this;
    }
    Li(t, e);
    t.prototype.init = function (e) {
      if (e.node.failedLoad) {
        this.setupFailed();
      } else {
        this.setupLoading();
      }
    };
    t.prototype.setupFailed = function () {
      this.eLoadingText.innerText = "ERR";
    };
    t.prototype.setupLoading = function () {
      var e = Dr("groupLoading", this.gridOptionsWrapper, null);
      if (e) {
        this.eLoadingIcon.appendChild(e);
      }
      var t = this.gridOptionsWrapper.getLocaleTextFunc();
      this.eLoadingText.innerText = t("loadingOoo", "Loading");
    };
    t.prototype.refresh = function (e) {
      return false;
    };
    t.TEMPLATE = "<div class=\"ag-loading\">\n            <span class=\"ag-loading-icon\" ref=\"eLoadingIcon\"></span>\n            <span class=\"ag-loading-text\" ref=\"eLoadingText\"></span>\n        </div>";
    Pi([uo("eLoadingIcon")], t.prototype, "eLoadingIcon", undefined);
    Pi([uo("eLoadingText")], t.prototype, "eLoadingText", undefined);
    return t;
  }(so);
  var Fi = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Gi = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ui = function (e) {
    function t() {
      var t = e.call(this, "<div class=\"ag-cell-edit-wrapper\"><ag-select class=\"ag-cell-editor\" ref=\"eSelect\"></ag-select></div>") || this;
      t.startedByEnter = false;
      return t;
    }
    Fi(t, e);
    t.prototype.init = function (e) {
      var t = this;
      this.focusAfterAttached = e.cellStartedEdit;
      if (o(e.values)) {
        console.warn("AG Grid: no values found for select cellEditor");
      } else {
        this.startedByEnter = e.keyPress === _o.ENTER;
        var n = false;
        e.values.forEach(function (r) {
          var o = {
            value: r
          };
          var i = t.valueFormatterService.formatValue(e.column, null, null, r);
          var a = null !== i && undefined !== i;
          o.text = a ? i : r;
          t.eSelect.addOption(o);
          n = n || e.value === r;
        });
        if (n) {
          this.eSelect.setValue(e.value, true);
        } else {
          if (e.values.length) {
            this.eSelect.setValue(e.values[0], true);
          }
        }
        if (!this.gridOptionsWrapper.isFullRowEdit()) {
          this.eSelect.onValueChange(function () {
            return e.stopEditing();
          });
        }
      }
    };
    t.prototype.afterGuiAttached = function () {
      if (this.focusAfterAttached) {
        this.eSelect.getFocusableElement().focus();
      }
      if (this.startedByEnter) {
        this.eSelect.showPicker();
      }
    };
    t.prototype.focusIn = function () {
      this.eSelect.getFocusableElement().focus();
    };
    t.prototype.getValue = function () {
      return this.eSelect.getValue();
    };
    t.prototype.isPopup = function () {
      return false;
    };
    Gi([pe("valueFormatterService")], t.prototype, "valueFormatterService", undefined);
    Gi([uo("eSelect")], t.prototype, "eSelect", undefined);
    return t;
  }(lo);
  var Wi = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Hi = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Wi(t, e);
    t.prototype.isPopup = function () {
      return true;
    };
    return t;
  }(yo);
  var Vi = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var zi = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Vi(t, e);
    t.prototype.isPopup = function () {
      return true;
    };
    return t;
  }(Ui);
  var Yi = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ki = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var qi = function (e) {
    function t() {
      return e.call(this, t.TEMPLATE) || this;
    }
    Yi(t, e);
    t.prototype.init = function (e) {
      this.params = e;
      this.focusAfterAttached = e.cellStartedEdit;
      this.eTextArea.setMaxLength(e.maxLength || 200).setCols(e.cols || 60).setRows(e.rows || 10);
      if (r(e.value)) {
        this.eTextArea.setValue(e.value.toString(), true);
      }
      this.addGuiEventListener("keydown", this.onKeyDown.bind(this));
    };
    t.prototype.onKeyDown = function (e) {
      var t = e.which || e.keyCode;
      if (t === _o.LEFT || t === _o.UP || t === _o.RIGHT || t === _o.DOWN || e.shiftKey && t === _o.ENTER) {
        e.stopPropagation();
      }
    };
    t.prototype.afterGuiAttached = function () {
      var e = this.gridOptionsWrapper.getLocaleTextFunc();
      this.eTextArea.setInputAriaLabel(e("ariaInputEditor", "Input Editor"));
      if (this.focusAfterAttached) {
        this.eTextArea.getFocusableElement().focus();
      }
    };
    t.prototype.getValue = function () {
      return this.params.parseValue(this.eTextArea.getValue());
    };
    t.TEMPLATE = "<div class=\"ag-large-text\" tabindex=\"0\">\n            <ag-input-text-area ref=\"eTextArea\" class=\"ag-large-text-input\"></ag-input-text-area>\n        </div>";
    Ki([uo("eTextArea")], t.prototype, "eTextArea", undefined);
    return t;
  }(lo);
  var Xi = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Qi = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Zi = function (e) {
    function t() {
      return e.call(this, "numberFilter") || this;
    }
    Xi(t, e);
    t.prototype.mapRangeFromModel = function (e) {
      return {
        from: e.filter,
        to: e.filterTo
      };
    };
    t.prototype.getDefaultDebounceMs = function () {
      return 500;
    };
    t.prototype.resetUiToDefaults = function (t) {
      var n = this;
      return e.prototype.resetUiToDefaults.call(this, t).then(function () {
        [n.eValueFrom1, n.eValueFrom2, n.eValueTo1, n.eValueTo2].forEach(function (e) {
          return e.setValue(null, t);
        });
        n.resetPlaceholder();
      });
    };
    t.prototype.setConditionIntoUi = function (e, t) {
      var n = t === go.One;
      var r = n ? this.eValueFrom1 : this.eValueFrom2;
      var o = n ? this.eValueTo1 : this.eValueTo2;
      r.setValue(e ? "" + e.filter : null);
      o.setValue(e ? "" + e.filterTo : null);
    };
    t.prototype.setValueFromFloatingFilter = function (e) {
      this.eValueFrom1.setValue(e);
      this.eValueTo1.setValue(null);
      this.eValueFrom2.setValue(null);
      this.eValueTo2.setValue(null);
    };
    t.prototype.comparator = function () {
      return function (e, t) {
        return e === t ? 0 : e < t ? 1 : -1;
      };
    };
    t.prototype.setParams = function (t) {
      this.numberFilterParams = t;
      var n = this.getAllowedCharPattern();
      if (n) {
        var r = {
          allowedCharPattern: n
        };
        this.resetTemplate({
          eValueFrom1: r,
          eValueTo1: r,
          eValueFrom2: r,
          eValueTo2: r
        });
      }
      e.prototype.setParams.call(this, t);
      this.addValueChangedListeners();
    };
    t.prototype.addValueChangedListeners = function () {
      var e = this;
      var t = function () {
        return e.onUiChanged();
      };
      this.eValueFrom1.onValueChange(t);
      this.eValueTo1.onValueChange(t);
      this.eValueFrom2.onValueChange(t);
      this.eValueTo2.onValueChange(t);
    };
    t.prototype.resetPlaceholder = function () {
      var e = this.gridOptionsWrapper.getLocaleTextFunc();
      var t = this.showValueTo(this.getCondition1Type());
      var n = this.showValueTo(this.getCondition2Type());
      this.eValueFrom1.setInputPlaceholder(this.translate(t ? "inRangeStart" : "filterOoo"));
      this.eValueFrom1.setInputAriaLabel(t ? e("ariaFilterFromValue", "Filter from value") : e("ariaFilterValue", "Filter Value"));
      this.eValueTo1.setInputPlaceholder(this.translate("inRangeEnd"));
      this.eValueTo1.setInputAriaLabel(e("ariaFilterToValue", "Filter to Value"));
      this.eValueFrom2.setInputPlaceholder(this.translate(n ? "inRangeStart" : "filterOoo"));
      this.eValueFrom2.setInputAriaLabel(n ? e("ariaFilterFromValue", "Filter from value") : e("ariaFilterValue", "Filter Value"));
      this.eValueTo2.setInputPlaceholder(this.translate("inRangeEnd"));
      this.eValueTo2.setInputAriaLabel(e("ariaFilterToValue", "Filter to Value"));
    };
    t.prototype.afterGuiAttached = function (t) {
      e.prototype.afterGuiAttached.call(this, t);
      this.resetPlaceholder();
      if (!(t && t.suppressFocus)) {
        this.eValueFrom1.getInputElement().focus();
      }
    };
    t.prototype.getDefaultFilterOptions = function () {
      return t.DEFAULT_FILTER_OPTIONS;
    };
    t.prototype.createValueTemplate = function (e) {
      var t = e === go.One ? "1" : "2";
      var n = this.getAllowedCharPattern() ? "ag-input-text-field" : "ag-input-number-field";
      return "\n            <div class=\"ag-filter-body\" ref=\"eCondition" + t + "Body\" role=\"presentation\">\n                <" + n + " class=\"ag-filter-from ag-filter-filter\" ref=\"eValueFrom" + t + "\"></" + n + ">\n                <" + n + " class=\"ag-filter-to ag-filter-filter\" ref=\"eValueTo" + t + "\"></" + n + ">\n            </div>";
    };
    t.prototype.isConditionUiComplete = function (e) {
      var t = e === go.One;
      var n = t ? this.getCondition1Type() : this.getCondition2Type();
      if (n === xo.EMPTY) {
        return false;
      }
      if (this.doesFilterHaveHiddenInput(n)) {
        return true;
      }
      var r = t ? this.eValueFrom1 : this.eValueFrom2;
      var o = t ? this.eValueTo1 : this.eValueTo2;
      return null != this.stringToFloat(r.getValue()) && (!this.showValueTo(n) || null != this.stringToFloat(o.getValue()));
    };
    t.prototype.areSimpleModelsEqual = function (e, t) {
      return e.filter === t.filter && e.filterTo === t.filterTo && e.type === t.type;
    };
    t.prototype.getFilterType = function () {
      return "number";
    };
    t.prototype.stringToFloat = function (e) {
      if ("number" === typeof e) {
        return e;
      }
      var t = n(e);
      if (null != t && "" === t.trim()) {
        t = null;
      }
      return this.numberFilterParams.numberParser ? this.numberFilterParams.numberParser(t) : null == t || "-" === t.trim() ? null : parseFloat(t);
    };
    t.prototype.createCondition = function (e) {
      var t = e === go.One;
      var n = t ? this.getCondition1Type() : this.getCondition2Type();
      var r = t ? this.eValueFrom1 : this.eValueFrom2;
      var o = this.stringToFloat(r.getValue());
      var i = {
        filterType: this.getFilterType(),
        type: n
      };
      if (!this.doesFilterHaveHiddenInput(n) && (i.filter = o, this.showValueTo(n))) {
        var a = t ? this.eValueTo1 : this.eValueTo2;
        var s = this.stringToFloat(a.getValue());
        i.filterTo = s;
      }
      return i;
    };
    t.prototype.updateUiVisibility = function () {
      e.prototype.updateUiVisibility.call(this);
      this.resetPlaceholder();
      var t = this.getCondition1Type();
      var n = this.getCondition2Type();
      tn(this.eValueFrom1.getGui(), this.showValueFrom(t));
      tn(this.eValueTo1.getGui(), this.showValueTo(t));
      tn(this.eValueFrom2.getGui(), this.showValueFrom(n));
      tn(this.eValueTo2.getGui(), this.showValueTo(n));
    };
    t.prototype.getAllowedCharPattern = function () {
      var e = (this.numberFilterParams || {}).allowedCharPattern;
      return e || (Bt() || Lt() ? null : "\\d\\-\\.");
    };
    t.DEFAULT_FILTER_OPTIONS = [Mo.EQUALS, Mo.NOT_EQUAL, Mo.LESS_THAN, Mo.LESS_THAN_OR_EQUAL, Mo.GREATER_THAN, Mo.GREATER_THAN_OR_EQUAL, Mo.IN_RANGE];
    Qi([uo("eValueFrom1")], t.prototype, "eValueFrom1", undefined);
    Qi([uo("eValueTo1")], t.prototype, "eValueTo1", undefined);
    Qi([uo("eValueFrom2")], t.prototype, "eValueFrom2", undefined);
    Qi([uo("eValueTo2")], t.prototype, "eValueTo2", undefined);
    return t;
  }(Mo);
  var Ji = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var $i = function (e) {
    function t() {
      return e.call(this) || this;
    }
    Ji(t, e);
    t.prototype.destroy = function () {
      e.prototype.destroy.call(this);
    };
    t.prototype.init = function (e) {
      var n = this.gridOptionsWrapper.getOverlayLoadingTemplate() ? this.gridOptionsWrapper.getOverlayLoadingTemplate() : t.DEFAULT_LOADING_OVERLAY_TEMPLATE;
      var r = this.gridOptionsWrapper.getLocaleTextFunc();
      var o = n.replace("[LOADING...]", r("loadingOoo", "Loading..."));
      this.setTemplate(o);
    };
    t.DEFAULT_LOADING_OVERLAY_TEMPLATE = "<span class=\"ag-overlay-loading-center\">[LOADING...]</span>";
    return t;
  }(so);
  var ea = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ta = function (e) {
    function t() {
      return e.call(this) || this;
    }
    ea(t, e);
    t.prototype.destroy = function () {
      e.prototype.destroy.call(this);
    };
    t.prototype.init = function (e) {
      var n = this.gridOptionsWrapper.getOverlayNoRowsTemplate() ? this.gridOptionsWrapper.getOverlayNoRowsTemplate() : t.DEFAULT_NO_ROWS_TEMPLATE;
      var r = this.gridOptionsWrapper.getLocaleTextFunc();
      var o = n.replace("[NO_ROWS_TO_SHOW]", r("noRowsToShow", "No Rows To Show"));
      this.setTemplate(o);
    };
    t.DEFAULT_NO_ROWS_TEMPLATE = "<span class=\"ag-overlay-no-rows-center\">[NO_ROWS_TO_SHOW]</span>";
    return t;
  }(so);
  var na = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ra = function (e) {
    function t() {
      return e.call(this, "<div class=\"ag-tooltip\"></div>") || this;
    }
    na(t, e);
    t.prototype.init = function (e) {
      var t = e.value;
      this.getGui().innerHTML = t;
    };
    return t;
  }(lo);
  var oa = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ia = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var aa = function (e) {
    function t() {
      return e.call(this, "\n            <div class=\"ag-filter-filter\">\n                <ag-input-text-field class=\"ag-date-filter\" ref=\"eDateInput\"></ag-input-text-field>\n            </div>") || this;
    }
    oa(t, e);
    t.prototype.destroy = function () {
      e.prototype.destroy.call(this);
    };
    t.prototype.init = function (e) {
      var t = this.eDateInput.getInputElement();
      if (this.shouldUseBrowserDatePicker(e)) {
        if (Mt()) {
          console.warn("ag-grid: browserDatePicker is specified to true, but it is not supported in IE 11; reverting to text date picker");
        } else {
          t.type = "date";
        }
      }
      this.addManagedListener(t, "mousedown", function () {
        return t.focus();
      });
      this.addManagedListener(this.eDateInput.getInputElement(), "input", function (t) {
        if (t.target === document.activeElement) {
          e.onDateChanged();
        }
      });
    };
    t.prototype.getDate = function () {
      return Cr(this.eDateInput.getValue());
    };
    t.prototype.setDate = function (e) {
      this.eDateInput.setValue(wr(e, false));
    };
    t.prototype.setInputPlaceholder = function (e) {
      this.eDateInput.setInputPlaceholder(e);
    };
    t.prototype.afterGuiAttached = function (e) {
      if (!(e && e.suppressFocus)) {
        this.eDateInput.getInputElement().focus();
      }
    };
    t.prototype.shouldUseBrowserDatePicker = function (e) {
      return e.filterParams && null != e.filterParams.browserDatePicker ? e.filterParams.browserDatePicker : Bt() || Ft();
    };
    ia([uo("eDateInput")], t.prototype, "eDateInput", undefined);
    return t;
  }(so);
  var sa = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ca = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    sa(t, e);
    t.prototype.getDefaultDebounceMs = function () {
      return 0;
    };
    t.prototype.destroy = function () {
      e.prototype.destroy.call(this);
    };
    t.prototype.getTextFromModel = function (e) {
      if (!e) {
        return null;
      }
      if (e.operator) {
        var t = e;
        var n = this.conditionToString(t.condition1);
        var r = this.conditionToString(t.condition2);
        return n + " " + t.operator + " " + r;
      }
      var o = e;
      var i = this.optionsFactory.getCustomOption(o.type);
      return i && i.hideFilterInput ? (this.gridOptionsWrapper.getLocaleTextFunc()(i.displayKey, i.displayName), i.displayName) : this.conditionToString(o);
    };
    t.prototype.isEventFromFloatingFilter = function (e) {
      return e && e.afterFloatingFilter;
    };
    t.prototype.getLastType = function () {
      return this.lastType;
    };
    t.prototype.setLastTypeFromModel = function (e) {
      if (e) {
        var t;
        if (e.operator) {
          t = e.condition1;
        } else {
          t = e;
        }
        this.lastType = t.type;
      } else {
        this.lastType = this.optionsFactory.getDefaultOption();
      }
    };
    t.prototype.canWeEditAfterModelFromParentFilter = function (e) {
      if (!e) {
        return this.isTypeEditable(this.lastType);
      }
      if (e.operator) {
        return false;
      }
      var t = e;
      return this.isTypeEditable(t.type);
    };
    t.prototype.init = function (e) {
      this.optionsFactory = new Oo();
      this.optionsFactory.init(e.filterParams, this.getDefaultFilterOptions());
      this.lastType = this.optionsFactory.getDefaultOption();
      var t = this.isTypeEditable(this.lastType);
      this.setEditable(t);
    };
    t.prototype.doesFilterHaveHiddenInput = function (e) {
      var t = this.optionsFactory.getCustomOption(e);
      return t && t.hideFilterInput;
    };
    t.prototype.isTypeEditable = function (e) {
      return !!e && !this.doesFilterHaveHiddenInput(e) && e !== xo.IN_RANGE && e !== xo.EMPTY;
    };
    return t;
  }(so);
  var la = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ua = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var da = function (e) {
    function t() {
      return e.call(this, "\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eReadOnlyText\"></ag-input-text-field>\n                <div ref=\"eDateWrapper\" style=\"display: flex;\"></div>\n            </div>") || this;
    }
    la(t, e);
    t.prototype.getDefaultFilterOptions = function () {
      return Bo.DEFAULT_FILTER_OPTIONS;
    };
    t.prototype.conditionToString = function (e) {
      var t = e.type;
      var n = Cr(e.dateFrom);
      if (t === xo.IN_RANGE) {
        var r = Cr(e.dateTo);
        return wr(n, false) + "-" + wr(r, false);
      }
      return null == n ? "" + t : "" + wr(n, false);
    };
    t.prototype.init = function (t) {
      e.prototype.init.call(this, t);
      this.params = t;
      this.createDateComponent();
      var n = this.gridOptionsWrapper.getLocaleTextFunc();
      this.eReadOnlyText.setDisabled(true).setInputAriaLabel(n("ariaDateFilterInput", "Date Filter Input"));
    };
    t.prototype.setEditable = function (e) {
      tn(this.eDateWrapper, e);
      tn(this.eReadOnlyText.getGui(), !e);
    };
    t.prototype.onParentModelChanged = function (t, n) {
      if (!this.isEventFromFloatingFilter(n)) {
        e.prototype.setLastTypeFromModel.call(this, t);
        var r = this.canWeEditAfterModelFromParentFilter(t);
        this.setEditable(r);
        if (r) {
          if (t) {
            var o = t;
            this.dateComp.setDate(Cr(o.dateFrom));
          } else {
            this.dateComp.setDate(null);
          }
          this.eReadOnlyText.setValue("");
        } else {
          this.eReadOnlyText.setValue(this.getTextFromModel(t));
          this.dateComp.setDate(null);
        }
      }
    };
    t.prototype.onDateChanged = function () {
      var e = this;
      var t = wr(this.dateComp.getDate());
      this.params.parentFilterInstance(function (n) {
        if (n) {
          n.onFloatingFilterChanged(e.getLastType(), t);
        }
      });
    };
    t.prototype.createDateComponent = function () {
      var e = this;
      var t = jo.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
      var n = {
        onDateChanged: re(this.onDateChanged.bind(this), t),
        filterParams: this.params.column.getColDef().filterParams
      };
      this.dateComp = new Eo(this.getContext(), this.userComponentFactory, n, this.eDateWrapper);
      this.addDestroyFunc(function () {
        return e.dateComp.destroy();
      });
    };
    ua([pe("userComponentFactory")], t.prototype, "userComponentFactory", undefined);
    ua([uo("eReadOnlyText")], t.prototype, "eReadOnlyText", undefined);
    ua([uo("eDateWrapper")], t.prototype, "eDateWrapper", undefined);
    return t;
  }(ca);
  var pa = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var fa = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var ha = function (e) {
    function t() {
      return e.call(this, "textFilter") || this;
    }
    pa(t, e);
    t.trimInput = function (e) {
      var t = e && e.trim();
      return "" === t ? e : t;
    };
    t.prototype.getDefaultDebounceMs = function () {
      return 500;
    };
    t.prototype.getCleanValue = function (e) {
      var r = n(e.getValue());
      return this.textFilterParams.trimInput ? t.trimInput(r) : r;
    };
    t.prototype.addValueChangedListeners = function () {
      var e = this;
      var t = function () {
        return e.onUiChanged();
      };
      this.eValue1.onValueChange(t);
      this.eValue2.onValueChange(t);
    };
    t.prototype.setParams = function (n) {
      e.prototype.setParams.call(this, n);
      this.textFilterParams = n;
      this.comparator = this.textFilterParams.textCustomComparator || t.DEFAULT_COMPARATOR;
      this.formatter = this.textFilterParams.textFormatter || (this.textFilterParams.caseSensitive ? t.DEFAULT_FORMATTER : t.DEFAULT_LOWERCASE_FORMATTER);
      this.addValueChangedListeners();
    };
    t.prototype.setConditionIntoUi = function (e, t) {
      (t === go.One ? this.eValue1 : this.eValue2).setValue(e ? e.filter : null);
    };
    t.prototype.createCondition = function (e) {
      var t = e === go.One;
      var n = t ? this.getCondition1Type() : this.getCondition2Type();
      var r = t ? this.eValue1 : this.eValue2;
      var o = this.getCleanValue(r);
      r.setValue(o, true);
      var i = {
        filterType: this.getFilterType(),
        type: n
      };
      if (!this.doesFilterHaveHiddenInput(n)) {
        i.filter = o;
      }
      return i;
    };
    t.prototype.getFilterType = function () {
      return "text";
    };
    t.prototype.areSimpleModelsEqual = function (e, t) {
      return e.filter === t.filter && e.type === t.type;
    };
    t.prototype.resetUiToDefaults = function (t) {
      var n = this;
      return e.prototype.resetUiToDefaults.call(this, t).then(function () {
        n.forEachInput(function (e) {
          return e.setValue(null, t);
        });
        n.resetPlaceholder();
      });
    };
    t.prototype.resetPlaceholder = function () {
      var e = this.gridOptionsWrapper.getLocaleTextFunc();
      var t = this.translate("filterOoo");
      this.forEachInput(function (n) {
        n.setInputPlaceholder(t);
        n.setInputAriaLabel(e("ariaFilterValue", "Filter Value"));
      });
    };
    t.prototype.forEachInput = function (e) {
      I([this.eValue1, this.eValue2], e);
    };
    t.prototype.setValueFromFloatingFilter = function (e) {
      this.eValue1.setValue(e);
      this.eValue2.setValue(null);
    };
    t.prototype.getDefaultFilterOptions = function () {
      return t.DEFAULT_FILTER_OPTIONS;
    };
    t.prototype.createValueTemplate = function (e) {
      var t = e === go.One ? "1" : "2";
      return "\n            <div class=\"ag-filter-body\" ref=\"eCondition" + t + "Body\" role=\"presentation\">\n                <ag-input-text-field class=\"ag-filter-filter\" ref=\"eValue" + t + "\"></ag-input-text-field>\n            </div>";
    };
    t.prototype.updateUiVisibility = function () {
      e.prototype.updateUiVisibility.call(this);
      tn(this.eCondition1Body, this.showValueFrom(this.getCondition1Type()));
      tn(this.eCondition2Body, this.isCondition2Enabled() && this.showValueFrom(this.getCondition2Type()));
    };
    t.prototype.afterGuiAttached = function (t) {
      e.prototype.afterGuiAttached.call(this, t);
      this.resetPlaceholder();
      if (!(t && t.suppressFocus)) {
        this.eValue1.getInputElement().focus();
      }
    };
    t.prototype.isConditionUiComplete = function (e) {
      var t = e === go.One;
      var n = t ? this.getCondition1Type() : this.getCondition2Type();
      return n !== xo.EMPTY && (!!this.doesFilterHaveHiddenInput(n) || null != this.getCleanValue(t ? this.eValue1 : this.eValue2));
    };
    t.prototype.individualConditionPasses = function (e, t) {
      var n = t.filter;
      var r = t.type;
      var o = this.textFilterParams.valueGetter(e.node);
      var i = this.formatter(o);
      var a = this.optionsFactory.getCustomOption(r);
      if (a && (null != n || a.hideFilterInput)) {
        return a.test(n, i);
      }
      if (null == o) {
        return r === xo.NOT_EQUAL || r === xo.NOT_CONTAINS;
      }
      var s = this.formatter(n);
      return this.comparator(r, i, s);
    };
    t.DEFAULT_FILTER_OPTIONS = [xo.CONTAINS, xo.NOT_CONTAINS, xo.EQUALS, xo.NOT_EQUAL, xo.STARTS_WITH, xo.ENDS_WITH];
    t.DEFAULT_FORMATTER = function (e) {
      return e;
    };
    t.DEFAULT_LOWERCASE_FORMATTER = function (e) {
      return null == e ? null : e.toString().toLowerCase();
    };
    t.DEFAULT_COMPARATOR = function (e, n, r) {
      switch (e) {
        case t.CONTAINS:
          return n.indexOf(r) >= 0;
        case t.NOT_CONTAINS:
          return n.indexOf(r) < 0;
        case t.EQUALS:
          return n === r;
        case t.NOT_EQUAL:
          return n != r;
        case t.STARTS_WITH:
          return 0 === n.indexOf(r);
        case t.ENDS_WITH:
          var o = n.lastIndexOf(r);
          return o >= 0 && o === n.length - r.length;
        default:
          console.warn("AG Grid: Unexpected type of filter \"" + e + "\", it looks like the filter was configured with incorrect Filter Options");
          return false;
      }
    };
    fa([uo("eValue1")], t.prototype, "eValue1", undefined);
    fa([uo("eValue2")], t.prototype, "eValue2", undefined);
    return t;
  }(xo);
  var ma = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ga = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var _a = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    ma(t, e);
    t.prototype.postConstruct = function () {
      this.setTemplate("\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterInput\"></ag-input-text-field>\n            </div>");
    };
    t.prototype.getDefaultDebounceMs = function () {
      return 500;
    };
    t.prototype.onParentModelChanged = function (e, t) {
      if (!this.isEventFromFloatingFilter(t)) {
        this.setLastTypeFromModel(e);
        this.eFloatingFilterInput.setValue(this.getTextFromModel(e));
        this.setEditable(this.canWeEditAfterModelFromParentFilter(e));
      }
    };
    t.prototype.init = function (t) {
      e.prototype.init.call(this, t);
      this.params = t;
      this.applyActive = jo.isUseApplyButton(this.params.filterParams);
      var n = jo.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
      var r = re(this.syncUpWithParentFilter.bind(this), n);
      var o = this.eFloatingFilterInput.getGui();
      this.addManagedListener(o, "input", r);
      this.addManagedListener(o, "keypress", r);
      this.addManagedListener(o, "keydown", r);
      var i = t.column.getDefinition();
      if (i.filterParams && i.filterParams.filterOptions && 1 === i.filterParams.filterOptions.length && "inRange" === i.filterParams.filterOptions[0]) {
        this.eFloatingFilterInput.setDisabled(true);
      }
      var a = this.columnController.getDisplayNameForColumn(t.column, "header", true);
      var s = this.gridOptionsWrapper.getLocaleTextFunc();
      this.eFloatingFilterInput.setInputAriaLabel(a + " " + s("ariaFilterInput", "Filter Input"));
    };
    t.prototype.syncUpWithParentFilter = function (e) {
      var t = this;
      var n = Lr(e, _o.ENTER);
      if (!this.applyActive || n) {
        var r = this.eFloatingFilterInput.getValue();
        if (this.params.filterParams.trimInput) {
          r = ha.trimInput(r);
          this.eFloatingFilterInput.setValue(r, true);
        }
        this.params.parentFilterInstance(function (e) {
          if (e) {
            e.onFloatingFilterChanged(t.getLastType(), r);
          }
        });
      }
    };
    t.prototype.setEditable = function (e) {
      this.eFloatingFilterInput.setDisabled(!e);
    };
    ga([pe("columnController")], t.prototype, "columnController", undefined);
    ga([uo("eFloatingFilterInput")], t.prototype, "eFloatingFilterInput", undefined);
    ga([le], t.prototype, "postConstruct", null);
    return t;
  }(ca);
  var va = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ba = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    va(t, e);
    t.prototype.getDefaultFilterOptions = function () {
      return Zi.DEFAULT_FILTER_OPTIONS;
    };
    t.prototype.conditionToString = function (e) {
      return e.type == xo.IN_RANGE ? e.filter + "-" + e.filterTo : null != e.filter ? "" + e.filter : "" + e.type;
    };
    return t;
  }(_a);
  var ya = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ea = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    ya(t, e);
    t.prototype.conditionToString = function (e) {
      return null != e.filter ? "" + e.filter : "" + e.type;
    };
    t.prototype.getDefaultFilterOptions = function () {
      return ha.DEFAULT_FILTER_OPTIONS;
    };
    return t;
  }(_a);
  var Oa = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var wa = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  !function (e) {
    e[e.DEFAULT = 0] = "DEFAULT";
    e[e.REGISTERED = 1] = "REGISTERED";
  }(bi || (bi = {}));
  var Ca = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.agGridDefaults = {
        agDateInput: aa,
        agColumnHeader: Wo,
        agColumnGroupHeader: zo,
        agTextColumnFloatingFilter: Ea,
        agNumberColumnFloatingFilter: ba,
        agDateColumnFloatingFilter: da,
        agAnimateShowChangeCellRenderer: ki,
        agAnimateSlideCellRenderer: Mi,
        agGroupCellRenderer: ji,
        agGroupRowRenderer: ji,
        agLoadingCellRenderer: Bi,
        agCellEditor: yo,
        agTextCellEditor: yo,
        agSelectCellEditor: Ui,
        agPopupTextCellEditor: Hi,
        agPopupSelectCellEditor: zi,
        agLargeTextCellEditor: qi,
        agTextColumnFilter: ha,
        agNumberColumnFilter: Zi,
        agDateColumnFilter: Bo,
        agLoadingOverlay: $i,
        agNoRowsOverlay: ta,
        agTooltipComponent: ra
      };
      t.agDeprecatedNames = {
        set: {
          newComponentName: "agSetColumnFilter",
          propertyHolder: "filter"
        },
        text: {
          newComponentName: "agTextColumnFilter",
          propertyHolder: "filter"
        },
        number: {
          newComponentName: "agNumberColumnFilter",
          propertyHolder: "filter"
        },
        date: {
          newComponentName: "agDateColumnFilter",
          propertyHolder: "filter"
        },
        group: {
          newComponentName: "agGroupCellRenderer",
          propertyHolder: "cellRenderer"
        },
        animateShowChange: {
          newComponentName: "agAnimateShowChangeCellRenderer",
          propertyHolder: "cellRenderer"
        },
        animateSlide: {
          newComponentName: "agAnimateSlideCellRenderer",
          propertyHolder: "cellRenderer"
        },
        select: {
          newComponentName: "agSelectCellEditor",
          propertyHolder: "cellEditor"
        },
        largeText: {
          newComponentName: "agLargeTextCellEditor",
          propertyHolder: "cellEditor"
        },
        popupSelect: {
          newComponentName: "agPopupSelectCellEditor",
          propertyHolder: "cellEditor"
        },
        popupText: {
          newComponentName: "agPopupTextCellEditor",
          propertyHolder: "cellEditor"
        },
        richSelect: {
          newComponentName: "agRichSelectCellEditor",
          propertyHolder: "cellEditor"
        },
        headerComponent: {
          newComponentName: "agColumnHeader",
          propertyHolder: "headerComponent"
        }
      };
      t.jsComponents = {};
      t.frameworkComponents = {};
      return t;
    }
    Oa(t, e);
    t.prototype.init = function () {
      var e = this;
      if (null != this.gridOptions.components) {
        R(this.gridOptions.components, function (t, n) {
          return e.registerComponent(t, n);
        });
      }
      if (null != this.gridOptions.frameworkComponents) {
        R(this.gridOptions.frameworkComponents, function (t, n) {
          return e.registerFwComponent(t, n);
        });
      }
    };
    t.prototype.registerDefaultComponent = function (e, t) {
      var n = this.translateIfDeprecated(e);
      if (this.agGridDefaults[n]) {
        console.error("Trying to overwrite a default component. You should call registerComponent");
      } else {
        this.agGridDefaults[n] = t;
      }
    };
    t.prototype.registerComponent = function (e, t) {
      var n = this.translateIfDeprecated(e);
      if (this.frameworkComponents[n]) {
        console.error("Trying to register a component that you have already registered for frameworks: " + n);
      } else {
        this.jsComponents[n] = t;
      }
    };
    t.prototype.registerFwComponent = function (e, t) {
      var n = this.translateIfDeprecated(e);
      if (this.jsComponents[n]) {
        console.error("Trying to register a component that you have already registered for plain javascript: " + n);
      } else {
        this.frameworkComponents[n] = t;
      }
    };
    t.prototype.retrieve = function (e) {
      var t = this.translateIfDeprecated(e);
      var n = this.frameworkComponents[t];
      if (n) {
        return {
          componentFromFramework: true,
          component: n,
          source: bi.REGISTERED
        };
      }
      var r = this.jsComponents[t];
      if (r) {
        return {
          componentFromFramework: false,
          component: r,
          source: bi.REGISTERED
        };
      }
      var o = this.agGridDefaults[t];
      return o ? {
        componentFromFramework: false,
        component: o,
        source: bi.DEFAULT
      } : (Object.keys(this.agGridDefaults).indexOf(t) < 0 && console.warn("AG Grid: Looking for component [" + t + "] but it wasn't found."), null);
    };
    t.prototype.translateIfDeprecated = function (e) {
      var t = this.agDeprecatedNames[e];
      return null != t ? (X(function () {
        console.warn("ag-grid. Since v15.0 component names have been renamed to be namespaced. You should rename " + t.propertyHolder + ":" + e + " to " + t.propertyHolder + ":" + t.newComponentName);
      }, "DEPRECATE_COMPONENT_" + e), t.newComponentName) : e;
    };
    wa([pe("gridOptions")], t.prototype, "gridOptions", undefined);
    wa([le], t.prototype, "init", null);
    return t = wa([de("userComponentRegistry")], t);
  }(We);
  var Ta = function () {
    function e() {}
    e.parse = function (t) {
      if (!t) {
        return null;
      }
      if (true === t) {
        return {
          toolPanels: [e.DEFAULT_COLUMN_COMP, e.DEFAULT_FILTER_COMP],
          defaultToolPanel: "columns"
        };
      }
      if ("string" === typeof t) {
        return e.parse([t]);
      }
      if (Array.isArray(t)) {
        var n = [];
        t.forEach(function (t) {
          var r = e.DEFAULT_BY_KEY[t];
          if (r) {
            n.push(r);
          } else {
            console.warn("ag-grid: the key " + t + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(e.DEFAULT_BY_KEY).join(","));
          }
        });
        return 0 === n.length ? null : {
          toolPanels: n,
          defaultToolPanel: n[0].id
        };
      }
      return {
        toolPanels: e.parseComponents(t.toolPanels),
        defaultToolPanel: t.defaultToolPanel,
        hiddenByDefault: t.hiddenByDefault,
        position: t.position
      };
    };
    e.parseComponents = function (t) {
      var n = [];
      return t ? (t.forEach(function (t) {
        var r = null;
        if ("string" === typeof t) {
          var o = e.DEFAULT_BY_KEY[t];
          if (!o) {
            return void console.warn("ag-grid: the key " + t + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(e.DEFAULT_BY_KEY).join(","));
          }
          r = o;
        } else {
          r = t;
        }
        n.push(r);
      }), n) : n;
    };
    e.DEFAULT_COLUMN_COMP = {
      id: "columns",
      labelDefault: "Columns",
      labelKey: "columns",
      iconKey: "columns",
      toolPanel: "agColumnsToolPanel"
    };
    e.DEFAULT_FILTER_COMP = {
      id: "filters",
      labelDefault: "Filters",
      labelKey: "filters",
      iconKey: "filter",
      toolPanel: "agFiltersToolPanel"
    };
    e.DEFAULT_BY_KEY = {
      columns: e.DEFAULT_COLUMN_COMP,
      filters: e.DEFAULT_FILTER_COMP
    };
    return e;
  }();
  var Sa = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ia = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var Aa = function () {
    for (var e = 0, t = 0, n = arguments.length; t < n; t++) {
      e += arguments[t].length;
    }
    var r = Array(e);
    var o = 0;
    for (t = 0; t < n; t++) {
      for (var i = arguments[t], a = 0, s = i.length; a < s; a++, o++) {
        r[o] = i[a];
      }
    }
    return r;
  };
  function ja(e) {
    return true === e || "true" === e;
  }
  function Na(e, t) {
    var n = parseInt(e, 10);
    return ht(n) && n > 0 ? n : t;
  }
  var Ra;
  var ka = function () {
    function e() {
      this.propertyEventService = new ye();
      this.domDataKey = "__AG_" + Math.random().toString();
      this.destroyed = false;
    }
    var n;
    n = e;
    e.prototype.agWire = function (e, t) {
      this.gridOptions.api = e;
      this.gridOptions.columnApi = t;
      this.checkForDeprecated();
      this.checkForViolations();
    };
    e.prototype.destroy = function () {
      this.gridOptions.api = null;
      this.gridOptions.columnApi = null;
      this.removeEventListener(n.PROP_DOM_LAYOUT, this.updateLayoutClassesListener);
      this.destroyed = true;
    };
    e.prototype.init = function () {
      var e = this;
      if (true !== this.gridOptions.suppressPropertyNamesCheck) {
        this.checkGridOptionsProperties();
        this.checkColumnDefProperties();
      }
      if (null != this.gridOptions.sideBar) {
        this.gridOptions.sideBar = Ta.parse(this.gridOptions.sideBar);
      }
      var n = this.useAsyncEvents();
      this.eventService.addGlobalListener(this.globalEventHandler.bind(this), n);
      if (this.isGroupSelectsChildren() && this.isSuppressParentsInRowNodes()) {
        console.warn("AG Grid: 'groupSelectsChildren' does not work with 'suppressParentsInRowNodes', this selection method needs the part in rowNode to work");
      }
      if (this.isGroupSelectsChildren()) {
        if (!this.isRowSelectionMulti()) {
          console.warn("AG Grid: rowSelection must be 'multiple' for groupSelectsChildren to make sense");
        }
        if (this.isRowModelServerSide()) {
          console.warn("AG Grid: group selects children is NOT support for Server Side Row Model. This is because the rows are lazy loaded, so selecting a group is not possible asthe grid has no way of knowing what the children are.");
        }
      }
      if (this.isGroupRemoveSingleChildren() && this.isGroupHideOpenParents()) {
        console.warn("AG Grid: groupRemoveSingleChildren and groupHideOpenParents do not work with each other, you need to pick one. And don't ask us how to us these together on our support forum either you will get the same answer!");
      }
      if (this.isRowModelServerSide()) {
        var o = function (e) {
          return "AG Grid: '" + e + "' is not supported on the Server-Side Row Model";
        };
        if (r(this.gridOptions.groupDefaultExpanded)) {
          console.warn(o("groupDefaultExpanded"));
        }
        if (r(this.gridOptions.groupDefaultExpanded)) {
          console.warn(o("groupIncludeFooter"));
        }
        if (r(this.gridOptions.groupDefaultExpanded)) {
          console.warn(o("groupIncludeTotalFooter"));
        }
      }
      if (this.isEnableRangeSelection()) {
        Oe.assertRegistered(exports.ModuleNames.RangeSelectionModule, "enableRangeSelection");
      }
      if (!(this.isEnableRangeSelection() || !this.isEnableRangeHandle() && !this.isEnableFillHandle())) {
        console.warn("AG Grid: 'enableRangeHandle' and 'enableFillHandle' will not work unless 'enableRangeSelection' is set to true");
      }
      var i = function (t) {
        if (e.gridOptions.icons && e.gridOptions.icons[t]) {
          console.warn("gridOptions.icons." + t + " is no longer supported. For information on how to style checkboxes and radio buttons, see https://www.ag-grid.com/javascript-grid-icons/");
        }
      };
      i("radioButtonOff");
      i("radioButtonOn");
      i("checkboxChecked");
      i("checkboxUnchecked");
      i("checkboxIndeterminate");
      this.getScrollbarWidth();
    };
    e.prototype.checkColumnDefProperties = function () {
      var e = this;
      if (null != this.gridOptions.columnDefs) {
        this.gridOptions.columnDefs.forEach(function (t) {
          var n = Object.getOwnPropertyNames(t);
          var r = Aa(zn.ALL_PROPERTIES, zn.FRAMEWORK_PROPERTIES);
          e.checkProperties(n, r, r, "colDef", "https://www.ag-grid.com/javascript-grid-column-properties/");
        });
      }
    };
    e.prototype.checkGridOptionsProperties = function () {
      var e = Object.getOwnPropertyNames(this.gridOptions);
      var t = Aa(Gn.ALL_PROPERTIES, Gn.FRAMEWORK_PROPERTIES, d(Ke).map(function (e) {
        return Hn.getCallbackForEvent(e);
      }));
      var n = Aa(t, ["api", "columnApi"]);
      this.checkProperties(e, n, t, "gridOptions", "https://www.ag-grid.com/javascript-grid-properties/");
    };
    e.prototype.checkProperties = function (e, t, n, r, o) {
      var i = Sr(e, t, n);
      R(i, function (e, t) {
        console.warn("ag-grid: invalid " + r + " property '" + e + "' did you mean any of these: " + t.slice(0, 8).join(", "));
      });
      if (Object.keys(i).length > 0) {
        console.warn("ag-grid: to see all the valid " + r + " properties please check: " + o);
      }
    };
    e.prototype.getDomDataKey = function () {
      return this.domDataKey;
    };
    e.prototype.getDomData = function (e, t) {
      var n = e[this.getDomDataKey()];
      return n ? n[t] : undefined;
    };
    e.prototype.setDomData = function (e, t, n) {
      var r = this.getDomDataKey();
      var i = e[r];
      if (o(i)) {
        i = {};
        e[r] = i;
      }
      i[t] = n;
    };
    e.prototype.isRowSelection = function () {
      return "single" === this.gridOptions.rowSelection || "multiple" === this.gridOptions.rowSelection;
    };
    e.prototype.isSuppressRowDeselection = function () {
      return ja(this.gridOptions.suppressRowDeselection);
    };
    e.prototype.isRowSelectionMulti = function () {
      return "multiple" === this.gridOptions.rowSelection;
    };
    e.prototype.isRowMultiSelectWithClick = function () {
      return ja(this.gridOptions.rowMultiSelectWithClick);
    };
    e.prototype.getContext = function () {
      return this.gridOptions.context;
    };
    e.prototype.isPivotMode = function () {
      return ja(this.gridOptions.pivotMode);
    };
    e.prototype.isSuppressExpandablePivotGroups = function () {
      return ja(this.gridOptions.suppressExpandablePivotGroups);
    };
    e.prototype.getPivotColumnGroupTotals = function () {
      return this.gridOptions.pivotColumnGroupTotals;
    };
    e.prototype.getPivotRowTotals = function () {
      return this.gridOptions.pivotRowTotals;
    };
    e.prototype.isRowModelInfinite = function () {
      return this.gridOptions.rowModelType === Ee.ROW_MODEL_TYPE_INFINITE;
    };
    e.prototype.isRowModelViewport = function () {
      return this.gridOptions.rowModelType === Ee.ROW_MODEL_TYPE_VIEWPORT;
    };
    e.prototype.isRowModelServerSide = function () {
      return this.gridOptions.rowModelType === Ee.ROW_MODEL_TYPE_SERVER_SIDE;
    };
    e.prototype.isRowModelDefault = function () {
      return o(this.gridOptions.rowModelType) || this.gridOptions.rowModelType === Ee.ROW_MODEL_TYPE_CLIENT_SIDE;
    };
    e.prototype.isFullRowEdit = function () {
      return "fullRow" === this.gridOptions.editType;
    };
    e.prototype.isSuppressFocusAfterRefresh = function () {
      return ja(this.gridOptions.suppressFocusAfterRefresh);
    };
    e.prototype.isSuppressBrowserResizeObserver = function () {
      return ja(this.gridOptions.suppressBrowserResizeObserver);
    };
    e.prototype.isSuppressMaintainUnsortedOrder = function () {
      return ja(this.gridOptions.suppressMaintainUnsortedOrder);
    };
    e.prototype.isSuppressClearOnFillReduction = function () {
      return ja(this.gridOptions.suppressClearOnFillReduction);
    };
    e.prototype.isShowToolPanel = function () {
      return ja(this.gridOptions.sideBar && Array.isArray(this.getSideBar().toolPanels));
    };
    e.prototype.getSideBar = function () {
      return this.gridOptions.sideBar;
    };
    e.prototype.isSuppressTouch = function () {
      return ja(this.gridOptions.suppressTouch);
    };
    e.prototype.isApplyColumnDefOrder = function () {
      return ja(this.gridOptions.applyColumnDefOrder);
    };
    e.prototype.isSuppressRowTransform = function () {
      return ja(this.gridOptions.suppressRowTransform);
    };
    e.prototype.isSuppressColumnStateEvents = function () {
      return ja(this.gridOptions.suppressColumnStateEvents);
    };
    e.prototype.isAllowDragFromColumnsToolPanel = function () {
      return ja(this.gridOptions.allowDragFromColumnsToolPanel);
    };
    e.prototype.useAsyncEvents = function () {
      return !ja(this.gridOptions.suppressAsyncEvents);
    };
    e.prototype.isEnableCellChangeFlash = function () {
      return ja(this.gridOptions.enableCellChangeFlash);
    };
    e.prototype.getCellFlashDelay = function () {
      return this.gridOptions.cellFlashDelay || 500;
    };
    e.prototype.getCellFadeDelay = function () {
      return this.gridOptions.cellFadeDelay || 1e3;
    };
    e.prototype.isGroupSelectsChildren = function () {
      var e = ja(this.gridOptions.groupSelectsChildren);
      return e && this.isTreeData() ? (console.warn("AG Grid: groupSelectsChildren does not work with tree data"), false) : e;
    };
    e.prototype.isSuppressRowHoverHighlight = function () {
      return ja(this.gridOptions.suppressRowHoverHighlight);
    };
    e.prototype.isGroupSelectsFiltered = function () {
      return ja(this.gridOptions.groupSelectsFiltered);
    };
    e.prototype.isGroupHideOpenParents = function () {
      return ja(this.gridOptions.groupHideOpenParents);
    };
    e.prototype.isGroupMultiAutoColumn = function () {
      return ja(this.gridOptions.groupMultiAutoColumn) || ja(this.gridOptions.groupHideOpenParents);
    };
    e.prototype.isGroupRemoveSingleChildren = function () {
      return ja(this.gridOptions.groupRemoveSingleChildren);
    };
    e.prototype.isGroupRemoveLowestSingleChildren = function () {
      return ja(this.gridOptions.groupRemoveLowestSingleChildren);
    };
    e.prototype.isGroupIncludeFooter = function () {
      return ja(this.gridOptions.groupIncludeFooter);
    };
    e.prototype.isGroupIncludeTotalFooter = function () {
      return ja(this.gridOptions.groupIncludeTotalFooter);
    };
    e.prototype.isGroupSuppressBlankHeader = function () {
      return ja(this.gridOptions.groupSuppressBlankHeader);
    };
    e.prototype.isSuppressRowClickSelection = function () {
      return ja(this.gridOptions.suppressRowClickSelection);
    };
    e.prototype.isSuppressCellSelection = function () {
      return ja(this.gridOptions.suppressCellSelection);
    };
    e.prototype.isSuppressMultiSort = function () {
      return ja(this.gridOptions.suppressMultiSort);
    };
    e.prototype.isMultiSortKeyCtrl = function () {
      return "ctrl" === this.gridOptions.multiSortKey;
    };
    e.prototype.isGroupSuppressAutoColumn = function () {
      return ja(this.gridOptions.groupSuppressAutoColumn);
    };
    e.prototype.isPivotSuppressAutoColumn = function () {
      return ja(this.gridOptions.pivotSuppressAutoColumn);
    };
    e.prototype.isSuppressDragLeaveHidesColumns = function () {
      return ja(this.gridOptions.suppressDragLeaveHidesColumns);
    };
    e.prototype.isSuppressScrollOnNewData = function () {
      return ja(this.gridOptions.suppressScrollOnNewData);
    };
    e.prototype.isRowDragManaged = function () {
      return ja(this.gridOptions.rowDragManaged);
    };
    e.prototype.isSuppressRowDrag = function () {
      return ja(this.gridOptions.suppressRowDrag);
    };
    e.prototype.isSuppressMoveWhenRowDragging = function () {
      return ja(this.gridOptions.suppressMoveWhenRowDragging);
    };
    e.prototype.isEnableMultiRowDragging = function () {
      return ja(this.gridOptions.enableMultiRowDragging);
    };
    e.prototype.getDomLayout = function () {
      var e = this.gridOptions.domLayout || Ee.DOM_LAYOUT_NORMAL;
      return -1 === [Ee.DOM_LAYOUT_PRINT, Ee.DOM_LAYOUT_AUTO_HEIGHT, Ee.DOM_LAYOUT_NORMAL].indexOf(e) ? (X(function () {
        return console.warn("AG Grid: " + e + " is not valid for DOM Layout, valid values are " + Ee.DOM_LAYOUT_NORMAL + ", " + Ee.DOM_LAYOUT_AUTO_HEIGHT + " and " + Ee.DOM_LAYOUT_PRINT);
      }, "warn about dom layout values"), Ee.DOM_LAYOUT_NORMAL) : e;
    };
    e.prototype.isSuppressHorizontalScroll = function () {
      return ja(this.gridOptions.suppressHorizontalScroll);
    };
    e.prototype.isSuppressMaxRenderedRowRestriction = function () {
      return ja(this.gridOptions.suppressMaxRenderedRowRestriction);
    };
    e.prototype.isExcludeChildrenWhenTreeDataFiltering = function () {
      return ja(this.gridOptions.excludeChildrenWhenTreeDataFiltering);
    };
    e.prototype.isAlwaysShowHorizontalScroll = function () {
      return ja(this.gridOptions.alwaysShowHorizontalScroll);
    };
    e.prototype.isAlwaysShowVerticalScroll = function () {
      return ja(this.gridOptions.alwaysShowVerticalScroll);
    };
    e.prototype.isDebounceVerticalScrollbar = function () {
      return ja(this.gridOptions.debounceVerticalScrollbar);
    };
    e.prototype.isSuppressLoadingOverlay = function () {
      return ja(this.gridOptions.suppressLoadingOverlay);
    };
    e.prototype.isSuppressNoRowsOverlay = function () {
      return ja(this.gridOptions.suppressNoRowsOverlay);
    };
    e.prototype.isSuppressFieldDotNotation = function () {
      return ja(this.gridOptions.suppressFieldDotNotation);
    };
    e.prototype.getPinnedTopRowData = function () {
      return this.gridOptions.pinnedTopRowData;
    };
    e.prototype.getPinnedBottomRowData = function () {
      return this.gridOptions.pinnedBottomRowData;
    };
    e.prototype.isFunctionsPassive = function () {
      return ja(this.gridOptions.functionsPassive);
    };
    e.prototype.isSuppressChangeDetection = function () {
      return ja(this.gridOptions.suppressChangeDetection);
    };
    e.prototype.isSuppressAnimationFrame = function () {
      return ja(this.gridOptions.suppressAnimationFrame);
    };
    e.prototype.getQuickFilterText = function () {
      return this.gridOptions.quickFilterText;
    };
    e.prototype.isCacheQuickFilter = function () {
      return ja(this.gridOptions.cacheQuickFilter);
    };
    e.prototype.isUnSortIcon = function () {
      return ja(this.gridOptions.unSortIcon);
    };
    e.prototype.isSuppressMenuHide = function () {
      return ja(this.gridOptions.suppressMenuHide);
    };
    e.prototype.isEnterMovesDownAfterEdit = function () {
      return ja(this.gridOptions.enterMovesDownAfterEdit);
    };
    e.prototype.isEnterMovesDown = function () {
      return ja(this.gridOptions.enterMovesDown);
    };
    e.prototype.isUndoRedoCellEditing = function () {
      return ja(this.gridOptions.undoRedoCellEditing);
    };
    e.prototype.getUndoRedoCellEditingLimit = function () {
      return this.gridOptions.undoRedoCellEditingLimit;
    };
    e.prototype.getRowStyle = function () {
      return this.gridOptions.rowStyle;
    };
    e.prototype.getRowClass = function () {
      return this.gridOptions.rowClass;
    };
    e.prototype.getRowStyleFunc = function () {
      return this.gridOptions.getRowStyle;
    };
    e.prototype.getRowClassFunc = function () {
      return this.gridOptions.getRowClass;
    };
    e.prototype.rowClassRules = function () {
      return this.gridOptions.rowClassRules;
    };
    e.prototype.getServerSideStoreType = function () {
      return this.gridOptions.serverSideStoreType;
    };
    e.prototype.getServerSideStoreParamsFunc = function () {
      return this.gridOptions.getServerSideStoreParams;
    };
    e.prototype.getCreateChartContainerFunc = function () {
      return this.gridOptions.createChartContainer;
    };
    e.prototype.getPopupParent = function () {
      return this.gridOptions.popupParent;
    };
    e.prototype.getBlockLoadDebounceMillis = function () {
      return this.gridOptions.blockLoadDebounceMillis;
    };
    e.prototype.getPostProcessPopupFunc = function () {
      return this.gridOptions.postProcessPopup;
    };
    e.prototype.getPaginationNumberFormatterFunc = function () {
      return this.gridOptions.paginationNumberFormatter;
    };
    e.prototype.getChildCountFunc = function () {
      return this.gridOptions.getChildCount;
    };
    e.prototype.getIsApplyServerSideTransactionFunc = function () {
      return this.gridOptions.isApplyServerSideTransaction;
    };
    e.prototype.getDefaultGroupSortComparator = function () {
      return this.gridOptions.defaultGroupSortComparator;
    };
    e.prototype.getIsFullWidthCellFunc = function () {
      return this.gridOptions.isFullWidthCell;
    };
    e.prototype.getFullWidthCellRendererParams = function () {
      return this.gridOptions.fullWidthCellRendererParams;
    };
    e.prototype.isEmbedFullWidthRows = function () {
      return ja(this.gridOptions.embedFullWidthRows) || ja(this.gridOptions.deprecatedEmbedFullWidthRows);
    };
    e.prototype.isDetailRowAutoHeight = function () {
      return ja(this.gridOptions.detailRowAutoHeight);
    };
    e.prototype.getSuppressKeyboardEventFunc = function () {
      return this.gridOptions.suppressKeyboardEvent;
    };
    e.prototype.getBusinessKeyForNodeFunc = function () {
      return this.gridOptions.getBusinessKeyForNode;
    };
    e.prototype.getApi = function () {
      return this.gridOptions.api;
    };
    e.prototype.getColumnApi = function () {
      return this.gridOptions.columnApi;
    };
    e.prototype.isImmutableData = function () {
      return ja(this.gridOptions.immutableData);
    };
    e.prototype.isEnsureDomOrder = function () {
      return ja(this.gridOptions.ensureDomOrder);
    };
    e.prototype.isEnableCharts = function () {
      return !!ja(this.gridOptions.enableCharts) && Oe.assertRegistered(exports.ModuleNames.GridChartsModule, "enableCharts");
    };
    e.prototype.getColResizeDefault = function () {
      return this.gridOptions.colResizeDefault;
    };
    e.prototype.isSingleClickEdit = function () {
      return ja(this.gridOptions.singleClickEdit);
    };
    e.prototype.isSuppressClickEdit = function () {
      return ja(this.gridOptions.suppressClickEdit);
    };
    e.prototype.isStopEditingWhenCellsLoseFocus = function () {
      return ja(this.gridOptions.stopEditingWhenCellsLoseFocus);
    };
    e.prototype.getGroupDefaultExpanded = function () {
      return this.gridOptions.groupDefaultExpanded;
    };
    e.prototype.getMaxConcurrentDatasourceRequests = function () {
      return this.gridOptions.maxConcurrentDatasourceRequests;
    };
    e.prototype.getMaxBlocksInCache = function () {
      return this.gridOptions.maxBlocksInCache;
    };
    e.prototype.getCacheOverflowSize = function () {
      return this.gridOptions.cacheOverflowSize;
    };
    e.prototype.getPaginationPageSize = function () {
      return function (e) {
        return "number" == typeof e ? e : "string" == typeof e ? parseInt(e, 10) : undefined;
      }(this.gridOptions.paginationPageSize);
    };
    e.prototype.isPaginateChildRows = function () {
      return !(!this.isGroupRemoveSingleChildren() && !this.isGroupRemoveLowestSingleChildren()) || ja(this.gridOptions.paginateChildRows);
    };
    e.prototype.getCacheBlockSize = function () {
      return Na(this.gridOptions.cacheBlockSize);
    };
    e.prototype.getInfiniteInitialRowCount = function () {
      return this.gridOptions.infiniteInitialRowCount;
    };
    e.prototype.isPurgeClosedRowNodes = function () {
      return ja(this.gridOptions.purgeClosedRowNodes);
    };
    e.prototype.isSuppressPaginationPanel = function () {
      return ja(this.gridOptions.suppressPaginationPanel);
    };
    e.prototype.getRowData = function () {
      return this.gridOptions.rowData;
    };
    e.prototype.isGroupUseEntireRow = function (e) {
      return !e && ja(this.gridOptions.groupUseEntireRow);
    };
    e.prototype.isEnableRtl = function () {
      return ja(this.gridOptions.enableRtl);
    };
    e.prototype.getAutoGroupColumnDef = function () {
      return this.gridOptions.autoGroupColumnDef;
    };
    e.prototype.getRowGroupPanelShow = function () {
      return this.gridOptions.rowGroupPanelShow;
    };
    e.prototype.getPivotPanelShow = function () {
      return this.gridOptions.pivotPanelShow;
    };
    e.prototype.isAngularCompileRows = function () {
      return ja(this.gridOptions.angularCompileRows);
    };
    e.prototype.isAngularCompileFilters = function () {
      return ja(this.gridOptions.angularCompileFilters);
    };
    e.prototype.isDebug = function () {
      return ja(this.gridOptions.debug);
    };
    e.prototype.getColumnDefs = function () {
      return this.gridOptions.columnDefs;
    };
    e.prototype.getColumnTypes = function () {
      return this.gridOptions.columnTypes;
    };
    e.prototype.getDatasource = function () {
      return this.gridOptions.datasource;
    };
    e.prototype.getViewportDatasource = function () {
      return this.gridOptions.viewportDatasource;
    };
    e.prototype.getServerSideDatasource = function () {
      return this.gridOptions.serverSideDatasource;
    };
    e.prototype.isAccentedSort = function () {
      return ja(this.gridOptions.accentedSort);
    };
    e.prototype.isEnableBrowserTooltips = function () {
      return ja(this.gridOptions.enableBrowserTooltips);
    };
    e.prototype.isEnableCellExpressions = function () {
      return ja(this.gridOptions.enableCellExpressions);
    };
    e.prototype.isEnableGroupEdit = function () {
      return ja(this.gridOptions.enableGroupEdit);
    };
    e.prototype.isSuppressMiddleClickScrolls = function () {
      return ja(this.gridOptions.suppressMiddleClickScrolls);
    };
    e.prototype.isPreventDefaultOnContextMenu = function () {
      return ja(this.gridOptions.preventDefaultOnContextMenu);
    };
    e.prototype.isSuppressPreventDefaultOnMouseWheel = function () {
      return ja(this.gridOptions.suppressPreventDefaultOnMouseWheel);
    };
    e.prototype.isSuppressColumnVirtualisation = function () {
      return ja(this.gridOptions.suppressColumnVirtualisation);
    };
    e.prototype.isSuppressContextMenu = function () {
      return ja(this.gridOptions.suppressContextMenu);
    };
    e.prototype.isAllowContextMenuWithControlKey = function () {
      return ja(this.gridOptions.allowContextMenuWithControlKey);
    };
    e.prototype.isSuppressCopyRowsToClipboard = function () {
      return ja(this.gridOptions.suppressCopyRowsToClipboard);
    };
    e.prototype.isCopyHeadersToClipboard = function () {
      return ja(this.gridOptions.copyHeadersToClipboard);
    };
    e.prototype.isSuppressClipboardPaste = function () {
      return ja(this.gridOptions.suppressClipboardPaste);
    };
    e.prototype.isSuppressLastEmptyLineOnPaste = function () {
      return ja(this.gridOptions.suppressLastEmptyLineOnPaste);
    };
    e.prototype.isPagination = function () {
      return ja(this.gridOptions.pagination);
    };
    e.prototype.isSuppressEnterpriseResetOnNewColumns = function () {
      return ja(this.gridOptions.suppressEnterpriseResetOnNewColumns);
    };
    e.prototype.getProcessDataFromClipboardFunc = function () {
      return this.gridOptions.processDataFromClipboard;
    };
    e.prototype.getAsyncTransactionWaitMillis = function () {
      return r(this.gridOptions.asyncTransactionWaitMillis) ? this.gridOptions.asyncTransactionWaitMillis : Ee.BATCH_WAIT_MILLIS;
    };
    e.prototype.isSuppressMovableColumns = function () {
      return ja(this.gridOptions.suppressMovableColumns);
    };
    e.prototype.isAnimateRows = function () {
      return !this.isEnsureDomOrder() && ja(this.gridOptions.animateRows);
    };
    e.prototype.isSuppressColumnMoveAnimation = function () {
      return ja(this.gridOptions.suppressColumnMoveAnimation);
    };
    e.prototype.isSuppressAggFuncInHeader = function () {
      return ja(this.gridOptions.suppressAggFuncInHeader);
    };
    e.prototype.isSuppressAggAtRootLevel = function () {
      return ja(this.gridOptions.suppressAggAtRootLevel);
    };
    e.prototype.isSuppressAggFilteredOnly = function () {
      return ja(this.gridOptions.suppressAggFilteredOnly);
    };
    e.prototype.isShowOpenedGroup = function () {
      return ja(this.gridOptions.showOpenedGroup);
    };
    e.prototype.isEnableRangeSelection = function () {
      return Oe.isRegistered(exports.ModuleNames.RangeSelectionModule) && ja(this.gridOptions.enableRangeSelection);
    };
    e.prototype.isEnableRangeHandle = function () {
      return ja(this.gridOptions.enableRangeHandle);
    };
    e.prototype.isEnableFillHandle = function () {
      return ja(this.gridOptions.enableFillHandle);
    };
    e.prototype.getFillHandleDirection = function () {
      var e = this.gridOptions.fillHandleDirection;
      return e ? "x" !== e && "y" !== e && "xy" !== e ? (X(function () {
        return console.warn("AG Grid: valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.");
      }, "warn invalid fill direction"), "xy") : e : "xy";
    };
    e.prototype.getFillOperation = function () {
      return this.gridOptions.fillOperation;
    };
    e.prototype.isSuppressMultiRangeSelection = function () {
      return ja(this.gridOptions.suppressMultiRangeSelection);
    };
    e.prototype.isPaginationAutoPageSize = function () {
      return ja(this.gridOptions.paginationAutoPageSize);
    };
    e.prototype.isRememberGroupStateWhenNewData = function () {
      return ja(this.gridOptions.rememberGroupStateWhenNewData);
    };
    e.prototype.getIcons = function () {
      return this.gridOptions.icons;
    };
    e.prototype.getAggFuncs = function () {
      return this.gridOptions.aggFuncs;
    };
    e.prototype.getSortingOrder = function () {
      return this.gridOptions.sortingOrder;
    };
    e.prototype.getAlignedGrids = function () {
      return this.gridOptions.alignedGrids;
    };
    e.prototype.isMasterDetail = function () {
      return !!ja(this.gridOptions.masterDetail) && Oe.assertRegistered(exports.ModuleNames.MasterDetailModule, "masterDetail");
    };
    e.prototype.isKeepDetailRows = function () {
      return ja(this.gridOptions.keepDetailRows);
    };
    e.prototype.getKeepDetailRowsCount = function () {
      var e = this.gridOptions.keepDetailRowsCount;
      return r(e) && e > 0 ? this.gridOptions.keepDetailRowsCount : 10;
    };
    e.prototype.getIsRowMasterFunc = function () {
      return this.gridOptions.isRowMaster;
    };
    e.prototype.getIsRowSelectableFunc = function () {
      return this.gridOptions.isRowSelectable;
    };
    e.prototype.getGroupRowRendererParams = function () {
      return this.gridOptions.groupRowRendererParams;
    };
    e.prototype.getOverlayLoadingTemplate = function () {
      return this.gridOptions.overlayLoadingTemplate;
    };
    e.prototype.getOverlayNoRowsTemplate = function () {
      return this.gridOptions.overlayNoRowsTemplate;
    };
    e.prototype.isSuppressAutoSize = function () {
      return ja(this.gridOptions.suppressAutoSize);
    };
    e.prototype.isEnableCellTextSelection = function () {
      return ja(this.gridOptions.enableCellTextSelection);
    };
    e.prototype.isSuppressParentsInRowNodes = function () {
      return ja(this.gridOptions.suppressParentsInRowNodes);
    };
    e.prototype.isSuppressClipboardApi = function () {
      return ja(this.gridOptions.suppressClipboardApi);
    };
    e.prototype.isFunctionsReadOnly = function () {
      return ja(this.gridOptions.functionsReadOnly);
    };
    e.prototype.isFloatingFilter = function () {
      return this.gridOptions.floatingFilter;
    };
    e.prototype.isEnableCellTextSelect = function () {
      return ja(this.gridOptions.enableCellTextSelection);
    };
    e.prototype.isEnableOldSetFilterModel = function () {
      return ja(this.gridOptions.enableOldSetFilterModel);
    };
    e.prototype.getDefaultColDef = function () {
      return this.gridOptions.defaultColDef;
    };
    e.prototype.getDefaultColGroupDef = function () {
      return this.gridOptions.defaultColGroupDef;
    };
    e.prototype.getDefaultExportParams = function (e) {
      return this.gridOptions.defaultExportParams ? (console.warn("AG Grid: Since v25.2 `defaultExportParams`  has been replaced by `default" + tt(e) + "ExportParams`'"), this.gridOptions.defaultExportParams) : "csv" === e && this.gridOptions.defaultCsvExportParams ? this.gridOptions.defaultCsvExportParams : "excel" === e && this.gridOptions.defaultExcelExportParams ? this.gridOptions.defaultExcelExportParams : undefined;
    };
    e.prototype.isSuppressCsvExport = function () {
      return ja(this.gridOptions.suppressCsvExport);
    };
    e.prototype.isAllowShowChangeAfterFilter = function () {
      return ja(this.gridOptions.allowShowChangeAfterFilter);
    };
    e.prototype.isSuppressExcelExport = function () {
      return ja(this.gridOptions.suppressExcelExport);
    };
    e.prototype.isSuppressMakeColumnVisibleAfterUnGroup = function () {
      return ja(this.gridOptions.suppressMakeColumnVisibleAfterUnGroup);
    };
    e.prototype.getDataPathFunc = function () {
      return this.gridOptions.getDataPath;
    };
    e.prototype.getIsServerSideGroupFunc = function () {
      return this.gridOptions.isServerSideGroup;
    };
    e.prototype.getIsServerSideGroupOpenByDefaultFunc = function () {
      return this.gridOptions.isServerSideGroupOpenByDefault;
    };
    e.prototype.getIsGroupOpenByDefaultFunc = function () {
      return this.gridOptions.isGroupOpenByDefault;
    };
    e.prototype.getServerSideGroupKeyFunc = function () {
      return this.gridOptions.getServerSideGroupKey;
    };
    e.prototype.getGroupRowAggNodesFunc = function () {
      return this.gridOptions.groupRowAggNodes;
    };
    e.prototype.getContextMenuItemsFunc = function () {
      return this.gridOptions.getContextMenuItems;
    };
    e.prototype.getMainMenuItemsFunc = function () {
      return this.gridOptions.getMainMenuItems;
    };
    e.prototype.getRowNodeIdFunc = function () {
      return this.gridOptions.getRowNodeId;
    };
    e.prototype.getNavigateToNextHeaderFunc = function () {
      return this.gridOptions.navigateToNextHeader;
    };
    e.prototype.getTabToNextHeaderFunc = function () {
      return this.gridOptions.tabToNextHeader;
    };
    e.prototype.getNavigateToNextCellFunc = function () {
      return this.gridOptions.navigateToNextCell;
    };
    e.prototype.getTabToNextCellFunc = function () {
      return this.gridOptions.tabToNextCell;
    };
    e.prototype.getGridTabIndex = function () {
      return (this.gridOptions.tabIndex || 0).toString();
    };
    e.prototype.isTreeData = function () {
      return !!ja(this.gridOptions.treeData) && Oe.assertRegistered(exports.ModuleNames.RowGroupingModule, "Tree Data");
    };
    e.prototype.isValueCache = function () {
      return ja(this.gridOptions.valueCache);
    };
    e.prototype.isValueCacheNeverExpires = function () {
      return ja(this.gridOptions.valueCacheNeverExpires);
    };
    e.prototype.isDeltaSort = function () {
      return ja(this.gridOptions.deltaSort);
    };
    e.prototype.isAggregateOnlyChangedColumns = function () {
      return ja(this.gridOptions.aggregateOnlyChangedColumns);
    };
    e.prototype.getProcessSecondaryColDefFunc = function () {
      return this.gridOptions.processSecondaryColDef;
    };
    e.prototype.getProcessSecondaryColGroupDefFunc = function () {
      return this.gridOptions.processSecondaryColGroupDef;
    };
    e.prototype.getSendToClipboardFunc = function () {
      return this.gridOptions.sendToClipboard;
    };
    e.prototype.getProcessRowPostCreateFunc = function () {
      return this.gridOptions.processRowPostCreate;
    };
    e.prototype.getProcessCellForClipboardFunc = function () {
      return this.gridOptions.processCellForClipboard;
    };
    e.prototype.getProcessHeaderForClipboardFunc = function () {
      return this.gridOptions.processHeaderForClipboard;
    };
    e.prototype.getProcessCellFromClipboardFunc = function () {
      return this.gridOptions.processCellFromClipboard;
    };
    e.prototype.getViewportRowModelPageSize = function () {
      return Na(this.gridOptions.viewportRowModelPageSize, 5);
    };
    e.prototype.getViewportRowModelBufferSize = function () {
      return function (e, t) {
        return e >= 0 ? e : t;
      }(this.gridOptions.viewportRowModelBufferSize, 5);
    };
    e.prototype.isServerSideSortingAlwaysResets = function () {
      return ja(this.gridOptions.serverSideSortingAlwaysResets);
    };
    e.prototype.isServerSideFilteringAlwaysResets = function () {
      return ja(this.gridOptions.serverSideFilteringAlwaysResets);
    };
    e.prototype.getPostSortFunc = function () {
      return this.gridOptions.postSort;
    };
    e.prototype.getChartToolbarItemsFunc = function () {
      return this.gridOptions.getChartToolbarItems;
    };
    e.prototype.getChartThemeOverrides = function () {
      return this.gridOptions.chartThemeOverrides;
    };
    e.prototype.getCustomChartThemes = function () {
      return this.gridOptions.customChartThemes;
    };
    e.prototype.getChartThemes = function () {
      return this.gridOptions.chartThemes || ["ag-default", "ag-material", "ag-pastel", "ag-vivid", "ag-solar"];
    };
    e.prototype.getProcessChartOptionsFunc = function () {
      return this.gridOptions.processChartOptions;
    };
    e.prototype.getClipboardDeliminator = function () {
      return r(this.gridOptions.clipboardDeliminator) ? this.gridOptions.clipboardDeliminator : "\t";
    };
    e.prototype.setProperty = function (e, t, n) {
      if (undefined === n) {
        n = false;
      }
      var r = this.gridOptions;
      var o = r[e];
      if (n || o !== t) {
        r[e] = t;
        var i = {
          type: e,
          currentValue: t,
          previousValue: o
        };
        this.propertyEventService.dispatchEvent(i);
      }
    };
    e.prototype.addEventListener = function (e, t) {
      this.propertyEventService.addEventListener(e, t);
    };
    e.prototype.removeEventListener = function (e, t) {
      this.propertyEventService.removeEventListener(e, t);
    };
    e.prototype.isSkipHeaderOnAutoSize = function () {
      return !!this.gridOptions.skipHeaderOnAutoSize;
    };
    e.prototype.getAutoSizePadding = function () {
      var e = this.gridOptions.autoSizePadding;
      return null != e && e >= 0 ? e : 20;
    };
    e.prototype.getHeaderHeight = function () {
      return "number" === typeof this.gridOptions.headerHeight ? this.gridOptions.headerHeight : this.getFromTheme(25, "headerHeight");
    };
    e.prototype.getFloatingFiltersHeight = function () {
      return "number" === typeof this.gridOptions.floatingFiltersHeight ? this.gridOptions.floatingFiltersHeight : this.getFromTheme(25, "headerHeight");
    };
    e.prototype.getGroupHeaderHeight = function () {
      return "number" === typeof this.gridOptions.groupHeaderHeight ? this.gridOptions.groupHeaderHeight : this.getHeaderHeight();
    };
    e.prototype.getPivotHeaderHeight = function () {
      return "number" === typeof this.gridOptions.pivotHeaderHeight ? this.gridOptions.pivotHeaderHeight : this.getHeaderHeight();
    };
    e.prototype.getPivotGroupHeaderHeight = function () {
      return "number" === typeof this.gridOptions.pivotGroupHeaderHeight ? this.gridOptions.pivotGroupHeaderHeight : this.getGroupHeaderHeight();
    };
    e.prototype.isExternalFilterPresent = function () {
      return "function" === typeof this.gridOptions.isExternalFilterPresent && this.gridOptions.isExternalFilterPresent();
    };
    e.prototype.doesExternalFilterPass = function (e) {
      return "function" === typeof this.gridOptions.doesExternalFilterPass && this.gridOptions.doesExternalFilterPass(e);
    };
    e.prototype.getTooltipShowDelay = function () {
      var e = this.gridOptions.tooltipShowDelay;
      return r(e) ? (e < 0 && console.warn("ag-grid: tooltipShowDelay should not be lower than 0"), Math.max(200, e)) : null;
    };
    e.prototype.isTooltipMouseTrack = function () {
      return ja(this.gridOptions.tooltipMouseTrack);
    };
    e.prototype.isSuppressModelUpdateAfterUpdateTransaction = function () {
      return ja(this.gridOptions.suppressModelUpdateAfterUpdateTransaction);
    };
    e.prototype.getDocument = function () {
      var e = null;
      if (this.gridOptions.getDocument && r(this.gridOptions.getDocument)) {
        e = this.gridOptions.getDocument();
      }
      return e && r(e) ? e : document;
    };
    e.prototype.getMinColWidth = function () {
      var e = this.gridOptions.minColWidth;
      if (r(e) && e > n.MIN_COL_WIDTH) {
        return this.gridOptions.minColWidth;
      }
      var t = this.getFromTheme(null, "headerCellMinWidth");
      return r(t) ? Math.max(t, n.MIN_COL_WIDTH) : n.MIN_COL_WIDTH;
    };
    e.prototype.getMaxColWidth = function () {
      return this.gridOptions.maxColWidth && this.gridOptions.maxColWidth > n.MIN_COL_WIDTH ? this.gridOptions.maxColWidth : null;
    };
    e.prototype.getColWidth = function () {
      return "number" !== typeof this.gridOptions.colWidth || this.gridOptions.colWidth < n.MIN_COL_WIDTH ? 200 : this.gridOptions.colWidth;
    };
    e.prototype.getRowBuffer = function () {
      var e = this.gridOptions.rowBuffer;
      if ("number" === typeof e) {
        if (e < 0) {
          X(function () {
            return console.warn("AG Grid: rowBuffer should not be negative");
          }, "warn rowBuffer negative");
          this.gridOptions.rowBuffer = e = 0;
        }
      } else {
        e = Ee.ROW_BUFFER_SIZE;
      }
      return e;
    };
    e.prototype.getRowBufferInPixels = function () {
      return this.getRowBuffer() * this.getRowHeightAsNumber();
    };
    e.prototype.getScrollbarWidth = function () {
      if (null == this.scrollbarWidth) {
        var e = "number" === typeof this.gridOptions.scrollbarWidth && this.gridOptions.scrollbarWidth >= 0 ? this.gridOptions.scrollbarWidth : Ht();
        if (null != e) {
          this.scrollbarWidth = e;
          this.eventService.dispatchEvent({
            type: Ke.EVENT_SCROLLBAR_WIDTH_CHANGED
          });
        }
      }
      return this.scrollbarWidth;
    };
    e.prototype.checkForDeprecated = function () {
      var e = this.gridOptions;
      if (e.deprecatedEmbedFullWidthRows) {
        console.warn("AG Grid: since v21.2, deprecatedEmbedFullWidthRows has been replaced with embedFullWidthRows.");
      }
      if (e.enableOldSetFilterModel) {
        console.warn("AG Grid: since v22.x, enableOldSetFilterModel is deprecated. Please move to the new Set Filter Model as the old one may not be supported in v23 onwards.");
      }
      if (e.floatingFilter) {
        console.warn("AG Grid: since v23.1, floatingFilter on the gridOptions is deprecated. Please use floatingFilter on the colDef instead.");
        if (!e.defaultColDef) {
          e.defaultColDef = {};
        }
        if (null == e.defaultColDef.floatingFilter) {
          e.defaultColDef.floatingFilter = true;
        }
      }
      if (e.rowDeselection) {
        console.warn("AG Grid: since v24.x, rowDeselection is deprecated and the behaviour is true by default. Please use `suppressRowDeselection` to prevent rows from being deselected.");
      }
      var t = function (t, n, r) {
        if (null != e[t]) {
          console.warn("ag-grid: since version " + r + ", '" + t + "' is deprecated / renamed, please use the new property name '" + n + "' instead.");
          if (null == e[n]) {
            e[n] = e[t];
          }
        }
      };
      t("batchUpdateWaitMillis", "asyncTransactionWaitMillis", "23.1.x");
      t("deltaRowDataMode", "immutableData", "23.1.x");
      if (e.immutableColumns || e.deltaColumnMode) {
        console.warn("AG Grid: since v24.0, immutableColumns and deltaColumnMode properties are gone. The grid now works like this as default. To keep column order maintained, set grid property applyColumnDefOrder=true");
      }
      t("suppressSetColumnStateEvents", "suppressColumnStateEvents", "24.0.x");
      if (e.groupRowInnerRenderer || e.groupRowInnerRendererParams || e.groupRowInnerRendererFramework) {
        console.warn("AG Grid: since v24.0, grid properties groupRowInnerRenderer, groupRowInnerRendererFramework and groupRowInnerRendererParams are no longer used.");
        console.warn("  Instead use the grid properties groupRowRendererParams.innerRenderer, groupRowRendererParams.innerRendererFramework and groupRowRendererParams.innerRendererParams.");
        console.warn("  For example instead of this:");
        console.warn("    groupRowInnerRenderer: \"myRenderer\"");
        console.warn("    groupRowInnerRendererParams: {x: a}");
        console.warn("  Replace with this:");
        console.warn("    groupRowRendererParams: {");
        console.warn("      innerRenderer: \"myRenderer\",");
        console.warn("      innerRendererParams: {x: a}");
        console.warn("    }");
        console.warn("  We have copied the properties over for you. However to stop this error message, please change your application code.");
        if (!e.groupRowRendererParams) {
          e.groupRowRendererParams = {};
        }
        var n = e.groupRowRendererParams;
        if (e.groupRowInnerRenderer) {
          n.innerRenderer = e.groupRowInnerRenderer;
        }
        if (e.groupRowInnerRendererParams) {
          n.innerRendererParams = e.groupRowInnerRendererParams;
        }
        if (e.groupRowInnerRendererFramework) {
          n.innerRendererFramework = e.groupRowInnerRendererFramework;
        }
      }
      if (e.rememberGroupStateWhenNewData) {
        console.warn("AG Grid: since v24.0, grid property rememberGroupStateWhenNewData is deprecated. This feature was provided before Transaction Updates worked (which keep group state). Now that transaction updates are possible and they keep group state, this feature is no longer needed.");
      }
      if (e.detailCellRendererParams && e.detailCellRendererParams.autoHeight) {
        console.warn("AG Grid: since v24.1, grid property detailCellRendererParams.autoHeight is replaced with grid property detailRowAutoHeight. This allows this feature to work when you provide a custom DetailCellRenderer");
        e.detailRowAutoHeight = true;
      }
      if (e.suppressKeyboardEvent) {
        console.warn("AG Grid: since v24.1 suppressKeyboardEvent in the gridOptions has been deprecated and will be removed in\n                 future versions of AG Grid. If you need this to be set for every column use the defaultColDef property.");
      }
      if (e.suppressEnterpriseResetOnNewColumns) {
        console.warn("AG Grid: since v25, grid property suppressEnterpriseResetOnNewColumns is deprecated. This was a temporary property to allow changing columns in Server Side Row Model without triggering a reload. Now that it is possible to dynamically change columns in the grid, this is no longer needed.");
        e.detailRowAutoHeight = true;
      }
      if (e.suppressColumnStateEvents) {
        console.warn("AG Grid: since v25, grid property suppressColumnStateEvents no longer works due to a refactor that we did. It should be possible to achieve similar using event.source, which would be \"api\" if the event was due to setting column state via the API");
        e.detailRowAutoHeight = true;
      }
      if (e.defaultExportParams) {
        console.warn("AG Grid: since v25.2, the grid property `defaultExportParams` has been replaced by `defaultCsvExportParams` and `defaultExcelExportParams`.");
      }
      if (e.stopEditingWhenGridLosesFocus) {
        console.warn("AG Grid: since v25.2.2, the grid property `stopEditingWhenGridLosesFocus`.");
        e.stopEditingWhenCellsLoseFocus = true;
      }
    };
    e.prototype.checkForViolations = function () {
      if (this.isTreeData()) {
        this.treeDataViolations();
      }
    };
    e.prototype.treeDataViolations = function () {
      if (this.isRowModelDefault() && o(this.getDataPathFunc())) {
        console.warn("AG Grid: property usingTreeData=true with rowModel=clientSide, but you did not provide getDataPath function, please provide getDataPath function if using tree data.");
      }
      if (this.isRowModelServerSide()) {
        if (o(this.getIsServerSideGroupFunc())) {
          console.warn("AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide isServerSideGroup function, please provide isServerSideGroup function if using tree data.");
        }
        if (o(this.getServerSideGroupKeyFunc())) {
          console.warn("AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide getServerSideGroupKey function, please provide getServerSideGroupKey function if using tree data.");
        }
      }
    };
    e.prototype.getLocaleTextFunc = function () {
      if (this.gridOptions.localeTextFunc) {
        return this.gridOptions.localeTextFunc;
      }
      var e = this.gridOptions.localeText;
      return function (t, n) {
        return e && e[t] ? e[t] : n;
      };
    };
    e.prototype.globalEventHandler = function (e, t) {
      if (!this.destroyed) {
        var n = Hn.getCallbackForEvent(e);
        if ("function" === typeof this.gridOptions[n]) {
          this.gridOptions[n](t);
        }
      }
    };
    e.prototype.getRowHeightAsNumber = function () {
      return !this.gridOptions.rowHeight || o(this.gridOptions.rowHeight) ? this.getDefaultRowHeight() : this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : (console.warn("AG Grid row height must be a number if not using standard row model"), this.getDefaultRowHeight());
    };
    e.prototype.getRowHeightForNode = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      if ("function" === typeof this.gridOptions.getRowHeight) {
        if (t) {
          return {
            height: this.getDefaultRowHeight(),
            estimated: true
          };
        }
        var n = {
          node: e,
          data: e.data,
          api: this.gridOptions.api,
          context: this.gridOptions.context
        };
        var o = this.gridOptions.getRowHeight(n);
        if (this.isNumeric(o)) {
          if (0 === o) {
            X(function () {
              return console.warn("AG Grid: The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.");
            }, "invalidRowHeight");
          }
          return {
            height: Math.max(1, o),
            estimated: false
          };
        }
      }
      if (e.detail && this.isMasterDetail()) {
        return this.isNumeric(this.gridOptions.detailRowHeight) ? {
          height: this.gridOptions.detailRowHeight,
          estimated: false
        } : {
          height: 300,
          estimated: false
        };
      }
      var i = this.getDefaultRowHeight();
      var a = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : i;
      var s = r(a) ? Math.min(i, a) : i;
      if (this.columnController.isAutoRowHeightActive()) {
        if (t) {
          return {
            height: a,
            estimated: true
          };
        }
        var c = this.autoHeightCalculator.getPreferredHeightForRow(e);
        return {
          height: Math.max(c, s),
          estimated: false
        };
      }
      return {
        height: a,
        estimated: false
      };
    };
    e.prototype.isDynamicRowHeight = function () {
      return "function" === typeof this.gridOptions.getRowHeight;
    };
    e.prototype.getListItemHeight = function () {
      return this.getFromTheme(20, "listItemHeight");
    };
    e.prototype.chartMenuPanelWidth = function () {
      return this.environment.chartMenuPanelWidth();
    };
    e.prototype.isNumeric = function (e) {
      return !isNaN(e) && "number" === typeof e && isFinite(e);
    };
    e.prototype.getFromTheme = function (e, t) {
      var n = this.environment.getTheme().theme;
      return n && 0 === n.indexOf("ag-theme") ? this.environment.getSassVariable(n, t) : e;
    };
    e.prototype.getDefaultRowHeight = function () {
      return this.getFromTheme(25, "rowHeight");
    };
    e.MIN_COL_WIDTH = 10;
    e.PROP_HEADER_HEIGHT = "headerHeight";
    e.PROP_GROUP_REMOVE_SINGLE_CHILDREN = "groupRemoveSingleChildren";
    e.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN = "groupRemoveLowestSingleChildren";
    e.PROP_PIVOT_HEADER_HEIGHT = "pivotHeaderHeight";
    e.PROP_SUPPRESS_CLIPBOARD_PASTE = "suppressClipboardPaste";
    e.PROP_GROUP_HEADER_HEIGHT = "groupHeaderHeight";
    e.PROP_PIVOT_GROUP_HEADER_HEIGHT = "pivotGroupHeaderHeight";
    e.PROP_NAVIGATE_TO_NEXT_CELL = "navigateToNextCell";
    e.PROP_TAB_TO_NEXT_CELL = "tabToNextCell";
    e.PROP_NAVIGATE_TO_NEXT_HEADER = "navigateToNextHeader";
    e.PROP_TAB_TO_NEXT_HEADER = "tabToNextHeader";
    e.PROP_IS_EXTERNAL_FILTER_PRESENT = "isExternalFilterPresentFunc";
    e.PROP_DOES_EXTERNAL_FILTER_PASS = "doesExternalFilterPass";
    e.PROP_FLOATING_FILTERS_HEIGHT = "floatingFiltersHeight";
    e.PROP_SUPPRESS_ROW_CLICK_SELECTION = "suppressRowClickSelection";
    e.PROP_SUPPRESS_ROW_DRAG = "suppressRowDrag";
    e.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG = "suppressMoveWhenRowDragging";
    e.PROP_GET_ROW_CLASS = "getRowClass";
    e.PROP_GET_ROW_STYLE = "getRowStyle";
    e.PROP_GET_ROW_HEIGHT = "getRowHeight";
    e.PROP_POPUP_PARENT = "popupParent";
    e.PROP_DOM_LAYOUT = "domLayout";
    e.PROP_FILL_HANDLE_DIRECTION = "fillHandleDirection";
    e.PROP_GROUP_ROW_AGG_NODES = "groupRowAggNodes";
    e.PROP_GET_BUSINESS_KEY_FOR_NODE = "getBusinessKeyForNode";
    e.PROP_GET_CHILD_COUNT = "getChildCount";
    e.PROP_PROCESS_ROW_POST_CREATE = "processRowPostCreate";
    e.PROP_GET_ROW_NODE_ID = "getRowNodeId";
    e.PROP_IS_FULL_WIDTH_CELL = "isFullWidthCell";
    e.PROP_IS_ROW_SELECTABLE = "isRowSelectable";
    e.PROP_IS_ROW_MASTER = "isRowMaster";
    e.PROP_POST_SORT = "postSort";
    e.PROP_GET_DOCUMENT = "getDocument";
    e.PROP_POST_PROCESS_POPUP = "postProcessPopup";
    e.PROP_DEFAULT_GROUP_SORT_COMPARATOR = "defaultGroupSortComparator";
    e.PROP_PAGINATION_NUMBER_FORMATTER = "paginationNumberFormatter";
    e.PROP_GET_CONTEXT_MENU_ITEMS = "getContextMenuItems";
    e.PROP_GET_MAIN_MENU_ITEMS = "getMainMenuItems";
    e.PROP_PROCESS_CELL_FOR_CLIPBOARD = "processCellForClipboard";
    e.PROP_PROCESS_CELL_FROM_CLIPBOARD = "processCellFromClipboard";
    e.PROP_SEND_TO_CLIPBOARD = "sendToClipboard";
    e.PROP_PROCESS_TO_SECONDARY_COLDEF = "processSecondaryColDef";
    e.PROP_PROCESS_SECONDARY_COL_GROUP_DEF = "processSecondaryColGroupDef";
    e.PROP_PROCESS_CHART_OPTIONS = "processChartOptions";
    e.PROP_GET_CHART_TOOLBAR_ITEMS = "getChartToolbarItems";
    e.PROP_GET_SERVER_SIDE_STORE_PARAMS = "getServerSideStoreParams";
    e.PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT = "isServerSideGroupOpenByDefault";
    e.PROP_IS_APPLY_SERVER_SIDE_TRANSACTION = "isApplyServerSideTransaction";
    e.PROP_IS_SERVER_SIDE_GROUP = "isServerSideGroup";
    e.PROP_GET_SERVER_SIDE_GROUP_KEY = "getServerSideGroupKey";
    Sa([pe("gridOptions")], e.prototype, "gridOptions", undefined);
    Sa([pe("columnController")], e.prototype, "columnController", undefined);
    Sa([pe("eventService")], e.prototype, "eventService", undefined);
    Sa([pe("environment")], e.prototype, "environment", undefined);
    Sa([pe("autoHeightCalculator")], e.prototype, "autoHeightCalculator", undefined);
    Sa([Ia(0, me("gridApi")), Ia(1, me("columnApi"))], e.prototype, "agWire", null);
    Sa([ue], e.prototype, "destroy", null);
    Sa([le], e.prototype, "init", null);
    return e = n = Sa([de("gridOptionsWrapper")], e);
  }();
  var xa = function () {
    function e(e, t) {
      this.active = true;
      this.nodeIdsToColumns = {};
      this.mapToItems = {};
      this.keepingColumns = e;
      this.pathRoot = {
        rowNode: t,
        children: null
      };
      this.mapToItems[t.id] = this.pathRoot;
    }
    e.prototype.setInactive = function () {
      this.active = false;
    };
    e.prototype.isActive = function () {
      return this.active;
    };
    e.prototype.depthFirstSearchChangedPath = function (e, t) {
      if (e.children) {
        for (var n = 0; n < e.children.length; n++) {
          this.depthFirstSearchChangedPath(e.children[n], t);
        }
      }
      t(e.rowNode);
    };
    e.prototype.depthFirstSearchEverything = function (e, t, n) {
      if (e.childrenAfterGroup) {
        for (var r = 0; r < e.childrenAfterGroup.length; r++) {
          var o = e.childrenAfterGroup[r];
          if (o.childrenAfterGroup) {
            this.depthFirstSearchEverything(e.childrenAfterGroup[r], t, n);
          } else {
            if (n) {
              t(o);
            }
          }
        }
      }
      t(e);
    };
    e.prototype.forEachChangedNodeDepthFirst = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      if (this.active) {
        this.depthFirstSearchChangedPath(this.pathRoot, e);
      } else {
        this.depthFirstSearchEverything(this.pathRoot.rowNode, e, t);
      }
    };
    e.prototype.executeFromRootNode = function (e) {
      e(this.pathRoot.rowNode);
    };
    e.prototype.createPathItems = function (e) {
      for (var t = e, n = 0; !this.mapToItems[t.id];) {
        var r = {
          rowNode: t,
          children: null
        };
        this.mapToItems[t.id] = r;
        n++;
        t = t.parent;
      }
      return n;
    };
    e.prototype.populateColumnsMap = function (e, t) {
      var n = this;
      if (this.keepingColumns && t) {
        for (var r = e; r;) {
          if (!this.nodeIdsToColumns[r.id]) {
            this.nodeIdsToColumns[r.id] = {};
          }
          t.forEach(function (e) {
            return n.nodeIdsToColumns[r.id][e.getId()] = true;
          });
          r = r.parent;
        }
      }
    };
    e.prototype.linkPathItems = function (e, t) {
      for (var n = e, r = 0; r < t; r++) {
        var o = this.mapToItems[n.id];
        var i = this.mapToItems[n.parent.id];
        if (!i.children) {
          i.children = [];
        }
        i.children.push(o);
        n = n.parent;
      }
    };
    e.prototype.addParentNode = function (e, t) {
      if (e && !e.isRowPinned()) {
        var n = this.createPathItems(e);
        this.linkPathItems(e, n);
        this.populateColumnsMap(e, t);
      }
    };
    e.prototype.canSkip = function (e) {
      return this.active && !this.mapToItems[e.id];
    };
    e.prototype.getValueColumnsForNode = function (e, t) {
      if (!this.keepingColumns) {
        return t;
      }
      var n = this.nodeIdsToColumns[e.id];
      return t.filter(function (e) {
        return n[e.getId()];
      });
    };
    e.prototype.getNotValueColumnsForNode = function (e, t) {
      if (!this.keepingColumns) {
        return null;
      }
      var n = this.nodeIdsToColumns[e.id];
      return t.filter(function (e) {
        return !n[e.getId()];
      });
    };
    return e;
  }();
  var Da = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ma = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var La = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var Pa = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Da(t, e);
    t.prototype.setBeans = function (e) {
      this.logger = e.create("SelectionController");
      this.reset();
      if (this.gridOptionsWrapper.isRowModelDefault()) {
        this.addManagedListener(this.eventService, Ke.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));
      }
    };
    t.prototype.init = function () {
      this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
      this.addManagedListener(this.eventService, Ke.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
    };
    t.prototype.setLastSelectedNode = function (e) {
      this.lastSelectedNode = e;
    };
    t.prototype.getLastSelectedNode = function () {
      return this.lastSelectedNode;
    };
    t.prototype.getSelectedNodes = function () {
      var e = [];
      R(this.selectedNodes, function (t, n) {
        if (n) {
          e.push(n);
        }
      });
      return e;
    };
    t.prototype.getSelectedRows = function () {
      var e = [];
      R(this.selectedNodes, function (t, n) {
        if (n && n.data) {
          e.push(n.data);
        }
      });
      return e;
    };
    t.prototype.removeGroupsFromSelection = function () {
      var e = this;
      R(this.selectedNodes, function (t, n) {
        if (n && n.group) {
          e.selectedNodes[n.id] = undefined;
        }
      });
    };
    t.prototype.updateGroupsFromChildrenSelections = function (e) {
      if (this.gridOptionsWrapper.isGroupSelectsChildren() && this.rowModel.getType() === Ee.ROW_MODEL_TYPE_CLIENT_SIDE) {
        var t = this.rowModel.getRootNode();
        if (!e) {
          (e = new xa(true, t)).setInactive();
        }
        e.forEachChangedNodeDepthFirst(function (e) {
          if (e !== t) {
            e.calculateSelectedFromChildren();
          }
        });
      }
    };
    t.prototype.getNodeForIdIfSelected = function (e) {
      return this.selectedNodes[e];
    };
    t.prototype.clearOtherNodes = function (e) {
      var t = this;
      var n = {};
      var r = 0;
      R(this.selectedNodes, function (o, i) {
        if (i && i.id !== e.id) {
          var a = t.selectedNodes[i.id];
          r += a.setSelectedParams({
            newValue: false,
            clearSelection: false,
            suppressFinishActions: true
          });
          if (t.groupSelectsChildren && i.parent) {
            n[i.parent.id] = i.parent;
          }
        }
      });
      R(n, function (e, t) {
        t.calculateSelectedFromChildren();
      });
      return r;
    };
    t.prototype.onRowSelected = function (e) {
      var t = e.node;
      if (!(this.groupSelectsChildren && t.group)) {
        if (t.isSelected()) {
          this.selectedNodes[t.id] = t;
        } else {
          this.selectedNodes[t.id] = undefined;
        }
      }
    };
    t.prototype.syncInRowNode = function (e, t) {
      this.syncInOldRowNode(e, t);
      this.syncInNewRowNode(e);
    };
    t.prototype.syncInOldRowNode = function (e, t) {
      if (r(t) && e.id !== t.id && t) {
        if (r(this.selectedNodes[t.id])) {
          this.selectedNodes[t.id] = t;
        }
      }
    };
    t.prototype.syncInNewRowNode = function (e) {
      if (r(this.selectedNodes[e.id])) {
        e.setSelectedInitialValue(true);
        this.selectedNodes[e.id] = e;
      } else {
        e.setSelectedInitialValue(false);
      }
    };
    t.prototype.reset = function () {
      this.logger.log("reset");
      this.selectedNodes = {};
      this.lastSelectedNode = null;
    };
    t.prototype.getBestCostNodeSelection = function () {
      if (this.rowModel.getType() === Ee.ROW_MODEL_TYPE_CLIENT_SIDE) {
        var e = this.rowModel.getTopLevelNodes();
        if (null !== e) {
          var t = [];
          (function e(n) {
            for (var r = 0, o = n.length; r < o; r++) {
              var i = n[r];
              if (i.isSelected()) {
                t.push(i);
              } else {
                if (i.group && i.children) {
                  e(i.children);
                }
              }
            }
          })(e);
          return t;
        }
        console.warn("selectAll not available doing rowModel=virtual");
      } else {
        console.warn("getBestCostNodeSelection is only available when using normal row model");
      }
    };
    t.prototype.setRowModel = function (e) {
      this.rowModel = e;
    };
    t.prototype.isEmpty = function () {
      var e = 0;
      R(this.selectedNodes, function (t, n) {
        if (n) {
          e++;
        }
      });
      return 0 === e;
    };
    t.prototype.deselectAllRowNodes = function (e) {
      if (undefined === e) {
        e = false;
      }
      var t = function (e) {
        return e.selectThisNode(false);
      };
      var n = this.rowModel.getType() === Ee.ROW_MODEL_TYPE_CLIENT_SIDE;
      if (e) {
        if (!n) {
          return void console.error("AG Grid: selecting just filtered only works with In Memory Row Model");
        }
        this.rowModel.forEachNodeAfterFilter(t);
      } else {
        R(this.selectedNodes, function (e, n) {
          if (n) {
            t(n);
          }
        });
        this.reset();
      }
      if (n && this.groupSelectsChildren) {
        this.updateGroupsFromChildrenSelections();
      }
      var r = {
        type: Ke.EVENT_SELECTION_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(r);
    };
    t.prototype.selectAllRowNodes = function (e) {
      if (undefined === e) {
        e = false;
      }
      if (this.rowModel.getType() !== Ee.ROW_MODEL_TYPE_CLIENT_SIDE) {
        throw new Error("selectAll only available with normal row model, ie not " + this.rowModel.getType());
      }
      var t = this.rowModel;
      var n = function (e) {
        return e.selectThisNode(true);
      };
      if (e) {
        t.forEachNodeAfterFilter(n);
      } else {
        t.forEachNode(n);
      }
      if (this.rowModel.getType() === Ee.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {
        this.updateGroupsFromChildrenSelections();
      }
      var r = {
        type: Ke.EVENT_SELECTION_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(r);
    };
    t.prototype.selectNode = function (e, t) {
      if (e) {
        e.setSelectedParams({
          newValue: true,
          clearSelection: !t
        });
      }
    };
    t.prototype.deselectIndex = function (e) {
      var t = this.rowModel.getRow(e);
      this.deselectNode(t);
    };
    t.prototype.deselectNode = function (e) {
      if (e) {
        e.setSelectedParams({
          newValue: false,
          clearSelection: false
        });
      }
    };
    t.prototype.selectIndex = function (e, t) {
      var n = this.rowModel.getRow(e);
      this.selectNode(n, t);
    };
    Ma([pe("rowModel")], t.prototype, "rowModel", undefined);
    Ma([pe("columnApi")], t.prototype, "columnApi", undefined);
    Ma([pe("gridApi")], t.prototype, "gridApi", undefined);
    Ma([La(0, me("loggerFactory"))], t.prototype, "setBeans", null);
    Ma([le], t.prototype, "init", null);
    return t = Ma([de("selectionController")], t);
  }(We);
  var Ba = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Fa = function () {
    function e() {}
    e.prototype.sizeColumnsToFit = function (e) {
      if ("undefined" === typeof e) {
        console.error("AG Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)");
      }
      this.columnController.sizeColumnsToFit(e, "api");
    };
    e.prototype.setColumnGroupOpened = function (e, t) {
      this.columnController.setColumnGroupOpened(e, t, "api");
    };
    e.prototype.getColumnGroup = function (e, t) {
      return this.columnController.getColumnGroup(e, t);
    };
    e.prototype.getOriginalColumnGroup = function (e) {
      return this.columnController.getOriginalColumnGroup(e);
    };
    e.prototype.getDisplayNameForColumn = function (e, t) {
      return this.columnController.getDisplayNameForColumn(e, t) || "";
    };
    e.prototype.getDisplayNameForColumnGroup = function (e, t) {
      return this.columnController.getDisplayNameForColumnGroup(e, t) || "";
    };
    e.prototype.getColumn = function (e) {
      return this.columnController.getPrimaryColumn(e);
    };
    e.prototype.applyColumnState = function (e) {
      return this.columnController.applyColumnState(e, "api");
    };
    e.prototype.getColumnState = function () {
      return this.columnController.getColumnState();
    };
    e.prototype.resetColumnState = function () {
      this.columnController.resetColumnState("api");
    };
    e.prototype.getColumnGroupState = function () {
      return this.columnController.getColumnGroupState();
    };
    e.prototype.setColumnGroupState = function (e) {
      this.columnController.setColumnGroupState(e, "api");
    };
    e.prototype.resetColumnGroupState = function () {
      this.columnController.resetColumnGroupState("api");
    };
    e.prototype.isPinning = function () {
      return this.columnController.isPinningLeft() || this.columnController.isPinningRight();
    };
    e.prototype.isPinningLeft = function () {
      return this.columnController.isPinningLeft();
    };
    e.prototype.isPinningRight = function () {
      return this.columnController.isPinningRight();
    };
    e.prototype.getDisplayedColAfter = function (e) {
      return this.columnController.getDisplayedColAfter(e);
    };
    e.prototype.getDisplayedColBefore = function (e) {
      return this.columnController.getDisplayedColBefore(e);
    };
    e.prototype.setColumnVisible = function (e, t) {
      this.columnController.setColumnVisible(e, t, "api");
    };
    e.prototype.setColumnsVisible = function (e, t) {
      this.columnController.setColumnsVisible(e, t, "api");
    };
    e.prototype.setColumnPinned = function (e, t) {
      this.columnController.setColumnPinned(e, t, "api");
    };
    e.prototype.setColumnsPinned = function (e, t) {
      this.columnController.setColumnsPinned(e, t, "api");
    };
    e.prototype.getAllColumns = function () {
      return this.columnController.getAllPrimaryColumns();
    };
    e.prototype.getAllGridColumns = function () {
      return this.columnController.getAllGridColumns();
    };
    e.prototype.getDisplayedLeftColumns = function () {
      return this.columnController.getDisplayedLeftColumns();
    };
    e.prototype.getDisplayedCenterColumns = function () {
      return this.columnController.getDisplayedCenterColumns();
    };
    e.prototype.getDisplayedRightColumns = function () {
      return this.columnController.getDisplayedRightColumns();
    };
    e.prototype.getAllDisplayedColumns = function () {
      return this.columnController.getAllDisplayedColumns();
    };
    e.prototype.getAllDisplayedVirtualColumns = function () {
      return this.columnController.getViewportColumns();
    };
    e.prototype.moveColumn = function (e, t) {
      if ("number" === typeof e) {
        console.warn("AG Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead");
        this.columnController.moveColumnByIndex(e, t, "api");
      } else {
        this.columnController.moveColumn(e, t, "api");
      }
    };
    e.prototype.moveColumnByIndex = function (e, t) {
      this.columnController.moveColumnByIndex(e, t, "api");
    };
    e.prototype.moveColumns = function (e, t) {
      this.columnController.moveColumns(e, t, "api");
    };
    e.prototype.moveRowGroupColumn = function (e, t) {
      this.columnController.moveRowGroupColumn(e, t);
    };
    e.prototype.setColumnAggFunc = function (e, t) {
      this.columnController.setColumnAggFunc(e, t);
    };
    e.prototype.setColumnWidth = function (e, t, n) {
      if (undefined === n) {
        n = true;
      }
      this.columnController.setColumnWidths([{
        key: e,
        newWidth: t
      }], false, n);
    };
    e.prototype.setColumnWidths = function (e, t) {
      if (undefined === t) {
        t = true;
      }
      this.columnController.setColumnWidths(e, false, t);
    };
    e.prototype.setPivotMode = function (e) {
      this.columnController.setPivotMode(e);
    };
    e.prototype.isPivotMode = function () {
      return this.columnController.isPivotMode();
    };
    e.prototype.getSecondaryPivotColumn = function (e, t) {
      return this.columnController.getSecondaryPivotColumn(e, t);
    };
    e.prototype.setValueColumns = function (e) {
      this.columnController.setValueColumns(e, "api");
    };
    e.prototype.getValueColumns = function () {
      return this.columnController.getValueColumns();
    };
    e.prototype.removeValueColumn = function (e) {
      this.columnController.removeValueColumn(e, "api");
    };
    e.prototype.removeValueColumns = function (e) {
      this.columnController.removeValueColumns(e, "api");
    };
    e.prototype.addValueColumn = function (e) {
      this.columnController.addValueColumn(e, "api");
    };
    e.prototype.addValueColumns = function (e) {
      this.columnController.addValueColumns(e, "api");
    };
    e.prototype.setRowGroupColumns = function (e) {
      this.columnController.setRowGroupColumns(e, "api");
    };
    e.prototype.removeRowGroupColumn = function (e) {
      this.columnController.removeRowGroupColumn(e, "api");
    };
    e.prototype.removeRowGroupColumns = function (e) {
      this.columnController.removeRowGroupColumns(e, "api");
    };
    e.prototype.addRowGroupColumn = function (e) {
      this.columnController.addRowGroupColumn(e, "api");
    };
    e.prototype.addRowGroupColumns = function (e) {
      this.columnController.addRowGroupColumns(e, "api");
    };
    e.prototype.getRowGroupColumns = function () {
      return this.columnController.getRowGroupColumns();
    };
    e.prototype.setPivotColumns = function (e) {
      this.columnController.setPivotColumns(e, "api");
    };
    e.prototype.removePivotColumn = function (e) {
      this.columnController.removePivotColumn(e, "api");
    };
    e.prototype.removePivotColumns = function (e) {
      this.columnController.removePivotColumns(e, "api");
    };
    e.prototype.addPivotColumn = function (e) {
      this.columnController.addPivotColumn(e, "api");
    };
    e.prototype.addPivotColumns = function (e) {
      this.columnController.addPivotColumns(e, "api");
    };
    e.prototype.getPivotColumns = function () {
      return this.columnController.getPivotColumns();
    };
    e.prototype.getLeftDisplayedColumnGroups = function () {
      return this.columnController.getDisplayedTreeLeft();
    };
    e.prototype.getCenterDisplayedColumnGroups = function () {
      return this.columnController.getDisplayedTreeCentre();
    };
    e.prototype.getRightDisplayedColumnGroups = function () {
      return this.columnController.getDisplayedTreeRight();
    };
    e.prototype.getAllDisplayedColumnGroups = function () {
      return this.columnController.getAllDisplayedTrees();
    };
    e.prototype.autoSizeColumn = function (e, t) {
      return this.columnController.autoSizeColumn(e, t, "api");
    };
    e.prototype.autoSizeColumns = function (e, t) {
      return this.columnController.autoSizeColumns(e, t, "api");
    };
    e.prototype.autoSizeAllColumns = function (e) {
      this.columnController.autoSizeAllColumns(e, "api");
    };
    e.prototype.setSecondaryColumns = function (e) {
      this.columnController.setSecondaryColumns(e, "api");
    };
    e.prototype.getSecondaryColumns = function () {
      return this.columnController.getSecondaryColumns();
    };
    e.prototype.getPrimaryColumns = function () {
      return this.columnController.getAllPrimaryColumns();
    };
    e.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function () {
      setTimeout(qr.removeAllReferences.bind(window, this, "Column API"), 100);
    };
    e.prototype.columnGroupOpened = function (e, t) {
      console.error("AG Grid: columnGroupOpened no longer exists, use setColumnGroupOpened");
      this.setColumnGroupOpened(e, t);
    };
    e.prototype.hideColumns = function (e, t) {
      console.error("AG Grid: hideColumns is deprecated, use setColumnsVisible");
      this.columnController.setColumnsVisible(e, !t, "api");
    };
    e.prototype.hideColumn = function (e, t) {
      console.error("AG Grid: hideColumn is deprecated, use setColumnVisible");
      this.columnController.setColumnVisible(e, !t, "api");
    };
    e.prototype.setState = function (e) {
      console.error("AG Grid: setState is deprecated, use setColumnState");
      return this.setColumnState(e);
    };
    e.prototype.getState = function () {
      console.error("AG Grid: getState is deprecated, use getColumnState");
      return this.getColumnState();
    };
    e.prototype.resetState = function () {
      console.error("AG Grid: resetState is deprecated, use resetColumnState");
      this.resetColumnState();
    };
    e.prototype.getAggregationColumns = function () {
      console.error("AG Grid: getAggregationColumns is deprecated, use getValueColumns");
      return this.columnController.getValueColumns();
    };
    e.prototype.removeAggregationColumn = function (e) {
      console.error("AG Grid: removeAggregationColumn is deprecated, use removeValueColumn");
      this.columnController.removeValueColumn(e, "api");
    };
    e.prototype.removeAggregationColumns = function (e) {
      console.error("AG Grid: removeAggregationColumns is deprecated, use removeValueColumns");
      this.columnController.removeValueColumns(e, "api");
    };
    e.prototype.addAggregationColumn = function (e) {
      console.error("AG Grid: addAggregationColumn is deprecated, use addValueColumn");
      this.columnController.addValueColumn(e, "api");
    };
    e.prototype.addAggregationColumns = function (e) {
      console.error("AG Grid: addAggregationColumns is deprecated, use addValueColumns");
      this.columnController.addValueColumns(e, "api");
    };
    e.prototype.setColumnAggFunction = function (e, t) {
      console.error("AG Grid: setColumnAggFunction is deprecated, use setColumnAggFunc");
      this.columnController.setColumnAggFunc(e, t, "api");
    };
    e.prototype.getDisplayNameForCol = function (e) {
      console.error("AG Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn");
      return this.getDisplayNameForColumn(e, null);
    };
    e.prototype.setColumnState = function (e) {
      return this.columnController.applyColumnState({
        state: e,
        applyOrder: true
      }, "api");
    };
    Ba([pe("columnController")], e.prototype, "columnController", undefined);
    Ba([ue], e.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
    return e = Ba([de("columnApi")], e);
  }();
  var Ga = function () {
    return (Ga = Object.assign || function (e) {
      for (var t, n = 1, r = arguments.length; n < r; n++) {
        for (var o in t = arguments[n]) if (Object.prototype.hasOwnProperty.call(t, o)) {
          e[o] = t[o];
        }
      }
      return e;
    }).apply(this, arguments);
  };
  var Ua = function () {
    function e() {}
    e.createChildScopeOrNull = function (e, t, n) {
      if (!n.isAngularCompileRows()) {
        return null;
      }
      var r = t.$new();
      r.data = Ga({}, e.data);
      r.rowNode = e;
      r.context = n.getContext();
      return {
        scope: r,
        scopeDestroyFunc: function () {
          r.$destroy();
          r.data = null;
          r.rowNode = null;
          r.context = null;
        }
      };
    };
    return e;
  }();
  var Wa = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  !function (e) {
    e.Normal = "Normal";
    e.FullWidth = "FullWidth";
    e.FullWidthLoading = "FullWidthLoading";
    e.FullWidthGroup = "FullWidthGroup";
    e.FullWidthDetail = "FullWidthDetail";
  }(Ra || (Ra = {}));
  var Ha;
  var Va;
  var za = at([[Ra.FullWidthLoading, "agLoadingCellRenderer"], [Ra.FullWidthGroup, "agGroupRowRenderer"], [Ra.FullWidthDetail, "agDetailCellRenderer"]]);
  var Ya = at([[Ra.FullWidth, "fullWidthCellRenderer"], [Ra.FullWidthLoading, "loadingCellRenderer"], [Ra.FullWidthGroup, "groupRowRenderer"], [Ra.FullWidthDetail, "detailCellRenderer"]]);
  var Ka = 0;
  var qa = function (e) {
    function t(t, n, r, o, i, a) {
      var s = e.call(this) || this;
      s.instanceId = Ka++;
      s.allRowComps = [];
      s.active = true;
      s.centerCols = [];
      s.leftCols = [];
      s.rightCols = [];
      s.lastMouseDownOnDragger = false;
      s.updateColumnListsPending = false;
      s.parentScope = t;
      s.beans = r;
      s.rowNode = n;
      s.rowIsEven = s.rowNode.rowIndex % 2 === 0;
      s.paginationPage = s.beans.paginationProxy.getCurrentPage();
      s.useAnimationFrameForCreate = i;
      s.printLayout = a;
      s.setAnimateFlags(o);
      s.rowFocused = s.beans.focusController.isRowFocused(s.rowNode.rowIndex, s.rowNode.rowPinned);
      s.setupAngular1Scope();
      s.rowLevel = s.beans.rowCssClassCalculator.calculateRowLevel(s.rowNode);
      s.setRowType();
      s.updateColumnLists(!s.useAnimationFrameForCreate);
      s.addListeners();
      if (s.slideRowIn) {
        te(s.onTopChanged.bind(s));
      }
      if (s.fadeRowIn) {
        te(function () {
          s.allRowComps.forEach(function (e) {
            return Zt(e.getGui(), "ag-opacity-zero");
          });
        });
      }
      return s;
    }
    Wa(t, e);
    t.prototype.getInstanceId = function () {
      return this.instanceId;
    };
    t.prototype.setLeftRowComp = function (e) {
      if (this.leftRowComp) {
        console.error("AG Grid - should not set leftRowComp twice");
      }
      this.leftRowComp = e;
      this.allRowComps.push(e);
    };
    t.prototype.setRightRowComp = function (e) {
      if (this.rightRowComp) {
        console.error("AG Grid - should not set rightRowComp twice");
      }
      this.rightRowComp = e;
      this.allRowComps.push(e);
    };
    t.prototype.setCenterRowComp = function (e) {
      if (this.centerRowComp) {
        console.error("AG Grid - should not set centerRowComp twice");
      }
      this.centerRowComp = e;
      this.allRowComps.push(e);
    };
    t.prototype.setFullWidthRowComp = function (e) {
      if (this.fullWidthRowComp) {
        console.error("AG Grid - should not set fullWidthRowComp twice");
      }
      this.fullWidthRowComp = e;
      this.allRowComps.push(e);
    };
    t.prototype.getColsForRowComp = function (e) {
      switch (e) {
        case Ee.PINNED_RIGHT:
          return this.rightCols;
        case Ee.PINNED_LEFT:
          return this.leftCols;
        default:
          return this.centerCols;
      }
    };
    t.prototype.getScope = function () {
      return this.scope;
    };
    t.prototype.isPrintLayout = function () {
      return this.printLayout;
    };
    t.prototype.setupAngular1Scope = function () {
      var e = Ua.createChildScopeOrNull(this.rowNode, this.parentScope, this.beans.gridOptionsWrapper);
      if (e) {
        this.scope = e.scope;
        this.addDestroyFunc(e.scopeDestroyFunc);
      }
    };
    t.prototype.getCellForCol = function (e) {
      var t = this.getRenderedCellForColumn(e);
      return t ? t.getGui() : null;
    };
    t.prototype.executeProcessRowPostCreateFunc = function () {
      var e = this.beans.gridOptionsWrapper.getProcessRowPostCreateFunc();
      if (e) {
        e({
          eRow: this.centerRowComp ? this.centerRowComp.getGui() : undefined,
          ePinnedLeftRow: this.leftRowComp ? this.leftRowComp.getGui() : undefined,
          ePinnedRightRow: this.rightRowComp ? this.rightRowComp.getGui() : undefined,
          node: this.rowNode,
          api: this.beans.gridOptionsWrapper.getApi(),
          rowIndex: this.rowNode.rowIndex,
          addRenderedRowListener: this.addEventListener.bind(this),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext()
        });
      }
    };
    t.prototype.setRowType = function () {
      var e = this.rowNode.stub;
      var t = this.rowNode.isFullWidthCell();
      var n = this.beans.doingMasterDetail && this.rowNode.detail;
      var r = this.beans.columnController.isPivotMode();
      var o = !!this.rowNode.group && !this.rowNode.footer && this.beans.gridOptionsWrapper.isGroupUseEntireRow(r);
      this.rowType = e ? Ra.FullWidthLoading : n ? Ra.FullWidthDetail : t ? Ra.FullWidth : o ? Ra.FullWidthGroup : Ra.Normal;
    };
    t.prototype.updateColumnLists = function (e) {
      var t = this;
      if (!(undefined === e && (e = false), this.isFullWidth())) {
        if (e || this.beans.gridOptionsWrapper.isSuppressAnimationFrame() || this.printLayout) {
          this.updateColumnListsImpl();
        } else {
          if (!this.updateColumnListsPending) {
            this.beans.taskQueue.createTask(function () {
              if (t.active) {
                t.updateColumnListsImpl();
              }
            }, this.rowNode.rowIndex, "createTasksP1");
            this.updateColumnListsPending = true;
          }
        }
      }
    };
    t.prototype.updateColumnListsImpl = function () {
      this.updateColumnListsPending = false;
      if (this.printLayout) {
        this.centerCols = this.beans.columnController.getAllDisplayedColumns();
        this.leftCols = [];
        this.rightCols = [];
      } else {
        this.centerCols = this.beans.columnController.getViewportCenterColumnsForRow(this.rowNode);
        this.leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
        this.rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
      }
      this.allRowComps.forEach(function (e) {
        return e.onColumnChanged();
      });
    };
    t.prototype.setAnimateFlags = function (e) {
      if (e) {
        var t = r(this.rowNode.oldRowTop);
        this.slideRowIn = t;
        this.fadeRowIn = !t;
      } else {
        this.slideRowIn = false;
        this.fadeRowIn = false;
      }
    };
    t.prototype.isEditing = function () {
      return this.editingRow;
    };
    t.prototype.stopRowEditing = function (e) {
      this.stopEditing(e);
    };
    t.prototype.isFullWidth = function () {
      return this.rowType !== Ra.Normal;
    };
    t.prototype.getRowType = function () {
      return this.rowType;
    };
    t.prototype.refreshFullWidth = function () {
      var e = this;
      var t = function (t, n) {
        if (!t) {
          return true;
        }
        var r = t.getFullWidthRowComp();
        if (!r) {
          return true;
        }
        if (!r.refresh) {
          return false;
        }
        var o = e.createFullWidthParams(t.getGui(), n);
        return r.refresh(o);
      };
      var n = t(this.fullWidthRowComp, null);
      var r = t(this.centerRowComp, null);
      var o = t(this.leftRowComp, Ee.PINNED_LEFT);
      var i = t(this.rightRowComp, Ee.PINNED_RIGHT);
      return n && r && o && i;
    };
    t.prototype.addListeners = function () {
      this.addManagedListener(this.rowNode, Ko.EVENT_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_EXPANDED_CHANGED, this.updateExpandedCss.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_HAS_CHILDREN_CHANGED, this.updateExpandedCss.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_HIGHLIGHT_CHANGED, this.onRowNodeHighlightChanged.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_DRAGGING_CHANGED, this.onRowNodeDraggingChanged.bind(this));
      this.addManagedListener(this.rowNode, Ko.EVENT_UI_LEVEL_CHANGED, this.onUiLevelChanged.bind(this));
      var e = this.beans.eventService;
      this.addManagedListener(e, Ke.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED, this.onPaginationPixelOffsetChanged.bind(this));
      this.addManagedListener(e, Ke.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));
      this.addManagedListener(e, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(e, Ke.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
      this.addManagedListener(e, Ke.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));
      this.addManagedListener(e, Ke.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
      this.addManagedListener(e, Ke.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
      this.addManagedListener(e, Ke.EVENT_COLUMN_MOVED, this.onColumnMoved.bind(this));
      this.addListenersForCellComps();
    };
    t.prototype.onColumnMoved = function () {
      this.updateColumnLists();
    };
    t.prototype.addListenersForCellComps = function () {
      var e = this;
      this.addManagedListener(this.rowNode, Ko.EVENT_ROW_INDEX_CHANGED, function () {
        e.forEachCellComp(function (e) {
          return e.onRowIndexChanged();
        });
      });
      this.addManagedListener(this.rowNode, Ko.EVENT_CELL_CHANGED, function (t) {
        e.forEachCellComp(function (e) {
          return e.onCellChanged(t);
        });
      });
    };
    t.prototype.onRowNodeDataChanged = function (e) {
      this.forEachCellComp(function (t) {
        return t.refreshCell({
          suppressFlash: !e.update,
          newData: !e.update
        });
      });
      this.onRowSelected();
      this.postProcessCss();
    };
    t.prototype.onRowNodeCellChanged = function () {
      this.postProcessCss();
    };
    t.prototype.postProcessCss = function () {
      this.postProcessStylesFromGridOptions();
      this.postProcessClassesFromGridOptions();
      this.postProcessRowClassRules();
      this.postProcessRowDragging();
    };
    t.prototype.onRowNodeHighlightChanged = function () {
      var e = this.rowNode.highlighted;
      this.allRowComps.forEach(function (t) {
        var n = t.getGui();
        Zt(n, "ag-row-highlight-above");
        Zt(n, "ag-row-highlight-below");
        if (e) {
          Qt(n, "ag-row-highlight-" + e);
        }
      });
    };
    t.prototype.onRowNodeDraggingChanged = function () {
      this.postProcessRowDragging();
    };
    t.prototype.postProcessRowDragging = function () {
      var e = this.rowNode.dragging;
      this.allRowComps.forEach(function (t) {
        return Jt(t.getGui(), "ag-row-dragging", e);
      });
    };
    t.prototype.updateExpandedCss = function () {
      var e = this.rowNode.isExpandable();
      var t = 1 == this.rowNode.expanded;
      this.allRowComps.forEach(function (n) {
        var r = n.getGui();
        Jt(r, "ag-row-group", e);
        Jt(r, "ag-row-group-expanded", e && t);
        Jt(r, "ag-row-group-contracted", e && !t);
        cr(r, e && t);
      });
    };
    t.prototype.onDisplayedColumnsChanged = function () {
      this.updateColumnLists(true);
    };
    t.prototype.onVirtualColumnsChanged = function () {
      this.updateColumnLists();
    };
    t.prototype.getRowPosition = function () {
      return {
        rowPinned: this.rowNode.rowPinned,
        rowIndex: this.rowNode.rowIndex
      };
    };
    t.prototype.onKeyboardNavigate = function (e) {
      var t = u(this.allRowComps, function (t) {
        return t.getGui().contains(e.target);
      });
      if ((t ? t.getGui() : null) === e.target) {
        var n = this.rowNode;
        var r = this.beans.focusController.getFocusedCell();
        var o = {
          rowIndex: n.rowIndex,
          rowPinned: n.rowPinned,
          column: r && r.column
        };
        this.beans.rowRenderer.navigateToNextCell(e, e.keyCode, o, true);
        e.preventDefault();
      }
    };
    t.prototype.onTabKeyDown = function (e) {
      if (!e.defaultPrevented && !ke(e)) {
        var t = u(this.allRowComps, function (t) {
          return t.getGui().contains(e.target);
        });
        var n = t ? t.getGui() : null;
        var r = n === e.target;
        var o = null;
        if (!r) {
          o = this.beans.focusController.findNextFocusableElement(n, false, e.shiftKey);
        }
        if (this.isFullWidth() && r || !o) {
          this.beans.rowRenderer.onTabKeyDown(this, e);
        }
      }
    };
    t.prototype.onFullWidthRowFocused = function (e) {
      var t = this.rowNode;
      var n = this.isFullWidth() && e.rowIndex === t.rowIndex && e.rowPinned == t.rowPinned;
      var r = this.fullWidthRowComp ? this.fullWidthRowComp.getGui() : this.centerRowComp.getGui();
      Jt(r, "ag-full-width-focus", n);
      if (n) {
        r.focus({
          preventScroll: true
        });
      }
    };
    t.prototype.refreshCell = function (e) {
      this.allRowComps.forEach(function (t) {
        return t.destroyCells([e]);
      });
      this.updateColumnLists();
    };
    t.prototype.onMouseEvent = function (e, t) {
      switch (e) {
        case "dblclick":
          this.onRowDblClick(t);
          break;
        case "click":
          this.onRowClick(t);
          break;
        case "mousedown":
          this.onRowMouseDown(t);
      }
    };
    t.prototype.createRowEvent = function (e, t) {
      return {
        type: e,
        node: this.rowNode,
        data: this.rowNode.data,
        rowIndex: this.rowNode.rowIndex,
        rowPinned: this.rowNode.rowPinned,
        context: this.beans.gridOptionsWrapper.getContext(),
        api: this.beans.gridOptionsWrapper.getApi(),
        columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
        event: t
      };
    };
    t.prototype.createRowEventWithSource = function (e, t) {
      var n = this.createRowEvent(e, t);
      n.source = this;
      return n;
    };
    t.prototype.onRowDblClick = function (e) {
      if (!ke(e)) {
        var t = this.createRowEventWithSource(Ke.EVENT_ROW_DOUBLE_CLICKED, e);
        this.beans.eventService.dispatchEvent(t);
      }
    };
    t.prototype.onRowMouseDown = function (e) {
      this.lastMouseDownOnDragger = on(e.target, "ag-row-drag", 3);
      if (this.isFullWidth()) {
        var t = this.rowNode;
        var n = this.beans.columnController;
        this.beans.focusController.setFocusedCell(t.rowIndex, n.getAllDisplayedColumns()[0], t.rowPinned, true);
      }
    };
    t.prototype.onRowClick = function (e) {
      if (!(ke(e) || this.lastMouseDownOnDragger)) {
        var t = this.createRowEventWithSource(Ke.EVENT_ROW_CLICKED, e);
        this.beans.eventService.dispatchEvent(t);
        var n = e.ctrlKey || e.metaKey;
        var r = e.shiftKey;
        if (!(this.beans.gridOptionsWrapper.isGroupSelectsChildren() && this.rowNode.group || !this.rowNode.selectable || this.rowNode.rowPinned || !this.beans.gridOptionsWrapper.isRowSelection() || this.beans.gridOptionsWrapper.isSuppressRowClickSelection())) {
          var o = this.beans.gridOptionsWrapper.isRowMultiSelectWithClick();
          var i = !this.beans.gridOptionsWrapper.isSuppressRowDeselection();
          if (this.rowNode.isSelected()) {
            if (o) {
              this.rowNode.setSelectedParams({
                newValue: false
              });
            } else {
              if (n) {
                if (i) {
                  this.rowNode.setSelectedParams({
                    newValue: false
                  });
                }
              } else {
                this.rowNode.setSelectedParams({
                  newValue: !r,
                  clearSelection: !r,
                  rangeSelect: r
                });
              }
            }
          } else {
            var a = !o && !n;
            this.rowNode.setSelectedParams({
              newValue: true,
              clearSelection: a,
              rangeSelect: r
            });
          }
        }
      }
    };
    t.prototype.setupDetailRowAutoHeight = function (e) {
      var t = this;
      if (this.beans.gridOptionsWrapper.isDetailRowAutoHeight()) {
        var n = function () {
          var n = e.clientHeight;
          if (null != n && n > 0) {
            t.beans.frameworkOverrides.setTimeout(function () {
              t.rowNode.setRowHeight(n);
              if (t.beans.clientSideRowModel) {
                t.beans.clientSideRowModel.onRowHeightChanged();
              } else {
                if (t.beans.serverSideRowModel) {
                  t.beans.serverSideRowModel.onRowHeightChanged();
                }
              }
            }, 0);
          }
        };
        var r = this.beans.resizeObserverService.observeResize(e, n);
        this.addDestroyFunc(r);
        n();
      }
    };
    t.prototype.createFullWidthParams = function (e, t) {
      var n = this;
      return {
        fullWidth: true,
        data: this.rowNode.data,
        node: this.rowNode,
        value: this.rowNode.key,
        valueFormatted: this.rowNode.key,
        $scope: this.scope ? this.scope : this.parentScope,
        $compile: this.beans.$compile,
        rowIndex: this.rowNode.rowIndex,
        api: this.beans.gridOptionsWrapper.getApi(),
        columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
        context: this.beans.gridOptionsWrapper.getContext(),
        eGridCell: e,
        eParentOfValue: e,
        pinned: t,
        addRenderedRowListener: this.addEventListener.bind(this),
        registerRowDragger: function (e, t, r) {
          return n.addFullWidthRowDragging(e, t, r);
        }
      };
    };
    t.prototype.addFullWidthRowDragging = function (e, t, n) {
      if (undefined === n) {
        n = "";
      }
      if (this.isFullWidth()) {
        var r = new wi(function () {
          return n;
        }, this.rowNode, undefined, e, t);
        this.createManagedBean(r, this.beans.context);
      }
    };
    t.prototype.onUiLevelChanged = function () {
      var e = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);
      if (this.rowLevel != e) {
        var t = "ag-row-level-" + e;
        var n = "ag-row-level-" + this.rowLevel;
        this.allRowComps.forEach(function (e) {
          var r = e.getGui();
          Qt(r, t);
          Zt(r, n);
        });
      }
      this.rowLevel = e;
    };
    t.prototype.isFirstRowOnPage = function () {
      return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();
    };
    t.prototype.isLastRowOnPage = function () {
      return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();
    };
    t.prototype.onModelUpdated = function () {
      var e = this.isFirstRowOnPage();
      var t = this.isLastRowOnPage();
      if (this.firstRowOnPage !== e) {
        this.firstRowOnPage = e;
        this.allRowComps.forEach(function (t) {
          return Jt(t.getGui(), "ag-row-first", e);
        });
      }
      if (this.lastRowOnPage !== t) {
        this.lastRowOnPage = t;
        this.allRowComps.forEach(function (e) {
          return Jt(e.getGui(), "ag-row-last", t);
        });
      }
    };
    t.prototype.stopEditing = function (e) {
      if (undefined === e) {
        e = false;
      }
      this.forEachCellComp(function (t) {
        t.stopEditing(e);
      });
      if (this.editingRow) {
        if (!e) {
          var t = this.createRowEvent(Ke.EVENT_ROW_VALUE_CHANGED);
          this.beans.eventService.dispatchEvent(t);
        }
        this.setEditingRow(false);
      }
    };
    t.prototype.setEditingRow = function (e) {
      this.editingRow = e;
      this.allRowComps.forEach(function (t) {
        return Jt(t.getGui(), "ag-row-editing", e);
      });
      var t = e ? this.createRowEvent(Ke.EVENT_ROW_EDITING_STARTED) : this.createRowEvent(Ke.EVENT_ROW_EDITING_STOPPED);
      this.beans.eventService.dispatchEvent(t);
    };
    t.prototype.startRowEditing = function (e, t, n) {
      if (undefined === e) {
        e = null;
      }
      if (undefined === t) {
        t = null;
      }
      if (undefined === n) {
        n = null;
      }
      if (!this.editingRow) {
        this.forEachCellComp(function (r) {
          var o = r === n;
          if (o) {
            r.startEditingIfEnabled(e, t, o);
          } else {
            r.startEditingIfEnabled(null, null, o);
          }
        });
        this.setEditingRow(true);
      }
    };
    t.prototype.forEachCellComp = function (e) {
      this.allRowComps.forEach(function (t) {
        return t.forEachCellComp(e);
      });
    };
    t.prototype.postProcessClassesFromGridOptions = function () {
      var e = this;
      var t = this.beans.rowCssClassCalculator.processClassesFromGridOptions(this.rowNode, this.scope);
      if (t && t.length) {
        t.forEach(function (t) {
          e.allRowComps.forEach(function (e) {
            return Qt(e.getGui(), t);
          });
        });
      }
    };
    t.prototype.postProcessRowClassRules = function () {
      var e = this;
      this.beans.rowCssClassCalculator.processRowClassRules(this.rowNode, this.scope, function (t) {
        e.allRowComps.forEach(function (e) {
          return Qt(e.getGui(), t);
        });
      }, function (t) {
        e.allRowComps.forEach(function (e) {
          return Zt(e.getGui(), t);
        });
      });
    };
    t.prototype.postProcessStylesFromGridOptions = function () {
      var e = this.processStylesFromGridOptions();
      this.allRowComps.forEach(function (t) {
        return wn(t.getGui(), e);
      });
    };
    t.prototype.getInitialRowTopStyle = function () {
      if (this.printLayout) {
        return "";
      }
      var e = this.slideRowIn ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
      var t = this.applyPaginationOffset(e);
      var n = this.rowNode.isRowPinned() ? t : this.beans.rowContainerHeightService.getRealPixelPosition(t);
      return this.beans.gridOptionsWrapper.isSuppressRowTransform() ? "top: " + n + "px; " : "transform: translateY(" + n + "px);";
    };
    t.prototype.getRowBusinessKey = function () {
      var e = this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc();
      if ("function" === typeof e) {
        return e(this.rowNode);
      }
    };
    t.prototype.getInitialRowClasses = function (e) {
      var t = {
        rowNode: this.rowNode,
        rowFocused: this.rowFocused,
        fadeRowIn: this.fadeRowIn,
        rowIsEven: this.rowIsEven,
        rowLevel: this.rowLevel,
        fullWidthRow: this.isFullWidth(),
        firstRowOnPage: this.isFirstRowOnPage(),
        lastRowOnPage: this.isLastRowOnPage(),
        printLayout: this.printLayout,
        expandable: this.rowNode.isExpandable(),
        scope: this.scope,
        pinned: e
      };
      return this.beans.rowCssClassCalculator.getInitialRowClasses(t);
    };
    t.prototype.preProcessStylesFromGridOptions = function () {
      return Xn(this.processStylesFromGridOptions());
    };
    t.prototype.processStylesFromGridOptions = function () {
      var e = this.beans.gridOptionsWrapper.getRowStyle();
      if (!e || "function" !== typeof e) {
        var t;
        var n = this.beans.gridOptionsWrapper.getRowStyleFunc();
        if (n) {
          t = n({
            data: this.rowNode.data,
            node: this.rowNode,
            rowIndex: this.rowNode.rowIndex,
            $scope: this.scope,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext()
          });
        }
        return G({}, e, t);
      }
      console.warn("AG Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead");
    };
    t.prototype.onRowSelected = function () {
      var e = this;
      var t = this.rowNode.isSelected();
      this.allRowComps.forEach(function (n) {
        var r = n.getGui();
        yr(r, t);
        Jt(r, "ag-row-selected", t);
        e.refreshAriaLabel(r, t);
      });
    };
    t.prototype.refreshAriaLabel = function (e, t) {
      if (t && this.beans.gridOptionsWrapper.isSuppressRowDeselection()) {
        e.removeAttribute("aria-label");
      } else {
        or(e, this.beans.gridOptionsWrapper.getLocaleTextFunc()(t ? "ariaRowDeselect" : "ariaRowSelect", "Press SPACE to " + (t ? "deselect" : "select") + " this row."));
      }
    };
    t.prototype.isUseAnimationFrameForCreate = function () {
      return this.useAnimationFrameForCreate;
    };
    t.prototype.addHoverFunctionality = function (e) {
      var t = this;
      if (this.active) {
        this.addManagedListener(e, "mouseenter", function () {
          return t.rowNode.onMouseEnter();
        });
        this.addManagedListener(e, "mouseleave", function () {
          return t.rowNode.onMouseLeave();
        });
        this.addManagedListener(this.rowNode, Ko.EVENT_MOUSE_ENTER, function () {
          if (!t.beans.gridOptionsWrapper.isSuppressRowHoverHighlight()) {
            Qt(e, "ag-row-hover");
          }
        });
        this.addManagedListener(this.rowNode, Ko.EVENT_MOUSE_LEAVE, function () {
          Zt(e, "ag-row-hover");
        });
      }
    };
    t.prototype.roundRowTopToBounds = function (e) {
      var t = this.beans.controllersService.getGridBodyController().getScrollFeature().getVScrollPosition();
      var n = this.applyPaginationOffset(t.top, true) - 100;
      var r = this.applyPaginationOffset(t.bottom, true) + 100;
      return Math.min(Math.max(n, e), r);
    };
    t.prototype.getFrameworkOverrides = function () {
      return this.beans.frameworkOverrides;
    };
    t.prototype.onRowHeightChanged = function () {
      if (r(this.rowNode.rowHeight)) {
        var e = this.rowNode.rowHeight + "px";
        this.allRowComps.forEach(function (t) {
          return t.getGui().style.height = e;
        });
      }
    };
    t.prototype.addEventListener = function (t, n) {
      if (!("renderedRowRemoved" !== t && "rowRemoved" !== t)) {
        t = Ke.EVENT_VIRTUAL_ROW_REMOVED;
        console.warn("AG Grid: Since version 11, event renderedRowRemoved is now called " + Ke.EVENT_VIRTUAL_ROW_REMOVED);
      }
      e.prototype.addEventListener.call(this, t, n);
    };
    t.prototype.removeEventListener = function (t, n) {
      if (!("renderedRowRemoved" !== t && "rowRemoved" !== t)) {
        t = Ke.EVENT_VIRTUAL_ROW_REMOVED;
        console.warn("AG Grid: Since version 11, event renderedRowRemoved and rowRemoved is now called " + Ke.EVENT_VIRTUAL_ROW_REMOVED);
      }
      e.prototype.removeEventListener.call(this, t, n);
    };
    t.prototype.destroyFirstPass = function () {
      this.active = false;
      this.setupRemoveAnimation();
      var t = this.createRowEvent(Ke.EVENT_VIRTUAL_ROW_REMOVED);
      this.dispatchEvent(t);
      this.beans.eventService.dispatchEvent(t);
      e.prototype.destroy.call(this);
    };
    t.prototype.setupRemoveAnimation = function () {
      if (null != this.rowNode.rowTop) {
        var e = this.roundRowTopToBounds(this.rowNode.rowTop);
        this.setRowTop(e);
      } else {
        this.allRowComps.forEach(function (e) {
          Qt(e.getGui(), "ag-opacity-zero");
        });
      }
    };
    t.prototype.destroySecondPass = function () {
      this.allRowComps.forEach(function (e) {
        return e.destroy();
      });
      this.allRowComps.length = 0;
    };
    t.prototype.onCellFocusChanged = function () {
      var e = this.beans.focusController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
      if (e !== this.rowFocused) {
        this.allRowComps.forEach(function (t) {
          var n = t.getGui();
          Jt(n, "ag-row-focus", e);
          Jt(n, "ag-row-no-focus", !e);
        });
        this.rowFocused = e;
      }
      if (!e && this.editingRow) {
        this.stopEditing(false);
      }
    };
    t.prototype.onPaginationChanged = function () {
      var e = this.beans.paginationProxy.getCurrentPage();
      if (this.paginationPage !== e) {
        this.paginationPage = e;
        this.onTopChanged();
      }
    };
    t.prototype.onTopChanged = function () {
      this.setRowTop(this.rowNode.rowTop);
    };
    t.prototype.onPaginationPixelOffsetChanged = function () {
      this.onTopChanged();
    };
    t.prototype.applyPaginationOffset = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      return this.rowNode.isRowPinned() ? e : e + this.beans.paginationProxy.getPixelOffset() * (t ? 1 : -1);
    };
    t.prototype.setRowTop = function (e) {
      if (!this.printLayout && r(e)) {
        var t = this.applyPaginationOffset(e);
        var n = (this.rowNode.isRowPinned() ? t : this.beans.rowContainerHeightService.getRealPixelPosition(t)) + "px";
        var o = this.beans.gridOptionsWrapper.isSuppressRowTransform();
        this.allRowComps.forEach(function (e) {
          var t = e.getGui();
          if (o) {
            t.style.top = n;
          } else {
            t.style.transform = "translateY(" + n + ")";
          }
        });
      }
    };
    t.prototype.getRowNode = function () {
      return this.rowNode;
    };
    t.prototype.getRenderedCellForColumn = function (e) {
      var t = u(this.allRowComps.map(function (t) {
        return t.getCellComp(e.getColId());
      }), function (e) {
        return !!e;
      });
      return t || (t = u(this.allRowComps.map(function (t) {
        return t.getCellCompSpanned(e);
      }), function (e) {
        return !!e;
      })) || null;
    };
    t.prototype.onRowIndexChanged = function () {
      if (null != this.rowNode.rowIndex) {
        this.onCellFocusChanged();
        this.updateRowIndexes();
      }
    };
    t.prototype.updateRowIndexes = function () {
      var e = this;
      var t = this.rowNode.getRowIndexString();
      var n = this.rowNode.rowIndex % 2 === 0;
      var r = this.rowIsEven !== n;
      var o = this.beans.headerNavigationService.getHeaderRowCount();
      if (r) {
        this.rowIsEven = n;
      }
      this.allRowComps.forEach(function (i) {
        var a = i.getGui();
        a.setAttribute("row-index", t);
        hr(a, o + e.rowNode.rowIndex + 1);
        if (r) {
          Jt(a, "ag-row-even", n);
          Jt(a, "ag-row-odd", !n);
        }
      });
    };
    t.prototype.getPinnedLeftRowElement = function () {
      return this.leftRowComp ? this.leftRowComp.getGui() : undefined;
    };
    t.prototype.getPinnedRightRowElement = function () {
      return this.rightRowComp ? this.rightRowComp.getGui() : undefined;
    };
    t.prototype.getBodyRowElement = function () {
      return this.centerRowComp ? this.centerRowComp.getGui() : undefined;
    };
    t.prototype.getFullWidthRowElement = function () {
      return this.fullWidthRowComp ? this.fullWidthRowComp.getGui() : undefined;
    };
    t.DOM_DATA_KEY_RENDERED_ROW = "renderedRow";
    return t;
  }(We);
  (Ha = exports.SelectionHandleType || (exports.SelectionHandleType = {}))[Ha.FILL = 0] = "FILL";
  Ha[Ha.RANGE = 1] = "RANGE";
  (Va = exports.CellRangeType || (exports.CellRangeType = {}))[Va.VALUE = 0] = "VALUE";
  Va[Va.DIMENSION = 1] = "DIMENSION";
  var Xa;
  var Qa = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Za = function (e) {
    function t(t) {
      var n = e.call(this, "<div class=\"ag-popup-editor\" tabindex=\"-1\"/>") || this;
      n.getGuiCalledOnChild = false;
      n.cellEditor = t;
      return n;
    }
    Qa(t, e);
    t.prototype.onKeyDown = function (e) {
      if (!Br(this.gridOptionsWrapper, e, this.params.node, this.params.column, true)) {
        this.params.onKeyDown(e);
      }
    };
    t.prototype.getGui = function () {
      if (!this.getGuiCalledOnChild) {
        this.appendChild(this.cellEditor.getGui());
        this.getGuiCalledOnChild = true;
      }
      return e.prototype.getGui.call(this);
    };
    t.prototype.init = function (n) {
      var r = this;
      this.params = n;
      this.gridOptionsWrapper.setDomData(this.getGui(), t.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
      this.addDestroyFunc(function () {
        return r.destroyBean(r.cellEditor);
      });
      this.addManagedListener(e.prototype.getGui.call(this), "keydown", this.onKeyDown.bind(this));
    };
    t.prototype.afterGuiAttached = function () {
      if (this.cellEditor.afterGuiAttached) {
        this.cellEditor.afterGuiAttached();
      }
    };
    t.prototype.getValue = function () {
      return this.cellEditor.getValue();
    };
    t.prototype.isCancelBeforeStart = function () {
      return !!this.cellEditor.isCancelBeforeStart && this.cellEditor.isCancelBeforeStart();
    };
    t.prototype.isCancelAfterEnd = function () {
      return !!this.cellEditor.isCancelAfterEnd && this.cellEditor.isCancelAfterEnd();
    };
    t.prototype.getPopupPosition = function () {
      if (this.cellEditor.getPopupPosition) {
        return this.cellEditor.getPopupPosition();
      }
    };
    t.prototype.focusIn = function () {
      if (this.cellEditor.focusIn) {
        this.cellEditor.focusIn();
      }
    };
    t.prototype.focusOut = function () {
      if (this.cellEditor.focusOut) {
        this.cellEditor.focusOut();
      }
    };
    t.DOM_KEY_POPUP_EDITOR_WRAPPER = "popupEditorWrapper";
    return t;
  }(lo);
  var Ja = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var $a = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var es = function (e) {
    function t(t, n, r, o) {
      var i = e.call(this, "<div class=\"ag-drag-handle ag-row-drag\" draggable=\"true\"></div>") || this;
      i.rowNode = t;
      i.column = n;
      i.beans = r;
      i.eCell = o;
      return i;
    }
    Ja(t, e);
    t.prototype.postConstruct = function () {
      this.getGui().appendChild(Dr("rowDrag", this.beans.gridOptionsWrapper, null));
      this.addGuiEventListener("mousedown", function (e) {
        e.stopPropagation();
      });
      this.addDragSource();
      this.checkVisibility();
    };
    t.prototype.addDragSource = function () {
      this.addGuiEventListener("dragstart", this.onDragStart.bind(this));
    };
    t.prototype.onDragStart = function (e) {
      var t = this;
      var n = this.column.getColDef().dndSourceOnRowDrag;
      var r = Mt();
      if (!r) {
        e.dataTransfer.setDragImage(this.eCell, 0, 0);
      }
      if (n) {
        n({
          rowNode: this.rowNode,
          dragEvent: e
        });
      } else {
        (function () {
          try {
            var n = JSON.stringify(t.rowNode.data);
            if (r) {
              e.dataTransfer.setData("text", n);
            } else {
              e.dataTransfer.setData("application/json", n);
              e.dataTransfer.setData("text/plain", n);
            }
          } catch (o) {}
        })();
      }
    };
    t.prototype.checkVisibility = function () {
      var e = this.column.isDndSource(this.rowNode);
      this.setDisplayed(e);
    };
    $a([le], t.prototype, "postConstruct", null);
    return t;
  }(so);
  var ts = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ns = function () {
    return (ns = Object.assign || function (e) {
      for (var t, n = 1, r = arguments.length; n < r; n++) {
        for (var o in t = arguments[n]) if (Object.prototype.hasOwnProperty.call(t, o)) {
          e[o] = t[o];
        }
      }
      return e;
    }).apply(this, arguments);
  };
  var rs = function (e) {
    function n(t, n, r, o, i, a, s, c, l) {
      var u = e.call(this) || this;
      u.hasChartRange = false;
      u.editingCell = false;
      u.suppressRefreshCell = false;
      u.tooltipFeatureEnabled = false;
      u.scope = null;
      u.cellEditorVersion = 0;
      u.cellRendererVersion = 0;
      u.scope = t;
      u.beans = n;
      u.column = r;
      u.rowNode = o;
      u.rowComp = i;
      u.autoHeightCell = a;
      u.printLayout = s;
      u.eRow = c;
      u.createGridCellVo();
      u.rangeSelectionEnabled = u.beans.rangeController && n.gridOptionsWrapper.isEnableRangeSelection();
      u.cellFocused = u.beans.focusController.isCellFocused(u.cellPosition);
      u.firstRightPinned = u.column.isFirstRightPinned();
      u.lastLeftPinned = u.column.isLastLeftPinned();
      if (u.rangeSelectionEnabled && u.beans.rangeController) {
        var d = u.beans.rangeController;
        u.rangeCount = d.getCellRangeCount(u.cellPosition);
        u.hasChartRange = u.getHasChartRange();
      }
      u.getValueAndFormat();
      u.setUsingWrapper();
      u.chooseCellRenderer();
      u.setupColSpan();
      u.rowSpan = u.column.getRowSpan(u.rowNode);
      u.setTemplate(u.getCreateTemplate());
      u.afterAttached();
      if (l) {
        u.startEditingIfEnabled();
      }
      return u;
    }
    ts(n, e);
    n.prototype.getCreateTemplate = function () {
      var e = this.beans.gridOptionsWrapper.isEnableCellTextSelection() ? "" : " unselectable=\"on\"";
      var t = [];
      var n = this.column;
      var o = this.getCellWidth();
      var i = this.modifyLeftForPrintLayout(this.getCellLeft());
      var a = this.getInitialValueToRender();
      var s = U(this.column, "colDef.template", null) ? a : nt(a);
      this.tooltip = this.getToolTip();
      var c = nt(this.tooltip);
      var l = nt(n.getId());
      var u = this.preProcessStylesFromColDef();
      var d = this.getInitialCssClasses();
      var p = this.getStylesForRowSpanning();
      var f = nt(this.beans.columnController.getAriaColumnIndex(this.column).toString());
      t.push("<div");
      t.push(" tabindex=\"-1\"");
      t.push("" + e);
      t.push(" role=\"gridcell\"");
      t.push(" aria-colindex=\"" + f + "\"");
      t.push(" comp-id=\"" + this.getCompId() + "\" ");
      t.push(" col-id=\"" + l + "\"");
      t.push(" class=\"" + nt(d.join(" ")) + "\"");
      if (this.beans.gridOptionsWrapper.isEnableBrowserTooltips() && r(c)) {
        t.push(" title=\"" + c + "\"");
      }
      if (this.rangeSelectionEnabled) {
        t.push(" aria-selected=\"" + (this.rangeCount ? "true" : "false") + "\"");
      }
      t.push(" style=\"width: " + Number(o) + "px; left: " + Number(i) + "px; " + nt(u) + " " + nt(p) + "\">");
      if (this.usingWrapper) {
        t.push(this.getCellWrapperString(s));
      } else {
        if (null != s) {
          t.push(s);
        }
      }
      t.push("</div>");
      return t.join("");
    };
    n.prototype.getCellWrapperString = function (e) {
      if (undefined === e) {
        e = "";
      }
      return "<div ref=\"eCellWrapper\" class=\"ag-cell-wrapper\" role=\"presentation\">\n            <span ref=\"eCellValue\" role=\"presentation\" class=\"ag-cell-value\"" + (this.beans.gridOptionsWrapper.isEnableCellTextSelection() ? "" : " unselectable=\"on\"") + ">\n                " + (null != e ? e : "") + "\n            </span>\n        </div>";
    };
    n.prototype.getStylesForRowSpanning = function () {
      return 1 === this.rowSpan ? "" : "height: " + this.beans.gridOptionsWrapper.getRowHeightAsNumber() * this.rowSpan + "px; z-index: 1;";
    };
    n.prototype.afterAttached = function () {
      this.addDomData();
      this.populateTemplate();
      this.createCellRendererInstance(true);
      this.angular1Compile();
      this.refreshHandle();
      if (r(this.tooltip)) {
        this.createTooltipFeatureIfNeeded();
      }
    };
    n.prototype.createTooltipFeatureIfNeeded = function () {
      if (!(this.beans.gridOptionsWrapper.isEnableBrowserTooltips() || this.tooltipFeatureEnabled)) {
        this.createManagedBean(new ro(this), this.beans.context);
        this.tooltipFeatureEnabled = true;
      }
    };
    n.prototype.onColumnHover = function () {
      var e = this.beans.columnHoverService.isHovered(this.column);
      this.addOrRemoveCssClass("ag-column-hover", e);
    };
    n.prototype.onCellChanged = function (e) {
      if (e.column === this.column) {
        this.refreshCell({});
      }
    };
    n.prototype.getCellLeft = function () {
      return (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning ? m(this.colsSpanning) : this.column).getLeft();
    };
    n.prototype.getCellWidth = function () {
      return this.colsSpanning ? this.colsSpanning.reduce(function (e, t) {
        return e + t.getActualWidth();
      }, 0) : this.column.getActualWidth();
    };
    n.prototype.onFlashCells = function (e) {
      var t = this.beans.cellPositionUtils.createId(this.cellPosition);
      if (e.cells[t]) {
        this.animateCell("highlight");
      }
    };
    n.prototype.setupColSpan = function () {
      if (!o(this.getComponentHolder().colSpan)) {
        this.addManagedListener(this.beans.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));
        this.addManagedListener(this.beans.eventService, Ke.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
        this.colsSpanning = this.getColSpanningList();
      }
    };
    n.prototype.getColSpanningList = function () {
      var e = this.column.getColSpan(this.rowNode);
      var t = [];
      if (1 === e) {
        t.push(this.column);
      } else {
        for (var n = this.column, r = this.column.getPinned(), i = 0; n && i < e && (t.push(n), (n = this.beans.columnController.getDisplayedColAfter(n)) && !o(n)) && r === n.getPinned(); i++) {
          ;
        }
      }
      return t;
    };
    n.prototype.onDisplayColumnsChanged = function () {
      var e = this.getColSpanningList();
      if (!g(this.colsSpanning, e)) {
        this.colsSpanning = e;
        this.onWidthChanged();
        this.onLeftChanged();
      }
    };
    n.prototype.refreshAriaIndex = function () {
      var e = this.beans.columnController.getAriaColumnIndex(this.column);
      gr(this.getGui(), e);
    };
    n.prototype.getInitialCssClasses = function () {
      var e = ["ag-cell", "ag-cell-not-inline-editing"];
      if (!this.autoHeightCell) {
        e.push("ag-cell-auto-height");
      }
      if (!this.beans.gridOptionsWrapper.isSuppressCellSelection() && this.cellFocused) {
        e.push("ag-cell-focus");
      }
      if (this.firstRightPinned) {
        e.push("ag-cell-first-right-pinned");
      }
      if (this.lastLeftPinned) {
        e.push("ag-cell-last-left-pinned");
      }
      if (this.beans.columnHoverService.isHovered(this.column)) {
        e.push("ag-column-hover");
      }
      w(e, this.preProcessClassesFromColDef());
      w(e, this.preProcessCellClassRules());
      w(e, this.getInitialRangeClasses());
      if (!this.usingWrapper) {
        e.push("ag-cell-value");
      }
      this.wrapText = 1 == this.column.getColDef().wrapText;
      if (this.wrapText) {
        e.push("ag-cell-wrap-text");
      }
      return e;
    };
    n.prototype.getInitialValueToRender = function () {
      if (this.usingCellRenderer) {
        return "string" === typeof this.cellRendererGui ? this.cellRendererGui : "";
      }
      var e = this.getComponentHolder();
      return e.template ? e.template : e.templateUrl ? this.beans.templateService.getTemplate(e.templateUrl, this.refreshCell.bind(this, true)) || "" : this.getValueToUse();
    };
    n.prototype.getRenderedRow = function () {
      return this.rowComp;
    };
    n.prototype.isSuppressNavigable = function () {
      return this.column.isSuppressNavigable(this.rowNode);
    };
    n.prototype.getCellRenderer = function () {
      return this.cellRenderer;
    };
    n.prototype.getCellEditor = function () {
      return this.cellEditor;
    };
    n.prototype.onNewColumnsLoaded = function () {
      this.postProcessWrapText();
      this.postProcessCellClassRules();
    };
    n.prototype.postProcessWrapText = function () {
      var e = 1 == this.column.getColDef().wrapText;
      if (e !== this.wrapText) {
        this.wrapText = e;
        this.addOrRemoveCssClass("ag-cell-wrap-text", this.wrapText);
      }
    };
    n.prototype.refreshCell = function (e) {
      if (!this.suppressRefreshCell && !this.editingCell) {
        var t = this.getComponentHolder();
        var n = e && e.newData;
        var r = e && e.suppressFlash || t.suppressCellFlash;
        var o = null == t.field && null == t.valueGetter && null == t.showRowGroup;
        var i = e && e.forceRefresh || o || n;
        var a = this.value;
        this.value = this.getValue();
        var s = !this.valuesAreEqual(a, this.value);
        if (i || s) {
          this.valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
          if (!(!n && this.attemptCellRendererRefresh())) {
            this.replaceContentsAfterRefresh();
          }
          var c = this.beans.filterManager.isSuppressFlashingCellsBecauseFiltering();
          if (!r && !c && (this.beans.gridOptionsWrapper.isEnableCellChangeFlash() || t.enableCellChangeFlash)) {
            this.flashCell();
          }
          this.postProcessStylesFromColDef();
          this.postProcessClassesFromColDef();
        }
        this.updateAngular1ScopeAndCompile();
        this.refreshToolTip();
        this.postProcessCellClassRules();
      }
    };
    n.prototype.flashCell = function (e) {
      var t = e && e.flashDelay;
      var n = e && e.fadeDelay;
      this.animateCell("data-changed", t, n);
    };
    n.prototype.animateCell = function (e, t, n) {
      var o = this;
      var i = "ag-cell-" + e;
      var a = "ag-cell-" + e + "-animation";
      var s = this.getGui();
      var c = this.beans.gridOptionsWrapper;
      if (!t) {
        t = c.getCellFlashDelay();
      }
      if (!r(n)) {
        n = c.getCellFadeDelay();
      }
      this.addCssClass(i);
      this.removeCssClass(a);
      window.setTimeout(function () {
        o.removeCssClass(i);
        o.addCssClass(a);
        s.style.transition = "background-color " + n + "ms";
        window.setTimeout(function () {
          o.removeCssClass(a);
          s.style.removeProperty("transition");
        }, n);
      }, t);
    };
    n.prototype.replaceContentsAfterRefresh = function () {
      this.setUsingWrapper();
      hn(this.eCellValue);
      this.cellRenderer = this.beans.context.destroyBean(this.cellRenderer);
      this.cellRendererGui = null;
      this.putDataIntoCellAfterRefresh();
      this.updateAngular1ScopeAndCompile();
    };
    n.prototype.updateAngular1ScopeAndCompile = function () {
      if (this.beans.gridOptionsWrapper.isAngularCompileRows() && this.scope) {
        this.scope.data = ns({}, this.rowNode.data);
        this.angular1Compile();
      }
    };
    n.prototype.angular1Compile = function () {
      if (this.beans.gridOptionsWrapper.isAngularCompileRows()) {
        var e = this.getGui();
        if (!e.classList.contains("ng-scope") || 0 === e.childElementCount) {
          var t = this.beans.$compile(e)(this.scope);
          this.addDestroyFunc(function () {
            return t.remove();
          });
        }
      }
    };
    n.prototype.postProcessStylesFromColDef = function () {
      var e = this.processStylesFromColDef();
      if (e) {
        wn(this.getGui(), e);
      }
    };
    n.prototype.preProcessStylesFromColDef = function () {
      return Xn(this.processStylesFromColDef());
    };
    n.prototype.processStylesFromColDef = function () {
      var e = this.getComponentHolder();
      if (e.cellStyle) {
        var t = undefined;
        if ("function" === typeof e.cellStyle) {
          var n = {
            column: this.column,
            value: this.value,
            colDef: e,
            data: this.rowNode.data,
            node: this.rowNode,
            rowIndex: this.rowNode.rowIndex,
            $scope: this.scope,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext()
          };
          t = (0, e.cellStyle)(n);
        } else {
          t = e.cellStyle;
        }
        return t;
      }
    };
    n.prototype.postProcessClassesFromColDef = function () {
      var e = this;
      this.processClassesFromColDef(function (t) {
        return e.addCssClass(t);
      });
    };
    n.prototype.preProcessClassesFromColDef = function () {
      var e = [];
      this.processClassesFromColDef(function (t) {
        return e.push(t);
      });
      return e;
    };
    n.prototype.processClassesFromColDef = function (e) {
      var t = this.getComponentHolder();
      var n = {
        value: this.value,
        data: this.rowNode.data,
        node: this.rowNode,
        colDef: t,
        rowIndex: this.rowNode.rowIndex,
        $scope: this.scope,
        api: this.beans.gridOptionsWrapper.getApi(),
        columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
        context: this.beans.gridOptionsWrapper.getContext()
      };
      this.beans.stylingService.processStaticCellClasses(t, n, e);
    };
    n.prototype.putDataIntoCellAfterRefresh = function () {
      var e = this.getComponentHolder();
      if (e.template) {
        this.eCellValue.innerHTML = e.template;
      } else if (e.templateUrl) {
        var t = this.beans.templateService.getTemplate(e.templateUrl, this.refreshCell.bind(this, true));
        if (t) {
          this.eCellValue.innerHTML = t;
        }
      } else if (this.chooseCellRenderer(), this.usingCellRenderer) {
        this.createCellRendererInstance();
      } else {
        var n = this.getValueToUse();
        if (null != n) {
          this.eCellValue.innerHTML = nt(n) || "";
        }
      }
    };
    n.prototype.attemptCellRendererRefresh = function () {
      if (o(this.cellRenderer) || !this.cellRenderer || o(this.cellRenderer.refresh)) {
        return false;
      }
      var e = this.createCellRendererParams();
      var t = this.beans.userComponentFactory.createFinalParams(this.getComponentHolder(), this.cellRendererType, e);
      var n = this.cellRenderer.refresh(t);
      return true === n || undefined === n;
    };
    n.prototype.refreshToolTip = function () {
      var e = this.getToolTip();
      if (this.tooltip !== e) {
        this.createTooltipFeatureIfNeeded();
        var t = r(e);
        if (!(t && this.tooltip === e.toString())) {
          this.tooltip = e;
          if (this.beans.gridOptionsWrapper.isEnableBrowserTooltips()) {
            if (t) {
              this.eCellValue.setAttribute("title", this.tooltip);
            } else {
              this.eCellValue.removeAttribute("title");
            }
          }
        }
      }
    };
    n.prototype.valuesAreEqual = function (e, t) {
      var n = this.getComponentHolder();
      var r = n ? n.equals : null;
      return r ? r(e, t) : e === t;
    };
    n.prototype.getToolTip = function () {
      var e = this.getComponentHolder();
      var t = this.rowNode.data;
      if (e.tooltipField && r(t)) {
        return W(t, e.tooltipField, this.column.isTooltipFieldContainsDots());
      }
      var n = e.tooltipValueGetter;
      return n ? n(ns(ns({
        api: this.beans.gridOptionsWrapper.getApi(),
        columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
        context: this.beans.gridOptionsWrapper.getContext()
      }, this.getTooltipParams()), {
        value: this.value
      })) : null;
    };
    n.prototype.getTooltipParams = function () {
      return {
        location: "cell",
        colDef: this.getComponentHolder(),
        column: this.getColumn(),
        rowIndex: this.cellPosition.rowIndex,
        node: this.rowNode,
        data: this.rowNode.data,
        value: this.getTooltipText(),
        valueFormatted: this.valueFormatted
      };
    };
    n.prototype.getTooltipText = function (e) {
      if (undefined === e) {
        e = true;
      }
      return e ? nt(this.tooltip) : this.tooltip;
    };
    n.prototype.processCellClassRules = function (e, t) {
      var n = this.getComponentHolder();
      var r = {
        value: this.value,
        data: this.rowNode.data,
        node: this.rowNode,
        colDef: n,
        rowIndex: this.cellPosition.rowIndex,
        api: this.beans.gridOptionsWrapper.getApi(),
        columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
        $scope: this.scope,
        context: this.beans.gridOptionsWrapper.getContext()
      };
      this.beans.stylingService.processClassRules(n.cellClassRules, r, e, t);
    };
    n.prototype.postProcessCellClassRules = function () {
      var e = this;
      this.processCellClassRules(function (t) {
        return e.addCssClass(t);
      }, function (t) {
        return e.removeCssClass(t);
      });
    };
    n.prototype.preProcessCellClassRules = function () {
      var e = [];
      this.processCellClassRules(function (t) {
        return e.push(t);
      }, function (e) {});
      return e;
    };
    n.prototype.setUsingWrapper = function () {
      var e = this.getComponentHolder();
      if (this.rowNode.rowPinned) {
        this.usingWrapper = false;
        this.includeSelectionComponent = false;
        this.includeRowDraggingComponent = false;
        return void (this.includeDndSourceComponent = false);
      }
      var t = "function" === typeof e.checkboxSelection;
      var n = "function" === typeof e.rowDrag;
      var r = "function" === typeof e.dndSource;
      this.includeSelectionComponent = t || true === e.checkboxSelection;
      this.includeRowDraggingComponent = n || true === e.rowDrag;
      this.includeDndSourceComponent = r || true === e.dndSource;
      var o = this.beans.gridOptionsWrapper.isEnableCellTextSelection();
      this.usingWrapper = o || this.includeRowDraggingComponent || this.includeSelectionComponent || this.includeDndSourceComponent;
    };
    n.prototype.chooseCellRenderer = function () {
      var e = this.getComponentHolder();
      if (e.template || e.templateUrl) {
        this.usingCellRenderer = false;
      } else {
        var t = this.createCellRendererParams();
        if (this.rowNode.rowPinned && this.beans.userComponentFactory.lookupComponentClassDef(e, "pinnedRowCellRenderer", t)) {
          this.cellRendererType = n.CELL_RENDERER_TYPE_PINNED;
          this.usingCellRenderer = true;
        } else {
          if (this.beans.userComponentFactory.lookupComponentClassDef(e, "cellRenderer", t)) {
            this.cellRendererType = n.CELL_RENDERER_TYPE_NORMAL;
            this.usingCellRenderer = true;
          } else {
            this.usingCellRenderer = false;
          }
        }
      }
    };
    n.prototype.createCellRendererInstance = function (e) {
      var t = this;
      if (undefined === e) {
        e = false;
      }
      if (this.usingCellRenderer) {
        var r = this.beans.gridOptionsWrapper.isAngularCompileRows();
        var o = this.beans.gridOptionsWrapper.isSuppressAnimationFrame();
        if (r || o || this.autoHeightCell) {
          e = false;
        }
        var i = this.createCellRendererParams();
        this.cellRendererVersion++;
        var a = this.afterCellRendererCreated.bind(this, this.cellRendererVersion);
        var s = this.cellRendererType === n.CELL_RENDERER_TYPE_NORMAL;
        this.createCellRendererFunc = function () {
          t.createCellRendererFunc = null;
          var e = t.beans.userComponentFactory.newCellRenderer(t.getComponentHolder(), i, !s);
          if (e) {
            e.then(a);
          }
        };
        if (e) {
          this.beans.taskQueue.createTask(this.createCellRendererFunc, this.rowNode.rowIndex, "createTasksP2");
        } else {
          this.createCellRendererFunc();
        }
      }
    };
    n.prototype.afterCellRendererCreated = function (e, t) {
      if (this.isAlive() && e === this.cellRendererVersion) {
        this.cellRenderer = t;
        this.cellRendererGui = this.cellRenderer.getGui();
        if (!(o(this.cellRendererGui) || this.editingCell)) {
          this.eCellValue.appendChild(this.cellRendererGui);
        }
      } else {
        this.beans.context.destroyBean(t);
      }
    };
    n.prototype.createCellRendererParams = function () {
      var e = this;
      return {
        value: this.value,
        valueFormatted: this.valueFormatted,
        getValue: this.getValue.bind(this),
        setValue: function (t) {
          return e.beans.valueService.setValue(e.rowNode, e.column, t);
        },
        formatValue: this.formatValue.bind(this),
        data: this.rowNode.data,
        node: this.rowNode,
        colDef: this.getComponentHolder(),
        column: this.column,
        $scope: this.scope,
        rowIndex: this.cellPosition.rowIndex,
        api: this.beans.gridOptionsWrapper.getApi(),
        columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
        context: this.beans.gridOptionsWrapper.getContext(),
        refreshCell: this.refreshCell.bind(this),
        eGridCell: this.getGui(),
        eParentOfValue: this.eCellValue,
        registerRowDragger: function (t, n) {
          return e.addRowDragging(t, n);
        },
        addRowCompListener: this.rowComp ? this.rowComp.addEventListener.bind(this.rowComp) : null,
        addRenderedRowListener: function (t, n) {
          console.warn("AG Grid: since AG Grid .v11, params.addRenderedRowListener() is now params.addRowCompListener()");
          if (e.rowComp) {
            e.rowComp.addEventListener(t, n);
          }
        }
      };
    };
    n.prototype.formatValue = function (e) {
      var t = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, e);
      return null != t ? t : e;
    };
    n.prototype.getValueToUse = function () {
      return null != this.valueFormatted ? this.valueFormatted : this.value;
    };
    n.prototype.getValueAndFormat = function () {
      this.value = this.getValue();
      this.valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
    };
    n.prototype.getValue = function () {
      var e = this.rowNode.leafGroup && this.beans.columnController.isPivotMode();
      var t = this.rowNode.group && this.rowNode.expanded && !this.rowNode.footer && !e;
      var n = this.beans.gridOptionsWrapper.isGroupIncludeFooter();
      var r = this.beans.gridOptionsWrapper.isGroupSuppressBlankHeader();
      var o = t && n && !r;
      return this.beans.valueService.getValue(this.column, this.rowNode, false, o);
    };
    n.prototype.onMouseEvent = function (e, t) {
      if (!ke(t)) {
        switch (e) {
          case "click":
            this.onCellClicked(t);
            break;
          case "mousedown":
            this.onMouseDown(t);
            break;
          case "dblclick":
            this.onCellDoubleClicked(t);
            break;
          case "mouseout":
            this.onMouseOut(t);
            break;
          case "mouseover":
            this.onMouseOver(t);
        }
      }
    };
    n.prototype.dispatchCellContextMenuEvent = function (e) {
      var t = this.getComponentHolder();
      var n = this.createEvent(e, Ke.EVENT_CELL_CONTEXT_MENU);
      this.beans.eventService.dispatchEvent(n);
      if (t.onCellContextMenu) {
        window.setTimeout(function () {
          return t.onCellContextMenu(n);
        }, 0);
      }
    };
    n.prototype.createEvent = function (e, t) {
      var n = {
        type: t,
        node: this.rowNode,
        data: this.rowNode.data,
        value: this.value,
        column: this.column,
        colDef: this.getComponentHolder(),
        context: this.beans.gridOptionsWrapper.getContext(),
        api: this.beans.gridApi,
        columnApi: this.beans.columnApi,
        rowPinned: this.rowNode.rowPinned,
        event: e,
        rowIndex: this.rowNode.rowIndex
      };
      if (this.scope) {
        n.$scope = this.scope;
      }
      return n;
    };
    n.prototype.onMouseOut = function (e) {
      var t = this.createEvent(e, Ke.EVENT_CELL_MOUSE_OUT);
      this.beans.eventService.dispatchEvent(t);
      this.beans.columnHoverService.clearMouseOver();
    };
    n.prototype.onMouseOver = function (e) {
      var t = this.createEvent(e, Ke.EVENT_CELL_MOUSE_OVER);
      this.beans.eventService.dispatchEvent(t);
      this.beans.columnHoverService.setMouseOver([this.column]);
    };
    n.prototype.onCellDoubleClicked = function (e) {
      var t = this.getComponentHolder();
      var n = this.createEvent(e, Ke.EVENT_CELL_DOUBLE_CLICKED);
      this.beans.eventService.dispatchEvent(n);
      if ("function" === typeof t.onCellDoubleClicked) {
        window.setTimeout(function () {
          return t.onCellDoubleClicked(n);
        }, 0);
      }
      if (!this.beans.gridOptionsWrapper.isSingleClickEdit() && !this.beans.gridOptionsWrapper.isSuppressClickEdit()) {
        this.startRowOrCellEdit();
      }
    };
    n.prototype.startRowOrCellEdit = function (e, t) {
      if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
        this.rowComp.startRowEditing(e, t, this);
      } else {
        this.startEditingIfEnabled(e, t, true);
      }
    };
    n.prototype.isCellEditable = function () {
      return this.column.isCellEditable(this.rowNode);
    };
    n.prototype.startEditingIfEnabled = function (e, t, n) {
      if (undefined === e) {
        e = null;
      }
      if (undefined === t) {
        t = null;
      }
      if (undefined === n) {
        n = false;
      }
      if (this.isCellEditable() && !this.editingCell) {
        this.editingCell = true;
        this.cellEditorVersion++;
        var r = this.afterCellEditorCreated.bind(this, this.cellEditorVersion);
        var i = this.createCellEditorParams(e, t, n);
        this.createCellEditor(i).then(r);
        if (o(this.cellEditor) && n) {
          this.focusCell(true);
        }
      }
    };
    n.prototype.createCellEditor = function (e) {
      var t = this;
      return this.beans.userComponentFactory.newCellEditor(this.column.getColDef(), e).then(function (n) {
        var r = n;
        if (!(r.isPopup && r.isPopup())) {
          return r;
        }
        if (t.beans.gridOptionsWrapper.isFullRowEdit()) {
          console.warn("AG Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both - either turn off fullRowEdit, or stop using popup editors.");
        }
        var o = new Za(r);
        t.beans.context.createBean(o);
        o.init(e);
        return o;
      });
    };
    n.prototype.afterCellEditorCreated = function (e, t) {
      if (e !== this.cellEditorVersion || !this.editingCell) {
        this.beans.context.destroyBean(t);
      } else {
        if (t.isCancelBeforeStart && t.isCancelBeforeStart()) {
          this.beans.context.destroyBean(t);
          return void (this.editingCell = false);
        }
        if (!t.getGui) {
          console.warn("AG Grid: cellEditor for column " + this.column.getId() + " is missing getGui() method");
          if (t.render) {
            console.warn("AG Grid: we found 'render' on the component, are you trying to set a React renderer but added it as colDef.cellEditor instead of colDef.cellEditorFmk?");
          }
          this.beans.context.destroyBean(t);
          return void (this.editingCell = false);
        }
        this.cellEditor = t;
        this.cellEditorInPopup = undefined !== t.isPopup && t.isPopup();
        this.setInlineEditingClass();
        if (this.cellEditorInPopup) {
          this.addPopupCellEditor();
        } else {
          this.addInCellEditor();
        }
        if (t.afterGuiAttached) {
          t.afterGuiAttached();
        }
        var n = this.createEvent(null, Ke.EVENT_CELL_EDITING_STARTED);
        this.beans.eventService.dispatchEvent(n);
      }
    };
    n.prototype.addInCellEditor = function () {
      var e = this.getGui();
      if (e.contains(document.activeElement)) {
        e.focus();
      }
      this.clearCellElement();
      if (this.cellEditor) {
        e.appendChild(this.cellEditor.getGui());
      }
      this.angular1Compile();
    };
    n.prototype.addPopupCellEditor = function () {
      var e = this;
      var t = this.cellEditor && this.cellEditor.getGui();
      if (t) {
        var n = this.beans.popupService;
        var r = this.beans.gridOptionsWrapper.isStopEditingWhenCellsLoseFocus();
        var o = this.cellEditor && this.cellEditor.getPopupPosition ? this.cellEditor.getPopupPosition() : "over";
        var i = {
          column: this.column,
          rowNode: this.rowNode,
          type: "popupCellEditor",
          eventSource: this.getGui(),
          ePopup: t,
          keepWithinBounds: true
        };
        var a = "under" === o ? n.positionPopupUnderComponent.bind(n, i) : n.positionPopupOverComponent.bind(n, i);
        var s = n.addPopup({
          modal: r,
          eChild: t,
          closeOnEsc: true,
          closedCallback: function () {
            e.onPopupEditorClosed();
          },
          anchorToElement: this.getGui(),
          positionCallback: a
        });
        if (s) {
          this.hideEditorPopup = s.hideFunc;
        }
        this.angular1Compile();
      }
    };
    n.prototype.onPopupEditorClosed = function () {
      if (this.editingCell) {
        this.stopRowOrCellEdit();
      }
    };
    n.prototype.setInlineEditingClass = function () {
      if (this.isAlive()) {
        var e = this.editingCell && !this.cellEditorInPopup;
        var t = this.editingCell && this.cellEditorInPopup;
        this.addOrRemoveCssClass("ag-cell-inline-editing", e);
        this.addOrRemoveCssClass("ag-cell-not-inline-editing", !e);
        this.addOrRemoveCssClass("ag-cell-popup-editing", t);
        Jt(this.getGui().parentNode, "ag-row-inline-editing", e);
        Jt(this.getGui().parentNode, "ag-row-not-inline-editing", !e);
      }
    };
    n.prototype.createCellEditorParams = function (e, t, n) {
      return {
        value: this.getValue(),
        keyPress: e,
        charPress: t,
        column: this.column,
        colDef: this.column.getColDef(),
        rowIndex: this.cellPosition.rowIndex,
        node: this.rowNode,
        data: this.rowNode.data,
        api: this.beans.gridOptionsWrapper.getApi(),
        cellStartedEdit: n,
        columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
        context: this.beans.gridOptionsWrapper.getContext(),
        $scope: this.scope,
        onKeyDown: this.onKeyDown.bind(this),
        stopEditing: this.stopEditingAndFocus.bind(this),
        eGridCell: this.getGui(),
        parseValue: this.parseValue.bind(this),
        formatValue: this.formatValue.bind(this)
      };
    };
    n.prototype.stopEditingAndFocus = function (e) {
      if (undefined === e) {
        e = false;
      }
      this.stopRowOrCellEdit();
      this.focusCell(true);
      if (!e) {
        this.navigateAfterEdit();
      }
    };
    n.prototype.parseValue = function (e) {
      var t = this.getComponentHolder();
      var n = {
        node: this.rowNode,
        data: this.rowNode.data,
        oldValue: this.value,
        newValue: e,
        colDef: t,
        column: this.column,
        api: this.beans.gridOptionsWrapper.getApi(),
        columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
        context: this.beans.gridOptionsWrapper.getContext()
      };
      var o = t.valueParser;
      return r(o) ? this.beans.expressionService.evaluate(o, n) : e;
    };
    n.prototype.focusCell = function (e) {
      if (undefined === e) {
        e = false;
      }
      this.beans.focusController.setFocusedCell(this.cellPosition.rowIndex, this.column, this.rowNode.rowPinned, e);
    };
    n.prototype.setFocusInOnEditor = function () {
      if (this.editingCell) {
        if (this.cellEditor && this.cellEditor.focusIn) {
          this.cellEditor.focusIn();
        } else {
          this.focusCell(true);
        }
      }
    };
    n.prototype.isEditing = function () {
      return this.editingCell;
    };
    n.prototype.onKeyDown = function (e) {
      var t = e.which || e.keyCode;
      switch (t) {
        case _o.ENTER:
          this.onEnterKeyDown(e);
          break;
        case _o.F2:
          this.onF2KeyDown();
          break;
        case _o.ESCAPE:
          this.onEscapeKeyDown();
          break;
        case _o.TAB:
          this.onTabKeyDown(e);
          break;
        case _o.BACKSPACE:
        case _o.DELETE:
          this.onBackspaceOrDeleteKeyPressed(t);
          break;
        case _o.DOWN:
        case _o.UP:
        case _o.RIGHT:
        case _o.LEFT:
          this.onNavigationKeyPressed(e, t);
      }
    };
    n.prototype.setFocusOutOnEditor = function () {
      if (this.editingCell && this.cellEditor && this.cellEditor.focusOut) {
        this.cellEditor.focusOut();
      }
    };
    n.prototype.onNavigationKeyPressed = function (e, t) {
      if (!this.editingCell) {
        if (e.shiftKey && this.rangeSelectionEnabled) {
          this.onShiftRangeSelect(t);
        } else {
          this.beans.rowRenderer.navigateToNextCell(e, t, this.cellPosition, true);
        }
        e.preventDefault();
      }
    };
    n.prototype.onShiftRangeSelect = function (e) {
      if (this.beans.rangeController) {
        var t = this.beans.rangeController.extendLatestRangeInDirection(e);
        if (t) {
          this.beans.rowRenderer.ensureCellVisible(t);
        }
      }
    };
    n.prototype.onTabKeyDown = function (e) {
      this.beans.rowRenderer.onTabKeyDown(this, e);
    };
    n.prototype.onBackspaceOrDeleteKeyPressed = function (e) {
      if (!this.editingCell) {
        this.startRowOrCellEdit(e);
      }
    };
    n.prototype.onEnterKeyDown = function (e) {
      if (this.editingCell || this.rowComp.isEditing()) {
        this.stopEditingAndFocus();
      } else {
        if (this.beans.gridOptionsWrapper.isEnterMovesDown()) {
          this.beans.rowRenderer.navigateToNextCell(null, _o.DOWN, this.cellPosition, false);
        } else {
          this.startRowOrCellEdit(_o.ENTER);
          if (this.editingCell) {
            e.preventDefault();
          }
        }
      }
    };
    n.prototype.navigateAfterEdit = function () {
      if (!this.beans.gridOptionsWrapper.isFullRowEdit()) {
        if (this.beans.gridOptionsWrapper.isEnterMovesDownAfterEdit()) {
          this.beans.rowRenderer.navigateToNextCell(null, _o.DOWN, this.cellPosition, false);
        }
      }
    };
    n.prototype.onF2KeyDown = function () {
      if (!this.editingCell) {
        this.startRowOrCellEdit(_o.F2);
      }
    };
    n.prototype.onEscapeKeyDown = function () {
      if (this.editingCell) {
        this.stopRowOrCellEdit(true);
        this.focusCell(true);
      }
    };
    n.prototype.onKeyPress = function (e) {
      if (!(Me(e) !== this.getGui()) && !this.editingCell) {
        var t = String.fromCharCode(e.charCode);
        if (" " === t) {
          this.onSpaceKeyPressed(e);
        } else {
          if (Pr(e)) {
            this.startRowOrCellEdit(null, t);
            e.preventDefault();
          }
        }
      }
    };
    n.prototype.onSpaceKeyPressed = function (e) {
      var t = this.beans.gridOptionsWrapper;
      if (!this.editingCell && t.isRowSelection()) {
        var n = this.rowNode.isSelected();
        var r = !n;
        if (r || !t.isSuppressRowDeselection()) {
          var o = this.beans.gridOptionsWrapper.isGroupSelectsFiltered();
          var i = this.rowNode.setSelectedParams({
            newValue: r,
            rangeSelect: e.shiftKey,
            groupSelectsFiltered: o
          });
          if (undefined === n && 0 === i) {
            this.rowNode.setSelectedParams({
              newValue: false,
              rangeSelect: e.shiftKey,
              groupSelectsFiltered: o
            });
          }
        }
      }
      e.preventDefault();
    };
    n.prototype.onMouseDown = function (e) {
      var t = e.ctrlKey;
      var n = e.metaKey;
      var r = e.shiftKey;
      var o = e.target;
      var i = this.beans;
      var a = i.eventService;
      var s = i.rangeController;
      if (!this.isRightClickInExistingRange(e)) {
        if (!r || s && !s.getCellRanges().length) {
          var c = (Mt() || Lt()) && !this.editingCell && !en(o);
          this.focusCell(c);
        } else if (s) {
          e.preventDefault();
        }
        if (!this.containsWidget(o)) {
          if (s) {
            var l = this.cellPosition;
            if (r) {
              s.extendLatestRangeToCell(l);
            } else {
              var u = t || n;
              s.setRangeToCell(l, u);
            }
          }
          a.dispatchEvent(this.createEvent(e, Ke.EVENT_CELL_MOUSE_DOWN));
        }
      }
    };
    n.prototype.isRightClickInExistingRange = function (e) {
      var t = this.beans.rangeController;
      if (t && t.isCellInAnyRange(this.getCellPosition()) && 2 === e.button) {
        return true;
      }
      return false;
    };
    n.prototype.containsWidget = function (e) {
      return on(e, "ag-selection-checkbox", 3);
    };
    n.prototype.isDoubleClickOnIPad = function () {
      if (!Gt() || xe("dblclick")) {
        return false;
      }
      var e = new Date().getTime();
      var t = e - this.lastIPadMouseClickEvent < 200;
      this.lastIPadMouseClickEvent = e;
      return t;
    };
    n.prototype.onCellClicked = function (e) {
      if (this.isDoubleClickOnIPad()) {
        this.onCellDoubleClicked(e);
        return void e.preventDefault();
      }
      var t = this.beans;
      var n = t.eventService;
      var r = t.gridOptionsWrapper;
      var o = this.createEvent(e, Ke.EVENT_CELL_CLICKED);
      n.dispatchEvent(o);
      var i = this.getComponentHolder();
      if (i.onCellClicked) {
        window.setTimeout(function () {
          return i.onCellClicked(o);
        }, 0);
      }
      if ((r.isSingleClickEdit() || i.singleClickEdit) && !r.isSuppressClickEdit()) {
        this.startRowOrCellEdit();
      }
    };
    n.prototype.createGridCellVo = function () {
      this.cellPosition = {
        rowIndex: this.rowNode.rowIndex,
        rowPinned: this.rowNode.rowPinned,
        column: this.column
      };
    };
    n.prototype.getRowPosition = function () {
      return {
        rowIndex: this.cellPosition.rowIndex,
        rowPinned: this.cellPosition.rowPinned
      };
    };
    n.prototype.getCellPosition = function () {
      return this.cellPosition;
    };
    n.prototype.getParentRow = function () {
      return this.eRow;
    };
    n.prototype.setParentRow = function (e) {
      this.eRow = e;
    };
    n.prototype.getColumn = function () {
      return this.column;
    };
    n.prototype.getComponentHolder = function () {
      return this.column.getColDef();
    };
    n.prototype.detach = function () {
      this.eRow.removeChild(this.getGui());
    };
    n.prototype.destroy = function () {
      if (this.createCellRendererFunc) {
        this.beans.taskQueue.cancelTask(this.createCellRendererFunc);
      }
      this.stopEditing();
      this.cellRenderer = this.beans.context.destroyBean(this.cellRenderer);
      this.beans.context.destroyBean(this.selectionHandle);
      e.prototype.destroy.call(this);
    };
    n.prototype.onLeftChanged = function () {
      var e = this.modifyLeftForPrintLayout(this.getCellLeft());
      this.getGui().style.left = e + "px";
      this.refreshAriaIndex();
    };
    n.prototype.modifyLeftForPrintLayout = function (e) {
      if (!this.printLayout || this.column.getPinned() === Ee.PINNED_LEFT) {
        return e;
      }
      var t = this.beans.columnController.getDisplayedColumnsLeftWidth();
      return this.column.getPinned() === Ee.PINNED_RIGHT ? t + this.beans.columnController.getBodyContainerWidth() + (e || 0) : t + (e || 0);
    };
    n.prototype.onWidthChanged = function () {
      var e = this.getCellWidth();
      this.getGui().style.width = e + "px";
    };
    n.prototype.getRangeBorders = function () {
      var e;
      var t;
      var n = this;
      var r = this.beans.gridOptionsWrapper.isEnableRtl();
      var o = false;
      var i = false;
      var a = false;
      var s = false;
      var c = this.cellPosition.column;
      var l = this.beans;
      var u = l.rangeController;
      var d = l.columnController;
      if (r) {
        e = d.getDisplayedColAfter(c);
        t = d.getDisplayedColBefore(c);
      } else {
        e = d.getDisplayedColBefore(c);
        t = d.getDisplayedColAfter(c);
      }
      var p = u.getCellRanges().filter(function (e) {
        return u.isCellInSpecificRange(n.cellPosition, e);
      });
      if (!e) {
        s = true;
      }
      if (!t) {
        i = true;
      }
      for (var f = 0; f < p.length && !(o && i && a && s); f++) {
        var h = p[f];
        var m = u.getRangeStartRow(h);
        var g = u.getRangeEndRow(h);
        if (!o && this.beans.rowPositionUtils.sameRow(m, this.cellPosition)) {
          o = true;
        }
        if (!a && this.beans.rowPositionUtils.sameRow(g, this.cellPosition)) {
          a = true;
        }
        if (!s && e && h.columns.indexOf(e) < 0) {
          s = true;
        }
        if (!i && t && h.columns.indexOf(t) < 0) {
          i = true;
        }
      }
      return {
        top: o,
        right: i,
        bottom: a,
        left: s
      };
    };
    n.prototype.getInitialRangeClasses = function () {
      var e = [];
      if (!this.rangeSelectionEnabled || !this.rangeCount) {
        return e;
      }
      e.push("ag-cell-range-selected");
      if (this.hasChartRange) {
        e.push("ag-cell-range-chart");
      }
      var t = Math.min(this.rangeCount, 4);
      e.push("ag-cell-range-selected-" + t);
      if (this.isSingleCell()) {
        e.push("ag-cell-range-single-cell");
      }
      if (this.rangeCount > 0) {
        var n = this.getRangeBorders();
        if (n.top) {
          e.push("ag-cell-range-top");
        }
        if (n.right) {
          e.push("ag-cell-range-right");
        }
        if (n.bottom) {
          e.push("ag-cell-range-bottom");
        }
        if (n.left) {
          e.push("ag-cell-range-left");
        }
      }
      if (this.selectionHandle) {
        e.push("ag-cell-range-handle");
      }
      return e;
    };
    n.prototype.onRowIndexChanged = function () {
      this.createGridCellVo();
      this.onCellFocused();
      this.onRangeSelectionChanged();
    };
    n.prototype.onRangeSelectionChanged = function () {
      var e = this.beans.rangeController;
      if (e) {
        var t = this.cellPosition;
        var n = this.rangeCount;
        var r = e.getCellRangeCount(t);
        var o = this.getGui();
        if (n !== r) {
          this.addOrRemoveCssClass("ag-cell-range-selected", 0 !== r);
          this.addOrRemoveCssClass("ag-cell-range-selected-1", 1 === r);
          this.addOrRemoveCssClass("ag-cell-range-selected-2", 2 === r);
          this.addOrRemoveCssClass("ag-cell-range-selected-3", 3 === r);
          this.addOrRemoveCssClass("ag-cell-range-selected-4", r >= 4);
          this.rangeCount = r;
        }
        yr(o, this.rangeCount > 0);
        var i = this.getHasChartRange();
        if (i !== this.hasChartRange) {
          this.hasChartRange = i;
          this.addOrRemoveCssClass("ag-cell-range-chart", this.hasChartRange);
        }
        this.updateRangeBorders();
        this.addOrRemoveCssClass("ag-cell-range-single-cell", this.isSingleCell());
        this.refreshHandle();
      }
    };
    n.prototype.getHasChartRange = function () {
      var e = this.beans.rangeController;
      if (!this.rangeCount || !e) {
        return false;
      }
      var n = e.getCellRanges();
      return n.length > 0 && n.every(function (e) {
        return O([exports.CellRangeType.DIMENSION, exports.CellRangeType.VALUE], e.type);
      });
    };
    n.prototype.shouldHaveSelectionHandle = function () {
      var e = this.beans;
      var n = e.gridOptionsWrapper;
      var r = e.rangeController;
      var o = r.getCellRanges();
      var i = o.length;
      if (this.rangeCount < 1 || i < 1) {
        return false;
      }
      var a = m(o);
      var s = this.getCellPosition();
      var c = 1 === i && (n.isEnableFillHandle() || n.isEnableRangeHandle()) && !this.editingCell;
      if (this.hasChartRange) {
        var l = o[0].type === exports.CellRangeType.DIMENSION && r.isCellInSpecificRange(s, o[0]);
        this.addOrRemoveCssClass("ag-cell-range-chart-category", l);
        c = a.type === exports.CellRangeType.VALUE;
      }
      return c && null != a.endRow && r.isContiguousRange(a) && r.isBottomRightCell(a, s);
    };
    n.prototype.addSelectionHandle = function () {
      var e = this.beans;
      var n = e.gridOptionsWrapper;
      var r = m(e.rangeController.getCellRanges()).type;
      var i = n.isEnableFillHandle() && o(r) ? exports.SelectionHandleType.FILL : exports.SelectionHandleType.RANGE;
      if (this.selectionHandle && this.selectionHandle.getType() !== i) {
        this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
      }
      if (!this.selectionHandle) {
        this.selectionHandle = this.beans.selectionHandleFactory.createSelectionHandle(i);
      }
      this.selectionHandle.refresh(this);
    };
    n.prototype.updateRangeBordersIfRangeCount = function () {
      if (this.rangeCount > 0) {
        this.updateRangeBorders();
        this.refreshHandle();
      }
    };
    n.prototype.refreshHandle = function () {
      if (this.beans.rangeController) {
        var e = this.shouldHaveSelectionHandle();
        if (this.selectionHandle && !e) {
          this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
        }
        if (e) {
          this.addSelectionHandle();
        }
        this.addOrRemoveCssClass("ag-cell-range-handle", !!this.selectionHandle);
      }
    };
    n.prototype.updateRangeBorders = function () {
      var e = this.getRangeBorders();
      var t = this.isSingleCell();
      var n = !t && e.top;
      var r = !t && e.right;
      var o = !t && e.bottom;
      var i = !t && e.left;
      this.addOrRemoveCssClass("ag-cell-range-top", n);
      this.addOrRemoveCssClass("ag-cell-range-right", r);
      this.addOrRemoveCssClass("ag-cell-range-bottom", o);
      this.addOrRemoveCssClass("ag-cell-range-left", i);
    };
    n.prototype.onFirstRightPinnedChanged = function () {
      var e = this.column.isFirstRightPinned();
      if (this.firstRightPinned !== e) {
        this.firstRightPinned = e;
        this.addOrRemoveCssClass("ag-cell-first-right-pinned", e);
      }
    };
    n.prototype.onLastLeftPinnedChanged = function () {
      var e = this.column.isLastLeftPinned();
      if (this.lastLeftPinned !== e) {
        this.lastLeftPinned = e;
        this.addOrRemoveCssClass("ag-cell-last-left-pinned", e);
      }
    };
    n.prototype.refreshShouldDestroy = function () {
      var e = this.usingWrapper;
      var t = this.includeRowDraggingComponent;
      var n = this.includeDndSourceComponent;
      var r = this.includeSelectionComponent;
      this.setUsingWrapper();
      return e !== this.usingWrapper || t !== this.includeRowDraggingComponent || n !== this.includeDndSourceComponent || r !== this.includeSelectionComponent;
    };
    n.prototype.populateTemplate = function () {
      if (this.usingWrapper) {
        this.eCellValue = this.getRefElement("eCellValue");
        this.eCellWrapper = this.getRefElement("eCellWrapper");
        this.eCellValue.id = "cell-" + this.getCompId();
        var e = "";
        if (this.includeRowDraggingComponent) {
          this.addRowDragging();
        }
        if (this.includeDndSourceComponent) {
          this.addDndSource();
        }
        if (this.includeSelectionComponent) {
          e += this.addSelectionCheckbox().getCheckboxId();
        }
        ar(this.getGui(), (e + " " + this.eCellValue.id).trim());
      } else {
        this.eCellValue = this.getGui();
        this.eCellWrapper = this.eCellValue;
      }
    };
    n.prototype.getFrameworkOverrides = function () {
      return this.beans.frameworkOverrides;
    };
    n.prototype.addRowDragging = function (e, t) {
      var n = this;
      var r = this.beans.gridOptionsWrapper.isPagination();
      var o = this.beans.gridOptionsWrapper.isRowDragManaged();
      var i = this.beans.gridOptionsWrapper.isRowModelDefault();
      if (o) {
        if (!i) {
          return void X(function () {
            return console.warn("AG Grid: managed row dragging is only allowed in the Client Side Row Model");
          }, "CellComp.addRowDragging");
        }
        if (r) {
          return void X(function () {
            return console.warn("AG Grid: managed row dragging is not possible when doing pagination");
          }, "CellComp.addRowDragging");
        }
      }
      if (this.rowDraggingComp) {
        if (e) {
          this.rowDraggingComp.setDragElement(e, t);
        }
      } else {
        this.rowDraggingComp = new wi(function () {
          return n.value;
        }, this.rowNode, this.column, e, t);
        this.createManagedBean(this.rowDraggingComp, this.beans.context);
      }
      if (!e) {
        this.eCellWrapper.insertBefore(this.rowDraggingComp.getGui(), this.eCellValue);
      }
    };
    n.prototype.addDndSource = function () {
      var e = new es(this.rowNode, this.column, this.beans, this.getGui());
      this.createManagedBean(e, this.beans.context);
      this.eCellWrapper.insertBefore(e.getGui(), this.eCellValue);
    };
    n.prototype.addSelectionCheckbox = function () {
      var e = this;
      var t = new Qo();
      this.beans.context.createBean(t);
      var n = this.getComponentHolder().checkboxSelection;
      if ("function" !== typeof n) {
        n = undefined;
      }
      t.init({
        rowNode: this.rowNode,
        column: this.column
      });
      this.addDestroyFunc(function () {
        return e.beans.context.destroyBean(t);
      });
      this.eCellWrapper.insertBefore(t.getGui(), this.eCellValue);
      return t;
    };
    n.prototype.addDomData = function () {
      var e = this;
      var t = this.getGui();
      this.beans.gridOptionsWrapper.setDomData(t, n.DOM_DATA_KEY_CELL_COMP, this);
      this.addDestroyFunc(function () {
        return e.beans.gridOptionsWrapper.setDomData(t, n.DOM_DATA_KEY_CELL_COMP, null);
      });
    };
    n.prototype.isSingleCell = function () {
      var e = this.beans.rangeController;
      return 1 === this.rangeCount && e && !e.isMoreThanOneCell();
    };
    n.prototype.onCellFocused = function (e) {
      var t = this.beans.focusController.isCellFocused(this.cellPosition);
      if (t !== this.cellFocused) {
        if (!this.beans.gridOptionsWrapper.isSuppressCellSelection()) {
          this.addOrRemoveCssClass("ag-cell-focus", t);
        }
        this.cellFocused = t;
      }
      if (t && e && e.forceBrowserFocus) {
        var n = this.getFocusableElement();
        n.focus();
        if (!(document.activeElement && document.activeElement !== document.body)) {
          n.focus();
        }
      }
      var r = this.beans.gridOptionsWrapper.isFullRowEdit();
      if (!(t || r || !this.editingCell)) {
        this.stopRowOrCellEdit();
      }
    };
    n.prototype.stopRowOrCellEdit = function (e) {
      if (undefined === e) {
        e = false;
      }
      if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
        this.rowComp.stopRowEditing(e);
      } else {
        this.stopEditing(e);
      }
    };
    n.prototype.stopEditing = function (e) {
      if (undefined === e) {
        e = false;
      }
      if (this.editingCell) {
        if (this.cellEditor) {
          var t;
          var n = this.getValue();
          var r = false;
          if (!e) {
            if (!(this.cellEditor.isCancelAfterEnd && this.cellEditor.isCancelAfterEnd())) {
              t = this.cellEditor.getValue();
              r = true;
            }
          }
          this.editingCell = false;
          this.beans.context.destroyBean(this.cellEditor);
          this.cellEditor = null;
          if (this.cellEditorInPopup && this.hideEditorPopup) {
            this.hideEditorPopup();
            this.hideEditorPopup = null;
          } else {
            this.clearCellElement();
            var o = this.getGui();
            if (this.usingWrapper) {
              o.appendChild(this.eCellWrapper);
            } else if (this.cellRenderer) {
              var i = this.cellRendererGui;
              if (i) {
                o.appendChild(i);
              }
            }
          }
          this.setInlineEditingClass();
          this.refreshHandle();
          if (r && t !== n) {
            this.suppressRefreshCell = true;
            this.rowNode.setDataValue(this.column, t);
            this.suppressRefreshCell = false;
          }
          this.refreshCell({
            forceRefresh: true,
            suppressFlash: true
          });
          var a = ns(ns({}, this.createEvent(null, Ke.EVENT_CELL_EDITING_STOPPED)), {
            oldValue: n,
            newValue: t
          });
          this.beans.eventService.dispatchEvent(a);
        } else {
          this.editingCell = false;
        }
      }
    };
    n.prototype.clearCellElement = function () {
      var e = this.getGui();
      if (e.contains(document.activeElement) && !Mt()) {
        e.focus({
          preventScroll: true
        });
      }
      hn(e);
    };
    n.DOM_DATA_KEY_CELL_COMP = "cellComp";
    n.CELL_RENDERER_TYPE_NORMAL = "cellRenderer";
    n.CELL_RENDERER_TYPE_PINNED = "pinnedRowCellRenderer";
    return n;
  }(so);
  var os = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var is = function () {
    return (is = Object.assign || function (e) {
      for (var t, n = 1, r = arguments.length; n < r; n++) {
        for (var o in t = arguments[n]) if (Object.prototype.hasOwnProperty.call(t, o)) {
          e[o] = t[o];
        }
      }
      return e;
    }).apply(this, arguments);
  };
  var as = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var ss = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var cs = function () {
    for (var e = 0, t = 0, n = arguments.length; t < n; t++) {
      e += arguments[t].length;
    }
    var r = Array(e);
    var o = 0;
    for (t = 0; t < n; t++) {
      for (var i = arguments[t], a = 0, s = i.length; a < s; a++, o++) {
        r[o] = i[a];
      }
    }
    return r;
  };
  var ls = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.destroyFuncsForColumnListeners = [];
      t.rowConsByRowIndex = {};
      t.zombieRowCons = {};
      t.allRowCons = [];
      t.topRowCons = [];
      t.bottomRowCons = [];
      t.refreshInProgress = false;
      return t;
    }
    os(t, e);
    t.prototype.agWire = function (e) {
      this.logger = e.create("RowRenderer");
    };
    t.prototype.postConstruct = function () {
      var e = this;
      this.controllersService.whenReady(function () {
        e.gridBodyCon = e.controllersService.getGridBodyController();
        e.initialise();
      });
    };
    t.prototype.initialise = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_BODY_SCROLL, this.redrawAfterScroll.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_BODY_HEIGHT_CHANGED, this.redrawAfterScroll.bind(this));
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
      this.registerCellEventListeners();
      this.printLayout = this.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_PRINT;
      this.embedFullWidthRows = this.printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
      this.redrawAfterModelUpdate();
    };
    t.prototype.getRowCons = function () {
      return this.allRowCons;
    };
    t.prototype.updateAllRowCons = function () {
      this.allRowCons = cs(B(this.rowConsByRowIndex), B(this.zombieRowCons));
    };
    t.prototype.registerCellEventListeners = function () {
      var e = this;
      this.addManagedListener(this.eventService, Ke.EVENT_CELL_FOCUSED, function (t) {
        e.forEachCellComp(function (e) {
          return e.onCellFocused(t);
        });
        e.forEachRowComp(function (e, n) {
          if (n.isFullWidth()) {
            n.onFullWidthRowFocused(t);
          }
        });
      });
      this.addManagedListener(this.eventService, Ke.EVENT_FLASH_CELLS, function (t) {
        e.forEachCellComp(function (e) {
          return e.onFlashCells(t);
        });
      });
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_HOVER_CHANGED, function () {
        e.forEachCellComp(function (e) {
          return e.onColumnHover();
        });
      });
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function () {
        if (e.printLayout) {
          e.forEachCellComp(function (e) {
            return e.onLeftChanged();
          });
        }
      });
      if (this.gridOptionsWrapper.isEnableRangeSelection()) {
        this.addManagedListener(this.eventService, Ke.EVENT_RANGE_SELECTION_CHANGED, function () {
          e.forEachCellComp(function (e) {
            return e.onRangeSelectionChanged();
          });
        });
        this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_MOVED, function () {
          e.forEachCellComp(function (e) {
            return e.updateRangeBordersIfRangeCount();
          });
        });
        this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_PINNED, function () {
          e.forEachCellComp(function (e) {
            return e.updateRangeBordersIfRangeCount();
          });
        });
        this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_VISIBLE, function () {
          e.forEachCellComp(function (e) {
            return e.updateRangeBordersIfRangeCount();
          });
        });
      }
      this.refreshListenersToColumnsForCellComps();
      this.addManagedListener(this.eventService, Ke.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));
      this.addDestroyFunc(this.removeGridColumnListeners.bind(this));
    };
    t.prototype.removeGridColumnListeners = function () {
      this.destroyFuncsForColumnListeners.forEach(function (e) {
        return e();
      });
      this.destroyFuncsForColumnListeners.length = 0;
    };
    t.prototype.refreshListenersToColumnsForCellComps = function () {
      var e = this;
      this.removeGridColumnListeners();
      var t = this.columnController.getAllGridColumns();
      if (t) {
        t.forEach(function (t) {
          var n = function (n) {
            e.forEachCellComp(function (e) {
              if (e.getColumn() === t) {
                n(e);
              }
            });
          };
          var r = function () {
            n(function (e) {
              return e.onLeftChanged();
            });
          };
          var o = function () {
            n(function (e) {
              return e.onWidthChanged();
            });
          };
          var i = function () {
            n(function (e) {
              return e.onFirstRightPinnedChanged();
            });
          };
          var a = function () {
            n(function (e) {
              return e.onLastLeftPinnedChanged();
            });
          };
          t.addEventListener(Ce.EVENT_LEFT_CHANGED, r);
          t.addEventListener(Ce.EVENT_WIDTH_CHANGED, o);
          t.addEventListener(Ce.EVENT_FIRST_RIGHT_PINNED_CHANGED, i);
          t.addEventListener(Ce.EVENT_LAST_LEFT_PINNED_CHANGED, a);
          e.destroyFuncsForColumnListeners.push(function () {
            t.removeEventListener(Ce.EVENT_LEFT_CHANGED, r);
            t.removeEventListener(Ce.EVENT_WIDTH_CHANGED, o);
            t.removeEventListener(Ce.EVENT_FIRST_RIGHT_PINNED_CHANGED, i);
            t.removeEventListener(Ce.EVENT_LAST_LEFT_PINNED_CHANGED, a);
          });
        });
      }
    };
    t.prototype.onDomLayoutChanged = function () {
      var e = this.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_PRINT;
      var t = e || this.gridOptionsWrapper.isEmbedFullWidthRows();
      var n = t !== this.embedFullWidthRows || this.printLayout !== e;
      this.printLayout = e;
      this.embedFullWidthRows = t;
      if (n) {
        this.redrawAfterModelUpdate();
      }
    };
    t.prototype.datasourceChanged = function () {
      this.firstRenderedRow = 0;
      this.lastRenderedRow = -1;
      var e = Object.keys(this.rowConsByRowIndex);
      this.removeRowComps(e);
    };
    t.prototype.onPageLoaded = function (e) {
      var t = {
        recycleRows: e.keepRenderedRows,
        animate: e.animate,
        newData: e.newData,
        newPage: e.newPage,
        onlyBody: true
      };
      this.redrawAfterModelUpdate(t);
    };
    t.prototype.getAllCellsForColumn = function (e) {
      var t = [];
      function n(n, r) {
        var o = r.getCellForCol(e);
        if (o) {
          t.push(o);
        }
      }
      R(this.rowConsByRowIndex, n);
      R(this.bottomRowCons, n);
      R(this.topRowCons, n);
      return t;
    };
    t.prototype.refreshFloatingRowComps = function () {
      this.refreshFloatingRows(this.topRowCons, this.pinnedRowModel.getPinnedTopRowData());
      this.refreshFloatingRows(this.bottomRowCons, this.pinnedRowModel.getPinnedBottomRowData());
    };
    t.prototype.getTopRowCons = function () {
      return this.topRowCons;
    };
    t.prototype.getBottomRowCons = function () {
      return this.bottomRowCons;
    };
    t.prototype.refreshFloatingRows = function (e, t) {
      var n = this;
      e.forEach(function (e) {
        e.destroyFirstPass();
        e.destroySecondPass();
      });
      e.length = 0;
      if (t) {
        t.forEach(function (t) {
          var r = new qa(n.$scope, t, n.beans, false, false, n.printLayout);
          e.push(r);
        });
      }
    };
    t.prototype.onPinnedRowDataChanged = function () {
      this.redrawAfterModelUpdate({
        recycleRows: true
      });
    };
    t.prototype.getRenderedIndexesForRowNodes = function (e) {
      var t = [];
      if (!o(e)) {
        R(this.rowConsByRowIndex, function (n, r) {
          var o = r.getRowNode();
          if (e.indexOf(o) >= 0) {
            t.push(n);
          }
        });
      }
      return t;
    };
    t.prototype.redrawRows = function (e) {
      var t = null != e && e.length > 0;
      if (t) {
        var n = this.getRenderedIndexesForRowNodes(e);
        this.removeRowComps(n);
      }
      this.redrawAfterModelUpdate({
        recycleRows: t
      });
    };
    t.prototype.getCellToRestoreFocusToAfterRefresh = function (e) {
      var t = e.suppressKeepFocus ? null : this.focusController.getFocusCellToUseAfterRefresh();
      if (o(t)) {
        return null;
      }
      var n = document.activeElement;
      return o(this.gridOptionsWrapper.getDomData(n, rs.DOM_DATA_KEY_CELL_COMP)) ? null : t;
    };
    t.prototype.redrawAfterModelUpdate = function (e) {
      if (undefined === e) {
        e = {};
      }
      this.getLockOnRefresh();
      var t = this.getCellToRestoreFocusToAfterRefresh(e);
      this.updateContainerHeights();
      this.scrollToTopIfNewData(e);
      var n = !this.printLayout && !!e.recycleRows;
      var r = e.animate && this.gridOptionsWrapper.isAnimateRows();
      var o = n ? this.recycleRows() : null;
      if (!n) {
        this.removeAllRowComps();
      }
      var i = function () {
        if (null == t || null == o) {
          return false;
        }
        var e = false;
        R(o, function (n, r) {
          var o = r.getRowNode();
          var i = o.rowIndex == t.rowIndex;
          var a = o.rowPinned == t.rowPinned;
          if (i && a) {
            e = true;
          }
        });
        return e;
      }();
      this.redraw(o, r);
      if (!e.onlyBody) {
        this.refreshFloatingRowComps();
      }
      this.dispatchDisplayedRowsChanged();
      if (!i) {
        this.restoreFocusedCell(t);
      }
      this.releaseLockOnRefresh();
    };
    t.prototype.scrollToTopIfNewData = function (e) {
      var t = e.newData || e.newPage;
      var n = this.gridOptionsWrapper.isSuppressScrollOnNewData();
      if (t && !n) {
        this.gridBodyCon.getScrollFeature().scrollToTop();
      }
    };
    t.prototype.updateContainerHeights = function () {
      if (this.printLayout) {
        this.rowContainerHeightService.setModelHeight(null);
      } else {
        var e = this.paginationProxy.getCurrentPageHeight();
        if (0 === e) {
          e = 1;
        }
        this.rowContainerHeightService.setModelHeight(e);
      }
    };
    t.prototype.getLockOnRefresh = function () {
      if (this.refreshInProgress) {
        throw new Error("AG Grid: cannot get grid to draw rows when it is in the middle of drawing rows. Your code probably called a grid API method while the grid was in the render stage. To overcome this, put the API call into a timeout, e.g. instead of api.refreshView(), call setTimeout(function() { api.refreshView(); }, 0). To see what part of your code that caused the refresh check this stacktrace.");
      }
      this.refreshInProgress = true;
    };
    t.prototype.releaseLockOnRefresh = function () {
      this.refreshInProgress = false;
    };
    t.prototype.restoreFocusedCell = function (e) {
      if (e) {
        this.focusController.setFocusedCell(e.rowIndex, e.column, e.rowPinned, true);
      }
    };
    t.prototype.stopEditing = function (e) {
      if (undefined === e) {
        e = false;
      }
      this.forEachRowComp(function (t, n) {
        n.stopEditing(e);
      });
    };
    t.prototype.onNewColumnsLoaded = function () {
      this.forEachCellComp(function (e) {
        return e.onNewColumnsLoaded();
      });
    };
    t.prototype.forEachCellComp = function (e) {
      this.forEachRowComp(function (t, n) {
        return n.forEachCellComp(e);
      });
    };
    t.prototype.forEachRowComp = function (e) {
      R(this.rowConsByRowIndex, e);
      R(this.topRowCons, e);
      R(this.bottomRowCons, e);
    };
    t.prototype.addRenderedRowListener = function (e, t, n) {
      var r = this.rowConsByRowIndex[t];
      if (r) {
        r.addEventListener(e, n);
      }
    };
    t.prototype.flashCells = function (e) {
      if (undefined === e) {
        e = {};
      }
      var t = e.flashDelay;
      var n = e.fadeDelay;
      this.forEachCellCompFiltered(e.rowNodes, e.columns, function (e) {
        return e.flashCell({
          flashDelay: t,
          fadeDelay: n
        });
      });
    };
    t.prototype.refreshCells = function (e) {
      if (undefined === e) {
        e = {};
      }
      var t = {
        forceRefresh: e.force,
        newData: false,
        suppressFlash: e.suppressFlash
      };
      this.forEachCellCompFiltered(e.rowNodes, e.columns, function (e) {
        if (e.refreshShouldDestroy()) {
          var n = e.getRenderedRow();
          if (n) {
            n.refreshCell(e);
          }
        } else {
          e.refreshCell(t);
        }
      });
    };
    t.prototype.getCellRendererInstances = function (e) {
      var t = [];
      this.forEachCellCompFiltered(e.rowNodes, e.columns, function (e) {
        var n = e.getCellRenderer();
        if (n) {
          t.push(n);
        }
      });
      return t;
    };
    t.prototype.getCellEditorInstances = function (e) {
      var t = [];
      this.forEachCellCompFiltered(e.rowNodes, e.columns, function (e) {
        var n = e.getCellEditor();
        if (n) {
          t.push(n);
        }
      });
      return t;
    };
    t.prototype.getEditingCells = function () {
      var e = [];
      this.forEachCellComp(function (t) {
        if (t.isEditing()) {
          var n = t.getCellPosition();
          e.push(n);
        }
      });
      return e;
    };
    t.prototype.forEachCellCompFiltered = function (e, t, n) {
      var o;
      var i;
      var a = this;
      if (r(e)) {
        o = {
          top: {},
          bottom: {},
          normal: {}
        };
        e.forEach(function (e) {
          var t = e.id;
          if (e.rowPinned === Ee.PINNED_TOP) {
            o.top[t] = true;
          } else {
            if (e.rowPinned === Ee.PINNED_BOTTOM) {
              o.bottom[t] = true;
            } else {
              o.normal[t] = true;
            }
          }
        });
      }
      if (r(t)) {
        i = {};
        t.forEach(function (e) {
          var t = a.columnController.getGridColumn(e);
          if (r(t)) {
            i[t.getId()] = true;
          }
        });
      }
      var s = function (e) {
        var t = e.getRowNode();
        var a = t.id;
        var s = t.rowPinned;
        if (r(o)) {
          if (s === Ee.PINNED_BOTTOM) {
            if (!o.bottom[a]) {
              return;
            }
          } else if (s === Ee.PINNED_TOP) {
            if (!o.top[a]) {
              return;
            }
          } else if (!o.normal[a]) {
            return;
          }
        }
        e.forEachCellComp(function (e) {
          var t = e.getColumn().getId();
          if (!(i && !i[t])) {
            if (n) {
              n(e);
            }
          }
        });
      };
      R(this.rowConsByRowIndex, function (e, t) {
        s(t);
      });
      if (this.topRowCons) {
        this.topRowCons.forEach(s);
      }
      if (this.bottomRowCons) {
        this.bottomRowCons.forEach(s);
      }
    };
    t.prototype.destroy = function () {
      this.removeAllRowComps();
      e.prototype.destroy.call(this);
    };
    t.prototype.removeAllRowComps = function () {
      var e = Object.keys(this.rowConsByRowIndex);
      this.removeRowComps(e);
    };
    t.prototype.recycleRows = function () {
      var e = [];
      R(this.rowConsByRowIndex, function (t, n) {
        if (null == n.getRowNode().id) {
          e.push(t);
        }
      });
      this.removeRowComps(e);
      var t = {};
      R(this.rowConsByRowIndex, function (e, n) {
        var r = n.getRowNode();
        t[r.id] = n;
      });
      this.rowConsByRowIndex = {};
      return t;
    };
    t.prototype.removeRowComps = function (e) {
      var t = this;
      e.forEach(function (e) {
        var n = t.rowConsByRowIndex[e];
        if (n) {
          n.destroyFirstPass();
          n.destroySecondPass();
        }
        delete t.rowConsByRowIndex[e];
      });
    };
    t.prototype.redrawAfterScroll = function () {
      this.getLockOnRefresh();
      this.redraw(null, false, true);
      this.releaseLockOnRefresh();
      this.dispatchDisplayedRowsChanged();
    };
    t.prototype.removeRowCompsNotToDraw = function (e) {
      var t = {};
      e.forEach(function (e) {
        return t[e] = true;
      });
      var n = Object.keys(this.rowConsByRowIndex).filter(function (e) {
        return !t[e];
      });
      this.removeRowComps(n);
    };
    t.prototype.calculateIndexesToDraw = function (e) {
      var t = this;
      var n = ft(this.firstRenderedRow, this.lastRenderedRow);
      var r = function (e, r) {
        var o = r.getRowNode().rowIndex;
        if (null != o && (o < t.firstRenderedRow || o > t.lastRenderedRow) && t.doNotUnVirtualiseRow(r)) {
          n.push(o);
        }
      };
      R(this.rowConsByRowIndex, r);
      R(e, r);
      n.sort(function (e, t) {
        return e - t;
      });
      return n;
    };
    t.prototype.redraw = function (e, t, n) {
      var o = this;
      if (undefined === t) {
        t = false;
      }
      if (undefined === n) {
        n = false;
      }
      this.rowContainerHeightService.updateOffset();
      this.workOutFirstAndLastRowsToRender();
      var i = this.calculateIndexesToDraw(e);
      this.removeRowCompsNotToDraw(i);
      if (this.printLayout) {
        t = false;
      }
      i.forEach(function (i) {
        r(o.createOrUpdateRowCon(i, e, t, n));
      });
      if (e) {
        if (n && !this.gridOptionsWrapper.isSuppressAnimationFrame() && !this.printLayout) {
          this.beans.taskQueue.addDestroyTask(function () {
            o.destroyRowCons(e, t);
            o.updateAllRowCons();
            o.dispatchDisplayedRowsChanged();
          });
        } else {
          this.destroyRowCons(e, t);
        }
      }
      this.updateAllRowCons();
      this.checkAngularCompile();
      this.gridBodyCon.updateRowCount();
    };
    t.prototype.dispatchDisplayedRowsChanged = function () {
      var e = {
        type: Ke.EVENT_DISPLAYED_ROWS_CHANGED
      };
      this.eventService.dispatchEvent(e);
    };
    t.prototype.onDisplayedColumnsChanged = function () {
      var e = this.columnController.isPinningLeft();
      var t = this.columnController.isPinningRight();
      if (this.pinningLeft !== e || t !== this.pinningRight) {
        this.pinningLeft = e;
        this.pinningRight = t;
        if (this.embedFullWidthRows) {
          this.redrawFullWidthEmbeddedRows();
        }
      }
    };
    t.prototype.redrawFullWidthEmbeddedRows = function () {
      var e = [];
      R(this.rowConsByRowIndex, function (t, n) {
        if (n.isFullWidth()) {
          var r = n.getRowNode().rowIndex;
          e.push(r.toString());
        }
      });
      this.refreshFloatingRowComps();
      this.removeRowComps(e);
      this.redrawAfterScroll();
    };
    t.prototype.refreshFullWidthRows = function (e) {
      var t = [];
      var n = !!e;
      var r = n ? {} : undefined;
      if (n && r) {
        e.forEach(function (e) {
          return r[e.id] = true;
        });
      }
      R(this.rowConsByRowIndex, function (e, o) {
        if (o.isFullWidth()) {
          var i = o.getRowNode();
          if (n && r) {
            var a = i.level > 0 && i.parent ? i.parent.id : undefined;
            if (!r[i.id] && !r[a]) {
              return;
            }
          }
          if (!o.refreshFullWidth()) {
            var s = o.getRowNode().rowIndex;
            t.push(s.toString());
          }
        }
      });
      this.removeRowComps(t);
      this.redrawAfterScroll();
    };
    t.prototype.createOrUpdateRowCon = function (e, t, n, o) {
      var i = null;
      var a = this.rowConsByRowIndex[e];
      if (!a) {
        if (r(i = this.paginationProxy.getRow(e)) && r(t) && t[i.id] && i.alreadyRendered) {
          a = t[i.id];
          t[i.id] = null;
        }
      }
      if (!a) {
        if (!i) {
          i = this.paginationProxy.getRow(e);
        }
        if (!r(i)) {
          return;
        }
        a = this.createRowCon(i, n, o);
      }
      if (i) {
        i.alreadyRendered = true;
      }
      this.rowConsByRowIndex[e] = a;
      return a;
    };
    t.prototype.destroyRowCons = function (e, t) {
      var n = this;
      var r = [];
      R(e, function (e, o) {
        if (o) {
          o.destroyFirstPass();
          if (t) {
            n.zombieRowCons[o.getInstanceId()] = o;
            r.push(function () {
              o.destroySecondPass();
              delete n.zombieRowCons[o.getInstanceId()];
            });
          } else {
            o.destroySecondPass();
          }
        }
      });
      if (t) {
        r.push(function () {
          n.updateAllRowCons();
          n.dispatchDisplayedRowsChanged();
        });
        J(r);
      }
    };
    t.prototype.checkAngularCompile = function () {
      var e = this;
      if (this.gridOptionsWrapper.isAngularCompileRows()) {
        window.setTimeout(function () {
          e.$scope.$apply();
        }, 0);
      }
    };
    t.prototype.workOutFirstAndLastRowsToRender = function () {
      var e;
      var t;
      var n = this;
      if (this.paginationProxy.isRowsToRender()) {
        if (this.printLayout) {
          e = this.paginationProxy.getPageFirstRow();
          t = this.paginationProxy.getPageLastRow();
        } else {
          var r = this.gridOptionsWrapper.getRowBufferInPixels();
          var o = this.controllersService.getGridBodyController();
          var i = false;
          var a = undefined;
          var s = undefined;
          do {
            var c = this.paginationProxy.getPixelOffset();
            var l = this.paginationProxy.getCurrentPagePixelRange();
            var u = l.pageFirstPixel;
            var d = l.pageLastPixel;
            var p = this.rowContainerHeightService.getDivStretchOffset();
            var f = o.getScrollFeature().getVScrollPosition();
            var h = f.top;
            var m = f.bottom;
            a = Math.max(h + c - r, u) + p;
            s = Math.min(m + c + r, d) + p;
            i = this.ensureAllRowsInRangeHaveHeightsCalculated(a, s);
          } while (i);
          var g = this.paginationProxy.getRowIndexAtPixel(a);
          var _ = this.paginationProxy.getRowIndexAtPixel(s);
          var v = this.paginationProxy.getPageFirstRow();
          var b = this.paginationProxy.getPageLastRow();
          if (g < v) {
            g = v;
          }
          if (_ > b) {
            _ = b;
          }
          e = g;
          t = _;
        }
      } else {
        e = 0;
        t = -1;
      }
      var y = this.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_NORMAL;
      var E = this.gridOptionsWrapper.isSuppressMaxRenderedRowRestriction();
      var O = Math.max(this.gridOptionsWrapper.getRowBuffer(), 500);
      if (y && !E && t - e > O) {
        t = e + O;
      }
      var w = e !== this.firstRenderedRow;
      var C = t !== this.lastRenderedRow;
      if (w || C) {
        this.firstRenderedRow = e;
        this.lastRenderedRow = t;
        var T = {
          type: Ke.EVENT_VIEWPORT_CHANGED,
          firstRow: e,
          lastRow: t,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(T);
      }
      if (this.paginationProxy.isRowsToRender()) {
        var S = {
          type: Ke.EVENT_FIRST_DATA_RENDERED,
          firstRow: e,
          lastRow: t,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        window.setTimeout(function () {
          return n.eventService.dispatchEventOnce(S);
        }, 50);
      }
    };
    t.prototype.ensureAllRowsInRangeHaveHeightsCalculated = function (e, t) {
      var n = this.paginationProxy.ensureRowHeightsValid(e, t, -1, -1);
      if (n) {
        this.updateContainerHeights();
      }
      return n;
    };
    t.prototype.getFirstVirtualRenderedRow = function () {
      return this.firstRenderedRow;
    };
    t.prototype.getLastVirtualRenderedRow = function () {
      return this.lastRenderedRow;
    };
    t.prototype.doNotUnVirtualiseRow = function (e) {
      var t = e.getRowNode();
      var n = this.focusController.isRowNodeFocused(t);
      var r = e.isEditing();
      var o = t.detail;
      return !!(n || r || o) && !!this.paginationProxy.isRowPresent(t);
    };
    t.prototype.createRowCon = function (e, t, n) {
      var r = this.gridOptionsWrapper.isSuppressAnimationFrame();
      var o = n && !r && !this.printLayout;
      return new qa(this.$scope, e, this.beans, t, o, this.printLayout);
    };
    t.prototype.getRenderedNodes = function () {
      var e = this.rowConsByRowIndex;
      return Object.keys(e).map(function (t) {
        return e[t].getRowNode();
      });
    };
    t.prototype.navigateToNextCell = function (e, t, n, i) {
      for (var a = n, s = false; a && (a === n || !this.isValidNavigateCell(a));) {
        if (this.gridOptionsWrapper.isEnableRtl()) {
          if (t === _o.LEFT) {
            a = this.getLastCellOfColSpan(a);
          }
        } else {
          if (t === _o.RIGHT) {
            a = this.getLastCellOfColSpan(a);
          }
        }
        s = o(a = this.cellNavigationService.getNextCellToFocus(t, a));
      }
      if (s && e && e.keyCode === _o.UP) {
        a = {
          rowIndex: -1,
          rowPinned: null,
          column: n.column
        };
      }
      if (i) {
        var c = this.gridOptionsWrapper.getNavigateToNextCellFunc();
        if (r(c)) {
          var l = c({
            key: t,
            previousCellPosition: n,
            nextCellPosition: a || null,
            event: e
          });
          if (r(l)) {
            if (l.floating) {
              X(function () {
                console.warn("AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
              }, "no floating in userCell");
              l.rowPinned = l.floating;
            }
            a = {
              rowPinned: l.rowPinned,
              rowIndex: l.rowIndex,
              column: l.column
            };
          } else {
            a = null;
          }
        }
      }
      if (a) {
        if (a.rowIndex < 0) {
          var u = this.beans.headerNavigationService.getHeaderRowCount();
          this.focusController.focusHeaderPosition({
            headerRowIndex: u + a.rowIndex,
            column: n.column
          });
        } else {
          var d = this.getNormalisedPosition(a);
          if (d) {
            this.focusPosition(d);
          } else {
            this.tryToFocusFullWidthRow(a);
          }
        }
      }
    };
    t.prototype.getNormalisedPosition = function (e) {
      this.ensureCellVisible(e);
      var t = this.getComponentForCell(e);
      return t ? (e = t.getCellPosition(), this.ensureCellVisible(e), e) : null;
    };
    t.prototype.tryToFocusFullWidthRow = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      var n = this.columnController.getAllDisplayedColumns();
      var r = this.getRowConByPosition(e);
      if (!r || !r.isFullWidth()) {
        return false;
      }
      var o = {
        rowIndex: e.rowIndex,
        rowPinned: e.rowPinned,
        column: e.column || (t ? m(n) : n[0])
      };
      this.focusPosition(o);
      return true;
    };
    t.prototype.focusPosition = function (e) {
      this.focusController.setFocusedCell(e.rowIndex, e.column, e.rowPinned, true);
      if (this.rangeController) {
        this.rangeController.setRangeToCell(e);
      }
    };
    t.prototype.isValidNavigateCell = function (e) {
      return !!this.rowPositionUtils.getRowNode(e);
    };
    t.prototype.getLastCellOfColSpan = function (e) {
      var t = this.getComponentForCell(e);
      if (!t) {
        return e;
      }
      var n = t.getColSpanningList();
      return 1 === n.length ? e : {
        rowIndex: e.rowIndex,
        column: m(n),
        rowPinned: e.rowPinned
      };
    };
    t.prototype.ensureCellVisible = function (e) {
      if (o(e.rowPinned)) {
        this.gridBodyCon.getScrollFeature().ensureIndexVisible(e.rowIndex);
      }
      if (!e.column.isPinned()) {
        this.gridBodyCon.getScrollFeature().ensureColumnVisible(e.column);
      }
      this.gridBodyCon.getScrollFeature().horizontallyScrollHeaderCenterAndFloatingCenter();
      this.animationFrameService.flushAllFrames();
    };
    t.prototype.startEditingCell = function (e, t, n) {
      var r = this.getComponentForCell(e);
      if (r) {
        r.startRowOrCellEdit(t, n);
      }
    };
    t.prototype.getRowConByPosition = function (e) {
      var t;
      switch (e.rowPinned) {
        case Ee.PINNED_TOP:
          t = this.topRowCons[e.rowIndex];
          break;
        case Ee.PINNED_BOTTOM:
          t = this.bottomRowCons[e.rowIndex];
          break;
        default:
          t = this.rowConsByRowIndex[e.rowIndex];
      }
      return t;
    };
    t.prototype.getComponentForCell = function (e) {
      var t = this.getRowConByPosition(e);
      return t ? t.getRenderedCellForColumn(e.column) : null;
    };
    t.prototype.getRowNode = function (e) {
      switch (e.rowPinned) {
        case Ee.PINNED_TOP:
          return this.pinnedRowModel.getPinnedTopRowData()[e.rowIndex];
        case Ee.PINNED_BOTTOM:
          return this.pinnedRowModel.getPinnedBottomRowData()[e.rowIndex];
        default:
          return this.rowModel.getRow(e.rowIndex);
      }
    };
    t.prototype.onTabKeyDown = function (e, t) {
      var n = t.shiftKey;
      if (this.tabToNextCellCommon(e, n)) {
        t.preventDefault();
      } else if (n) {
        var r = e.getRowPosition();
        var o = r.rowIndex;
        if (r.rowPinned ? 0 === o : o === this.paginationProxy.getPageFirstRow()) {
          t.preventDefault();
          var i = this.beans.headerNavigationService.getHeaderRowCount() - 1;
          var a = m(this.columnController.getAllDisplayedColumns());
          this.focusController.focusHeaderPosition({
            headerRowIndex: i,
            column: a
          });
        }
      } else {
        if (e instanceof rs) {
          e.focusCell(true);
        }
        if (this.focusController.focusNextGridCoreContainer(false)) {
          t.preventDefault();
        }
      }
    };
    t.prototype.tabToNextCell = function (e) {
      var t = this.focusController.getFocusedCell();
      if (!t) {
        return false;
      }
      var n = this.getComponentForCell(t);
      return !!(n || (n = this.getRowConByPosition(t)) && n.isFullWidth()) && this.tabToNextCellCommon(n, e);
    };
    t.prototype.tabToNextCellCommon = function (e, t) {
      var n = e.isEditing();
      if (!n && e instanceof rs) {
        var r = e.getRenderedRow();
        if (r) {
          n = r.isEditing();
        }
      }
      return (n ? this.gridOptionsWrapper.isFullRowEdit() ? this.moveToNextEditingRow(e, t) : this.moveToNextEditingCell(e, t) : this.moveToNextCellNotEditing(e, t)) || !!this.focusController.getFocusedHeader();
    };
    t.prototype.moveToNextEditingCell = function (e, t) {
      var n = e.getCellPosition();
      e.stopEditing();
      var r = this.findNextCellToFocusOn(n, t, true);
      var o = null != r;
      if (o) {
        r.startEditingIfEnabled(null, null, true);
        r.focusCell(false);
      }
      return o;
    };
    t.prototype.moveToNextEditingRow = function (e, t) {
      var n = e.getCellPosition();
      var r = this.findNextCellToFocusOn(n, t, true);
      if (null == r) {
        return false;
      }
      var o = e.getCellPosition();
      var i = r.getCellPosition();
      var a = this.isCellEditable(o);
      var s = this.isCellEditable(i);
      var c = i && o.rowIndex === i.rowIndex && o.rowPinned === i.rowPinned;
      if (!(a && e.setFocusOutOnEditor(), c)) {
        e.getRenderedRow().stopEditing();
        r.getRenderedRow().startRowEditing();
      }
      if (s) {
        r.setFocusInOnEditor();
        r.focusCell();
      } else {
        r.focusCell(true);
      }
      return true;
    };
    t.prototype.moveToNextCellNotEditing = function (e, t) {
      var n;
      var o = this.columnController.getAllDisplayedColumns();
      n = e instanceof qa ? is(is({}, e.getRowPosition()), {
        column: t ? o[0] : m(o)
      }) : e.getCellPosition();
      var i = this.findNextCellToFocusOn(n, t, false);
      if (i instanceof rs) {
        i.focusCell(true);
      } else if (i) {
        return this.tryToFocusFullWidthRow(i.getRowPosition(), t);
      }
      return r(i);
    };
    t.prototype.findNextCellToFocusOn = function (e, t, n) {
      for (var o = e;;) {
        if (!t) {
          o = this.getLastCellOfColSpan(o);
        }
        o = this.cellNavigationService.getNextTabbedCell(o, t);
        var i = this.gridOptionsWrapper.getTabToNextCellFunc();
        if (r(i)) {
          var a = i({
            backwards: t,
            editing: n,
            previousCellPosition: e,
            nextCellPosition: o || null
          });
          if (r(a)) {
            if (a.floating) {
              X(function () {
                console.warn("AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
              }, "no floating in userCell");
              a.rowPinned = a.floating;
            }
            o = {
              rowIndex: a.rowIndex,
              column: a.column,
              rowPinned: a.rowPinned
            };
          } else {
            o = null;
          }
        }
        if (!o) {
          return null;
        }
        if (o.rowIndex < 0) {
          var s = this.beans.headerNavigationService.getHeaderRowCount();
          this.focusController.focusHeaderPosition({
            headerRowIndex: s + o.rowIndex,
            column: o.column
          });
          return null;
        }
        var c = this.gridOptionsWrapper.isFullRowEdit();
        if (n && !c) {
          if (!this.isCellEditable(o)) {
            continue;
          }
        }
        this.ensureCellVisible(o);
        var l = this.getComponentForCell(o);
        if (l) {
          if (!l.isSuppressNavigable()) {
            if (this.rangeController) {
              this.rangeController.setRangeToCell(o);
            }
            return l;
          }
        } else {
          var u = this.getRowConByPosition(o);
          if (u && u.isFullWidth()) {
            return u;
          }
        }
      }
    };
    t.prototype.isCellEditable = function (e) {
      var t = this.lookupRowNodeForCell(e);
      return !!t && e.column.isCellEditable(t);
    };
    t.prototype.lookupRowNodeForCell = function (e) {
      return e.rowPinned === Ee.PINNED_TOP ? this.pinnedRowModel.getPinnedTopRow(e.rowIndex) : e.rowPinned === Ee.PINNED_BOTTOM ? this.pinnedRowModel.getPinnedBottomRow(e.rowIndex) : this.paginationProxy.getRow(e.rowIndex);
    };
    t.prototype.isRangeInRenderedViewport = function (e, t) {
      if (null == e || null == t) {
        return false;
      }
      var n = e > this.lastRenderedRow;
      return !(t < this.firstRenderedRow) && !n;
    };
    as([pe("paginationProxy")], t.prototype, "paginationProxy", undefined);
    as([pe("columnController")], t.prototype, "columnController", undefined);
    as([pe("$scope")], t.prototype, "$scope", undefined);
    as([pe("pinnedRowModel")], t.prototype, "pinnedRowModel", undefined);
    as([pe("rowModel")], t.prototype, "rowModel", undefined);
    as([pe("focusController")], t.prototype, "focusController", undefined);
    as([pe("cellNavigationService")], t.prototype, "cellNavigationService", undefined);
    as([pe("columnApi")], t.prototype, "columnApi", undefined);
    as([pe("gridApi")], t.prototype, "gridApi", undefined);
    as([pe("beans")], t.prototype, "beans", undefined);
    as([pe("rowContainerHeightService")], t.prototype, "rowContainerHeightService", undefined);
    as([pe("animationFrameService")], t.prototype, "animationFrameService", undefined);
    as([pe("rowPositionUtils")], t.prototype, "rowPositionUtils", undefined);
    as([fe("rangeController")], t.prototype, "rangeController", undefined);
    as([fe("controllersService")], t.prototype, "controllersService", undefined);
    as([ss(0, me("loggerFactory"))], t.prototype, "agWire", null);
    as([le], t.prototype, "postConstruct", null);
    return t = as([de("rowRenderer")], t);
  }(We);
  var us = function () {
    function e() {}
    e.addHeaderClassesFromColDef = function (e, t, n, r, i) {
      if (!o(e)) {
        this.addColumnClassesFromCollDef(e.headerClass, e, t, n, r, i);
      }
    };
    e.addToolPanelClassesFromColDef = function (e, t, n, r, i) {
      if (!o(e)) {
        this.addColumnClassesFromCollDef(e.toolPanelClass, e, t, n, r, i);
      }
    };
    e.addColumnClassesFromCollDef = function (e, t, n, r, i, a) {
      if (!o(e)) {
        var s;
        if ("function" === typeof e) {
          s = e({
            colDef: t,
            column: i,
            columnGroup: a,
            context: r.getContext(),
            api: r.getApi()
          });
        } else {
          s = e;
        }
        if ("string" === typeof s) {
          Qt(n, s);
        } else {
          if (Array.isArray(s)) {
            s.forEach(function (e) {
              Qt(n, e);
            });
          }
        }
      }
    };
    return e;
  }();
  var ds = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ps = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var fs = function (e) {
    function t(t, n) {
      var r = e.call(this) || this;
      r.columns = t;
      r.element = n;
      return r;
    }
    ds(t, e);
    t.prototype.postConstruct = function () {
      this.addMouseHoverListeners();
    };
    t.prototype.addMouseHoverListeners = function () {
      this.addManagedListener(this.element, "mouseout", this.onMouseOut.bind(this));
      this.addManagedListener(this.element, "mouseover", this.onMouseOver.bind(this));
    };
    t.prototype.onMouseOut = function () {
      this.columnHoverService.clearMouseOver();
    };
    t.prototype.onMouseOver = function () {
      this.columnHoverService.setMouseOver(this.columns);
    };
    ps([pe("columnHoverService")], t.prototype, "columnHoverService", undefined);
    ps([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var hs = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ms = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var gs = function (e) {
    function t(t, n, r, o) {
      var i = e.call(this) || this;
      i.columnOrGroup = t;
      i.eCell = n;
      i.ariaEl = i.eCell.querySelector("[role=columnheader]") || i.eCell;
      i.colsSpanning = o;
      i.beans = r;
      i.printLayout = r.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_PRINT;
      return i;
    }
    hs(t, e);
    t.prototype.setColsSpanning = function (e) {
      this.colsSpanning = e;
      this.onLeftChanged();
    };
    t.prototype.getColumnOrGroup = function () {
      return this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning ? m(this.colsSpanning) : this.columnOrGroup;
    };
    t.prototype.postConstruct = function () {
      this.addManagedListener(this.columnOrGroup, Ce.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
      this.setLeftFirstTime();
      if (this.printLayout) {
        this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));
      }
    };
    t.prototype.setLeftFirstTime = function () {
      var e = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();
      var t = r(this.columnOrGroup.getOldLeft());
      if (this.beans.columnAnimationService.isActive() && t && !e) {
        this.animateInLeft();
      } else {
        this.onLeftChanged();
      }
    };
    t.prototype.animateInLeft = function () {
      var e = this;
      var t = this.getColumnOrGroup();
      var n = t.getLeft();
      var r = t.getOldLeft();
      var o = this.modifyLeftForPrintLayout(t, r);
      var i = this.modifyLeftForPrintLayout(t, n);
      this.setLeft(o);
      this.actualLeft = i;
      this.beans.columnAnimationService.executeNextVMTurn(function () {
        if (e.actualLeft === i) {
          e.setLeft(i);
        }
      });
    };
    t.prototype.onLeftChanged = function () {
      var e = this.getColumnOrGroup();
      var t = e.getLeft();
      this.actualLeft = this.modifyLeftForPrintLayout(e, t);
      this.setLeft(this.actualLeft);
    };
    t.prototype.modifyLeftForPrintLayout = function (e, t) {
      if (!this.printLayout) {
        return t;
      }
      if (e.getPinned() === Ee.PINNED_LEFT) {
        return t;
      }
      var n = this.beans.columnController.getDisplayedColumnsLeftWidth();
      return e.getPinned() === Ee.PINNED_RIGHT ? n + this.beans.columnController.getBodyContainerWidth() + t : n + t;
    };
    t.prototype.setLeft = function (e) {
      var t;
      if (r(e)) {
        this.eCell.style.left = e + "px";
      }
      if (this.columnOrGroup instanceof Ce) {
        t = this.columnOrGroup;
      } else {
        var n = this.columnOrGroup.getLeafColumns();
        if (!n.length) {
          return;
        }
        if (n.length > 1) {
          _r(this.ariaEl, n.length);
        }
        t = n[0];
      }
      var o = this.beans.columnController.getAriaColumnIndex(t);
      gr(this.ariaEl, o);
    };
    ms([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var _s = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var vs = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var bs = function (e) {
    function t(t, n) {
      var r = e.call(this, n) || this;
      r.labelSeparator = "";
      r.labelAlignment = "left";
      r.label = "";
      r.config = t || {};
      return r;
    }
    _s(t, e);
    t.prototype.postConstruct = function () {
      Qt(this.getGui(), "ag-labeled");
      Qt(this.eLabel, "ag-label");
      var e = this.config;
      var t = e.labelSeparator;
      var n = e.label;
      var r = e.labelWidth;
      var o = e.labelAlignment;
      if (null != t) {
        this.setLabelSeparator(t);
      }
      if (null != n) {
        this.setLabel(n);
      }
      if (null != r) {
        this.setLabelWidth(r);
      }
      this.setLabelAlignment(o || this.labelAlignment);
      this.refreshLabel();
    };
    t.prototype.refreshLabel = function () {
      hn(this.eLabel);
      if ("string" === typeof this.label) {
        this.eLabel.innerText = this.label + this.labelSeparator;
      } else {
        if (this.label) {
          this.eLabel.appendChild(this.label);
        }
      }
      if ("" === this.label) {
        Qt(this.eLabel, "ag-hidden");
        this.eLabel.setAttribute("role", "presentation");
      } else {
        Zt(this.eLabel, "ag-hidden");
        this.eLabel.removeAttribute("role");
      }
    };
    t.prototype.setLabelSeparator = function (e) {
      if (!(this.labelSeparator === e)) {
        this.labelSeparator = e;
        if (null != this.label) {
          this.refreshLabel();
        }
      }
      return this;
    };
    t.prototype.getLabelId = function () {
      this.eLabel.id = this.eLabel.id || "ag-" + this.getCompId() + "-label";
      return this.eLabel.id;
    };
    t.prototype.getLabel = function () {
      return this.label;
    };
    t.prototype.setLabel = function (e) {
      if (!(this.label === e)) {
        this.label = e;
        this.refreshLabel();
      }
      return this;
    };
    t.prototype.setLabelAlignment = function (e) {
      var t = this.getGui();
      Jt(t, "ag-label-align-left", "left" === e);
      Jt(t, "ag-label-align-right", "right" === e);
      Jt(t, "ag-label-align-top", "top" === e);
      return this;
    };
    t.prototype.setLabelWidth = function (e) {
      if (!(null == this.label)) {
        Sn(this.eLabel, e);
      }
      return this;
    };
    vs([le], t.prototype, "postConstruct", null);
    return t;
  }(so);
  var ys = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Es = function (e) {
    function t(t, n, r) {
      var o = e.call(this, t, n) || this;
      o.className = r;
      o.disabled = false;
      return o;
    }
    ys(t, e);
    t.prototype.postConstruct = function () {
      e.prototype.postConstruct.call(this);
      if (this.className) {
        Qt(this.getGui(), this.className);
      }
    };
    t.prototype.onValueChange = function (e) {
      var n = this;
      this.addManagedListener(this, t.EVENT_CHANGED, function () {
        return e(n.getValue());
      });
      return this;
    };
    t.prototype.getWidth = function () {
      return this.getGui().clientWidth;
    };
    t.prototype.setWidth = function (e) {
      In(this.getGui(), e);
      return this;
    };
    t.prototype.getPreviousValue = function () {
      return this.previousValue;
    };
    t.prototype.getValue = function () {
      return this.value;
    };
    t.prototype.setValue = function (e, n) {
      if (!(this.value === e)) {
        this.previousValue = this.value;
        this.value = e;
        if (!n) {
          this.dispatchEvent({
            type: t.EVENT_CHANGED
          });
        }
      }
      return this;
    };
    t.prototype.setDisabled = function (e) {
      e = !!e;
      var t = this.getGui();
      rn(t, e);
      Jt(t, "ag-disabled", e);
      this.disabled = e;
      return this;
    };
    t.prototype.isDisabled = function () {
      return !!this.disabled;
    };
    t.EVENT_CHANGED = "valueChange";
    return t;
  }(bs);
  var Os = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ws = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Cs = function (e) {
    function t(t, n, r, o) {
      if (undefined === r) {
        r = "text";
      }
      if (undefined === o) {
        o = "input";
      }
      var i = e.call(this, t, "\n            <div role=\"presentation\">\n                <div ref=\"eLabel\" class=\"ag-input-field-label\"></div>\n                <div ref=\"eWrapper\" class=\"ag-wrapper ag-input-wrapper\" role=\"presentation\">\n                    <" + o + " ref=\"eInput\" class=\"ag-input-field-input\"></" + o + ">\n                </div>\n            </div>", n) || this;
      i.inputType = r;
      i.displayFieldTag = o;
      return i;
    }
    Os(t, e);
    t.prototype.postConstruct = function () {
      e.prototype.postConstruct.call(this);
      this.setInputType();
      Qt(this.eLabel, this.className + "-label");
      Qt(this.eWrapper, this.className + "-input-wrapper");
      Qt(this.eInput, this.className + "-input");
      Qt(this.getGui(), "ag-input-field");
      this.eInput.id = this.eInput.id || "ag-" + this.getCompId() + "-input";
      var t = this.config;
      var n = t.width;
      var r = t.value;
      if (null != n) {
        this.setWidth(n);
      }
      if (null != r) {
        this.setValue(r);
      }
      this.addInputListeners();
    };
    t.prototype.refreshLabel = function () {
      if (r(this.getLabel())) {
        ir(this.eInput, this.getLabelId());
      } else {
        this.eInput.removeAttribute("aria-labelledby");
      }
      e.prototype.refreshLabel.call(this);
    };
    t.prototype.addInputListeners = function () {
      var e = this;
      this.addManagedListener(this.eInput, "input", function (t) {
        return e.setValue(t.target.value);
      });
    };
    t.prototype.setInputType = function () {
      if ("input" === this.displayFieldTag) {
        this.eInput.setAttribute("type", this.inputType);
      }
    };
    t.prototype.getInputElement = function () {
      return this.eInput;
    };
    t.prototype.setInputWidth = function (e) {
      Sn(this.eWrapper, e);
      return this;
    };
    t.prototype.setInputName = function (e) {
      this.getInputElement().setAttribute("name", e);
      return this;
    };
    t.prototype.getFocusableElement = function () {
      return this.eInput;
    };
    t.prototype.setMaxLength = function (e) {
      this.eInput.maxLength = e;
      return this;
    };
    t.prototype.setInputPlaceholder = function (e) {
      Mn(this.eInput, "placeholder", e);
      return this;
    };
    t.prototype.setInputAriaLabel = function (e) {
      or(this.eInput, e);
      return this;
    };
    t.prototype.setDisabled = function (t) {
      rn(this.eInput, t);
      return e.prototype.setDisabled.call(this, t);
    };
    ws([uo("eLabel")], t.prototype, "eLabel", undefined);
    ws([uo("eWrapper")], t.prototype, "eWrapper", undefined);
    ws([uo("eInput")], t.prototype, "eInput", undefined);
    return t;
  }(Es);
  var Ts = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ss = function (e) {
    function t(t, n, r) {
      if (undefined === n) {
        n = "ag-checkbox";
      }
      if (undefined === r) {
        r = "checkbox";
      }
      var o = e.call(this, t, n, r) || this;
      o.labelAlignment = "right";
      o.selected = false;
      o.readOnly = false;
      o.passive = false;
      return o;
    }
    Ts(t, e);
    t.prototype.addInputListeners = function () {
      this.addManagedListener(this.eInput, "click", this.onCheckboxClick.bind(this));
      this.addManagedListener(this.eLabel, "click", this.toggle.bind(this));
    };
    t.prototype.getNextValue = function () {
      return undefined === this.selected || !this.selected;
    };
    t.prototype.setPassive = function (e) {
      this.passive = e;
    };
    t.prototype.isReadOnly = function () {
      return this.readOnly;
    };
    t.prototype.setReadOnly = function (e) {
      Jt(this.eWrapper, "ag-disabled", e);
      this.eInput.disabled = e;
      this.readOnly = e;
    };
    t.prototype.setDisabled = function (t) {
      Jt(this.eWrapper, "ag-disabled", t);
      return e.prototype.setDisabled.call(this, t);
    };
    t.prototype.toggle = function () {
      var e = this.isSelected();
      var t = this.getNextValue();
      if (this.passive) {
        this.dispatchChange(t, e);
      } else {
        this.setValue(t);
      }
    };
    t.prototype.getValue = function () {
      return this.isSelected();
    };
    t.prototype.setValue = function (e, t) {
      this.refreshSelectedClass(e);
      this.setSelected(e, t);
      return this;
    };
    t.prototype.setName = function (e) {
      this.getInputElement().name = e;
      return this;
    };
    t.prototype.isSelected = function () {
      return this.selected;
    };
    t.prototype.setSelected = function (e, t) {
      if (this.isSelected() !== e) {
        this.previousValue = this.isSelected();
        e = this.selected = "boolean" === typeof e ? e : undefined;
        this.eInput.checked = e;
        this.eInput.indeterminate = undefined === e;
        if (!t) {
          this.dispatchChange(this.selected, this.previousValue);
        }
      }
    };
    t.prototype.dispatchChange = function (e, n, r) {
      this.dispatchEvent({
        type: t.EVENT_CHANGED,
        selected: e,
        previousValue: n,
        event: r
      });
      var o = this.getInputElement();
      var i = {
        type: Ke.EVENT_CHECKBOX_CHANGED,
        id: o.id,
        name: o.name,
        selected: e,
        previousValue: n
      };
      this.eventService.dispatchEvent(i);
    };
    t.prototype.onCheckboxClick = function (e) {
      if (!this.passive) {
        var t = this.isSelected();
        var n = this.selected = e.target.checked;
        this.refreshSelectedClass(n);
        this.dispatchChange(n, t, e);
      }
    };
    t.prototype.refreshSelectedClass = function (e) {
      Jt(this.eWrapper, "ag-checked", true === e);
      Jt(this.eWrapper, "ag-indeterminate", null == e);
    };
    return t;
  }(Cs);
  var Is = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var As = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var js = function (e) {
    function t(t, n) {
      var r = e.call(this) || this;
      r.cbSelectAllVisible = false;
      r.processingEventFromCheckbox = false;
      r.cbSelectAll = t;
      r.column = n;
      var o = n.getColDef();
      r.filteredOnly = !!o && !!o.headerCheckboxSelectionFilteredOnly;
      return r;
    }
    Is(t, e);
    t.prototype.postConstruct = function () {
      this.showOrHideSelectAll();
      this.addManagedListener(this.eventService, Ke.EVENT_NEW_COLUMNS_LOADED, this.showOrHideSelectAll.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
      this.addManagedListener(this.cbSelectAll, Ss.EVENT_CHANGED, this.onCbSelectAll.bind(this));
      this.cbSelectAll.getInputElement().setAttribute("tabindex", "-1");
      this.refreshSelectAllLabel();
    };
    t.prototype.showOrHideSelectAll = function () {
      this.cbSelectAllVisible = this.isCheckboxSelection();
      this.cbSelectAll.setDisplayed(this.cbSelectAllVisible);
      if (this.cbSelectAllVisible) {
        this.checkRightRowModelType();
        this.updateStateOfCheckbox();
      }
      this.refreshHeaderAriaDescribedBy(this.cbSelectAllVisible);
    };
    t.prototype.refreshHeaderAriaDescribedBy = function (e) {
      var t = this.cbSelectAll.getParentComponent();
      var n = t && t.getGui();
      if (n && gn(n)) {
        var r = "";
        if (n) {
          r = rr(n);
        }
        var o = this.cbSelectAll.getInputElement().id;
        var i = -1 !== r.indexOf(o);
        if (e) {
          if (!i) {
            ar(n, o + " " + r.trim());
          }
        } else {
          if (i) {
            ar(n, r.trim().split(" ").filter(function (e) {
              return e === o;
            }).join(" "));
          }
        }
      }
    };
    t.prototype.onModelChanged = function () {
      if (this.cbSelectAllVisible) {
        this.updateStateOfCheckbox();
      }
    };
    t.prototype.onSelectionChanged = function () {
      if (this.cbSelectAllVisible) {
        this.updateStateOfCheckbox();
      }
    };
    t.prototype.getNextCheckboxState = function (e) {
      return (0 !== e.selected || 0 !== e.notSelected) && (e.selected > 0 && e.notSelected > 0 ? null : e.selected > 0);
    };
    t.prototype.updateStateOfCheckbox = function () {
      if (!this.processingEventFromCheckbox) {
        this.processingEventFromCheckbox = true;
        var e = this.getSelectionCount();
        var t = this.getNextCheckboxState(e);
        this.cbSelectAll.setValue(t);
        this.refreshSelectAllLabel();
        this.processingEventFromCheckbox = false;
      }
    };
    t.prototype.refreshSelectAllLabel = function () {
      var e = this.gridOptionsWrapper.getLocaleTextFunc();
      var t = this.cbSelectAll.getValue() ? e("ariaChecked", "checked") : e("ariaUnchecked", "unchecked");
      var n = e("ariaRowSelectAll", "Press Space to toggle all rows selection");
      this.cbSelectAll.setInputAriaLabel(n + " (" + t + ")");
    };
    t.prototype.getSelectionCount = function () {
      var e = this;
      var t = 0;
      var n = 0;
      var r = function (r) {
        if (!(e.gridOptionsWrapper.isGroupSelectsChildren() && r.group)) {
          if (r.isSelected()) {
            t++;
          } else {
            if (r.selectable) {
              n++;
            }
          }
        }
      };
      if (this.filteredOnly) {
        this.gridApi.forEachNodeAfterFilter(r);
      } else {
        this.gridApi.forEachNode(r);
      }
      return {
        notSelected: n,
        selected: t
      };
    };
    t.prototype.checkRightRowModelType = function () {
      var e = this.rowModel.getType();
      if (!(e === Ee.ROW_MODEL_TYPE_CLIENT_SIDE)) {
        console.warn("AG Grid: selectAllCheckbox is only available if using normal row model, you are using " + e);
      }
    };
    t.prototype.onCbSelectAll = function () {
      if (!this.processingEventFromCheckbox) {
        if (this.cbSelectAllVisible) {
          if (this.cbSelectAll.getValue()) {
            this.selectionController.selectAllRowNodes(this.filteredOnly);
          } else {
            this.selectionController.deselectAllRowNodes(this.filteredOnly);
          }
        }
      }
    };
    t.prototype.isCheckboxSelection = function () {
      var e = this.column.getColDef().headerCheckboxSelection;
      if ("function" === typeof e) {
        e = e({
          column: this.column,
          colDef: this.column.getColDef(),
          columnApi: this.columnApi,
          api: this.gridApi
        });
      }
      return !!e && (this.gridOptionsWrapper.isRowModelServerSide() ? (console.warn("headerCheckboxSelection is not supported for Server Side Row Model"), false) : this.gridOptionsWrapper.isRowModelInfinite() ? (console.warn("headerCheckboxSelection is not supported for Infinite Row Model"), false) : !this.gridOptionsWrapper.isRowModelViewport() || (console.warn("headerCheckboxSelection is not supported for Viewport Row Model"), false));
    };
    As([pe("gridApi")], t.prototype, "gridApi", undefined);
    As([pe("columnApi")], t.prototype, "columnApi", undefined);
    As([pe("rowModel")], t.prototype, "rowModel", undefined);
    As([pe("selectionController")], t.prototype, "selectionController", undefined);
    As([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var Ns = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Rs = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Ns(t, e);
    t.prototype.shouldStopEventPropagation = function (e) {
      var t = this.focusController.getFocusedHeader();
      var n = t.headerRowIndex;
      var r = t.column;
      return Fr(this.gridOptionsWrapper, e, n, r);
    };
    t.prototype.getColumn = function () {
      return this.column;
    };
    t.prototype.getPinned = function () {
      return this.pinned;
    };
    return t;
  }(So);
  var ks = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var xs = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ds = function (e) {
    function n(t, r) {
      var o = e.call(this, n.TEMPLATE) || this;
      o.headerCompVersion = 0;
      o.refreshFunctions = [];
      o.column = t;
      o.pinned = r;
      return o;
    }
    ks(n, e);
    n.prototype.postConstruct = function () {
      e.prototype.postConstruct.call(this);
      this.colDefVersion = this.columnController.getColDefVersion();
      this.updateState();
      this.setupWidth();
      this.setupMovingCss();
      this.setupTooltip();
      this.setupResize();
      this.setupMenuClass();
      this.setupSortableClass();
      this.addColumnHoverListener();
      this.addActiveHeaderMouseListeners();
      this.createManagedBean(new fs([this.column], this.getGui()));
      this.addManagedListener(this.column, Ce.EVENT_FILTER_ACTIVE_CHANGED, this.onFilterChanged.bind(this));
      this.onFilterChanged();
      this.createManagedBean(new js(this.cbSelectAll, this.column));
      this.cbSelectAll.setParentComponent(this);
      this.createManagedBean(new gs(this.column, this.getGui(), this.beans));
      this.addAttributes();
      us.addHeaderClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);
      this.addManagedListener(this.eventService, Ke.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));
      this.appendHeaderComp();
    };
    n.prototype.onColumnRowGroupChanged = function () {
      this.checkDisplayName();
    };
    n.prototype.onColumnPivotChanged = function () {
      this.checkDisplayName();
    };
    n.prototype.onColumnValueChanged = function () {
      this.checkDisplayName();
    };
    n.prototype.checkDisplayName = function () {
      if (this.displayName !== this.calculateDisplayName()) {
        this.refresh();
      }
    };
    n.prototype.updateState = function () {
      var e = this.column.getColDef();
      this.sortable = e.sortable;
      this.displayName = this.calculateDisplayName();
      this.draggable = this.workOutDraggable();
    };
    n.prototype.calculateDisplayName = function () {
      return this.columnController.getDisplayNameForColumn(this.column, "header", true);
    };
    n.prototype.onNewColumnsLoaded = function () {
      var e = this.columnController.getColDefVersion();
      if (e != this.colDefVersion) {
        this.colDefVersion = e;
        this.refresh();
      }
    };
    n.prototype.refresh = function () {
      this.updateState();
      this.refreshHeaderComp();
      this.refreshFunctions.forEach(function (e) {
        return e();
      });
    };
    n.prototype.refreshHeaderComp = function () {
      if (this.headerComp) {
        var e = this.column.getColDef();
        if (!(this.colDefHeaderComponent != e.headerComponent || this.colDefHeaderComponentFramework != e.headerComponentFramework) && this.attemptHeaderCompRefresh()) {
          var t = this.draggable && !this.moveDragSource;
          var n = !this.draggable && this.moveDragSource;
          if (t || n) {
            this.attachDraggingToHeaderComp();
          }
        } else {
          this.appendHeaderComp();
        }
      }
    };
    n.prototype.destroyHeaderComp = function () {
      if (this.headerComp) {
        this.getGui().removeChild(this.headerCompGui);
        this.headerComp = this.destroyBean(this.headerComp);
        this.headerCompGui = undefined;
      }
      this.removeMoveDragSource();
    };
    n.prototype.removeMoveDragSource = function () {
      if (this.moveDragSource) {
        this.dragAndDropService.removeDragSource(this.moveDragSource);
        this.moveDragSource = undefined;
      }
    };
    n.prototype.attemptHeaderCompRefresh = function () {
      if (!this.headerComp.refresh) {
        return false;
      }
      var e = this.createParams();
      var t = this.userComponentFactory.createFinalParams(this.getComponentHolder(), "headerComponent", e);
      return this.headerComp.refresh(t);
    };
    n.prototype.addActiveHeaderMouseListeners = function () {
      var e = this;
      var t = function (t) {
        return e.setActiveHeader("mouseenter" === t.type);
      };
      this.addManagedListener(this.getGui(), "mouseenter", t);
      this.addManagedListener(this.getGui(), "mouseleave", t);
    };
    n.prototype.setActiveHeader = function (e) {
      Jt(this.getGui(), "ag-header-active", e);
    };
    n.prototype.onFocusIn = function (e) {
      if (!this.getGui().contains(e.relatedTarget)) {
        var t = this.getParentComponent();
        this.focusController.setFocusedHeader(t.getRowIndex(), this.getColumn());
      }
      this.setActiveHeader(true);
    };
    n.prototype.onFocusOut = function (e) {
      if (!this.getGui().contains(e.relatedTarget)) {
        this.setActiveHeader(false);
      }
    };
    n.prototype.handleKeyDown = function (e) {
      var t = this.headerComp;
      if (t) {
        if (e.keyCode === _o.SPACE) {
          var n = this.cbSelectAll;
          if (n.isDisplayed() && !n.getGui().contains(document.activeElement)) {
            e.preventDefault();
            n.setValue(!n.getValue());
          }
        }
        if (e.keyCode === _o.ENTER) {
          if (e.ctrlKey || e.metaKey) {
            if (this.menuEnabled && t.showMenu) {
              e.preventDefault();
              t.showMenu();
            }
          } else if (this.sortable) {
            var r = e.shiftKey;
            this.sortController.progressSort(this.column, r, "uiColumnSorted");
          }
        }
      }
    };
    n.prototype.onTabKeyDown = function () {};
    n.prototype.getComponentHolder = function () {
      return this.column.getColDef();
    };
    n.prototype.addColumnHoverListener = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
      this.onColumnHover();
    };
    n.prototype.onColumnHover = function () {
      var e = this.columnHoverService.isHovered(this.column);
      Jt(this.getGui(), "ag-column-hover", e);
    };
    n.prototype.setupSortableClass = function () {
      var e = this;
      var t = this.getGui();
      var n = function () {
        Jt(t, "ag-header-cell-sortable", !!e.sortable);
      };
      var r = function () {
        if (e.sortable) {
          vr(t, tr(e.column));
        } else {
          br(t);
        }
      };
      n();
      r();
      this.refreshFunctions.push(n);
      this.refreshFunctions.push(r);
      this.addManagedListener(this.column, Ce.EVENT_SORT_CHANGED, r.bind(this));
    };
    n.prototype.onFilterChanged = function () {
      var e = this.column.isFilterActive();
      Jt(this.getGui(), "ag-header-cell-filtered", e);
    };
    n.prototype.appendHeaderComp = function () {
      this.headerCompVersion++;
      var e = this.column.getColDef();
      this.colDefHeaderComponent = e.headerComponent;
      this.colDefHeaderComponentFramework = e.headerComponentFramework;
      var t = this.createParams();
      var n = this.afterHeaderCompCreated.bind(this, this.headerCompVersion);
      this.userComponentFactory.newHeaderComponent(t).then(n);
    };
    n.prototype.createParams = function () {
      var e = this;
      var t = this.column.getColDef();
      this.menuEnabled = this.menuFactory.isMenuEnabled(this.column) && !t.suppressMenu;
      return {
        column: this.column,
        displayName: this.displayName,
        enableSorting: t.sortable,
        enableMenu: this.menuEnabled,
        showColumnMenu: function (t) {
          e.gridApi.showColumnMenuAfterButtonClick(e.column, t);
        },
        progressSort: function (t) {
          e.sortController.progressSort(e.column, !!t, "uiColumnSorted");
        },
        setSort: function (t, n) {
          e.sortController.setSortForColumn(e.column, t, !!n, "uiColumnSorted");
        },
        api: this.gridApi,
        columnApi: this.columnApi,
        context: this.gridOptionsWrapper.getContext(),
        eGridHeader: this.getGui()
      };
    };
    n.prototype.afterHeaderCompCreated = function (e, t) {
      if (e == this.headerCompVersion && this.isAlive()) {
        this.destroyHeaderComp();
        this.headerComp = t;
        this.headerCompGui = t.getGui();
        this.getGui().appendChild(this.headerCompGui);
        this.attachDraggingToHeaderComp();
      } else {
        this.destroyBean(t);
      }
    };
    n.prototype.onColumnMovingChanged = function () {
      if (this.column.isMoving()) {
        Qt(this.getGui(), "ag-header-cell-moving");
      } else {
        Zt(this.getGui(), "ag-header-cell-moving");
      }
    };
    n.prototype.workOutDraggable = function () {
      var e = this.column.getColDef();
      return !!(!this.gridOptionsWrapper.isSuppressMovableColumns() && !e.suppressMovable && !e.lockPosition) || !!e.enableRowGroup || !!e.enablePivot;
    };
    n.prototype.attachDraggingToHeaderComp = function () {
      var e = this;
      this.removeMoveDragSource();
      if (this.draggable) {
        this.moveDragSource = {
          type: exports.DragSourceType.HeaderCell,
          eElement: this.headerCompGui,
          defaultIconName: yi.ICON_HIDE,
          getDragItem: function () {
            return e.createDragItem();
          },
          dragItemName: this.displayName,
          onDragStarted: function () {
            return e.column.setMoving(true, "uiColumnMoved");
          },
          onDragStopped: function () {
            return e.column.setMoving(false, "uiColumnMoved");
          }
        };
        this.dragAndDropService.addDragSource(this.moveDragSource, true);
      }
    };
    n.prototype.createDragItem = function () {
      var e = {};
      e[this.column.getId()] = this.column.isVisible();
      return {
        columns: [this.column],
        visibleState: e
      };
    };
    n.prototype.setupResize = function () {
      var e;
      var t;
      var n = this;
      var r = this.getComponentHolder();
      var o = [];
      var i = function () {
        o.forEach(function (e) {
          return e();
        });
        o.length = 0;
      };
      var a = function () {
        var a = n.column.isResizable();
        var s = !n.gridOptionsWrapper.isSuppressAutoSize() && !r.suppressAutoSize;
        if (a !== e || s !== t) {
          e = a;
          t = s;
          i();
          (function () {
            tn(n.eResize, e);
            if (e) {
              var r = n.horizontalResizeService.addResizeBar({
                eResizeBar: n.eResize,
                onResizeStart: n.onResizeStart.bind(n),
                onResizing: n.onResizing.bind(n, false),
                onResizeEnd: n.onResizing.bind(n, true)
              });
              o.push(r);
              if (t) {
                var i = n.gridOptionsWrapper.isSkipHeaderOnAutoSize();
                var a = function () {
                  n.columnController.autoSizeColumn(n.column, i, "uiColumnResized");
                };
                n.eResize.addEventListener("dblclick", a);
                var s = new Fo(n.eResize);
                s.addEventListener(Fo.EVENT_DOUBLE_TAP, a);
                n.addDestroyFunc(function () {
                  n.eResize.removeEventListener("dblclick", a);
                  s.removeEventListener(Fo.EVENT_DOUBLE_TAP, a);
                  s.destroy();
                });
              }
            }
          })();
        }
      };
      a();
      this.addDestroyFunc(i);
      this.refreshFunctions.push(a);
    };
    n.prototype.onResizing = function (e, t) {
      var n = this.normaliseResizeAmount(t);
      var r = [{
        key: this.column,
        newWidth: this.resizeStartWidth + n
      }];
      this.columnController.setColumnWidths(r, this.resizeWithShiftKey, e, "uiColumnDragged");
      if (e) {
        Zt(this.getGui(), "ag-column-resizing");
      }
    };
    n.prototype.onResizeStart = function (e) {
      this.resizeStartWidth = this.column.getActualWidth();
      this.resizeWithShiftKey = e;
      Qt(this.getGui(), "ag-column-resizing");
    };
    n.prototype.getTooltipParams = function () {
      var t = e.prototype.getTooltipParams.call(this);
      t.location = "header";
      t.colDef = this.column.getColDef();
      return t;
    };
    n.prototype.setupTooltip = function () {
      var e = this;
      var t = function () {
        var t = e.column.getColDef().headerTooltip;
        e.setTooltip(nt(t));
      };
      t();
      this.refreshFunctions.push(t);
    };
    n.prototype.setupMovingCss = function () {
      this.addManagedListener(this.column, Ce.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));
      this.onColumnMovingChanged();
    };
    n.prototype.addAttributes = function () {
      this.getGui().setAttribute("col-id", this.column.getColId());
    };
    n.prototype.setupWidth = function () {
      this.addManagedListener(this.column, Ce.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
      this.onColumnWidthChanged();
    };
    n.prototype.setupMenuClass = function () {
      this.addManagedListener(this.column, Ce.EVENT_MENU_VISIBLE_CHANGED, this.onMenuVisible.bind(this));
    };
    n.prototype.onMenuVisible = function () {
      this.addOrRemoveCssClass("ag-column-menu-visible", this.column.isMenuVisible());
    };
    n.prototype.onColumnWidthChanged = function () {
      this.getGui().style.width = this.column.getActualWidth() + "px";
    };
    n.prototype.normaliseResizeAmount = function (e) {
      var t = e;
      if (this.gridOptionsWrapper.isEnableRtl()) {
        if (this.pinned !== Ee.PINNED_LEFT) {
          t *= -1;
        }
      } else {
        if (this.pinned === Ee.PINNED_RIGHT) {
          t *= -1;
        }
      }
      return t;
    };
    n.TEMPLATE = "<div class=\"ag-header-cell\" role=\"columnheader\" unselectable=\"on\" tabindex=\"-1\">\n            <div ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n            <ag-checkbox ref=\"cbSelectAll\" class=\"ag-header-select-all\" role=\"presentation\"></ag-checkbox>\n        </div>";
    xs([pe("dragAndDropService")], n.prototype, "dragAndDropService", undefined);
    xs([pe("columnController")], n.prototype, "columnController", undefined);
    xs([pe("horizontalResizeService")], n.prototype, "horizontalResizeService", undefined);
    xs([pe("menuFactory")], n.prototype, "menuFactory", undefined);
    xs([pe("gridApi")], n.prototype, "gridApi", undefined);
    xs([pe("columnApi")], n.prototype, "columnApi", undefined);
    xs([pe("sortController")], n.prototype, "sortController", undefined);
    xs([pe("userComponentFactory")], n.prototype, "userComponentFactory", undefined);
    xs([pe("columnHoverService")], n.prototype, "columnHoverService", undefined);
    xs([pe("beans")], n.prototype, "beans", undefined);
    xs([uo("eResize")], n.prototype, "eResize", undefined);
    xs([uo("cbSelectAll")], n.prototype, "cbSelectAll", undefined);
    xs([ue], n.prototype, "destroyHeaderComp", null);
    return n;
  }(Rs);
  var Ms = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ls = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ps = function (e) {
    function n(t, r) {
      var o = e.call(this, n.TEMPLATE) || this;
      o.removeChildListenersFuncs = [];
      o.column = t;
      o.pinned = r;
      return o;
    }
    Ms(n, e);
    n.prototype.postConstruct = function () {
      e.prototype.postConstruct.call(this);
      us.addHeaderClassesFromColDef(this.getComponentHolder(), this.getGui(), this.gridOptionsWrapper, null, this.column);
      var t = this.columnController.getDisplayNameForColumnGroup(this.column, "header");
      this.appendHeaderGroupComp(t);
      this.setupResize();
      this.addClasses();
      this.setupWidth();
      this.addAttributes();
      this.setupMovingCss();
      this.setupTooltip();
      this.setupExpandable();
      this.createManagedBean(new fs(this.column.getOriginalColumnGroup().getLeafColumns(), this.getGui()));
      this.createManagedBean(new gs(this.column, this.getGui(), this.beans));
    };
    n.prototype.onFocusIn = function (e) {
      if (!this.getGui().contains(e.relatedTarget)) {
        var t = this.getParentComponent();
        this.beans.focusController.setFocusedHeader(t.getRowIndex(), this.getColumn());
      }
    };
    n.prototype.handleKeyDown = function (e) {
      var t = document.activeElement === this.getGui();
      if (this.expandable && t && e.keyCode === _o.ENTER) {
        var n = this.getColumn();
        var r = !n.isExpanded();
        this.columnController.setColumnGroupOpened(n.getOriginalColumnGroup(), r, "uiColumnExpanded");
      }
    };
    n.prototype.onTabKeyDown = function () {};
    n.prototype.setupExpandable = function () {
      var e = this.getColumn().getOriginalColumnGroup();
      this.refreshExpanded();
      this.addManagedListener(e, Ie.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));
      this.addManagedListener(e, Ie.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));
    };
    n.prototype.refreshExpanded = function () {
      var e = this.getColumn();
      var t = this.getGui();
      var n = e.isExpandable();
      var r = e.isExpanded();
      this.expandable = n;
      if (n) {
        cr(t, r);
      } else {
        t.removeAttribute("aria-expanded");
      }
    };
    n.prototype.setupMovingCss = function () {
      var e = this;
      this.column.getOriginalColumnGroup().getLeafColumns().forEach(function (t) {
        e.addManagedListener(t, Ce.EVENT_MOVING_CHANGED, e.onColumnMovingChanged.bind(e));
      });
      this.onColumnMovingChanged();
    };
    n.prototype.getComponentHolder = function () {
      return this.column.getColGroupDef();
    };
    n.prototype.getTooltipParams = function () {
      var t = e.prototype.getTooltipParams.call(this);
      t.location = "headerGroup";
      t.colDef = this.getComponentHolder();
      t.column = this.getColumn();
      return t;
    };
    n.prototype.setupTooltip = function () {
      var e = this.getComponentHolder();
      var t = e && e.headerTooltip;
      if (null != t) {
        this.setTooltip(nt(t));
      }
    };
    n.prototype.onColumnMovingChanged = function () {
      Jt(this.getGui(), "ag-header-cell-moving", this.column.isMoving());
    };
    n.prototype.addAttributes = function () {
      this.getGui().setAttribute("col-id", this.column.getUniqueId());
    };
    n.prototype.appendHeaderGroupComp = function (e) {
      var t = this;
      var n = {
        displayName: e,
        columnGroup: this.column,
        setExpanded: function (e) {
          t.columnController.setColumnGroupOpened(t.column.getOriginalColumnGroup(), e, "gridInitializing");
        },
        api: this.gridApi,
        columnApi: this.columnApi,
        context: this.gridOptionsWrapper.getContext()
      };
      if (!e) {
        for (var r = this.column, o = r.getLeafColumns(); r.getParent() && r.getParent().getLeafColumns().length === o.length;) {
          r = r.getParent();
        }
        var i = r.getColGroupDef();
        if (i) {
          e = i.headerName;
        }
        if (!e) {
          e = o ? this.columnController.getDisplayNameForColumn(o[0], "header", true) : "";
        }
      }
      var a = this.afterHeaderCompCreated.bind(this, e);
      this.userComponentFactory.newHeaderGroupComponent(n).then(a);
    };
    n.prototype.afterHeaderCompCreated = function (e, t) {
      var n = this;
      this.getGui().appendChild(t.getGui());
      this.addDestroyFunc(function () {
        n.getContext().destroyBean(t);
      });
      this.setupMove(t.getGui(), e);
    };
    n.prototype.addClasses = function () {
      var e = this.column.isPadding() ? "no" : "with";
      this.addCssClass("ag-header-group-cell-" + e + "-group");
    };
    n.prototype.setupMove = function (e, n) {
      var r = this;
      if (e && !this.isSuppressMoving()) {
        var o = this.column.getOriginalColumnGroup().getLeafColumns();
        var i = {
          type: exports.DragSourceType.HeaderCell,
          eElement: e,
          defaultIconName: yi.ICON_HIDE,
          dragItemName: n,
          getDragItem: this.getDragItemForGroup.bind(this),
          onDragStarted: function () {
            return o.forEach(function (e) {
              return e.setMoving(true, "uiColumnDragged");
            });
          },
          onDragStopped: function () {
            return o.forEach(function (e) {
              return e.setMoving(false, "uiColumnDragged");
            });
          }
        };
        this.dragAndDropService.addDragSource(i, true);
        this.addDestroyFunc(function () {
          return r.dragAndDropService.removeDragSource(i);
        });
      }
    };
    n.prototype.getDragItemForGroup = function () {
      var e = this.column.getOriginalColumnGroup().getLeafColumns();
      var t = {};
      e.forEach(function (e) {
        return t[e.getId()] = e.isVisible();
      });
      var n = [];
      this.columnController.getAllDisplayedColumns().forEach(function (t) {
        if (e.indexOf(t) >= 0) {
          n.push(t);
          v(e, t);
        }
      });
      e.forEach(function (e) {
        return n.push(e);
      });
      return {
        columns: n,
        visibleState: t
      };
    };
    n.prototype.isSuppressMoving = function () {
      var e = false;
      this.column.getLeafColumns().forEach(function (t) {
        if (t.getColDef().suppressMovable || t.getColDef().lockPosition) {
          e = true;
        }
      });
      return e || this.gridOptionsWrapper.isSuppressMovableColumns();
    };
    n.prototype.setupWidth = function () {
      this.addListenersToChildrenColumns();
      this.addManagedListener(this.column, Se.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
      this.onWidthChanged();
      this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));
    };
    n.prototype.onDisplayedChildrenChanged = function () {
      this.addListenersToChildrenColumns();
      this.onWidthChanged();
    };
    n.prototype.addListenersToChildrenColumns = function () {
      var e = this;
      this.removeListenersOnChildrenColumns();
      var t = this.onWidthChanged.bind(this);
      this.column.getLeafColumns().forEach(function (n) {
        n.addEventListener(Ce.EVENT_WIDTH_CHANGED, t);
        n.addEventListener(Ce.EVENT_VISIBLE_CHANGED, t);
        e.removeChildListenersFuncs.push(function () {
          n.removeEventListener(Ce.EVENT_WIDTH_CHANGED, t);
          n.removeEventListener(Ce.EVENT_VISIBLE_CHANGED, t);
        });
      });
    };
    n.prototype.removeListenersOnChildrenColumns = function () {
      this.removeChildListenersFuncs.forEach(function (e) {
        return e();
      });
      this.removeChildListenersFuncs = [];
    };
    n.prototype.onWidthChanged = function () {
      this.getGui().style.width = this.column.getActualWidth() + "px";
    };
    n.prototype.setupResize = function () {
      var e = this;
      this.eHeaderCellResize = this.getRefElement("agResize");
      if (this.column.isResizable()) {
        var t = this.horizontalResizeService.addResizeBar({
          eResizeBar: this.eHeaderCellResize,
          onResizeStart: this.onResizeStart.bind(this),
          onResizing: this.onResizing.bind(this, false),
          onResizeEnd: this.onResizing.bind(this, true)
        });
        this.addDestroyFunc(t);
        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {
          var n = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
          this.eHeaderCellResize.addEventListener("dblclick", function (t) {
            var r = [];
            e.column.getDisplayedLeafColumns().forEach(function (e) {
              if (!e.getColDef().suppressAutoSize) {
                r.push(e.getColId());
              }
            });
            if (r.length > 0) {
              e.columnController.autoSizeColumns(r, n, "uiColumnResized");
            }
          });
        }
      } else {
        mn(this.eHeaderCellResize);
      }
    };
    n.prototype.onResizeStart = function (e) {
      var t = this;
      var n = this.column.getDisplayedLeafColumns();
      this.resizeCols = n.filter(function (e) {
        return e.isResizable();
      });
      this.resizeStartWidth = 0;
      this.resizeCols.forEach(function (e) {
        return t.resizeStartWidth += e.getActualWidth();
      });
      this.resizeRatios = [];
      this.resizeCols.forEach(function (e) {
        return t.resizeRatios.push(e.getActualWidth() / t.resizeStartWidth);
      });
      var r = null;
      if (e) {
        r = this.columnController.getDisplayedGroupAfter(this.column);
      }
      if (r) {
        var o = r.getDisplayedLeafColumns();
        this.resizeTakeFromCols = o.filter(function (e) {
          return e.isResizable();
        });
        this.resizeTakeFromStartWidth = 0;
        this.resizeTakeFromCols.forEach(function (e) {
          return t.resizeTakeFromStartWidth += e.getActualWidth();
        });
        this.resizeTakeFromRatios = [];
        this.resizeTakeFromCols.forEach(function (e) {
          return t.resizeTakeFromRatios.push(e.getActualWidth() / t.resizeTakeFromStartWidth);
        });
      } else {
        this.resizeTakeFromCols = null;
        this.resizeTakeFromStartWidth = null;
        this.resizeTakeFromRatios = null;
      }
      Qt(this.getGui(), "ag-column-resizing");
    };
    n.prototype.onResizing = function (e, t) {
      var n = [];
      var r = this.normaliseDragChange(t);
      n.push({
        columns: this.resizeCols,
        ratios: this.resizeRatios,
        width: this.resizeStartWidth + r
      });
      if (this.resizeTakeFromCols) {
        n.push({
          columns: this.resizeTakeFromCols,
          ratios: this.resizeTakeFromRatios,
          width: this.resizeTakeFromStartWidth - r
        });
      }
      this.columnController.resizeColumnSets(n, e, "uiColumnDragged");
      if (e) {
        Zt(this.getGui(), "ag-column-resizing");
      }
    };
    n.prototype.normaliseDragChange = function (e) {
      var t = e;
      if (this.gridOptionsWrapper.isEnableRtl()) {
        if (this.pinned !== Ee.PINNED_LEFT) {
          t *= -1;
        }
      } else {
        if (this.pinned === Ee.PINNED_RIGHT) {
          t *= -1;
        }
      }
      return t;
    };
    n.TEMPLATE = "<div class=\"ag-header-group-cell\" role=\"columnheader\" tabindex=\"-1\">\n            <div ref=\"agResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n        </div>";
    Ls([pe("columnController")], n.prototype, "columnController", undefined);
    Ls([pe("horizontalResizeService")], n.prototype, "horizontalResizeService", undefined);
    Ls([pe("dragAndDropService")], n.prototype, "dragAndDropService", undefined);
    Ls([pe("userComponentFactory")], n.prototype, "userComponentFactory", undefined);
    Ls([pe("beans")], n.prototype, "beans", undefined);
    Ls([pe("gridApi")], n.prototype, "gridApi", undefined);
    Ls([pe("columnApi")], n.prototype, "columnApi", undefined);
    return n;
  }(Rs);
  var Bs = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Fs = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Gs = function (e) {
    function t() {
      return e.call(this, "\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>") || this;
    }
    Bs(t, e);
    t.prototype.destroy = function () {
      e.prototype.destroy.call(this);
    };
    t.prototype.init = function (e) {
      this.params = e;
      var t = this.columnController.getDisplayNameForColumn(e.column, "header", true);
      var n = this.gridOptionsWrapper.getLocaleTextFunc();
      this.eFloatingFilterText.setDisabled(true).setInputAriaLabel(t + " " + n("ariaFilterInput", "Filter Input"));
    };
    t.prototype.onParentModelChanged = function (e) {
      var t = this;
      if (e) {
        this.params.parentFilterInstance(function (n) {
          if (n.getModelAsString) {
            var r = n.getModelAsString(e);
            t.eFloatingFilterText.setValue(r);
          }
        });
      } else {
        this.eFloatingFilterText.setValue("");
      }
    };
    Fs([uo("eFloatingFilterText")], t.prototype, "eFloatingFilterText", undefined);
    Fs([pe("columnController")], t.prototype, "columnController", undefined);
    return t;
  }(so);
  var Us = function () {
    function e() {}
    e.getFloatingFilterType = function (e) {
      return this.filterToFloatingFilterMapping[e];
    };
    e.filterToFloatingFilterMapping = {
      set: "agSetColumnFloatingFilter",
      agSetColumnFilter: "agSetColumnFloatingFilter",
      multi: "agMultiColumnFloatingFilter",
      agMultiColumnFilter: "agMultiColumnFloatingFilter",
      number: "agNumberColumnFloatingFilter",
      agNumberColumnFilter: "agNumberColumnFloatingFilter",
      date: "agDateColumnFloatingFilter",
      agDateColumnFilter: "agDateColumnFloatingFilter",
      text: "agTextColumnFloatingFilter",
      agTextColumnFilter: "agTextColumnFloatingFilter"
    };
    return e;
  }();
  var Ws = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Hs = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Vs = function (e) {
    function n(t, r) {
      var o = e.call(this, n.TEMPLATE) || this;
      o.column = t;
      o.pinned = r;
      return o;
    }
    Ws(n, e);
    n.prototype.postConstruct = function () {
      e.prototype.postConstruct.call(this);
      this.setupFloatingFilter();
      this.setupWidth();
      this.setupLeftPositioning();
      this.setupColumnHover();
      this.createManagedBean(new fs([this.column], this.getGui()));
      this.addManagedListener(this.eButtonShowMainFilter, "click", this.showParentFilter.bind(this));
    };
    n.prototype.onTabKeyDown = function (e) {
      var t = document.activeElement;
      var n = this.getGui();
      if (!(t === n)) {
        e.preventDefault();
        var r = this.focusController.findNextFocusableElement(n, null, e.shiftKey);
        if (r) {
          r.focus();
        } else {
          n.focus();
        }
      }
    };
    n.prototype.handleKeyDown = function (e) {
      var t = document.activeElement;
      var n = this.getGui();
      var r = t === n;
      switch (e.keyCode) {
        case _o.UP:
        case _o.DOWN:
          if (!r) {
            e.preventDefault();
          }
        case _o.LEFT:
        case _o.RIGHT:
          if (r) {
            return;
          }
          e.stopPropagation();
        case _o.ENTER:
          if (r && this.focusController.focusInto(n)) {
            e.preventDefault();
          }
          break;
        case _o.ESCAPE:
          if (!r) {
            this.getGui().focus();
          }
      }
    };
    n.prototype.onFocusIn = function (e) {
      if (!this.getGui().contains(e.relatedTarget)) {
        var t = this.getParentComponent();
        this.beans.focusController.setFocusedHeader(t.getRowIndex(), this.getColumn());
      }
    };
    n.prototype.setupFloatingFilter = function () {
      var e = this;
      var t = this.column.getColDef();
      if (t.filter && t.floatingFilter) {
        this.floatingFilterCompPromise = this.getFloatingFilterInstance();
        if (this.floatingFilterCompPromise) {
          this.floatingFilterCompPromise.then(function (t) {
            if (t) {
              e.setupWithFloatingFilter(t);
              e.setupSyncWithFilter();
            }
          });
        }
      }
    };
    n.prototype.setupLeftPositioning = function () {
      var e = new gs(this.column, this.getGui(), this.beans);
      this.createManagedBean(e);
    };
    n.prototype.setupSyncWithFilter = function () {
      var e = this;
      var t = function (t) {
        e.onParentModelChanged(e.currentParentModel(), t);
      };
      this.addManagedListener(this.column, Ce.EVENT_FILTER_CHANGED, t);
      if (this.filterManager.isFilterActive(this.column)) {
        t(null);
      }
    };
    n.prototype.showParentFilter = function () {
      var e = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;
      this.menuFactory.showMenuAfterButtonClick(this.column, e, "filterMenuTab", ["filterMenuTab"]);
    };
    n.prototype.setupColumnHover = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
      this.onColumnHover();
    };
    n.prototype.onColumnHover = function () {
      Jt(this.getGui(), "ag-column-hover", this.columnHoverService.isHovered(this.column));
    };
    n.prototype.setupWidth = function () {
      this.addManagedListener(this.column, Ce.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
      this.onColumnWidthChanged();
    };
    n.prototype.onColumnWidthChanged = function () {
      this.getGui().style.width = this.column.getActualWidth() + "px";
    };
    n.prototype.setupWithFloatingFilter = function (e) {
      var t = this;
      var n = function () {
        t.getContext().destroyBean(e);
      };
      if (this.isAlive()) {
        this.addDestroyFunc(n);
        var r = e.getGui();
        Jt(this.eFloatingFilterBody, "ag-floating-filter-full-body", this.suppressFilterButton);
        Jt(this.eFloatingFilterBody, "ag-floating-filter-body", !this.suppressFilterButton);
        tn(this.eButtonWrapper, !this.suppressFilterButton);
        var o = Dr("filter", this.gridOptionsWrapper, this.column);
        this.eButtonShowMainFilter.appendChild(o);
        this.eFloatingFilterBody.appendChild(r);
        if (e.afterGuiAttached) {
          e.afterGuiAttached();
        }
      } else {
        n();
      }
    };
    n.prototype.parentFilterInstance = function (e) {
      var t = this.getFilterComponent();
      if (t) {
        t.then(e);
      }
    };
    n.prototype.getFilterComponent = function (e) {
      if (undefined === e) {
        e = true;
      }
      return this.filterManager.getFilterComponent(this.column, "NO_UI", e);
    };
    n.getDefaultFloatingFilterType = function (e) {
      if (null == e) {
        return null;
      }
      var n = null;
      if ("string" === typeof e.filter) {
        n = Us.getFloatingFilterType(e.filter);
      } else if (e.filterFramework) {
        ;
      } else if (true === e.filter) {
        n = Oe.isRegistered(exports.ModuleNames.SetFilterModule) ? "agSetColumnFloatingFilter" : "agTextColumnFloatingFilter";
      }
      return n;
    };
    n.prototype.getFloatingFilterInstance = function () {
      var e = this.column.getColDef();
      var t = n.getDefaultFloatingFilterType(e);
      var r = this.filterManager.createFilterParams(this.column, e);
      var o = this.userComponentFactory.createFinalParams(e, "filter", r);
      var i = {
        api: this.gridApi,
        column: this.column,
        filterParams: o,
        currentParentModel: this.currentParentModel.bind(this),
        parentFilterInstance: this.parentFilterInstance.bind(this),
        showParentFilter: this.showParentFilter.bind(this),
        onFloatingFilterChanged: this.onFloatingFilterChanged.bind(this),
        suppressFilterButton: false
      };
      this.suppressFilterButton = !!e.floatingFilterComponentParams && !!e.floatingFilterComponentParams.suppressFilterButton;
      var a = this.userComponentFactory.newFloatingFilterComponent(e, i, t);
      if (!a) {
        var s = this.userComponentFactory.createUserComponentFromConcreteClass(Gs, i);
        a = Zr.resolve(s);
      }
      return a;
    };
    n.prototype.currentParentModel = function () {
      var e = this.getFilterComponent(false);
      return e ? e.resolveNow(null, function (e) {
        return e && e.getModel();
      }) : null;
    };
    n.prototype.onParentModelChanged = function (e, t) {
      if (this.floatingFilterCompPromise) {
        this.floatingFilterCompPromise.then(function (n) {
          return n && n.onParentModelChanged(e, t);
        });
      }
    };
    n.prototype.onFloatingFilterChanged = function () {
      console.warn("AG Grid: since version 21.x, how floating filters are implemented has changed. Instead of calling params.onFloatingFilterChanged(), get a reference to the main filter via params.parentFilterInstance() and then set a value on the parent filter directly.");
    };
    n.TEMPLATE = "<div class=\"ag-header-cell\" role=\"gridcell\" tabindex=\"-1\">\n            <div class=\"ag-floating-filter-full-body\" ref=\"eFloatingFilterBody\" role=\"presentation\"></div>\n            <div class=\"ag-floating-filter-button ag-hidden\" ref=\"eButtonWrapper\" role=\"presentation\">\n                <button type=\"button\" aria-label=\"Open Filter Menu\" class=\"ag-floating-filter-button-button\" ref=\"eButtonShowMainFilter\" tabindex=\"-1\"></button>\n            </div>\n        </div>";
    Hs([pe("columnHoverService")], n.prototype, "columnHoverService", undefined);
    Hs([pe("userComponentFactory")], n.prototype, "userComponentFactory", undefined);
    Hs([pe("gridApi")], n.prototype, "gridApi", undefined);
    Hs([pe("columnApi")], n.prototype, "columnApi", undefined);
    Hs([pe("filterManager")], n.prototype, "filterManager", undefined);
    Hs([pe("menuFactory")], n.prototype, "menuFactory", undefined);
    Hs([pe("beans")], n.prototype, "beans", undefined);
    Hs([uo("eFloatingFilterBody")], n.prototype, "eFloatingFilterBody", undefined);
    Hs([uo("eButtonWrapper")], n.prototype, "eButtonWrapper", undefined);
    Hs([uo("eButtonShowMainFilter")], n.prototype, "eButtonShowMainFilter", undefined);
    return n;
  }(Rs);
  var zs = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ys = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  !function (e) {
    e[e.COLUMN_GROUP = 0] = "COLUMN_GROUP";
    e[e.COLUMN = 1] = "COLUMN";
    e[e.FLOATING_FILTER = 2] = "FLOATING_FILTER";
  }(Xa || (Xa = {}));
  var Ks;
  var qs = function (e) {
    function t(t, n, r) {
      var o = e.call(this, "<div class=\"ag-header-row\" role=\"row\"></div>") || this;
      o.headerComps = {};
      o.setRowIndex(t);
      o.type = n;
      o.pinned = r;
      var i = Xa[n].toLowerCase().replace(/_/g, "-");
      o.addCssClass("ag-header-row-" + i);
      if (Pt()) {
        o.getGui().style.transform = "translateZ(0)";
      }
      return o;
    }
    zs(t, e);
    t.prototype.forEachHeaderElement = function (e) {
      var t = this;
      Object.keys(this.headerComps).forEach(function (n) {
        e(t.headerComps[n]);
      });
    };
    t.prototype.setRowIndex = function (e) {
      this.dept = e;
      hr(this.getGui(), e + 1);
    };
    t.prototype.getRowIndex = function () {
      return this.dept;
    };
    t.prototype.getType = function () {
      return this.type;
    };
    t.prototype.destroyAllChildComponents = function () {
      var e = Object.keys(this.headerComps);
      this.destroyChildComponents(e);
    };
    t.prototype.destroyChildComponents = function (e) {
      var t = this;
      e.forEach(function (e) {
        var n = t.headerComps[e];
        t.getGui().removeChild(n.getGui());
        t.destroyBean(n);
        delete t.headerComps[e];
      });
    };
    t.prototype.onRowHeightChanged = function () {
      var e;
      var t;
      var n = this.columnController.getHeaderRowCount();
      var r = [];
      var o = 0;
      if (this.columnController.isPivotMode()) {
        e = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
        t = this.gridOptionsWrapper.getPivotHeaderHeight();
      } else {
        if (this.columnController.hasFloatingFilters()) {
          n++;
          o = 1;
        }
        e = this.gridOptionsWrapper.getGroupHeaderHeight();
        t = this.gridOptionsWrapper.getHeaderHeight();
      }
      for (var i = n - (1 + o), a = 0; a < i; a++) {
        r.push(e);
      }
      r.push(t);
      for (a = 0; a < o; a++) {
        r.push(this.gridOptionsWrapper.getFloatingFiltersHeight());
      }
      var s = 0;
      for (a = 0; a < this.dept; a++) {
        s += r[a];
      }
      this.getGui().style.top = s + "px";
      this.getGui().style.height = r[this.dept] + "px";
    };
    t.prototype.init = function () {
      this.onRowHeightChanged();
      this.onVirtualColumnsChanged();
      this.setWidth();
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
    };
    t.prototype.onColumnResized = function () {
      this.setWidth();
    };
    t.prototype.setWidth = function () {
      var e = this.getWidthForRow();
      this.getGui().style.width = e + "px";
    };
    t.prototype.getWidthForRow = function () {
      return this.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_PRINT ? o(this.pinned) ? this.columnController.getContainerWidth(Ee.PINNED_RIGHT) + this.columnController.getContainerWidth(Ee.PINNED_LEFT) + this.columnController.getContainerWidth(null) : 0 : this.columnController.getContainerWidth(this.pinned);
    };
    t.prototype.onDisplayedColumnsChanged = function () {
      this.onVirtualColumnsChanged();
      this.setWidth();
    };
    t.prototype.getColumnsInViewport = function () {
      return this.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_PRINT ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();
    };
    t.prototype.getColumnsInViewportPrintLayout = function () {
      var e = this;
      if (null != this.pinned) {
        return [];
      }
      var t = [];
      var n = this.getActualDepth();
      [Ee.PINNED_LEFT, null, Ee.PINNED_RIGHT].forEach(function (r) {
        var o = e.columnController.getVirtualHeaderGroupRow(r, n);
        t = t.concat(o);
      });
      return t;
    };
    t.prototype.getActualDepth = function () {
      return this.type == Xa.FLOATING_FILTER ? this.dept - 1 : this.dept;
    };
    t.prototype.getColumnsInViewportNormalLayout = function () {
      return this.columnController.getVirtualHeaderGroupRow(this.pinned, this.getActualDepth());
    };
    t.prototype.onVirtualColumnsChanged = function () {
      var e = this;
      var t = Object.keys(this.headerComps);
      var n = [];
      this.getColumnsInViewport().forEach(function (r) {
        if (!r.isEmptyGroup()) {
          var o = r.getUniqueId();
          var i = e.getGui();
          var a = e.headerComps[o];
          if (a && a.getColumn() != r) {
            e.destroyChildComponents([o]);
            v(t, o);
            a = undefined;
          }
          if (a) {
            v(t, o);
          } else {
            var s = e.createHeaderComp(r);
            e.headerComps[o] = s;
            i.appendChild(s.getGui());
          }
          n.push(o);
        }
      });
      t.filter(function (t) {
        var n = e.headerComps[t];
        return !!e.focusController.isHeaderWrapperFocused(n) && e.columnController.isDisplayed(n.getColumn());
      }).forEach(function (e) {
        v(t, e);
        n.push(e);
      });
      this.destroyChildComponents(t);
      if (this.gridOptionsWrapper.isEnsureDomOrder()) {
        var r = n.map(function (t) {
          return e.headerComps[t].getGui();
        });
        En(this.getGui(), r);
      }
    };
    t.prototype.createHeaderComp = function (e) {
      var t;
      switch (this.type) {
        case Xa.COLUMN_GROUP:
          t = new Ps(e, this.pinned);
          break;
        case Xa.FLOATING_FILTER:
          t = new Vs(e, this.pinned);
          break;
        default:
          t = new Ds(e, this.pinned);
      }
      this.createBean(t);
      t.setParentComponent(this);
      return t;
    };
    t.prototype.getHeaderComps = function () {
      return this.headerComps;
    };
    Ys([pe("columnController")], t.prototype, "columnController", undefined);
    Ys([pe("focusController")], t.prototype, "focusController", undefined);
    Ys([ue], t.prototype, "destroyAllChildComponents", null);
    Ys([le], t.prototype, "init", null);
    return t;
  }(so);
  var Xs = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Qs = function () {
    function e(e, t) {
      this.needToMoveLeft = false;
      this.needToMoveRight = false;
      this.pinned = e;
      this.eContainer = t;
      this.centerContainer = !r(e);
    }
    e.prototype.init = function () {
      var e = this;
      this.logger = this.loggerFactory.create("MoveColumnController");
      this.controllersService.whenReady(function () {
        e.gridBodyCon = e.controllersService.getGridBodyController();
      });
    };
    e.prototype.getIconName = function () {
      return this.pinned ? yi.ICON_PINNED : yi.ICON_MOVE;
    };
    e.prototype.onDragEnter = function (e) {
      var n = e.dragItem.columns;
      if (e.dragSource.type === exports.DragSourceType.ToolPanel) {
        this.setColumnsVisible(n, true, "uiColumnDragged");
      } else {
        var r = e.dragItem.visibleState;
        var o = (n || []).filter(function (e) {
          return r[e.getId()];
        });
        this.setColumnsVisible(o, true, "uiColumnDragged");
      }
      this.setColumnsPinned(n, this.pinned, "uiColumnDragged");
      this.onDragging(e, true);
    };
    e.prototype.onDragLeave = function (e) {
      if (!this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns() && !e.fromNudge) {
        var t = e.dragSource.getDragItem().columns;
        this.setColumnsVisible(t, false, "uiColumnDragged");
      }
      this.ensureIntervalCleared();
    };
    e.prototype.setColumnsVisible = function (e, t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (e) {
        var r = e.filter(function (e) {
          return !e.getColDef().lockVisible;
        });
        this.columnController.setColumnsVisible(r, t, n);
      }
    };
    e.prototype.setColumnsPinned = function (e, t, n) {
      if (undefined === n) {
        n = "api";
      }
      if (e) {
        var r = e.filter(function (e) {
          return !e.getColDef().lockPinned;
        });
        this.columnController.setColumnsPinned(r, t, n);
      }
    };
    e.prototype.onDragStop = function () {
      this.ensureIntervalCleared();
    };
    e.prototype.normaliseX = function (e) {
      if (this.gridOptionsWrapper.isEnableRtl()) {
        e = this.eContainer.clientWidth - e;
      }
      if (this.centerContainer) {
        e += this.controllersService.getCenterRowContainerCon().getCenterViewportScrollLeft();
      }
      return e;
    };
    e.prototype.checkCenterForScrolling = function (e) {
      if (this.centerContainer) {
        var t = this.controllersService.getCenterRowContainerCon().getCenterViewportScrollLeft();
        var n = t + this.controllersService.getCenterRowContainerCon().getCenterWidth();
        if (this.gridOptionsWrapper.isEnableRtl()) {
          this.needToMoveRight = e < t + 50;
          this.needToMoveLeft = e > n - 50;
        } else {
          this.needToMoveLeft = e < t + 50;
          this.needToMoveRight = e > n - 50;
        }
        if (this.needToMoveLeft || this.needToMoveRight) {
          this.ensureIntervalStarted();
        } else {
          this.ensureIntervalCleared();
        }
      }
    };
    e.prototype.onDragging = function (e, t) {
      var n = this;
      if (undefined === t) {
        t = false;
      }
      this.lastDraggingEvent = e;
      if (!o(e.hDirection)) {
        var r = this.normaliseX(e.x);
        if (!t) {
          this.checkCenterForScrolling(r);
        }
        var i = this.normaliseDirection(e.hDirection);
        var a = e.dragSource.type;
        var s = e.dragSource.getDragItem().columns;
        s = s.filter(function (e) {
          return !e.getColDef().lockPinned || e.getPinned() == n.pinned;
        });
        this.attemptMoveColumns(a, s, i, r, t);
      }
    };
    e.prototype.normaliseDirection = function (e) {
      if (!this.gridOptionsWrapper.isEnableRtl()) {
        return e;
      }
      switch (e) {
        case exports.HorizontalDirection.Left:
          return exports.HorizontalDirection.Right;
        case exports.HorizontalDirection.Right:
          return exports.HorizontalDirection.Left;
        default:
          console.error("AG Grid: Unknown direction " + e);
      }
    };
    e.prototype.calculateOldIndex = function (e) {
      var t = this.columnController.getAllGridColumns();
      var n = _(e.map(function (e) {
        return t.indexOf(e);
      }));
      var r = n[0];
      return m(n) - r !== n.length - 1 ? null : r;
    };
    e.prototype.attemptMoveColumns = function (e, n, r, o, i) {
      var a = r === exports.HorizontalDirection.Left;
      var s = r === exports.HorizontalDirection.Right;
      var c = n.slice();
      this.columnController.sortColumnsLikeGridColumns(c);
      var l = this.calculateValidMoves(c, s, o);
      var u = this.calculateOldIndex(c);
      if (0 !== l.length) {
        var d = l[0];
        var p = null !== u && !i;
        if (e == exports.DragSourceType.HeaderCell) {
          p = null !== u;
        }
        if (p) {
          if (a && d >= u) {
            return;
          }
          if (s && d <= u) {
            return;
          }
        }
        for (var f = 0; f < l.length; f++) {
          var h = l[f];
          if (this.columnController.doesMovePassRules(c, h)) {
            return void this.columnController.moveColumns(c, h, "uiColumnDragged");
          }
        }
      }
    };
    e.prototype.calculateValidMoves = function (e, t, n) {
      if (this.gridOptionsWrapper.isSuppressMovableColumns() || e.some(function (e) {
        return e.getColDef().suppressMovable;
      })) {
        return [];
      }
      var r;
      var o = this.columnController.getDisplayedColumns(this.pinned);
      var i = this.columnController.getAllGridColumns();
      var a = o.filter(function (t) {
        return O(e, t);
      });
      var s = o.filter(function (t) {
        return !O(e, t);
      });
      var c = i.filter(function (t) {
        return !O(e, t);
      });
      var l = 0;
      var u = n;
      if (t) {
        var d = 0;
        a.forEach(function (e) {
          return d += e.getActualWidth();
        });
        u -= d;
      }
      if (u > 0) {
        for (var p = 0; p < s.length; p++) {
          if ((u -= s[p].getActualWidth()) < 0) {
            break;
          }
          l++;
        }
        if (t) {
          l++;
        }
      }
      if (l > 0) {
        var f = s[l - 1];
        r = c.indexOf(f) + 1;
      } else if (-1 === (r = c.indexOf(s[0]))) {
        r = 0;
      }
      var h = [r];
      var m = function (e, t) {
        return e - t;
      };
      if (t) {
        for (var g = r + 1, _ = i.length - 1; g <= _;) {
          h.push(g);
          g++;
        }
        h.sort(m);
      } else {
        g = r;
        _ = i.length - 1;
        for (var v = i[g]; g <= _ && this.isColumnHidden(o, v);) {
          g++;
          h.push(g);
          v = i[g];
        }
        g = r - 1;
        for (; g >= 0;) {
          h.push(g);
          g--;
        }
        h.sort(m).reverse();
      }
      return h;
    };
    e.prototype.isColumnHidden = function (e, t) {
      return e.indexOf(t) < 0;
    };
    e.prototype.ensureIntervalStarted = function () {
      if (!this.movingIntervalId) {
        this.intervalCount = 0;
        this.failedMoveAttempts = 0;
        this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
        if (this.needToMoveLeft) {
          this.dragAndDropService.setGhostIcon(yi.ICON_LEFT, true);
        } else {
          this.dragAndDropService.setGhostIcon(yi.ICON_RIGHT, true);
        }
      }
    };
    e.prototype.ensureIntervalCleared = function () {
      if (this.movingIntervalId) {
        window.clearInterval(this.movingIntervalId);
        this.movingIntervalId = null;
        this.dragAndDropService.setGhostIcon(yi.ICON_MOVE);
      }
    };
    e.prototype.moveInterval = function () {
      var e;
      this.intervalCount++;
      if ((e = 10 + 5 * this.intervalCount) > 100) {
        e = 100;
      }
      var t = null;
      var n = this.gridBodyCon.getScrollFeature();
      if (this.needToMoveLeft) {
        t = n.scrollHorizontally(-e);
      } else {
        if (this.needToMoveRight) {
          t = n.scrollHorizontally(e);
        }
      }
      if (0 !== t) {
        this.onDragging(this.lastDraggingEvent);
        this.failedMoveAttempts = 0;
      } else {
        this.failedMoveAttempts++;
        var r = this.lastDraggingEvent.dragItem.columns.filter(function (e) {
          return !e.getColDef().lockPinned;
        });
        if (r.length > 0 && (this.dragAndDropService.setGhostIcon(yi.ICON_PINNED), this.failedMoveAttempts > 7)) {
          var o = this.needToMoveLeft ? Ee.PINNED_LEFT : Ee.PINNED_RIGHT;
          this.setColumnsPinned(r, o, "uiColumnDragged");
          this.dragAndDropService.nudge();
        }
      }
    };
    Xs([pe("loggerFactory")], e.prototype, "loggerFactory", undefined);
    Xs([pe("columnController")], e.prototype, "columnController", undefined);
    Xs([pe("dragAndDropService")], e.prototype, "dragAndDropService", undefined);
    Xs([pe("gridOptionsWrapper")], e.prototype, "gridOptionsWrapper", undefined);
    Xs([pe("controllersService")], e.prototype, "controllersService", undefined);
    Xs([le], e.prototype, "init", null);
    return e;
  }();
  var Zs = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Js = function () {
    function e(e) {
      this.columnsToAggregate = [];
      this.columnsToGroup = [];
      this.columnsToPivot = [];
      this.pinned = e;
    }
    e.prototype.onDragEnter = function (e) {
      var t = this;
      this.clearColumnsList();
      if (!this.gridOptionsWrapper.isFunctionsReadOnly()) {
        var n = e.dragItem.columns;
        if (n) {
          n.forEach(function (e) {
            if (e.isPrimary()) {
              if (!e.isAnyFunctionActive()) {
                if (e.isAllowValue()) {
                  t.columnsToAggregate.push(e);
                } else {
                  if (e.isAllowRowGroup()) {
                    t.columnsToGroup.push(e);
                  } else {
                    if (e.isAllowPivot()) {
                      t.columnsToPivot.push(e);
                    }
                  }
                }
              }
            }
          });
        }
      }
    };
    e.prototype.getIconName = function () {
      return this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length > 0 ? this.pinned ? yi.ICON_PINNED : yi.ICON_MOVE : null;
    };
    e.prototype.onDragLeave = function (e) {
      this.clearColumnsList();
    };
    e.prototype.clearColumnsList = function () {
      this.columnsToAggregate.length = 0;
      this.columnsToGroup.length = 0;
      this.columnsToPivot.length = 0;
    };
    e.prototype.onDragging = function (e) {};
    e.prototype.onDragStop = function (e) {
      if (this.columnsToAggregate.length > 0) {
        this.columnController.addValueColumns(this.columnsToAggregate, "toolPanelDragAndDrop");
      }
      if (this.columnsToGroup.length > 0) {
        this.columnController.addRowGroupColumns(this.columnsToGroup, "toolPanelDragAndDrop");
      }
      if (this.columnsToPivot.length > 0) {
        this.columnController.addPivotColumns(this.columnsToPivot, "toolPanelDragAndDrop");
      }
    };
    Zs([pe("columnController")], e.prototype, "columnController", undefined);
    Zs([pe("gridOptionsWrapper")], e.prototype, "gridOptionsWrapper", undefined);
    return e;
  }();
  var $s = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ec = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  !function (e) {
    e[e.ColumnMove = 0] = "ColumnMove";
    e[e.Pivot = 1] = "Pivot";
  }(Ks || (Ks = {}));
  var tc;
  var nc = function (e) {
    function n(t, n) {
      var r = e.call(this) || this;
      r.dropListeners = {};
      r.pinned = t;
      r.eContainer = n;
      return r;
    }
    $s(n, e);
    n.prototype.postConstruct = function () {
      var e = this;
      this.controllersService.whenReady(function (t) {
        var n;
        switch (e.pinned) {
          case Ee.PINNED_LEFT:
            n = [t.leftRowContainerCon, t.bottomLeftRowContainerCon, t.topLeftRowContainerCon];
            break;
          case Ee.PINNED_RIGHT:
            n = [t.rightRowContainerCon, t.bottomRightRowContainerCon, t.topRightRowContainerCon];
            break;
          default:
            n = [t.centerRowContainerCon, t.bottomCenterRowContainerCon, t.topCenterRowContainerCon];
        }
        e.eSecondaryContainers = n.map(function (e) {
          return e.getContainerElement();
        });
      });
    };
    n.prototype.isInterestedIn = function (e) {
      return e === exports.DragSourceType.HeaderCell || e === exports.DragSourceType.ToolPanel && this.gridOptionsWrapper.isAllowDragFromColumnsToolPanel();
    };
    n.prototype.getSecondaryContainers = function () {
      return this.eSecondaryContainers;
    };
    n.prototype.getContainer = function () {
      return this.eContainer;
    };
    n.prototype.init = function () {
      this.moveColumnController = this.createBean(new Qs(this.pinned, this.eContainer));
      var e = new Js(this.pinned);
      this.createBean(e);
      this.dropListeners[Ks.ColumnMove] = this.moveColumnController;
      this.dropListeners[Ks.Pivot] = e;
      this.dragAndDropService.addDropTarget(this);
    };
    n.prototype.getIconName = function () {
      return this.currentDropListener.getIconName();
    };
    n.prototype.getDropType = function (e) {
      return this.columnController.isPivotMode() && e.dragSource.type === exports.DragSourceType.ToolPanel ? Ks.Pivot : Ks.ColumnMove;
    };
    n.prototype.onDragEnter = function (e) {
      var t = this.getDropType(e);
      this.currentDropListener = this.dropListeners[t];
      this.currentDropListener.onDragEnter(e);
    };
    n.prototype.onDragLeave = function (e) {
      this.currentDropListener.onDragLeave(e);
    };
    n.prototype.onDragging = function (e) {
      this.currentDropListener.onDragging(e);
    };
    n.prototype.onDragStop = function (e) {
      this.currentDropListener.onDragStop(e);
    };
    ec([pe("dragAndDropService")], n.prototype, "dragAndDropService", undefined);
    ec([pe("columnController")], n.prototype, "columnController", undefined);
    ec([pe("controllersService")], n.prototype, "controllersService", undefined);
    ec([le], n.prototype, "postConstruct", null);
    ec([le], n.prototype, "init", null);
    return n;
  }(We);
  var rc = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var oc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var ic = function (e) {
    function t(t, n, r) {
      var o = e.call(this) || this;
      o.groupsRowComps = [];
      o.eContainer = t;
      o.pinned = r;
      o.eViewport = n;
      return o;
    }
    rc(t, e);
    t.prototype.forEachHeaderElement = function (e) {
      if (this.groupsRowComps) {
        this.groupsRowComps.forEach(function (t) {
          return t.forEachHeaderElement(e);
        });
      }
      if (this.columnsRowComp) {
        this.columnsRowComp.forEachHeaderElement(e);
      }
      if (this.filtersRowComp) {
        this.filtersRowComp.forEachHeaderElement(e);
      }
    };
    t.prototype.init = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));
      this.setupDragAndDrop();
    };
    t.prototype.onColumnResized = function () {
      this.setWidthOfPinnedContainer();
    };
    t.prototype.onDisplayedColumnsChanged = function () {
      this.setWidthOfPinnedContainer();
    };
    t.prototype.onScrollVisibilityChanged = function () {
      this.setWidthOfPinnedContainer();
    };
    t.prototype.onScrollbarWidthChanged = function () {
      this.setWidthOfPinnedContainer();
    };
    t.prototype.setWidthOfPinnedContainer = function () {
      var e = this.pinned === Ee.PINNED_LEFT;
      var t = this.pinned === Ee.PINNED_RIGHT;
      var n = this.columnController;
      var r = this.gridOptionsWrapper.isEnableRtl();
      var o = this.gridOptionsWrapper.getScrollbarWidth();
      if (e || t) {
        var i = n[e ? "getDisplayedColumnsLeftWidth" : "getDisplayedColumnsRightWidth"]();
        if (this.scrollVisibleService.isVerticalScrollShowing() && (r && e || !r && t)) {
          i += o;
        }
        In(this.eContainer, i);
      }
    };
    t.prototype.getRowComps = function () {
      var e = [];
      if (this.groupsRowComps) {
        e = e.concat(this.groupsRowComps);
      }
      if (this.columnsRowComp) {
        e.push(this.columnsRowComp);
      }
      if (this.filtersRowComp) {
        e.push(this.filtersRowComp);
      }
      return e;
    };
    t.prototype.onGridColumnsChanged = function () {
      this.refresh(true);
    };
    t.prototype.refresh = function (e) {
      if (undefined === e) {
        e = false;
      }
      this.refreshRowComps(e);
    };
    t.prototype.setupDragAndDrop = function () {
      var e = this.eViewport ? this.eViewport : this.eContainer;
      var t = new nc(this.pinned, e);
      this.createManagedBean(t);
    };
    t.prototype.destroyRowComps = function (e) {
      if (undefined === e) {
        e = false;
      }
      this.groupsRowComps.forEach(this.destroyRowComp.bind(this));
      this.groupsRowComps = [];
      this.destroyRowComp(this.filtersRowComp);
      this.filtersRowComp = undefined;
      if (!e) {
        this.destroyRowComp(this.columnsRowComp);
        this.columnsRowComp = undefined;
      }
    };
    t.prototype.destroyRowComp = function (e) {
      if (e) {
        this.destroyBean(e);
        this.eContainer.removeChild(e.getGui());
      }
    };
    t.prototype.refreshRowComps = function (e) {
      var t = this;
      if (undefined === e) {
        e = false;
      }
      var n = new Xr();
      !function () {
        var e = t.columnController.getHeaderRowCount() - 1;
        t.groupsRowComps.forEach(t.destroyRowComp.bind(t));
        t.groupsRowComps = [];
        for (var r = 0; r < e; r++) {
          var o = t.createBean(new qs(n.next(), Xa.COLUMN_GROUP, t.pinned));
          t.groupsRowComps.push(o);
        }
      }();
      (function () {
        var r = n.next();
        if (t.columnsRowComp) {
          var o = t.columnsRowComp.getRowIndex() !== r;
          if (!(e && !o)) {
            t.destroyRowComp(t.columnsRowComp);
            t.columnsRowComp = undefined;
          }
        }
        if (!t.columnsRowComp) {
          t.columnsRowComp = t.createBean(new qs(r, Xa.COLUMN, t.pinned));
        }
      })();
      (function () {
        var r = function () {
          t.destroyRowComp(t.filtersRowComp);
          t.filtersRowComp = undefined;
        };
        if (!t.columnController.isPivotMode() && t.columnController.hasFloatingFilters()) {
          var o = n.next();
          if (t.filtersRowComp) {
            var i = t.filtersRowComp.getRowIndex() !== o;
            if (!(e && !i)) {
              r();
            }
          }
          if (!t.filtersRowComp) {
            t.filtersRowComp = t.createBean(new qs(o, Xa.FLOATING_FILTER, t.pinned));
          }
        } else {
          r();
        }
      })();
      this.getRowComps().forEach(function (e) {
        return t.eContainer.appendChild(e.getGui());
      });
    };
    oc([pe("columnController")], t.prototype, "columnController", undefined);
    oc([pe("scrollVisibleService")], t.prototype, "scrollVisibleService", undefined);
    oc([le], t.prototype, "init", null);
    oc([ue], t.prototype, "destroyRowComps", null);
    return t;
  }(We);
  var ac = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var sc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  (tc = exports.HeaderNavigationDirection || (exports.HeaderNavigationDirection = {}))[tc.UP = 0] = "UP";
  tc[tc.DOWN = 1] = "DOWN";
  tc[tc.LEFT = 2] = "LEFT";
  tc[tc.RIGHT = 3] = "RIGHT";
  var cc;
  var lc = function (e) {
    function n() {
      return null !== e && e.apply(this, arguments) || this;
    }
    ac(n, e);
    n.prototype.postConstruct = function () {
      var e = this;
      this.controllersService.whenReady(function (t) {
        e.gridBodyCon = t.gridBodyCon;
      });
    };
    n.prototype.registerHeaderRoot = function (e) {
      this.headerRoot = e;
    };
    n.prototype.getHeaderRowCount = function () {
      return 0 === this.headerRoot.getHeaderContainers().size ? 0 : this.getHeaderContainer().getRowComps().length;
    };
    n.prototype.getHeaderRowType = function (e) {
      if (this.getHeaderRowCount()) {
        return this.getHeaderContainer().getRowComps()[e].getType();
      }
    };
    n.prototype.getHeaderContainer = function (e) {
      if (undefined === e) {
        e = "center";
      }
      if (null === e) {
        e = "center";
      }
      return this.headerRoot.getHeaderContainers().get(e);
    };
    n.prototype.navigateVertically = function (e, n, r) {
      if (!n) {
        n = this.focusController.getFocusedHeader();
      }
      if (!n) {
        return false;
      }
      var o = n.headerRowIndex;
      var i = n.column;
      var a = this.getHeaderRowCount();
      var s = e === exports.HeaderNavigationDirection.UP;
      var c = s ? o - 1 : o + 1;
      var l = null;
      var u = false;
      if (c < 0) {
        c = 0;
        l = i;
        u = true;
      }
      if (c >= a) {
        c = -1;
      }
      var d = this.getHeaderRowType(o);
      if (!u) {
        if (d === Xa.COLUMN_GROUP) {
          var p = i;
          l = s ? i.getParent() : p.getDisplayedChildren()[0];
        } else if (d === Xa.FLOATING_FILTER) {
          l = i;
        } else {
          p = i;
          l = s ? p.getParent() : p;
        }
        if (!l) {
          return false;
        }
      }
      return this.focusController.focusHeaderPosition({
        headerRowIndex: c,
        column: l
      }, undefined, false, true, r);
    };
    n.prototype.navigateHorizontally = function (e, n, r) {
      if (undefined === n) {
        n = false;
      }
      var o;
      var i;
      var a = this.focusController.getFocusedHeader();
      if (e === exports.HeaderNavigationDirection.LEFT !== this.gridOptionsWrapper.isEnableRtl()) {
        i = "Before";
        o = this.headerPositionUtils.findHeader(a, i);
      } else {
        i = "After";
        o = this.headerPositionUtils.findHeader(a, i);
      }
      return o ? this.focusController.focusHeaderPosition(o, i, n, true, r) : !n || this.focusNextHeaderRow(a, i, r);
    };
    n.prototype.focusNextHeaderRow = function (e, t, n) {
      var r;
      var o = e.headerRowIndex;
      var i = null;
      if ("Before" === t) {
        if (o > 0) {
          r = o - 1;
          i = this.headerPositionUtils.findColAtEdgeForHeaderRow(r, "end");
        }
      } else {
        r = o + 1;
        i = this.headerPositionUtils.findColAtEdgeForHeaderRow(r, "start");
      }
      return this.focusController.focusHeaderPosition(i, t, true, true, n);
    };
    n.prototype.scrollToColumn = function (e, t) {
      if (undefined === t) {
        t = "After";
      }
      if (!e.getPinned()) {
        var n;
        if (e instanceof Se) {
          var r = e.getDisplayedLeafColumns();
          n = "Before" === t ? m(r) : r[0];
        } else {
          n = e;
        }
        this.gridBodyCon.getScrollFeature().ensureColumnVisible(n);
        this.gridBodyCon.getScrollFeature().horizontallyScrollHeaderCenterAndFloatingCenter();
        this.animationFrameService.flushAllFrames();
      }
    };
    sc([pe("focusController")], n.prototype, "focusController", undefined);
    sc([pe("headerPositionUtils")], n.prototype, "headerPositionUtils", undefined);
    sc([pe("animationFrameService")], n.prototype, "animationFrameService", undefined);
    sc([pe("controllersService")], n.prototype, "controllersService", undefined);
    sc([le], n.prototype, "postConstruct", null);
    return n = sc([de("headerNavigationService")], n);
  }(We);
  var uc = function () {
    function e() {}
    e.BACKSPACE = "Backspace";
    e.TAB = "Tab";
    e.ENTER = "Enter";
    e.SHIFT = "Shift";
    e.ESCAPE = "Escape";
    e.SPACE = " ";
    e.LEFT = "ArrowLeft";
    e.UP = "ArrowUp";
    e.RIGHT = "ArrowRight";
    e.DOWN = "ArrowDown";
    e.DELETE = "Delete";
    e.NUM_PAD_DELETE = "Del";
    e.A = "a";
    e.C = "c";
    e.V = "v";
    e.D = "d";
    e.Z = "z";
    e.Y = "y";
    e.F2 = "F2";
    e.PAGE_UP = "PageUp";
    e.PAGE_DOWN = "PageDown";
    e.PAGE_HOME = "Home";
    e.PAGE_END = "End";
    return e;
  }();
  var dc = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var pc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var fc = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.callback = t;
      return n;
    }
    dc(t, e);
    t.prototype.postConstruct = function () {
      var e = this.setWidth.bind(this);
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_DOM_LAYOUT, e);
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, e);
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, e);
      this.setWidth();
    };
    t.prototype.setWidth = function () {
      var e = this.columnController;
      var t = this.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_PRINT;
      var n = e.getBodyContainerWidth();
      var r = e.getDisplayedColumnsLeftWidth();
      var o = e.getDisplayedColumnsRightWidth();
      var i = t ? n + r + o : n;
      this.callback(i);
    };
    pc([pe("columnController")], t.prototype, "columnController", undefined);
    pc([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var hc = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var mc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var gc = function (e) {
    function n() {
      var t = e.call(this, n.TEMPLATE) || this;
      t.headerContainers = new Map();
      return t;
    }
    hc(n, e);
    n.prototype.postConstruct = function () {
      var t = this;
      e.prototype.postConstruct.call(this);
      this.printLayout = this.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_PRINT;
      this.gridApi.registerHeaderRootComp(this);
      this.autoWidthCalculator.registerHeaderRootComp(this);
      this.registerHeaderContainer(new ic(this.eHeaderContainer, this.eHeaderViewport, null), "center");
      this.registerHeaderContainer(new ic(this.ePinnedLeftHeader, null, Ee.PINNED_LEFT), "left");
      this.registerHeaderContainer(new ic(this.ePinnedRightHeader, null, Ee.PINNED_RIGHT), "right");
      this.headerContainers.forEach(function (e) {
        return t.createManagedBean(e);
      });
      this.headerNavigationService.registerHeaderRoot(this);
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_LEFT_PINNED_WIDTH_CHANGED, this.onPinnedLeftWidthChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_RIGHT_PINNED_WIDTH_CHANGED, this.onPinnedRightWidthChanged.bind(this));
      this.onPivotModeChanged();
      this.addPreventHeaderScroll();
      this.createManagedBean(new fc(function (e) {
        return t.eHeaderContainer.style.width = e + "px";
      }));
      if (this.columnController.isReady()) {
        this.refreshHeader();
      }
      this.setupHeaderHeight();
      this.controllersService.registerHeaderRootComp(this);
    };
    n.prototype.setupHeaderHeight = function () {
      var e = this.setHeaderHeight.bind(this);
      e();
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_HEADER_HEIGHT, e);
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_PIVOT_HEADER_HEIGHT, e);
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_GROUP_HEADER_HEIGHT, e);
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_PIVOT_GROUP_HEADER_HEIGHT, e);
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_FLOATING_FILTERS_HEIGHT, e);
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, e);
    };
    n.prototype.registerHeaderContainer = function (e, t) {
      this.headerContainers.set(t, e);
    };
    n.prototype.onTabKeyDown = function (e) {
      var n = this.gridOptionsWrapper.isEnableRtl();
      var r = e.shiftKey !== n ? exports.HeaderNavigationDirection.LEFT : exports.HeaderNavigationDirection.RIGHT;
      if (this.headerNavigationService.navigateHorizontally(r, true, e) || this.focusController.focusNextGridCoreContainer(e.shiftKey)) {
        e.preventDefault();
      }
    };
    n.prototype.handleKeyDown = function (e) {
      var n = null;
      switch (e.key) {
        case uc.LEFT:
          n = exports.HeaderNavigationDirection.LEFT;
        case uc.RIGHT:
          if (!r(n)) {
            n = exports.HeaderNavigationDirection.RIGHT;
          }
          this.headerNavigationService.navigateHorizontally(n, false, e);
          break;
        case uc.UP:
          n = exports.HeaderNavigationDirection.UP;
        case uc.DOWN:
          if (!r(n)) {
            n = exports.HeaderNavigationDirection.DOWN;
          }
          if (this.headerNavigationService.navigateVertically(n, null, e)) {
            e.preventDefault();
          }
          break;
        default:
          return;
      }
    };
    n.prototype.onFocusOut = function (e) {
      var t = e.relatedTarget;
      var n = this.getGui();
      if (!(!t && n.contains(document.activeElement) || n.contains(t))) {
        this.focusController.clearFocusedHeader();
      }
    };
    n.prototype.onDomLayoutChanged = function () {
      var e = this.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_PRINT;
      if (this.printLayout !== e) {
        this.printLayout = e;
        this.refreshHeader();
      }
    };
    n.prototype.setHorizontalScroll = function (e) {
      this.eHeaderContainer.style.transform = "translateX(" + e + "px)";
    };
    n.prototype.forEachHeaderElement = function (e) {
      this.headerContainers.forEach(function (t) {
        return t.forEachHeaderElement(e);
      });
    };
    n.prototype.refreshHeader = function () {
      this.headerContainers.forEach(function (e) {
        return e.refresh();
      });
    };
    n.prototype.onPivotModeChanged = function () {
      var e = this.columnController.isPivotMode();
      Jt(this.getGui(), "ag-pivot-on", e);
      Jt(this.getGui(), "ag-pivot-off", !e);
    };
    n.prototype.setHeaderHeight = function () {
      var e;
      var t;
      var n;
      var r = this.columnController;
      var o = this.gridOptionsWrapper;
      var i = 0;
      var a = r.getHeaderRowCount();
      if (r.isPivotMode()) {
        t = o.getPivotGroupHeaderHeight();
        n = o.getPivotHeaderHeight();
      } else {
        if (r.hasFloatingFilters()) {
          a++;
          i = 1;
        }
        t = o.getGroupHeaderHeight();
        n = o.getHeaderHeight();
      }
      var s = a - (1 + i);
      e = i * o.getFloatingFiltersHeight();
      e += s * t;
      var c = (e += n) + 1 + "px";
      this.getGui().style.height = c;
      this.getGui().style.minHeight = c;
    };
    n.prototype.addPreventHeaderScroll = function () {
      var e = this;
      this.addManagedListener(this.eHeaderViewport, "scroll", function () {
        var t = e.eHeaderViewport.scrollLeft;
        if (0 !== t) {
          e.controllersService.getGridBodyController().getScrollFeature().scrollHorizontally(t);
          e.eHeaderViewport.scrollLeft = 0;
        }
      });
    };
    n.prototype.getHeaderContainers = function () {
      return this.headerContainers;
    };
    n.prototype.onPinnedLeftWidthChanged = function () {
      var e = this.pinnedWidthService.getPinnedLeftWidth() > 0;
      tn(this.ePinnedLeftHeader, e);
    };
    n.prototype.onPinnedRightWidthChanged = function () {
      var e = this.pinnedWidthService.getPinnedRightWidth() > 0;
      tn(this.ePinnedRightHeader, e);
    };
    n.TEMPLATE = "<div class=\"ag-header\" role=\"presentation\">\n            <div class=\"ag-pinned-left-header\" ref=\"ePinnedLeftHeader\" role=\"presentation\"></div>\n            <div class=\"ag-header-viewport\" ref=\"eHeaderViewport\" role=\"presentation\">\n                <div class=\"ag-header-container\" ref=\"eHeaderContainer\" role=\"rowgroup\"></div>\n            </div>\n            <div class=\"ag-pinned-right-header\" ref=\"ePinnedRightHeader\" role=\"presentation\"></div>\n        </div>";
    mc([uo("ePinnedLeftHeader")], n.prototype, "ePinnedLeftHeader", undefined);
    mc([uo("ePinnedRightHeader")], n.prototype, "ePinnedRightHeader", undefined);
    mc([uo("eHeaderContainer")], n.prototype, "eHeaderContainer", undefined);
    mc([uo("eHeaderViewport")], n.prototype, "eHeaderViewport", undefined);
    mc([pe("columnController")], n.prototype, "columnController", undefined);
    mc([pe("gridApi")], n.prototype, "gridApi", undefined);
    mc([pe("autoWidthCalculator")], n.prototype, "autoWidthCalculator", undefined);
    mc([pe("headerNavigationService")], n.prototype, "headerNavigationService", undefined);
    mc([pe("pinnedWidthService")], n.prototype, "pinnedWidthService", undefined);
    mc([pe("controllersService")], n.prototype, "controllersService", undefined);
    return n;
  }(So);
  var _c = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var vc = function () {
    return (vc = Object.assign || function (e) {
      for (var t, n = 1, r = arguments.length; n < r; n++) {
        for (var o in t = arguments[n]) if (Object.prototype.hasOwnProperty.call(t, o)) {
          e[o] = t[o];
        }
      }
      return e;
    }).apply(this, arguments);
  };
  var bc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var yc = function (e) {
    function n() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.allAdvancedFilters = new Map();
      t.activeAdvancedFilters = [];
      t.quickFilter = null;
      t.quickFilterParts = null;
      t.processingFilterChange = false;
      return t;
    }
    var o;
    _c(n, e);
    o = n;
    n.prototype.init = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_ROW_DATA_CHANGED, this.onNewRowsLoaded.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
      this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());
      this.setQuickFilterParts();
      this.allowShowChangeAfterFilter = this.gridOptionsWrapper.isAllowShowChangeAfterFilter();
    };
    n.prototype.setQuickFilterParts = function () {
      this.quickFilterParts = this.quickFilter ? this.quickFilter.split(" ") : null;
    };
    n.prototype.setFilterModel = function (e) {
      var t = this;
      var n = [];
      if (e) {
        var r = Vr(Object.keys(e));
        this.allAdvancedFilters.forEach(function (o, i) {
          var a = e[i];
          n.push(t.setModelOnFilterWrapper(o.filterPromise, a));
          r.delete(i);
        });
        r.forEach(function (r) {
          var o = t.columnController.getPrimaryColumn(r);
          if (o) {
            var i = t.getOrCreateFilterWrapper(o, "NO_UI");
            n.push(t.setModelOnFilterWrapper(i.filterPromise, e[r]));
          } else {
            console.warn("Warning ag-grid setFilterModel - no column found for colId " + r);
          }
        });
      } else {
        this.allAdvancedFilters.forEach(function (e) {
          n.push(t.setModelOnFilterWrapper(e.filterPromise, null));
        });
      }
      Zr.all(n).then(function () {
        return t.onFilterChanged();
      });
    };
    n.prototype.setModelOnFilterWrapper = function (e, t) {
      return new Zr(function (n) {
        e.then(function (e) {
          if ("function" !== typeof e.setModel) {
            console.warn("Warning ag-grid - filter missing setModel method, which is needed for setFilterModel");
            n();
          }
          (e.setModel(t) || Zr.resolve()).then(function () {
            return n();
          });
        });
      });
    };
    n.prototype.getFilterModel = function () {
      var e = {};
      this.allAdvancedFilters.forEach(function (t, n) {
        var o = t.filterPromise.resolveNow(null, function (e) {
          return e;
        });
        if (null == o) {
          return null;
        }
        if ("function" === typeof o.getModel) {
          var i = o.getModel();
          if (r(i)) {
            e[n] = i;
          }
        } else {
          console.warn("Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel");
        }
      });
      return e;
    };
    n.prototype.isAdvancedFilterPresent = function () {
      return this.activeAdvancedFilters.length > 0;
    };
    n.prototype.updateActiveFilters = function () {
      var e = this;
      this.activeAdvancedFilters.length = 0;
      this.allAdvancedFilters.forEach(function (t) {
        if (t.filterPromise.resolveNow(false, function (e) {
          return e.isFilterActive();
        })) {
          var n = t.filterPromise.resolveNow(null, function (e) {
            return e;
          });
          e.activeAdvancedFilters.push(n);
        }
      });
    };
    n.prototype.updateFilterFlagInColumns = function (e, t) {
      this.allAdvancedFilters.forEach(function (n) {
        var r = n.filterPromise.resolveNow(false, function (e) {
          return e.isFilterActive();
        });
        n.column.setFilterActive(r, e, t);
      });
    };
    n.prototype.isAnyFilterPresent = function () {
      return this.isQuickFilterPresent() || this.isAdvancedFilterPresent() || this.gridOptionsWrapper.isExternalFilterPresent();
    };
    n.prototype.doAdvancedFiltersPass = function (e, t) {
      for (var n = e.data, r = 0; r < this.activeAdvancedFilters.length; r++) {
        var o = this.activeAdvancedFilters[r];
        if (null != o && o !== t) {
          if ("function" !== typeof o.doesFilterPass) {
            throw new Error("Filter is missing method doesFilterPass");
          }
          if (!o.doesFilterPass({
            node: e,
            data: n
          })) {
            return false;
          }
        }
      }
      return true;
    };
    n.prototype.parseQuickFilter = function (e) {
      return r(e) ? this.gridOptionsWrapper.isRowModelDefault() ? e.toUpperCase() : (console.warn("ag-grid: quick filtering only works with the Client-Side Row Model"), null) : null;
    };
    n.prototype.setQuickFilter = function (e) {
      var t = this.parseQuickFilter(e);
      if (this.quickFilter !== t) {
        this.quickFilter = t;
        this.setQuickFilterParts();
        this.onFilterChanged();
      }
    };
    n.prototype.onFilterChanged = function (e, t) {
      this.updateActiveFilters();
      this.updateFilterFlagInColumns("filterChanged", t);
      this.allAdvancedFilters.forEach(function (t) {
        t.filterPromise.then(function (t) {
          if (t !== e && t.onAnyFilterChanged) {
            t.onAnyFilterChanged();
          }
        });
      });
      var n = {
        type: Ke.EVENT_FILTER_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      if (t) {
        F(n, t);
      }
      this.processingFilterChange = true;
      this.eventService.dispatchEvent(n);
      this.processingFilterChange = false;
    };
    n.prototype.isSuppressFlashingCellsBecauseFiltering = function () {
      return !this.allowShowChangeAfterFilter && this.processingFilterChange;
    };
    n.prototype.isQuickFilterPresent = function () {
      return null !== this.quickFilter;
    };
    n.prototype.doesRowPassOtherFilters = function (e, t) {
      return this.doesRowPassFilter({
        rowNode: t,
        filterInstanceToSkip: e
      });
    };
    n.prototype.doesRowPassQuickFilterNoCache = function (e, t) {
      var n = this;
      return S(this.columnController.getAllColumnsForQuickFilter(), function (o) {
        var i = n.getQuickFilterTextForColumn(o, e);
        return r(i) && i.indexOf(t) >= 0;
      });
    };
    n.prototype.doesRowPassQuickFilterCache = function (e, t) {
      if (!e.quickFilterAggregateText) {
        this.aggregateRowForQuickFilter(e);
      }
      return e.quickFilterAggregateText.indexOf(t) >= 0;
    };
    n.prototype.doesRowPassQuickFilter = function (e) {
      var t = this;
      var n = this.gridOptionsWrapper.isCacheQuickFilter();
      return T(this.quickFilterParts, function (r) {
        return n ? t.doesRowPassQuickFilterCache(e, r) : t.doesRowPassQuickFilterNoCache(e, r);
      });
    };
    n.prototype.doesRowPassFilter = function (e) {
      return !(this.isQuickFilterPresent() && !this.doesRowPassQuickFilter(e.rowNode)) && !(this.gridOptionsWrapper.isExternalFilterPresent() && !this.gridOptionsWrapper.doesExternalFilterPass(e.rowNode)) && !(this.isAdvancedFilterPresent() && !this.doAdvancedFiltersPass(e.rowNode, e.filterInstanceToSkip));
    };
    n.prototype.getQuickFilterTextForColumn = function (e, t) {
      var n = this.valueService.getValue(e, t, true);
      var o = e.getColDef();
      if (o.getQuickFilterText) {
        var i = {
          value: n,
          node: t,
          data: t.data,
          column: e,
          colDef: o,
          context: this.gridOptionsWrapper.getContext()
        };
        n = o.getQuickFilterText(i);
      }
      return r(n) ? n.toString().toUpperCase() : null;
    };
    n.prototype.aggregateRowForQuickFilter = function (e) {
      var t = this;
      var n = [];
      I(this.columnController.getAllColumnsForQuickFilter(), function (o) {
        var i = t.getQuickFilterTextForColumn(o, e);
        if (r(i)) {
          n.push(i);
        }
      });
      e.quickFilterAggregateText = n.join(o.QUICK_FILTER_SEPARATOR);
    };
    n.prototype.onNewRowsLoaded = function (e) {
      this.allAdvancedFilters.forEach(function (e) {
        e.filterPromise.then(function (e) {
          if (e.onNewRowsLoaded) {
            e.onNewRowsLoaded();
          }
        });
      });
      this.updateFilterFlagInColumns(e);
      this.updateActiveFilters();
    };
    n.prototype.createValueGetter = function (e) {
      var t = this;
      return function (n) {
        return t.valueService.getValue(e, n, true);
      };
    };
    n.prototype.getFilterComponent = function (e, t, n) {
      if (undefined === n) {
        n = true;
      }
      if (n) {
        return this.getOrCreateFilterWrapper(e, t).filterPromise;
      }
      var r = this.cachedFilter(e);
      return r ? r.filterPromise : null;
    };
    n.prototype.isFilterActive = function (e) {
      var t = this.cachedFilter(e);
      return !!t && t.filterPromise.resolveNow(false, function (e) {
        return e.isFilterActive();
      });
    };
    n.prototype.getOrCreateFilterWrapper = function (e, t) {
      var n = this.cachedFilter(e);
      if (n) {
        if ("NO_UI" !== t) {
          this.putIntoGui(n, t);
        }
      } else {
        n = this.createFilterWrapper(e, t);
        this.allAdvancedFilters.set(e.getColId(), n);
      }
      return n;
    };
    n.prototype.cachedFilter = function (e) {
      return this.allAdvancedFilters.get(e.getColId());
    };
    n.prototype.createFilterInstance = function (e, n) {
      var r;
      var o = this;
      var i = Oe.isRegistered(exports.ModuleNames.SetFilterModule) ? "agSetColumnFilter" : "agTextColumnFilter";
      var a = e.getColDef();
      var s = vc(vc({}, this.createFilterParams(e, a, n)), {
        filterModifiedCallback: function () {
          var t = {
            type: Ke.EVENT_FILTER_MODIFIED,
            api: o.gridApi,
            columnApi: o.columnApi,
            column: e,
            filterInstance: r
          };
          o.eventService.dispatchEvent(t);
        },
        filterChangedCallback: function (e) {
          return o.onFilterChanged(r, e);
        },
        doesRowPassOtherFilter: function (e) {
          return o.doesRowPassOtherFilters(r, e);
        }
      });
      var c = this.userComponentFactory.newFilterComponent(a, s, i);
      if (c) {
        c.then(function (e) {
          return r = e;
        });
      }
      return c;
    };
    n.prototype.createFilterParams = function (e, t, n) {
      if (undefined === n) {
        n = null;
      }
      var r = {
        api: this.gridOptionsWrapper.getApi(),
        column: e,
        colDef: k(t),
        rowModel: this.rowModel,
        filterChangedCallback: function () {},
        filterModifiedCallback: function () {},
        valueGetter: this.createValueGetter(e),
        context: this.gridOptionsWrapper.getContext(),
        doesRowPassOtherFilter: function () {
          return true;
        }
      };
      if (n) {
        r.$scope = n;
      }
      return r;
    };
    n.prototype.createFilterWrapper = function (e, t) {
      var n = {
        column: e,
        filterPromise: null,
        scope: null,
        compiledElement: null,
        guiPromise: Zr.resolve(null)
      };
      n.scope = this.gridOptionsWrapper.isAngularCompileFilters() ? this.$scope.$new() : null;
      n.filterPromise = this.createFilterInstance(e, n.scope);
      if (n.filterPromise) {
        this.putIntoGui(n, t);
      }
      return n;
    };
    n.prototype.putIntoGui = function (e, t) {
      var n = this;
      var o = document.createElement("div");
      o.className = "ag-filter";
      e.guiPromise = new Zr(function (i) {
        e.filterPromise.then(function (a) {
          var s = a.getGui();
          if (!r(s)) {
            console.warn("getGui method from filter returned " + s + ", it should be a DOM element or an HTML template string.");
          }
          if ("string" === typeof s) {
            s = _n(s);
          }
          o.appendChild(s);
          if (e.scope) {
            var c = n.$compile(o)(e.scope);
            e.compiledElement = c;
            window.setTimeout(function () {
              return e.scope.$apply();
            }, 0);
          }
          i(o);
          n.eventService.dispatchEvent({
            type: Ke.EVENT_FILTER_OPENED,
            column: e.column,
            source: t,
            eGui: o,
            api: n.gridApi,
            columnApi: n.columnApi
          });
        });
      });
    };
    n.prototype.onNewColumnsLoaded = function () {
      var e = this;
      var t = false;
      this.allAdvancedFilters.forEach(function (n) {
        if (!e.columnController.getPrimaryColumn(n.column)) {
          t = true;
          e.disposeFilterWrapper(n, "filterDestroyed");
        }
      });
      if (t) {
        this.onFilterChanged();
      }
    };
    n.prototype.destroyFilter = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      var n = this.allAdvancedFilters.get(e.getColId());
      if (n) {
        this.disposeFilterWrapper(n, t);
        this.onFilterChanged();
      }
    };
    n.prototype.disposeFilterWrapper = function (e, t) {
      var n = this;
      e.filterPromise.then(function (r) {
        (r.setModel(null) || Zr.resolve()).then(function () {
          n.getContext().destroyBean(r);
          e.column.setFilterActive(false, t);
          if (e.scope) {
            if (e.compiledElement) {
              e.compiledElement.remove();
            }
            e.scope.$destroy();
          }
          n.allAdvancedFilters.delete(e.column.getColId());
        });
      });
    };
    n.prototype.destroy = function () {
      var t = this;
      e.prototype.destroy.call(this);
      this.allAdvancedFilters.forEach(function (e) {
        return t.disposeFilterWrapper(e, "filterDestroyed");
      });
    };
    n.QUICK_FILTER_SEPARATOR = "\n";
    bc([pe("$compile")], n.prototype, "$compile", undefined);
    bc([pe("$scope")], n.prototype, "$scope", undefined);
    bc([pe("valueService")], n.prototype, "valueService", undefined);
    bc([pe("columnController")], n.prototype, "columnController", undefined);
    bc([pe("rowModel")], n.prototype, "rowModel", undefined);
    bc([pe("columnApi")], n.prototype, "columnApi", undefined);
    bc([pe("gridApi")], n.prototype, "gridApi", undefined);
    bc([pe("userComponentFactory")], n.prototype, "userComponentFactory", undefined);
    bc([le], n.prototype, "init", null);
    bc([ue], n.prototype, "destroy", null);
    return n = o = bc([de("filterManager")], n);
  }(We);
  var Ec = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Oc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var wc = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.initialised = false;
      return t;
    }
    Ec(t, e);
    t.prototype.init = function () {
      this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();
      this.initialised = true;
    };
    t.prototype.getValue = function (e, t, n, r) {
      if (undefined === n) {
        n = false;
      }
      if (undefined === r) {
        r = false;
      }
      if (!this.initialised) {
        this.init();
      }
      if (t) {
        var o;
        var i = e.getColDef();
        var a = i.field;
        var s = e.getId();
        var c = t.data;
        var l = t.groupData && undefined !== t.groupData[s];
        var u = !r && t.aggData && undefined !== t.aggData[s];
        if (n && i.filterValueGetter) {
          o = this.executeFilterValueGetter(i.filterValueGetter, c, e, t);
        } else {
          if (this.gridOptionsWrapper.isTreeData() && u) {
            o = t.aggData[s];
          } else {
            if (this.gridOptionsWrapper.isTreeData() && i.valueGetter) {
              o = this.executeValueGetter(i.valueGetter, c, e, t);
            } else {
              if (this.gridOptionsWrapper.isTreeData() && a && c) {
                o = W(c, a, e.isFieldContainsDots());
              } else {
                if (l) {
                  o = t.groupData[s];
                } else {
                  if (u) {
                    o = t.aggData[s];
                  } else {
                    if (i.valueGetter) {
                      o = this.executeValueGetter(i.valueGetter, c, e, t);
                    } else {
                      if (a && c) {
                        o = W(c, a, e.isFieldContainsDots());
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (this.cellExpressions && "string" === typeof o && 0 === o.indexOf("=")) {
          var d = o.substring(1);
          o = this.executeValueGetter(d, c, e, t);
        }
        if (null == o) {
          var p = this.getOpenedGroup(t, e);
          if (null != p) {
            return p;
          }
        }
        return o;
      }
    };
    t.prototype.getOpenedGroup = function (e, t) {
      if (this.gridOptionsWrapper.isShowOpenedGroup() && t.getColDef().showRowGroup) {
        for (var n = t.getColDef().showRowGroup, r = e.parent; null != r;) {
          if (r.rowGroupColumn && (true === n || n === r.rowGroupColumn.getId())) {
            return r.key;
          }
          r = r.parent;
        }
      }
    };
    t.prototype.setValue = function (e, t, n, i) {
      var a = this.columnController.getPrimaryColumn(t);
      if (e && a) {
        if (o(e.data)) {
          e.data = {};
        }
        var s = a.getColDef();
        var c = s.field;
        var l = s.newValueHandler;
        var u = s.valueSetter;
        if (o(c) && o(l) && o(u)) {
          console.warn("AG Grid: you need either field or valueSetter set on colDef for editing to work");
        } else {
          var d;
          var p = {
            node: e,
            data: e.data,
            oldValue: this.getValue(a, e),
            newValue: n,
            colDef: a.getColDef(),
            column: a,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          };
          p.newValue = n;
          if (undefined === (d = l && r(l) ? l(p) : r(u) ? this.expressionService.evaluate(u, p) : this.setValueUsingField(e.data, c, n, a.isFieldContainsDots()))) {
            d = true;
          }
          if (d) {
            e.resetQuickFilterAggregateText();
            this.valueCache.onDataChanged();
            p.newValue = this.getValue(a, e);
            var f = a.getColDef().onCellValueChanged;
            if ("function" === typeof f) {
              setTimeout(function () {
                return f(p);
              }, 0);
            }
            var h = {
              type: Ke.EVENT_CELL_VALUE_CHANGED,
              event: null,
              rowIndex: e.rowIndex,
              rowPinned: e.rowPinned,
              column: p.column,
              api: p.api,
              columnApi: p.columnApi,
              colDef: p.colDef,
              context: p.context,
              data: e.data,
              node: e,
              oldValue: p.oldValue,
              newValue: p.newValue,
              value: p.newValue,
              source: i
            };
            this.eventService.dispatchEvent(h);
          }
        }
      }
    };
    t.prototype.setValueUsingField = function (e, t, n, r) {
      if (!t) {
        return false;
      }
      if (r) {
        for (var o = t.split("."), i = e; o.length > 0 && i;) {
          var a = o.shift();
          if (0 === o.length) {
            i[a] = n;
          } else {
            i = i[a];
          }
        }
      } else {
        e[t] = n;
      }
      return true;
    };
    t.prototype.executeFilterValueGetter = function (e, t, n, r) {
      var o = {
        data: t,
        node: r,
        column: n,
        colDef: n.getColDef(),
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext(),
        getValue: this.getValueCallback.bind(this, r)
      };
      return this.expressionService.evaluate(e, o);
    };
    t.prototype.executeValueGetter = function (e, t, n, r) {
      var o = n.getId();
      var i = this.valueCache.getValue(r, o);
      if (undefined !== i) {
        return i;
      }
      var a = {
        data: t,
        node: r,
        column: n,
        colDef: n.getColDef(),
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext(),
        getValue: this.getValueCallback.bind(this, r)
      };
      var s = this.expressionService.evaluate(e, a);
      this.valueCache.setValue(r, o, s);
      return s;
    };
    t.prototype.getValueCallback = function (e, t) {
      var n = this.columnController.getPrimaryColumn(t);
      return n ? this.getValue(n, e) : null;
    };
    t.prototype.getKeyForNode = function (e, t) {
      var n = this.getValue(e, t);
      var r = e.getColDef().keyCreator;
      var o = r ? r({
        value: n
      }) : n;
      if (!("string" === typeof o || null == o)) {
        if ("[object Object]" === (o = String(o))) {
          X(function () {
            console.warn("AG Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key");
          }, "getKeyForNode - warn about [object,object]");
        }
      }
      return o;
    };
    Oc([pe("expressionService")], t.prototype, "expressionService", undefined);
    Oc([pe("columnController")], t.prototype, "columnController", undefined);
    Oc([pe("valueCache")], t.prototype, "valueCache", undefined);
    Oc([le], t.prototype, "init", null);
    return t = Oc([de("valueService")], t);
  }(We);
  var Cc = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Tc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  (cc = exports.LayoutCssClasses || (exports.LayoutCssClasses = {})).AUTO_HEIGHT = "ag-layout-auto-height";
  cc.NORMAL = "ag-layout-normal";
  cc.PRINT = "ag-layout-print";
  var Sc;
  var Ic = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.view = t;
      return n;
    }
    Cc(t, e);
    t.prototype.postConstruct = function () {
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_DOM_LAYOUT, this.updateLayoutClasses.bind(this));
      this.updateLayoutClasses();
    };
    t.prototype.updateLayoutClasses = function () {
      var e = this.gridOptionsWrapper.getDomLayout();
      this.view.updateLayoutClasses({
        autoHeight: e === Ee.DOM_LAYOUT_AUTO_HEIGHT,
        normal: e === Ee.DOM_LAYOUT_NORMAL,
        print: e === Ee.DOM_LAYOUT_PRINT
      });
    };
    Tc([pe("gridOptionsWrapper")], t.prototype, "gridOptionsWrapper", undefined);
    Tc([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var Ac = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var jc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Nc = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.scrollLeft = -1;
      n.nextScrollTop = -1;
      n.scrollTop = -1;
      n.eBodyViewport = t;
      n.resetLastHorizontalScrollElementDebounced = re(n.resetLastHorizontalScrollElement.bind(n), 500);
      return n;
    }
    Ac(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
      this.controllersService.whenReady(function (t) {
        e.centerRowContainerCon = t.centerRowContainerCon;
        e.onDisplayedColumnsWidthChanged();
        e.addScrollListener();
      });
    };
    t.prototype.addScrollListener = function () {
      var e = this.controllersService.getFakeHScrollCon();
      this.addManagedListener(this.centerRowContainerCon.getViewportElement(), "scroll", this.onCenterViewportScroll.bind(this));
      this.addManagedListener(e.getViewport(), "scroll", this.onFakeHorizontalScroll.bind(this));
      var t = this.gridOptionsWrapper.isDebounceVerticalScrollbar() ? re(this.onVerticalScroll.bind(this), 100) : this.onVerticalScroll.bind(this);
      this.addManagedListener(this.eBodyViewport, "scroll", t);
    };
    t.prototype.onDisplayedColumnsWidthChanged = function () {
      if (this.enableRtl) {
        this.horizontallyScrollHeaderCenterAndFloatingCenter();
      }
    };
    t.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function (e) {
      if (undefined === e) {
        e = this.centerRowContainerCon.getCenterViewportScrollLeft();
      }
      var t = this.enableRtl ? e : -e;
      var n = this.controllersService.getTopCenterRowContainerCon();
      var r = this.controllersService.getBottomCenterRowContainerCon();
      var o = this.controllersService.getHeaderRootComp();
      var i = this.controllersService.getFakeHScrollCon();
      o.setHorizontalScroll(t);
      r.setContainerTranslateX(t);
      n.setContainerTranslateX(t);
      fn(this.lastHorizontalScrollElement === this.centerRowContainerCon.getViewportElement() ? i.getViewport() : this.centerRowContainerCon.getViewportElement(), Math.abs(e), this.enableRtl);
    };
    t.prototype.isControllingScroll = function (e) {
      return this.lastHorizontalScrollElement ? e === this.lastHorizontalScrollElement : (this.lastHorizontalScrollElement = e, true);
    };
    t.prototype.onFakeHorizontalScroll = function () {
      var e = this.controllersService.getFakeHScrollCon().getViewport();
      if (this.isControllingScroll(e)) {
        this.onBodyHorizontalScroll(e);
      }
    };
    t.prototype.onCenterViewportScroll = function () {
      var e = this.centerRowContainerCon.getViewportElement();
      if (this.isControllingScroll(e)) {
        this.onBodyHorizontalScroll(e);
      }
    };
    t.prototype.onBodyHorizontalScroll = function (e) {
      var t = this.centerRowContainerCon.getViewportElement().scrollLeft;
      if (!this.shouldBlockScrollUpdate("horizontal", t, true)) {
        this.doHorizontalScroll(Math.round(pn(e, this.enableRtl)));
        this.resetLastHorizontalScrollElementDebounced();
      }
    };
    t.prototype.onVerticalScroll = function () {
      var e = this.eBodyViewport.scrollTop;
      if (!this.shouldBlockScrollUpdate("vertical", e, true)) {
        this.animationFrameService.setScrollTop(e);
        this.nextScrollTop = e;
        if (this.gridOptionsWrapper.isSuppressAnimationFrame()) {
          this.scrollTop = this.nextScrollTop;
          this.redrawRowsAfterScroll();
        } else {
          this.animationFrameService.schedule();
        }
      }
    };
    t.prototype.resetLastHorizontalScrollElement = function () {
      this.lastHorizontalScrollElement = null;
    };
    t.prototype.doHorizontalScroll = function (e) {
      this.scrollLeft = e;
      var t = {
        type: Ke.EVENT_BODY_SCROLL,
        api: this.gridApi,
        columnApi: this.columnApi,
        direction: "horizontal",
        left: this.scrollLeft,
        top: this.scrollTop
      };
      this.eventService.dispatchEvent(t);
      this.horizontallyScrollHeaderCenterAndFloatingCenter(e);
      this.onHorizontalViewportChanged();
    };
    t.prototype.shouldBlockScrollUpdate = function (e, t, n) {
      if (undefined === n) {
        n = false;
      }
      if (n && !Gt()) {
        return false;
      }
      if ("vertical" === e) {
        var r = sn(this.eBodyViewport);
        var o = this.eBodyViewport.scrollHeight;
        if (t < 0 || t + r > o) {
          return true;
        }
      }
      if ("horizontal" === e) {
        var i = this.centerRowContainerCon.getCenterWidth();
        var a = this.centerRowContainerCon.getViewportElement().scrollWidth;
        if (this.enableRtl && dn()) {
          if (t > 0) {
            return true;
          }
        } else if (t < 0) {
          return true;
        }
        if (Math.abs(t) + i > a) {
          return true;
        }
      }
      return false;
    };
    t.prototype.redrawRowsAfterScroll = function () {
      var e = {
        type: Ke.EVENT_BODY_SCROLL,
        direction: "vertical",
        api: this.gridApi,
        columnApi: this.columnApi,
        left: this.scrollLeft,
        top: this.scrollTop
      };
      this.eventService.dispatchEvent(e);
    };
    t.prototype.onHorizontalViewportChanged = function () {
      this.centerRowContainerCon.onHorizontalViewportChanged();
    };
    t.prototype.checkScrollLeft = function () {
      if (this.scrollLeft !== this.centerRowContainerCon.getCenterViewportScrollLeft()) {
        this.onBodyHorizontalScroll(this.centerRowContainerCon.getViewportElement());
      }
    };
    t.prototype.executeAnimationFrameScroll = function () {
      var e = this.scrollTop != this.nextScrollTop;
      if (e) {
        this.scrollTop = this.nextScrollTop;
        this.redrawRowsAfterScroll();
      }
      return e;
    };
    t.prototype.setHorizontalScrollPosition = function (e) {
      var t = this.centerRowContainerCon.getViewportElement().scrollWidth - this.centerRowContainerCon.getCenterWidth();
      if (this.shouldBlockScrollUpdate("horizontal", e)) {
        e = this.enableRtl && dn() ? e > 0 ? 0 : t : Math.min(Math.max(e, 0), t);
      }
      fn(this.centerRowContainerCon.getViewportElement(), Math.abs(e), this.enableRtl);
      this.doHorizontalScroll(e);
    };
    t.prototype.setVerticalScrollPosition = function (e) {
      this.eBodyViewport.scrollTop = e;
    };
    t.prototype.getVScrollPosition = function () {
      return {
        top: this.eBodyViewport.scrollTop,
        bottom: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetHeight
      };
    };
    t.prototype.getHScrollPosition = function () {
      return this.centerRowContainerCon.getHScrollPosition();
    };
    t.prototype.isHorizontalScrollShowing = function () {
      return this.centerRowContainerCon.isHorizontalScrollShowing();
    };
    t.prototype.scrollHorizontally = function (e) {
      var t = this.centerRowContainerCon.getViewportElement().scrollLeft;
      this.setHorizontalScrollPosition(t + e);
      return this.centerRowContainerCon.getViewportElement().scrollLeft - t;
    };
    t.prototype.scrollToTop = function () {
      this.eBodyViewport.scrollTop = 0;
    };
    t.prototype.ensureNodeVisible = function (e, t) {
      if (undefined === t) {
        t = null;
      }
      for (var n = this.rowModel.getRowCount(), r = "function" === typeof e, o = -1, i = 0; i < n; i++) {
        var a = this.rowModel.getRow(i);
        if (r) {
          if (e(a)) {
            o = i;
            break;
          }
        } else if (e === a || e === a.data) {
          o = i;
          break;
        }
      }
      if (o >= 0) {
        this.ensureIndexVisible(o, t);
      }
    };
    t.prototype.ensureIndexVisible = function (e, t) {
      if (this.gridOptionsWrapper.getDomLayout() !== Ee.DOM_LAYOUT_PRINT) {
        var n = this.paginationProxy.getRowCount();
        if ("number" !== typeof e || e < 0 || e >= n) {
          console.warn("invalid row index for ensureIndexVisible: " + e);
        } else {
          if (!(this.gridOptionsWrapper.isPagination() && !this.gridOptionsWrapper.isSuppressPaginationPanel())) {
            this.paginationProxy.goToPageWithIndex(e);
          }
          var r;
          var o = this.paginationProxy.getRow(e);
          do {
            var i = o.rowTop;
            var a = o.rowHeight;
            var s = this.paginationProxy.getPixelOffset();
            var c = o.rowTop - s;
            var l = c + o.rowHeight;
            var u = this.getVScrollPosition();
            var d = this.heightScaler.getDivStretchOffset();
            var p = u.top + d;
            var f = u.bottom + d;
            var h = f - p;
            var m = this.heightScaler.getScrollPositionForPixel(c);
            var g = this.heightScaler.getScrollPositionForPixel(l - h);
            var _ = Math.min((m + g) / 2, c);
            var v = null;
            if ("top" === t) {
              v = m;
            } else {
              if ("bottom" === t) {
                v = g;
              } else {
                if ("middle" === t) {
                  v = _;
                } else {
                  if (p > c) {
                    v = m;
                  } else {
                    if (f < l) {
                      v = g;
                    }
                  }
                }
              }
            }
            if (null !== v) {
              this.eBodyViewport.scrollTop = v;
              this.rowRenderer.redrawAfterScroll();
            }
            r = i !== o.rowTop || a !== o.rowHeight;
          } while (r);
          this.animationFrameService.flushAllFrames();
        }
      }
    };
    t.prototype.ensureColumnVisible = function (e) {
      var t = this.columnController.getGridColumn(e);
      if (t) {
        if (t.isPinned()) {
          console.warn("calling ensureIndexVisible on a " + t.getPinned() + " pinned column doesn't make sense for column " + t.getColId());
        } else if (this.columnController.isColumnDisplayed(t)) {
          var n;
          var r;
          var o = t.getLeft();
          var i = o + t.getActualWidth();
          var a = this.centerRowContainerCon.getCenterWidth();
          var s = this.centerRowContainerCon.getCenterViewportScrollLeft();
          var c = this.columnController.getBodyContainerWidth();
          if (this.enableRtl) {
            n = c - s - a;
            r = c - s;
          } else {
            n = s;
            r = a + s;
          }
          var l = n > o;
          var u = r < i;
          var d = a < t.getActualWidth();
          var p = l || d;
          if (p || u) {
            var f = undefined;
            f = this.enableRtl ? p ? c - a - o : c - i : p ? o : i - a;
            this.centerRowContainerCon.setCenterViewportScrollLeft(f);
          }
          this.centerRowContainerCon.onHorizontalViewportChanged();
          this.animationFrameService.flushAllFrames();
        } else {
          console.warn("column is not currently visible");
        }
      }
    };
    jc([pe("controllersService")], t.prototype, "controllersService", undefined);
    jc([pe("animationFrameService")], t.prototype, "animationFrameService", undefined);
    jc([pe("columnApi")], t.prototype, "columnApi", undefined);
    jc([pe("gridApi")], t.prototype, "gridApi", undefined);
    jc([pe("paginationProxy")], t.prototype, "paginationProxy", undefined);
    jc([pe("rowModel")], t.prototype, "rowModel", undefined);
    jc([pe("rowContainerHeightService")], t.prototype, "heightScaler", undefined);
    jc([pe("rowRenderer")], t.prototype, "rowRenderer", undefined);
    jc([pe("columnController")], t.prototype, "columnController", undefined);
    jc([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var Rc = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var kc = function () {
    return (kc = Object.assign || function (e) {
      for (var t, n = 1, r = arguments.length; n < r; n++) {
        for (var o in t = arguments[n]) if (Object.prototype.hasOwnProperty.call(t, o)) {
          e[o] = t[o];
        }
      }
      return e;
    }).apply(this, arguments);
  };
  var xc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Dc = function () {
    for (var e = 0, t = 0, n = arguments.length; t < n; t++) {
      e += arguments[t].length;
    }
    var r = Array(e);
    var o = 0;
    for (t = 0; t < n; t++) {
      for (var i = arguments[t], a = 0, s = i.length; a < s; a++, o++) {
        r[o] = i[a];
      }
    }
    return r;
  };
  var Mc = function (e) {
    function n(t) {
      var n = e.call(this) || this;
      n.isMultiRowDrag = false;
      n.isGridSorted = false;
      n.isGridFiltered = false;
      n.isRowGroupActive = false;
      n.eContainer = t;
      return n;
    }
    Rc(n, e);
    n.prototype.postConstruct = function () {
      if (this.gridOptionsWrapper.isRowModelDefault()) {
        this.clientSideRowModel = this.rowModel;
      }
      this.addManagedListener(this.eventService, Ke.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
      this.onSortChanged();
      this.onFilterChanged();
      this.onRowGroupChanged();
    };
    n.prototype.onSortChanged = function () {
      this.isGridSorted = this.sortController.isSortActive();
    };
    n.prototype.onFilterChanged = function () {
      this.isGridFiltered = this.filterManager.isAnyFilterPresent();
    };
    n.prototype.onRowGroupChanged = function () {
      var e = this.columnController.getRowGroupColumns();
      this.isRowGroupActive = !i(e);
    };
    n.prototype.getContainer = function () {
      return this.eContainer;
    };
    n.prototype.isInterestedIn = function (e) {
      return e === exports.DragSourceType.RowDrag;
    };
    n.prototype.getIconName = function () {
      return this.gridOptionsWrapper.isRowDragManaged() && this.shouldPreventRowMove() ? yi.ICON_NOT_ALLOWED : yi.ICON_MOVE;
    };
    n.prototype.shouldPreventRowMove = function () {
      return this.isGridSorted || this.isGridFiltered || this.isRowGroupActive;
    };
    n.prototype.getRowNodes = function (e) {
      if (!this.isFromThisGrid(e)) {
        return e.dragItem.rowNodes || [];
      }
      var t = this.gridOptionsWrapper.isEnableMultiRowDragging();
      var n = this.selectionController.getSelectedNodes();
      var r = e.dragItem.rowNode;
      return t && -1 !== n.indexOf(r) ? (this.isMultiRowDrag = true, Dc(n)) : (this.isMultiRowDrag = false, [r]);
    };
    n.prototype.onDragEnter = function (e) {
      this.dispatchGridEvent(Ke.EVENT_ROW_DRAG_ENTER, e);
      this.getRowNodes(e).forEach(function (e) {
        e.setDragging(true);
      });
      this.onEnterOrDragging(e);
    };
    n.prototype.onDragging = function (e) {
      this.onEnterOrDragging(e);
    };
    n.prototype.isFromThisGrid = function (e) {
      return e.dragSource.dragSourceDomDataKey === this.gridOptionsWrapper.getDomDataKey();
    };
    n.prototype.isDropZoneWithinThisGrid = function (e) {
      var t = this.controllersService.getGridBodyController().getGui();
      var n = e.dropZoneTarget;
      return !t.contains(n);
    };
    n.prototype.onEnterOrDragging = function (e) {
      this.dispatchGridEvent(Ke.EVENT_ROW_DRAG_MOVE, e);
      this.lastDraggingEvent = e;
      var t = this.mouseEventService.getNormalisedPosition(e).y;
      if (this.gridOptionsWrapper.isRowDragManaged()) {
        this.doManagedDrag(e, t);
      }
      this.checkCenterForScrolling(t);
    };
    n.prototype.doManagedDrag = function (e, t) {
      var n;
      var r = this;
      var o = this.isFromThisGrid(e);
      if (o) {
        n = [e.dragItem.rowNode];
        if (this.isMultiRowDrag) {
          n = Dc(this.selectionController.getSelectedNodes()).sort(function (e, t) {
            return r.getRowIndexNumber(e) - r.getRowIndexNumber(t);
          });
        }
        e.dragItem.rowNodes = n;
      } else {
        n = e.dragItem.rowNodes;
      }
      if (!(this.gridOptionsWrapper.isRowDragManaged() && this.shouldPreventRowMove())) {
        if (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !o) {
          if (!this.isDropZoneWithinThisGrid(e)) {
            this.clientSideRowModel.highlightRowAtPixel(n[0], t);
          }
        } else {
          this.moveRows(n, t);
        }
      }
    };
    n.prototype.getRowIndexNumber = function (e) {
      return parseInt(m(e.getRowIndexString().split("-")), 10);
    };
    n.prototype.moveRowAndClearHighlight = function (e) {
      var t = this;
      var n = this.clientSideRowModel.getLastHighlightedRowNode();
      var r = n && "below" === n.highlighted;
      var o = this.mouseEventService.getNormalisedPosition(e).y;
      var i = e.dragItem.rowNodes;
      var a = r ? 1 : 0;
      if (this.isFromThisGrid(e)) {
        i.forEach(function (e) {
          if (e.rowTop < o) {
            a -= 1;
          }
        });
        this.moveRows(i, o, a);
      } else {
        var s = this.gridOptionsWrapper.getRowNodeIdFunc();
        var c = this.clientSideRowModel.getRowIndexAtPixel(o) + 1;
        if ("above" === this.clientSideRowModel.getHighlightPosition(o)) {
          c--;
        }
        this.clientSideRowModel.updateRowData({
          add: i.map(function (e) {
            return e.data;
          }).filter(function (e) {
            return !t.clientSideRowModel.getRowNode(s ? s(e) : e.id);
          }),
          addIndex: c
        });
      }
      this.clearRowHighlight();
    };
    n.prototype.clearRowHighlight = function () {
      this.clientSideRowModel.highlightRowAtPixel(null);
    };
    n.prototype.moveRows = function (e, t, n) {
      if (undefined === n) {
        n = 0;
      }
      if (this.clientSideRowModel.ensureRowsAtPixel(e, t, n)) {
        this.focusController.clearFocusedCell();
        if (this.rangeController) {
          this.rangeController.removeAllCellRanges();
        }
      }
    };
    n.prototype.checkCenterForScrolling = function (e) {
      var t = this.controllersService.getGridBodyController().getScrollFeature().getVScrollPosition();
      this.needToMoveUp = e < t.top + 50;
      this.needToMoveDown = e > t.bottom - 50;
      if (this.needToMoveUp || this.needToMoveDown) {
        this.ensureIntervalStarted();
      } else {
        this.ensureIntervalCleared();
      }
    };
    n.prototype.ensureIntervalStarted = function () {
      if (!this.movingIntervalId) {
        this.intervalCount = 0;
        this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
      }
    };
    n.prototype.ensureIntervalCleared = function () {
      if (r(this.movingIntervalId)) {
        window.clearInterval(this.movingIntervalId);
        this.movingIntervalId = null;
      }
    };
    n.prototype.moveInterval = function () {
      var e;
      this.intervalCount++;
      if ((e = 10 + 5 * this.intervalCount) > 100) {
        e = 100;
      }
      var t = null;
      var n = this.controllersService.getGridBodyController();
      if (this.needToMoveDown) {
        t = n.scrollVertically(e);
      } else {
        if (this.needToMoveUp) {
          t = n.scrollVertically(-e);
        }
      }
      if (0 !== t) {
        this.onDragging(this.lastDraggingEvent);
      }
    };
    n.prototype.addRowDropZone = function (e) {
      var n = this;
      if (e.getContainer()) {
        if (this.dragAndDropService.findExternalZone(e)) {
          console.warn("AG Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.");
        } else {
          var r = {
            getContainer: e.getContainer
          };
          if (e.fromGrid) {
            e.fromGrid = undefined;
            r = e;
          } else {
            if (e.onDragEnter) {
              r.onDragEnter = function (t) {
                e.onDragEnter(n.draggingToRowDragEvent(Ke.EVENT_ROW_DRAG_ENTER, t));
              };
            }
            if (e.onDragLeave) {
              r.onDragLeave = function (t) {
                e.onDragLeave(n.draggingToRowDragEvent(Ke.EVENT_ROW_DRAG_LEAVE, t));
              };
            }
            if (e.onDragging) {
              r.onDragging = function (t) {
                e.onDragging(n.draggingToRowDragEvent(Ke.EVENT_ROW_DRAG_MOVE, t));
              };
            }
            if (e.onDragStop) {
              r.onDragStop = function (t) {
                e.onDragStop(n.draggingToRowDragEvent(Ke.EVENT_ROW_DRAG_END, t));
              };
            }
          }
          this.dragAndDropService.addDropTarget(kc({
            isInterestedIn: function (e) {
              return e === exports.DragSourceType.RowDrag;
            },
            getIconName: function () {
              return yi.ICON_MOVE;
            },
            external: true
          }, r));
        }
      } else {
        X(function () {
          return console.warn("AG Grid: addRowDropZone - A container target needs to be provided");
        }, "add-drop-zone-empty-target");
      }
    };
    n.prototype.getRowDropZone = function (e) {
      var t = this;
      var n = this.getContainer.bind(this);
      var r = this.onDragEnter.bind(this);
      var o = this.onDragLeave.bind(this);
      var i = this.onDragging.bind(this);
      var a = this.onDragStop.bind(this);
      return e ? {
        getContainer: n,
        onDragEnter: e.onDragEnter ? function (n) {
          r(n);
          e.onDragEnter(t.draggingToRowDragEvent(Ke.EVENT_ROW_DRAG_ENTER, n));
        } : r,
        onDragLeave: e.onDragLeave ? function (n) {
          o(n);
          e.onDragLeave(t.draggingToRowDragEvent(Ke.EVENT_ROW_DRAG_LEAVE, n));
        } : o,
        onDragging: e.onDragging ? function (n) {
          i(n);
          e.onDragging(t.draggingToRowDragEvent(Ke.EVENT_ROW_DRAG_MOVE, n));
        } : i,
        onDragStop: e.onDragStop ? function (n) {
          a(n);
          e.onDragStop(t.draggingToRowDragEvent(Ke.EVENT_ROW_DRAG_END, n));
        } : a,
        fromGrid: true
      } : {
        getContainer: n,
        onDragEnter: r,
        onDragLeave: o,
        onDragging: i,
        onDragStop: a,
        fromGrid: true
      };
    };
    n.prototype.draggingToRowDragEvent = function (e, n) {
      var r;
      var o = this.mouseEventService.getNormalisedPosition(n).y;
      var i = -1;
      var a = null;
      switch (o > this.paginationProxy.getCurrentPageHeight() || (i = this.rowModel.getRowIndexAtPixel(o), a = this.rowModel.getRow(i)), n.vDirection) {
        case exports.VerticalDirection.Down:
          r = "down";
          break;
        case exports.VerticalDirection.Up:
          r = "up";
          break;
        default:
          r = null;
      }
      return {
        type: e,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        event: n.event,
        node: n.dragItem.rowNode,
        nodes: n.dragItem.rowNodes,
        overIndex: i,
        overNode: a,
        y: o,
        vDirection: r
      };
    };
    n.prototype.dispatchGridEvent = function (e, t) {
      var n = this.draggingToRowDragEvent(e, t);
      this.eventService.dispatchEvent(n);
    };
    n.prototype.onDragLeave = function (e) {
      this.dispatchGridEvent(Ke.EVENT_ROW_DRAG_LEAVE, e);
      this.stopDragging(e);
      if (this.gridOptionsWrapper.isRowDragManaged()) {
        this.clearRowHighlight();
      }
      if (this.isFromThisGrid(e)) {
        this.isMultiRowDrag = false;
      }
    };
    n.prototype.onDragStop = function (e) {
      this.dispatchGridEvent(Ke.EVENT_ROW_DRAG_END, e);
      this.stopDragging(e);
      if (!(!this.gridOptionsWrapper.isRowDragManaged() || !this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() && this.isFromThisGrid(e) || this.isDropZoneWithinThisGrid(e))) {
        this.moveRowAndClearHighlight(e);
      }
    };
    n.prototype.stopDragging = function (e) {
      this.ensureIntervalCleared();
      this.getRowNodes(e).forEach(function (e) {
        e.setDragging(false);
      });
    };
    xc([pe("dragAndDropService")], n.prototype, "dragAndDropService", undefined);
    xc([pe("rowModel")], n.prototype, "rowModel", undefined);
    xc([pe("paginationProxy")], n.prototype, "paginationProxy", undefined);
    xc([pe("columnController")], n.prototype, "columnController", undefined);
    xc([pe("focusController")], n.prototype, "focusController", undefined);
    xc([pe("sortController")], n.prototype, "sortController", undefined);
    xc([pe("filterManager")], n.prototype, "filterManager", undefined);
    xc([pe("selectionController")], n.prototype, "selectionController", undefined);
    xc([fe("rangeController")], n.prototype, "rangeController", undefined);
    xc([pe("mouseEventService")], n.prototype, "mouseEventService", undefined);
    xc([pe("controllersService")], n.prototype, "controllersService", undefined);
    xc([le], n.prototype, "postConstruct", null);
    return n;
  }(We);
  var Lc = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Pc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  !function (e) {
    e.ANIMATION_ON = "ag-row-animation";
    e.ANIMATION_OFF = "ag-row-no-animation";
  }(Sc || (Sc = {}));
  var Bc;
  var Fc = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Lc(t, e);
    t.prototype.getScrollFeature = function () {
      return this.bodyScrollFeature;
    };
    t.prototype.getBodyViewportElement = function () {
      return this.eBodyViewport;
    };
    t.prototype.setView = function (e, t, n, r, o) {
      this.view = e;
      this.eGridBody = t;
      this.eBodyViewport = n;
      this.eTop = r;
      this.eBottom = o;
      this.setCellTextSelection(this.gridOptionsWrapper.isEnableCellTextSelect());
      this.createManagedBean(new Ic(this.view));
      this.bodyScrollFeature = this.createManagedBean(new Nc(this.eBodyViewport));
      this.addRowDragListener();
      this.setupRowAnimationCssClass();
      this.controllersService.registerGridBodyController(this);
      this.addEventListeners();
      this.onGridColumnsChanged();
      this.addBodyViewportListener();
      this.setFloatingHeights();
      this.disableBrowserDragging();
      this.addStopEditingWhenGridLosesFocus();
    };
    t.prototype.addEventListeners = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_PINNED_ROW_DATA_CHANGED, this.setFloatingHeights.bind(this));
    };
    t.prototype.setColumnMovingCss = function (e) {
      this.view.setColumnMovingCss(e);
    };
    t.prototype.setCellTextSelection = function (e) {
      if (undefined === e) {
        e = false;
      }
      this.view.setCellSelectableCss(e);
    };
    t.prototype.onScrollVisibilityChanged = function () {
      var e = this.scrollVisibleService.isVerticalScrollShowing();
      this.view.setVerticalScrollPaddingVisible(e);
    };
    t.prototype.onGridColumnsChanged = function () {
      var e = this.columnController.getAllGridColumns();
      this.view.setColumnCount(e ? e.length : 0);
    };
    t.prototype.disableBrowserDragging = function () {
      this.addManagedListener(this.eGridBody, "dragstart", function (e) {
        if (e.target instanceof HTMLImageElement) {
          e.preventDefault();
          return false;
        }
      });
    };
    t.prototype.addStopEditingWhenGridLosesFocus = function () {
      var e = this;
      if (this.gridOptionsWrapper.isStopEditingWhenCellsLoseFocus()) {
        var t = function (t) {
          var r = t.relatedTarget;
          if (null !== Ut(r)) {
            var o = n.some(function (e) {
              return e.contains(r);
            }) && e.mouseEventService.isElementInThisGrid(r);
            if (!o) {
              var i = e.popupService;
              o = i.getActivePopups().some(function (e) {
                return e.contains(r);
              }) || i.isElementWithinCustomPopup(r);
            }
            if (!o) {
              e.rowRenderer.stopEditing();
            }
          } else {
            e.rowRenderer.stopEditing();
          }
        };
        var n = [this.eBodyViewport, this.eBottom, this.eTop];
        n.forEach(function (n) {
          return e.addManagedListener(n, "focusout", t);
        });
      }
    };
    t.prototype.updateRowCount = function () {
      var e = this.headerNavigationService.getHeaderRowCount();
      var t = this.paginationProxy.getType();
      var n = -1;
      if (t === Ee.ROW_MODEL_TYPE_CLIENT_SIDE) {
        n = 0;
        this.paginationProxy.forEachNode(function (e) {
          if (!e.group) {
            n++;
          }
        });
      }
      var r = -1 === n ? -1 : e + n;
      this.view.setRowCount(r);
    };
    t.prototype.registerBodyViewportResizeListener = function (e) {
      this.view.registerBodyViewportResizeListener(e);
    };
    t.prototype.setVerticalScrollPaddingVisible = function (e) {
      this.view.setVerticalScrollPaddingVisible(e);
    };
    t.prototype.isVerticalScrollShowing = function () {
      var e = this.gridOptionsWrapper.isAlwaysShowVerticalScroll();
      this.view.setAlwaysVerticalScrollClass(e);
      return e || Tn(this.eBodyViewport);
    };
    t.prototype.setupRowAnimationCssClass = function () {
      var e = this;
      var t = function () {
        var t = e.gridOptionsWrapper.isAnimateRows() && !e.rowContainerHeightService.isStretching();
        e.view.setRowAnimationCssOnBodyViewport(t);
      };
      t();
      this.addManagedListener(this.eventService, Ke.EVENT_HEIGHT_SCALE_CHANGED, t);
    };
    t.prototype.getGridBodyElement = function () {
      return this.eGridBody;
    };
    t.prototype.addBodyViewportListener = function () {
      var e = this;
      this.addManagedListener(this.eBodyViewport, "contextmenu", function (t) {
        var n = Me(t);
        if (!(n !== e.eBodyViewport && n !== e.controllersService.getCenterRowContainerCon().getViewportElement())) {
          if (e.contextMenuFactory) {
            e.contextMenuFactory.onContextMenu(t, null, null, null, null, e.eGridBody);
          }
        }
      });
    };
    t.prototype.getGui = function () {
      return this.eGridBody;
    };
    t.prototype.scrollVertically = function (e) {
      var t = this.eBodyViewport.scrollTop;
      this.bodyScrollFeature.setVerticalScrollPosition(t + e);
      return this.eBodyViewport.scrollTop - t;
    };
    t.prototype.getBodyClientRect = function () {
      if (this.eBodyViewport) {
        return this.eBodyViewport.getBoundingClientRect();
      }
    };
    t.prototype.addRowDragListener = function () {
      this.rowDragFeature = this.createManagedBean(new Mc(this.eBodyViewport));
      this.dragAndDropService.addDropTarget(this.rowDragFeature);
    };
    t.prototype.getRowDragFeature = function () {
      return this.rowDragFeature;
    };
    t.prototype.setFloatingHeights = function () {
      var e = this.pinnedRowModel;
      var t = e.getPinnedTopTotalHeight();
      if (t) {
        t += 1;
      }
      var n = e.getPinnedBottomTotalHeight();
      if (n) {
        n += 1;
      }
      this.view.setTopHeight(t);
      this.view.setBottomHeight(n);
      this.view.setTopDisplay(t ? "inherit" : "none");
      this.view.setBottomDisplay(n ? "inherit" : "none");
    };
    t.prototype.sizeColumnsToFit = function (e) {
      var t = this;
      var n = this.isVerticalScrollShowing() && !Mt() ? this.gridOptionsWrapper.getScrollbarWidth() : 0;
      var r = cn(this.eBodyViewport) - n;
      if (r > 0) {
        this.columnController.sizeColumnsToFit(r, "sizeColumnsToFit");
      } else {
        if (undefined === e) {
          window.setTimeout(function () {
            t.sizeColumnsToFit(100);
          }, 0);
        } else {
          if (100 === e) {
            window.setTimeout(function () {
              t.sizeColumnsToFit(500);
            }, 100);
          } else {
            if (500 === e) {
              window.setTimeout(function () {
                t.sizeColumnsToFit(-1);
              }, 500);
            } else {
              console.warn("AG Grid: tried to call sizeColumnsToFit() but the grid is coming back with zero width, maybe the grid is not visible yet on the screen?");
            }
          }
        }
      }
    };
    Pc([pe("rowContainerHeightService")], t.prototype, "rowContainerHeightService", undefined);
    Pc([pe("controllersService")], t.prototype, "controllersService", undefined);
    Pc([pe("columnController")], t.prototype, "columnController", undefined);
    Pc([pe("scrollVisibleService")], t.prototype, "scrollVisibleService", undefined);
    Pc([fe("contextMenuFactory")], t.prototype, "contextMenuFactory", undefined);
    Pc([pe("headerNavigationService")], t.prototype, "headerNavigationService", undefined);
    Pc([pe("paginationProxy")], t.prototype, "paginationProxy", undefined);
    Pc([pe("dragAndDropService")], t.prototype, "dragAndDropService", undefined);
    Pc([pe("pinnedRowModel")], t.prototype, "pinnedRowModel", undefined);
    Pc([pe("rowRenderer")], t.prototype, "rowRenderer", undefined);
    Pc([pe("popupService")], t.prototype, "popupService", undefined);
    Pc([pe("mouseEventService")], t.prototype, "mouseEventService", undefined);
    return t;
  }(We);
  var Gc = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Uc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Wc = function (e) {
    function n(t) {
      var n = e.call(this) || this;
      n.element = t;
      return n;
    }
    Gc(n, e);
    n.prototype.postConstruct = function () {
      this.addMouseListeners();
      this.mockContextMenuForIPad();
      this.addKeyboardEvents();
    };
    n.prototype.addKeyboardEvents = function () {
      var e = this;
      ["keydown", "keypress"].forEach(function (t) {
        var n = e.processKeyboardEvent.bind(e, t);
        e.addManagedListener(e.element, t, n);
      });
    };
    n.prototype.addMouseListeners = function () {
      var e = this;
      ["dblclick", "contextmenu", "mouseover", "mouseout", "click", "mousedown"].forEach(function (t) {
        var n = e.processMouseEvent.bind(e, t);
        e.addManagedListener(e.element, t, n);
      });
    };
    n.prototype.processMouseEvent = function (e, t) {
      if (this.mouseEventService.isEventFromThisGrid(t) && !ke(t)) {
        var n = this.getRowForEvent(t);
        var r = this.mouseEventService.getRenderedCellForEvent(t);
        if ("contextmenu" === e) {
          this.handleContextMenuMouseEvent(t, null, n, r);
        } else {
          if (r) {
            r.onMouseEvent(e, t);
          }
          if (n) {
            n.onMouseEvent(e, t);
          }
        }
      }
    };
    n.prototype.mockContextMenuForIPad = function () {
      var e = this;
      if (Gt()) {
        var t = new Fo(this.element);
        this.addManagedListener(t, Fo.EVENT_LONG_TAP, function (t) {
          var n = e.getRowForEvent(t.touchEvent);
          var r = e.mouseEventService.getRenderedCellForEvent(t.touchEvent);
          e.handleContextMenuMouseEvent(null, t.touchEvent, n, r);
        });
        this.addDestroyFunc(function () {
          return t.destroy();
        });
      }
    };
    n.prototype.getRowForEvent = function (e) {
      for (var t = Me(e); t;) {
        var n = this.gridOptionsWrapper.getDomData(t, qa.DOM_DATA_KEY_RENDERED_ROW);
        if (n) {
          return n;
        }
        t = t.parentElement;
      }
      return null;
    };
    n.prototype.handleContextMenuMouseEvent = function (e, t, n, r) {
      var o = n ? n.getRowNode() : null;
      var i = r ? r.getColumn() : null;
      var a = null;
      if (i) {
        var s = e || t;
        r.dispatchCellContextMenuEvent(s);
        a = this.valueService.getValue(i, o);
      }
      var c = this.controllersService.getGridBodyController();
      var l = r ? r.getGui() : c.getGridBodyElement();
      if (this.contextMenuFactory) {
        this.contextMenuFactory.onContextMenu(e, t, o, i, a, l);
      }
    };
    n.prototype.processKeyboardEvent = function (e, t) {
      var n = De(this.gridOptionsWrapper, t, "cellComp");
      var r = De(this.gridOptionsWrapper, t, "renderedRow");
      if (!t.defaultPrevented) {
        if (n) {
          this.processCellKeyboardEvent(n, e, t);
        } else {
          if (r && r.isFullWidth()) {
            this.processFullWidthRowKeyboardEvent(r, e, t);
          }
        }
      }
    };
    n.prototype.processCellKeyboardEvent = function (e, t, n) {
      var r = e.getRenderedRow().getRowNode();
      var o = e.getColumn();
      var i = e.isEditing();
      if (!Br(this.gridOptionsWrapper, n, r, o, i)) {
        switch (t) {
          case "keydown":
            if (!(!i && this.navigationService.handlePageScrollingKey(n))) {
              e.onKeyDown(n);
            }
            this.doGridOperations(n, e);
            break;
          case "keypress":
            e.onKeyPress(n);
        }
      }
      if ("keydown" === t) {
        var a = e.createEvent(n, Ke.EVENT_CELL_KEY_DOWN);
        this.eventService.dispatchEvent(a);
      }
      if ("keypress" === t) {
        var s = e.createEvent(n, Ke.EVENT_CELL_KEY_PRESS);
        this.eventService.dispatchEvent(s);
      }
    };
    n.prototype.processFullWidthRowKeyboardEvent = function (e, t, n) {
      var r = e.getRowNode();
      var o = this.focusController.getFocusedCell();
      var i = o && o.column;
      if (!Br(this.gridOptionsWrapper, n, r, i, false)) {
        var a = n.key;
        if ("keydown" === t) {
          switch (a) {
            case uc.UP:
            case uc.DOWN:
              e.onKeyboardNavigate(n);
              break;
            case uc.TAB:
              e.onTabKeyDown(n);
          }
        }
      }
      if ("keydown" === t) {
        var s = e.createRowEvent(Ke.EVENT_CELL_KEY_DOWN, n);
        this.eventService.dispatchEvent(s);
      }
      if ("keypress" === t) {
        var c = e.createRowEvent(Ke.EVENT_CELL_KEY_PRESS, n);
        this.eventService.dispatchEvent(c);
      }
    };
    n.prototype.doGridOperations = function (e, t) {
      if ((e.ctrlKey || e.metaKey) && !t.isEditing() && this.mouseEventService.isEventFromThisGrid(e)) {
        switch (e.which) {
          case _o.A:
            return this.onCtrlAndA(e);
          case _o.C:
            return this.onCtrlAndC(e);
          case _o.V:
            return this.onCtrlAndV();
          case _o.D:
            return this.onCtrlAndD(e);
          case _o.Z:
            return e.shiftKey ? this.undoRedoService.redo() : this.undoRedoService.undo();
          case _o.Y:
            return this.undoRedoService.redo();
        }
      }
    };
    n.prototype.onCtrlAndA = function (e) {
      var t = this.pinnedRowModel;
      var n = this.paginationProxy;
      var r = this.rangeController;
      var o = Ee.PINNED_BOTTOM;
      var a = Ee.PINNED_TOP;
      if (r && n.isRowsToRender()) {
        var s = [t.isEmpty(a), t.isEmpty(o)];
        var c = s[0] ? null : a;
        var l = undefined;
        var u = undefined;
        if (s[1]) {
          l = null;
          u = this.paginationProxy.getRowCount() - 1;
        } else {
          l = o;
          u = t.getPinnedBottomRowData().length - 1;
        }
        var d = this.columnController.getAllDisplayedColumns();
        if (i(d)) {
          return;
        }
        r.setCellRange({
          rowStartIndex: 0,
          rowStartPinned: c,
          rowEndIndex: u,
          rowEndPinned: l,
          columnStart: d[0],
          columnEnd: m(d)
        });
      }
      e.preventDefault();
    };
    n.prototype.onCtrlAndC = function (e) {
      if (this.clipboardService && !this.gridOptionsWrapper.isEnableCellTextSelection()) {
        this.clipboardService.copyToClipboard();
        e.preventDefault();
      }
    };
    n.prototype.onCtrlAndV = function () {
      if (Oe.isRegistered(exports.ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {
        this.clipboardService.pasteFromClipboard();
      }
    };
    n.prototype.onCtrlAndD = function (e) {
      if (Oe.isRegistered(exports.ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {
        this.clipboardService.copyRangeDown();
      }
      e.preventDefault();
    };
    Uc([pe("mouseEventService")], n.prototype, "mouseEventService", undefined);
    Uc([pe("valueService")], n.prototype, "valueService", undefined);
    Uc([fe("contextMenuFactory")], n.prototype, "contextMenuFactory", undefined);
    Uc([pe("controllersService")], n.prototype, "controllersService", undefined);
    Uc([pe("navigationService")], n.prototype, "navigationService", undefined);
    Uc([pe("focusController")], n.prototype, "focusController", undefined);
    Uc([pe("undoRedoService")], n.prototype, "undoRedoService", undefined);
    Uc([pe("columnController")], n.prototype, "columnController", undefined);
    Uc([pe("paginationProxy")], n.prototype, "paginationProxy", undefined);
    Uc([pe("pinnedRowModel")], n.prototype, "pinnedRowModel", undefined);
    Uc([fe("rangeController")], n.prototype, "rangeController", undefined);
    Uc([fe("clipboardService")], n.prototype, "clipboardService", undefined);
    Uc([le], n.prototype, "postConstruct", null);
    return n;
  }(We);
  var Hc = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Vc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var zc = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.centerContainerCon = t;
      return n;
    }
    Hc(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      this.controllersService.whenReady(function () {
        e.gridBodyCon = e.controllersService.getGridBodyController();
        e.listenForResize();
      });
      this.addManagedListener(this.eventService, Ke.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));
    };
    t.prototype.listenForResize = function () {
      var e = this.onCenterViewportResized.bind(this);
      this.centerContainerCon.registerViewportResizeListener(e);
      this.gridBodyCon.registerBodyViewportResizeListener(e);
    };
    t.prototype.onScrollbarWidthChanged = function () {
      this.checkViewportAndScrolls();
    };
    t.prototype.onCenterViewportResized = function () {
      if (this.centerContainerCon.isViewportVisible()) {
        this.checkViewportAndScrolls();
        var e = this.centerContainerCon.getCenterWidth();
        if (e !== this.centerWidth) {
          this.centerWidth = e;
          this.columnController.refreshFlexedColumns({
            viewportWidth: this.centerWidth,
            updateBodyWidths: true,
            fireResizedEvent: true
          });
        }
      } else {
        this.bodyHeight = 0;
      }
    };
    t.prototype.checkViewportAndScrolls = function () {
      this.updateScrollVisibleService();
      this.checkBodyHeight();
      this.onHorizontalViewportChanged();
      this.gridBodyCon.getScrollFeature().checkScrollLeft();
    };
    t.prototype.getBodyHeight = function () {
      return this.bodyHeight;
    };
    t.prototype.checkBodyHeight = function () {
      var e = sn(this.gridBodyCon.getBodyViewportElement());
      if (this.bodyHeight !== e) {
        this.bodyHeight = e;
        var t = {
          type: Ke.EVENT_BODY_HEIGHT_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(t);
      }
    };
    t.prototype.updateScrollVisibleService = function () {
      this.updateScrollVisibleServiceImpl();
      setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);
    };
    t.prototype.updateScrollVisibleServiceImpl = function () {
      var e = {
        horizontalScrollShowing: this.isHorizontalScrollShowing(),
        verticalScrollShowing: this.gridBodyCon.isVerticalScrollShowing()
      };
      this.scrollVisibleService.setScrollsVisible(e);
      this.gridBodyCon.setVerticalScrollPaddingVisible(e.verticalScrollShowing);
    };
    t.prototype.isHorizontalScrollShowing = function () {
      return this.gridOptionsWrapper.isAlwaysShowHorizontalScroll() || this.centerContainerCon.isViewportHScrollShowing();
    };
    t.prototype.onHorizontalViewportChanged = function () {
      var e = this.centerContainerCon.getCenterWidth();
      var t = this.centerContainerCon.getViewportScrollLeft();
      this.columnController.setViewportPosition(e, t);
    };
    Vc([pe("controllersService")], t.prototype, "controllersService", undefined);
    Vc([pe("columnController")], t.prototype, "columnController", undefined);
    Vc([pe("scrollVisibleService")], t.prototype, "scrollVisibleService", undefined);
    Vc([pe("columnApi")], t.prototype, "columnApi", undefined);
    Vc([pe("gridApi")], t.prototype, "gridApi", undefined);
    Vc([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var Yc = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Kc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var qc = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.element = t;
      return n;
    }
    Yc(t, e);
    t.prototype.postConstruct = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_LEFT_PINNED_WIDTH_CHANGED, this.onPinnedLeftWidthChanged.bind(this));
    };
    t.prototype.onPinnedLeftWidthChanged = function () {
      var e = this.pinnedWidthService.getPinnedLeftWidth();
      var t = e > 0;
      tn(this.element, t);
      if (t) {
        In(this.element, e);
      }
    };
    Kc([pe("pinnedWidthService")], t.prototype, "pinnedWidthService", undefined);
    Kc([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var Xc = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Qc = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Zc = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.element = t;
      return n;
    }
    Xc(t, e);
    t.prototype.postConstruct = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_RIGHT_PINNED_WIDTH_CHANGED, this.onPinnedRightWidthChanged.bind(this));
    };
    t.prototype.onPinnedRightWidthChanged = function () {
      var e = this.pinnedWidthService.getPinnedRightWidth();
      var t = e > 0;
      tn(this.element, t);
      if (t) {
        In(this.element, e);
      }
    };
    Qc([pe("pinnedWidthService")], t.prototype, "pinnedWidthService", undefined);
    Qc([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var Jc = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var $c = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var el = function (e) {
    function t(t, n) {
      var r = e.call(this) || this;
      r.eContainer = t;
      r.eWrapper = n;
      return r;
    }
    Jc(t, e);
    t.prototype.postConstruct = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onHeightChanged.bind(this));
    };
    t.prototype.onHeightChanged = function () {
      var e = this.maxDivHeightScaler.getUiContainerHeight();
      var t = null != e ? e + "px" : "";
      this.eContainer.style.height = t;
      if (this.eWrapper) {
        this.eWrapper.style.height = t;
      }
    };
    $c([pe("rowContainerHeightService")], t.prototype, "maxDivHeightScaler", undefined);
    $c([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var tl = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var nl = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var rl = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.eContainer = t;
      return n;
    }
    tl(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      if (this.gridOptionsWrapper.isEnableRangeSelection() && !o(this.rangeController)) {
        var t = {
          eElement: this.eContainer,
          onDragStart: this.rangeController.onDragStart.bind(this.rangeController),
          onDragStop: this.rangeController.onDragStop.bind(this.rangeController),
          onDragging: this.rangeController.onDragging.bind(this.rangeController)
        };
        this.dragService.addDragSource(t);
        this.addDestroyFunc(function () {
          return e.dragService.removeDragSource(t);
        });
      }
    };
    nl([fe("rangeController")], t.prototype, "rangeController", undefined);
    nl([pe("dragService")], t.prototype, "dragService", undefined);
    nl([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var ol = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var il = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var al = function () {
    for (var e = 0, t = 0, n = arguments.length; t < n; t++) {
      e += arguments[t].length;
    }
    var r = Array(e);
    var o = 0;
    for (t = 0; t < n; t++) {
      for (var i = arguments[t], a = 0, s = i.length; a < s; a++, o++) {
        r[o] = i[a];
      }
    }
    return r;
  };
  !function (e) {
    e.LEFT = "left";
    e.RIGHT = "right";
    e.CENTER = "center";
    e.FULL_WIDTH = "fullWidth";
    e.TOP_LEFT = "topLeft";
    e.TOP_RIGHT = "topRight";
    e.TOP_CENTER = "topCenter";
    e.TOP_FULL_WITH = "topFullWidth";
    e.BOTTOM_LEFT = "bottomLeft";
    e.BOTTOM_RIGHT = "bottomRight";
    e.BOTTOM_CENTER = "bottomCenter";
    e.BOTTOM_FULL_WITH = "bottomFullWidth";
  }(Bc || (Bc = {}));
  var sl;
  var cl;
  var ll = at([[Bc.CENTER, "ag-center-cols-container"], [Bc.LEFT, "ag-pinned-left-cols-container"], [Bc.RIGHT, "ag-pinned-right-cols-container"], [Bc.FULL_WIDTH, "ag-full-width-container"], [Bc.TOP_CENTER, "ag-floating-top-container"], [Bc.TOP_LEFT, "ag-pinned-left-floating-top"], [Bc.TOP_RIGHT, "ag-pinned-right-floating-top"], [Bc.TOP_FULL_WITH, "ag-floating-top-full-width-container"], [Bc.BOTTOM_CENTER, "ag-floating-bottom-container"], [Bc.BOTTOM_LEFT, "ag-pinned-left-floating-bottom"], [Bc.BOTTOM_RIGHT, "ag-pinned-right-floating-bottom"], [Bc.BOTTOM_FULL_WITH, "ag-floating-bottom-full-width-container"]]);
  var ul = at([[Bc.CENTER, "ag-center-cols-viewport"], [Bc.TOP_CENTER, "ag-floating-top-viewport"], [Bc.BOTTOM_CENTER, "ag-floating-bottom-viewport"]]);
  var dl = at([[Bc.CENTER, "ag-center-cols-clipper"]]);
  var pl = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.name = t;
      return n;
    }
    ol(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      this.addManagedListener(this.eventService, Ke.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
      this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
      this.forContainers([Bc.CENTER], function () {
        return e.viewportSizeFeature = e.createManagedBean(new zc(e));
      });
      this.registerWithControllersService();
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
    };
    t.prototype.registerWithControllersService = function () {
      switch (this.name) {
        case Bc.CENTER:
          this.controllersService.registerCenterRowContainerCon(this);
          break;
        case Bc.LEFT:
          this.controllersService.registerLeftRowContainerCon(this);
          break;
        case Bc.RIGHT:
          this.controllersService.registerRightRowContainerCon(this);
          break;
        case Bc.TOP_CENTER:
          this.controllersService.registerTopCenterRowContainerCon(this);
          break;
        case Bc.TOP_LEFT:
          this.controllersService.registerTopLeftRowContainerCon(this);
          break;
        case Bc.TOP_RIGHT:
          this.controllersService.registerTopRightRowContainerCon(this);
          break;
        case Bc.BOTTOM_CENTER:
          this.controllersService.registerBottomCenterRowContainerCon(this);
          break;
        case Bc.BOTTOM_LEFT:
          this.controllersService.registerBottomLeftRowContainerCon(this);
          break;
        case Bc.BOTTOM_RIGHT:
          this.controllersService.registerBottomRightRowContainerCon(this);
      }
    };
    t.prototype.forContainers = function (e, t) {
      if (e.indexOf(this.name) >= 0) {
        t();
      }
    };
    t.prototype.getContainerElement = function () {
      return this.eContainer;
    };
    t.prototype.getViewportSizeFeature = function () {
      return this.viewportSizeFeature;
    };
    t.prototype.setView = function (e, t, n, r) {
      var o = this;
      this.view = e;
      this.eContainer = t;
      this.eViewport = n;
      this.eWrapper = r;
      this.createManagedBean(new Wc(this.eContainer));
      this.addPreventScrollWhileDragging();
      var i = [Bc.TOP_CENTER, Bc.TOP_LEFT, Bc.TOP_RIGHT];
      var a = [Bc.BOTTOM_CENTER, Bc.BOTTOM_LEFT, Bc.BOTTOM_RIGHT];
      var s = [Bc.CENTER, Bc.LEFT, Bc.RIGHT];
      var c = al(i, a, s);
      var l = [Bc.CENTER, Bc.LEFT, Bc.RIGHT, Bc.FULL_WIDTH];
      var u = [Bc.CENTER, Bc.TOP_CENTER, Bc.BOTTOM_CENTER];
      var d = [Bc.LEFT, Bc.BOTTOM_LEFT, Bc.TOP_LEFT];
      var p = [Bc.RIGHT, Bc.BOTTOM_RIGHT, Bc.TOP_RIGHT];
      this.forContainers(d, function () {
        return o.createManagedBean(new qc(o.eContainer));
      });
      this.forContainers(p, function () {
        return o.createManagedBean(new Zc(o.eContainer));
      });
      this.forContainers(l, function () {
        return o.createManagedBean(new el(o.eContainer, o.eWrapper));
      });
      this.forContainers(c, function () {
        return o.createManagedBean(new rl(o.eContainer));
      });
      this.forContainers(u, function () {
        return o.createManagedBean(new fc(function (e) {
          return o.eContainer.style.width = e + "px";
        }));
      });
    };
    t.prototype.onDisplayedColumnsChanged = function () {
      var e = this;
      this.forContainers([Bc.CENTER], function () {
        return e.onHorizontalViewportChanged();
      });
    };
    t.prototype.onDisplayedColumnsWidthChanged = function () {
      var e = this;
      this.forContainers([Bc.CENTER], function () {
        return e.onHorizontalViewportChanged();
      });
    };
    t.prototype.onScrollVisibilityChanged = function () {
      if (this.name === Bc.CENTER) {
        var e = this.scrollVisibleService.isHorizontalScrollShowing() && this.gridOptionsWrapper.getScrollbarWidth() || 0;
        var t = 0 == e ? "100%" : "calc(100% + " + e + "px)";
        this.view.setViewportHeight(t);
      }
    };
    t.prototype.addPreventScrollWhileDragging = function () {
      var e = this;
      var t = function (t) {
        if (e.dragService.isDragging() && t.cancelable) {
          t.preventDefault();
        }
      };
      this.eContainer.addEventListener("touchmove", t, {
        passive: false
      });
      this.addDestroyFunc(function () {
        return e.eContainer.removeEventListener("touchmove", t);
      });
    };
    t.prototype.onHorizontalViewportChanged = function () {
      var e = this.getCenterWidth();
      var t = this.getCenterViewportScrollLeft();
      this.columnController.setViewportPosition(e, t);
    };
    t.prototype.getCenterWidth = function () {
      return cn(this.eViewport);
    };
    t.prototype.getCenterViewportScrollLeft = function () {
      return pn(this.eViewport, this.enableRtl);
    };
    t.prototype.registerViewportResizeListener = function (e) {
      var t = this.resizeObserverService.observeResize(this.eViewport, e);
      this.addDestroyFunc(function () {
        return t();
      });
    };
    t.prototype.isViewportVisible = function () {
      return gn(this.eViewport);
    };
    t.prototype.isViewportHScrollShowing = function () {
      return Cn(this.eViewport);
    };
    t.prototype.getViewportScrollLeft = function () {
      return pn(this.eViewport, this.enableRtl);
    };
    t.prototype.isHorizontalScrollShowing = function () {
      return this.gridOptionsWrapper.isAlwaysShowHorizontalScroll() || Cn(this.eViewport);
    };
    t.prototype.getViewportElement = function () {
      return this.eViewport;
    };
    t.prototype.setContainerTranslateX = function (e) {
      this.eContainer.style.transform = "translateX(" + e + "px)";
    };
    t.prototype.getHScrollPosition = function () {
      return {
        left: this.eViewport.scrollLeft,
        right: this.eViewport.scrollLeft + this.eViewport.offsetWidth
      };
    };
    t.prototype.setCenterViewportScrollLeft = function (e) {
      fn(this.eViewport, e, this.enableRtl);
    };
    il([pe("scrollVisibleService")], t.prototype, "scrollVisibleService", undefined);
    il([pe("dragService")], t.prototype, "dragService", undefined);
    il([pe("controllersService")], t.prototype, "controllersService", undefined);
    il([pe("columnController")], t.prototype, "columnController", undefined);
    il([pe("resizeObserverService")], t.prototype, "resizeObserverService", undefined);
    il([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var fl = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var hl = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var ml = "<div class=\"ag-root ag-unselectable\" role=\"grid\" unselectable=\"on\">\n        <ag-header-root ref=\"headerRoot\" unselectable=\"on\"></ag-header-root>\n        <div class=\"ag-floating-top\" ref=\"eTop\" role=\"presentation\" unselectable=\"on\">\n            <ag-row-container ref=\"topLeftContainer\" name=\"" + Bc.TOP_LEFT + "\"></ag-row-container>\n            <ag-row-container ref=\"topCenterContainer\" name=\"" + Bc.TOP_CENTER + "\"></ag-row-container>\n            <ag-row-container ref=\"topRightContainer\" name=\"" + Bc.TOP_RIGHT + "\"></ag-row-container>\n            <ag-row-container ref=\"topFullWidthContainer\" name=\"" + Bc.TOP_FULL_WITH + "\"></ag-row-container>\n        </div>\n        <div class=\"ag-body-viewport\" ref=\"eBodyViewport\" role=\"presentation\">\n            <ag-row-container ref=\"leftContainer\" name=\"" + Bc.LEFT + "\"></ag-row-container>\n            <ag-row-container ref=\"centerContainer\" name=\"" + Bc.CENTER + "\"></ag-row-container>\n            <ag-row-container ref=\"rightContainer\" name=\"" + Bc.RIGHT + "\"></ag-row-container>\n            <ag-row-container ref=\"fullWidthContainer\" name=\"" + Bc.FULL_WIDTH + "\"></ag-row-container>\n        </div>\n        <div class=\"ag-floating-bottom\" ref=\"eBottom\" role=\"presentation\" unselectable=\"on\">\n            <ag-row-container ref=\"bottomLeftContainer\" name=\"" + Bc.BOTTOM_LEFT + "\"></ag-row-container>\n            <ag-row-container ref=\"bottomCenterContainer\" name=\"" + Bc.BOTTOM_CENTER + "\"></ag-row-container>\n            <ag-row-container ref=\"bottomRightContainer\" name=\"" + Bc.BOTTOM_RIGHT + "\"></ag-row-container>\n            <ag-row-container ref=\"bottomFullWidthContainer\" name=\"" + Bc.BOTTOM_FULL_WITH + "\"></ag-row-container>\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>";
  var gl = function (e) {
    function n() {
      return e.call(this, ml) || this;
    }
    fl(n, e);
    n.prototype.init = function () {
      var e = this;
      var n = function (e, t) {
        var n = e + "px";
        t.style.minHeight = n;
        t.style.height = n;
      };
      var r = {
        setRowAnimationCssOnBodyViewport: this.setRowAnimationCssOnBodyViewport.bind(this),
        setColumnCount: function (t) {
          return mr(e.getGui(), t);
        },
        setRowCount: function (t) {
          return fr(e.getGui(), t);
        },
        setTopHeight: function (t) {
          return n(t, e.eTop);
        },
        setBottomHeight: function (t) {
          return n(t, e.eBottom);
        },
        setTopDisplay: function (t) {
          return e.eTop.style.display = t;
        },
        setBottomDisplay: function (t) {
          return e.eBottom.style.display = t;
        },
        setColumnMovingCss: function (t) {
          return e.addOrRemoveCssClass("ag-column-moving", t);
        },
        updateLayoutClasses: function (n) {
          Jt(e.eBodyViewport, exports.LayoutCssClasses.AUTO_HEIGHT, n.autoHeight);
          Jt(e.eBodyViewport, exports.LayoutCssClasses.NORMAL, n.normal);
          Jt(e.eBodyViewport, exports.LayoutCssClasses.PRINT, n.print);
          e.addOrRemoveCssClass(exports.LayoutCssClasses.AUTO_HEIGHT, n.autoHeight);
          e.addOrRemoveCssClass(exports.LayoutCssClasses.NORMAL, n.normal);
          e.addOrRemoveCssClass(exports.LayoutCssClasses.PRINT, n.print);
        },
        setAlwaysVerticalScrollClass: function (t) {
          return Jt(e.eBodyViewport, "ag-force-vertical-scroll", t);
        },
        registerBodyViewportResizeListener: function (t) {
          var n = e.resizeObserverService.observeResize(e.eBodyViewport, t);
          e.addDestroyFunc(function () {
            return n();
          });
        },
        setVerticalScrollPaddingVisible: function (t) {
          var n = t ? "scroll" : "hidden";
          e.eTop.style.overflowY = e.eBottom.style.overflowY = n;
        },
        setCellSelectableCss: function (t) {
          [e.eTop, e.eBodyViewport, e.eBottom].forEach(function (e) {
            return Jt(e, "ag-selectable", t);
          });
        }
      };
      this.controller = this.createManagedBean(new Fc());
      this.controller.setView(r, this.getGui(), this.eBodyViewport, this.eTop, this.eBottom);
      if (this.$scope) {
        this.addAngularApplyCheck();
      }
      this.gridApi.registerGridComp(this);
      this.beans.registerGridComp(this);
      if (this.contextMenuFactory) {
        this.contextMenuFactory.registerGridComp(this);
      }
      if (this.menuFactory) {
        this.menuFactory.registerGridComp(this);
      }
      if (this.rangeController || this.gridOptionsWrapper.isRowSelectionMulti()) {
        pr(this.getGui(), true);
        if (this.rangeController) {
          this.rangeController.registerGridComp(this);
        }
      }
      [this.eTop, this.eBodyViewport, this.eBottom].forEach(function (t) {
        e.addManagedListener(t, "focusin", function () {
          Qt(t, "ag-has-focus");
        });
        e.addManagedListener(t, "focusout", function (e) {
          if (!t.contains(e.relatedTarget)) {
            Zt(t, "ag-has-focus");
          }
        });
      });
    };
    n.prototype.setRowAnimationCssOnBodyViewport = function (e) {
      Jt(this.eBodyViewport, Sc.ANIMATION_ON, e);
      Jt(this.eBodyViewport, Sc.ANIMATION_OFF, !e);
    };
    n.prototype.addAngularApplyCheck = function () {
      var e = this;
      var t = false;
      var n = function () {
        if (!t) {
          t = true;
          window.setTimeout(function () {
            t = false;
            e.$scope.$apply();
          }, 0);
        }
      };
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, n);
      this.addManagedListener(this.eventService, Ke.EVENT_VIRTUAL_COLUMNS_CHANGED, n);
    };
    n.prototype.getFloatingTopBottom = function () {
      return [this.eTop, this.eBottom];
    };
    n.prototype.addScrollEventListener = function (e) {
      this.eBodyViewport.addEventListener("scroll", e);
    };
    n.prototype.removeScrollEventListener = function (e) {
      this.eBodyViewport.removeEventListener("scroll", e);
    };
    hl([pe("beans")], n.prototype, "beans", undefined);
    hl([pe("gridApi")], n.prototype, "gridApi", undefined);
    hl([pe("$scope")], n.prototype, "$scope", undefined);
    hl([pe("resizeObserverService")], n.prototype, "resizeObserverService", undefined);
    hl([fe("rangeController")], n.prototype, "rangeController", undefined);
    hl([fe("contextMenuFactory")], n.prototype, "contextMenuFactory", undefined);
    hl([fe("menuFactory")], n.prototype, "menuFactory", undefined);
    hl([uo("eBodyViewport")], n.prototype, "eBodyViewport", undefined);
    hl([uo("eTop")], n.prototype, "eTop", undefined);
    hl([uo("eBottom")], n.prototype, "eBottom", undefined);
    hl([uo("headerRoot")], n.prototype, "headerRootComp", undefined);
    hl([le], n.prototype, "init", null);
    return n;
  }(so);
  (sl = exports.ExcelFactoryMode || (exports.ExcelFactoryMode = {}))[sl.SINGLE_SHEET = 0] = "SINGLE_SHEET";
  sl[sl.MULTI_SHEET = 1] = "MULTI_SHEET";
  (cl = exports.ClientSideRowModelSteps || (exports.ClientSideRowModelSteps = {})).EVERYTHING = "group";
  cl.FILTER = "filter";
  cl.SORT = "sort";
  cl.MAP = "map";
  cl.AGGREGATE = "aggregate";
  cl.PIVOT = "pivot";
  cl.NOTHING = "nothing";
  var _l;
  var vl = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var bl = function () {
    function e() {
      this.detailGridInfoMap = {};
      this.destroyCalled = false;
    }
    e.prototype.registerGridComp = function (e) {
      this.gridBodyComp = e;
    };
    e.prototype.registerOverlayWrapperComp = function (e) {
      this.overlayWrapperComp = e;
    };
    e.prototype.registerGridCompController = function (e) {
      this.gridCompController = e;
    };
    e.prototype.registerHeaderRootComp = function (e) {
      this.headerRootComp = e;
    };
    e.prototype.registerSideBarComp = function (e) {
      this.sideBarComp = e;
    };
    e.prototype.init = function () {
      var e = this;
      switch (this.rowModel.getType()) {
        case Ee.ROW_MODEL_TYPE_CLIENT_SIDE:
          this.clientSideRowModel = this.rowModel;
          break;
        case Ee.ROW_MODEL_TYPE_INFINITE:
          this.infiniteRowModel = this.rowModel;
          break;
        case Ee.ROW_MODEL_TYPE_SERVER_SIDE:
          this.serverSideRowModel = this.rowModel;
      }
      this.controllersService.whenReady(function () {
        e.gridBodyCon = e.controllersService.getGridBodyController();
      });
    };
    e.prototype.__getAlignedGridService = function () {
      return this.alignedGridsService;
    };
    e.prototype.addDetailGridInfo = function (e, t) {
      this.detailGridInfoMap[e] = t;
    };
    e.prototype.removeDetailGridInfo = function (e) {
      this.detailGridInfoMap[e] = undefined;
    };
    e.prototype.getDetailGridInfo = function (e) {
      return this.detailGridInfoMap[e];
    };
    e.prototype.forEachDetailGridInfo = function (e) {
      var t = 0;
      R(this.detailGridInfoMap, function (n, o) {
        if (r(o)) {
          e(o, t);
          t++;
        }
      });
    };
    e.prototype.getDataAsCsv = function (e) {
      if (Oe.assertRegistered(exports.ModuleNames.CsvExportModule, "api.getDataAsCsv")) {
        return this.csvCreator.getDataAsCsv(e);
      }
    };
    e.prototype.exportDataAsCsv = function (e) {
      if (Oe.assertRegistered(exports.ModuleNames.CsvExportModule, "api.exportDataAsCSv")) {
        this.csvCreator.exportDataAsCsv(e);
      }
    };
    e.prototype.getDataAsExcel = function (e) {
      if (Oe.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.getDataAsExcel")) {
        var n = e && e.exportMode || "xlsx";
        return this.excelCreator.getFactoryMode(n) === exports.ExcelFactoryMode.MULTI_SHEET ? void console.warn("AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`") : this.excelCreator.getDataAsExcel(e);
      }
    };
    e.prototype.exportDataAsExcel = function (e) {
      if (Oe.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.exportDataAsExcel")) {
        var n = e && e.exportMode || "xlsx";
        if (this.excelCreator.getFactoryMode(n) === exports.ExcelFactoryMode.MULTI_SHEET) {
          return void console.warn("AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`");
        }
        this.excelCreator.exportDataAsExcel(e);
      }
    };
    e.prototype.getSheetDataForExcel = function (e) {
      if (Oe.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.getSheetDataForExcel")) {
        var n = e && e.exportMode || "xlsx";
        this.excelCreator.setFactoryMode(exports.ExcelFactoryMode.MULTI_SHEET, n);
        return this.excelCreator.getSheetDataForExcel(e);
      }
    };
    e.prototype.getMultipleSheetsAsExcel = function (e) {
      if (Oe.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.getMultipleSheetsAsExcel")) {
        return this.excelCreator.getMultipleSheetsAsExcel(e);
      }
    };
    e.prototype.exportMultipleSheetsAsExcel = function (e) {
      if (Oe.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.exportMultipleSheetsAsExcel")) {
        return this.excelCreator.exportMultipleSheetsAsExcel(e);
      }
    };
    e.prototype.setEnterpriseDatasource = function (e) {
      console.warn("ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()");
      this.setServerSideDatasource(e);
    };
    e.prototype.setGridAriaProperty = function (e, t) {
      if (e) {
        var n = this.gridBodyComp.getGui();
        var r = "aria-" + e;
        if (null === t) {
          n.removeAttribute(r);
        } else {
          n.setAttribute(r, t);
        }
      }
    };
    e.prototype.setServerSideDatasource = function (e) {
      if (this.serverSideRowModel) {
        this.serverSideRowModel.setDatasource(e);
      } else {
        console.warn("AG Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '" + Ee.ROW_MODEL_TYPE_SERVER_SIDE + "'");
      }
    };
    e.prototype.setDatasource = function (e) {
      if (this.gridOptionsWrapper.isRowModelInfinite()) {
        this.rowModel.setDatasource(e);
      } else {
        console.warn("AG Grid: you can only use a datasource when gridOptions.rowModelType is '" + Ee.ROW_MODEL_TYPE_INFINITE + "'");
      }
    };
    e.prototype.setViewportDatasource = function (e) {
      if (this.gridOptionsWrapper.isRowModelViewport()) {
        this.rowModel.setViewportDatasource(e);
      } else {
        console.warn("AG Grid: you can only use a viewport datasource when gridOptions.rowModelType is '" + Ee.ROW_MODEL_TYPE_VIEWPORT + "'");
      }
    };
    e.prototype.setRowData = function (e) {
      if (this.gridOptionsWrapper.isRowModelDefault()) {
        if (this.gridOptionsWrapper.isImmutableData()) {
          var t = this.immutableService.createTransactionForRowData(e);
          if (!t) {
            return;
          }
          var n = t[0];
          var r = t[1];
          var o = this.clientSideRowModel.updateRowData(n, r);
          if (o) {
            this.rowRenderer.refreshFullWidthRows(o.update);
          }
        } else {
          this.selectionController.reset();
          this.clientSideRowModel.setRowData(e);
        }
      } else {
        console.warn("cannot call setRowData unless using normal row model");
      }
    };
    e.prototype.setFloatingTopRowData = function (e) {
      console.warn("AG Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()");
      this.setPinnedTopRowData(e);
    };
    e.prototype.setFloatingBottomRowData = function (e) {
      console.warn("AG Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()");
      this.setPinnedBottomRowData(e);
    };
    e.prototype.getFloatingTopRowCount = function () {
      console.warn("AG Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()");
      return this.getPinnedTopRowCount();
    };
    e.prototype.getFloatingBottomRowCount = function () {
      console.warn("AG Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()");
      return this.getPinnedBottomRowCount();
    };
    e.prototype.getFloatingTopRow = function (e) {
      console.warn("AG Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()");
      return this.getPinnedTopRow(e);
    };
    e.prototype.getFloatingBottomRow = function (e) {
      console.warn("AG Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()");
      return this.getPinnedBottomRow(e);
    };
    e.prototype.setPinnedTopRowData = function (e) {
      this.pinnedRowModel.setPinnedTopRowData(e);
    };
    e.prototype.setPinnedBottomRowData = function (e) {
      this.pinnedRowModel.setPinnedBottomRowData(e);
    };
    e.prototype.getPinnedTopRowCount = function () {
      return this.pinnedRowModel.getPinnedTopRowCount();
    };
    e.prototype.getPinnedBottomRowCount = function () {
      return this.pinnedRowModel.getPinnedBottomRowCount();
    };
    e.prototype.getPinnedTopRow = function (e) {
      return this.pinnedRowModel.getPinnedTopRow(e);
    };
    e.prototype.getPinnedBottomRow = function (e) {
      return this.pinnedRowModel.getPinnedBottomRow(e);
    };
    e.prototype.setColumnDefs = function (e, t) {
      if (undefined === t) {
        t = "api";
      }
      this.columnController.setColumnDefs(e, t);
    };
    e.prototype.setAutoGroupColumnDef = function (e, t) {
      this.gridOptionsWrapper.setProperty("autoGroupColumnDef", e, true);
    };
    e.prototype.expireValueCache = function () {
      this.valueCache.expire();
    };
    e.prototype.getVerticalPixelRange = function () {
      return this.gridBodyCon.getScrollFeature().getVScrollPosition();
    };
    e.prototype.getHorizontalPixelRange = function () {
      return this.gridBodyCon.getScrollFeature().getHScrollPosition();
    };
    e.prototype.setAlwaysShowHorizontalScroll = function (e) {
      this.gridOptionsWrapper.setProperty("alwaysShowHorizontalScroll", e);
    };
    e.prototype.setAlwaysShowVerticalScroll = function (e) {
      this.gridOptionsWrapper.setProperty("alwaysShowVerticalScroll", e);
    };
    e.prototype.refreshToolPanel = function () {
      if (this.sideBarComp) {
        this.sideBarComp.refresh();
      }
    };
    e.prototype.refreshCells = function (e) {
      if (undefined === e) {
        e = {};
      }
      if (Array.isArray(e)) {
        console.warn("since AG Grid v11.1, refreshCells() now takes parameters, please see the documentation.");
      } else {
        this.rowRenderer.refreshCells(e);
      }
    };
    e.prototype.flashCells = function (e) {
      if (undefined === e) {
        e = {};
      }
      this.rowRenderer.flashCells(e);
    };
    e.prototype.redrawRows = function (e) {
      if (undefined === e) {
        e = {};
      }
      var t = e ? e.rowNodes : undefined;
      this.rowRenderer.redrawRows(t);
    };
    e.prototype.refreshView = function () {
      console.warn("AG Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead");
      this.redrawRows();
    };
    e.prototype.refreshRows = function (e) {
      console.warn("since AG Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead");
      this.refreshCells({
        rowNodes: e
      });
    };
    e.prototype.rowDataChanged = function (e) {
      console.warn("AG Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node");
      this.redrawRows();
    };
    e.prototype.softRefreshView = function () {
      console.error("AG Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.");
    };
    e.prototype.refreshGroupRows = function () {
      console.warn("AG Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should not be necessary to only refresh the group rows.");
      this.refreshCells();
    };
    e.prototype.setFunctionsReadOnly = function (e) {
      this.gridOptionsWrapper.setProperty("functionsReadOnly", e);
    };
    e.prototype.refreshHeader = function () {
      this.headerRootComp.refreshHeader();
    };
    e.prototype.isAnyFilterPresent = function () {
      return this.filterManager.isAnyFilterPresent();
    };
    e.prototype.isAdvancedFilterPresent = function () {
      console.warn("AG Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()");
      return this.isColumnFilterPresent();
    };
    e.prototype.isColumnFilterPresent = function () {
      return this.filterManager.isAdvancedFilterPresent();
    };
    e.prototype.isQuickFilterPresent = function () {
      return this.filterManager.isQuickFilterPresent();
    };
    e.prototype.getModel = function () {
      return this.rowModel;
    };
    e.prototype.setRowNodeExpanded = function (e, t) {
      if (e) {
        e.setExpanded(t);
      }
    };
    e.prototype.onGroupExpandedOrCollapsed = function (e) {
      if (o(this.clientSideRowModel)) {
        console.warn("AG Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model");
      }
      if (r(e)) {
        console.warn("AG Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows");
      }
      this.clientSideRowModel.refreshModel({
        step: exports.ClientSideRowModelSteps.MAP
      });
    };
    e.prototype.refreshInMemoryRowModel = function (e) {
      console.warn("ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()");
      this.refreshClientSideRowModel(e);
    };
    e.prototype.refreshClientSideRowModel = function (e) {
      if (o(this.clientSideRowModel)) {
        console.warn("cannot call refreshClientSideRowModel unless using normal row model");
      }
      var n = exports.ClientSideRowModelSteps.EVERYTHING;
      var i = {
        group: exports.ClientSideRowModelSteps.EVERYTHING,
        filter: exports.ClientSideRowModelSteps.FILTER,
        map: exports.ClientSideRowModelSteps.MAP,
        aggregate: exports.ClientSideRowModelSteps.AGGREGATE,
        sort: exports.ClientSideRowModelSteps.SORT,
        pivot: exports.ClientSideRowModelSteps.PIVOT
      };
      if (r(e)) {
        n = i[e];
      }
      if (o(n)) {
        console.error("AG Grid: invalid step " + e + ", available steps are " + Object.keys(i).join(", "));
      } else {
        var a = {
          step: n,
          keepRenderedRows: true,
          animate: true,
          keepEditingRows: true
        };
        this.clientSideRowModel.refreshModel(a);
      }
    };
    e.prototype.isAnimationFrameQueueEmpty = function () {
      return this.animationFrameService.isQueueEmpty();
    };
    e.prototype.getRowNode = function (e) {
      return this.rowModel.getRowNode(e);
    };
    e.prototype.getSizesForCurrentTheme = function () {
      return {
        rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
        headerHeight: this.gridOptionsWrapper.getHeaderHeight()
      };
    };
    e.prototype.expandAll = function () {
      if (this.clientSideRowModel) {
        this.clientSideRowModel.expandOrCollapseAll(true);
      } else {
        if (this.serverSideRowModel) {
          this.serverSideRowModel.expandAll(true);
        } else {
          console.warn("AG Grid: expandAll only works with Client Side Row Model and Server Side Row Model");
        }
      }
    };
    e.prototype.collapseAll = function () {
      if (this.clientSideRowModel) {
        this.clientSideRowModel.expandOrCollapseAll(false);
      } else {
        if (this.serverSideRowModel) {
          this.serverSideRowModel.expandAll(false);
        } else {
          console.warn("AG Grid: collapseAll only works with Client Side Row Model and Server Side Row Model");
        }
      }
    };
    e.prototype.getToolPanelInstance = function (e) {
      if (this.sideBarComp) {
        return this.sideBarComp.getToolPanelInstance(e);
      }
      console.warn("AG Grid: toolPanel is only available in AG Grid Enterprise");
    };
    e.prototype.addVirtualRowListener = function (e, t, n) {
      if ("string" !== typeof e) {
        console.warn("AG Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.");
      }
      this.addRenderedRowListener(e, t, n);
    };
    e.prototype.addRenderedRowListener = function (e, t, n) {
      if ("virtualRowSelected" === e) {
        console.warn("AG Grid: event virtualRowSelected is deprecated, to register for individual row\n                selection events, add a listener directly to the row node.");
      }
      this.rowRenderer.addRenderedRowListener(e, t, n);
    };
    e.prototype.setQuickFilter = function (e) {
      this.filterManager.setQuickFilter(e);
    };
    e.prototype.selectIndex = function (e, t, n) {
      console.warn("AG Grid: do not use api for selection, call node.setSelected(value) instead");
      if (n) {
        console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
      }
      this.selectionController.selectIndex(e, t);
    };
    e.prototype.deselectIndex = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      console.warn("AG Grid: do not use api for selection, call node.setSelected(value) instead");
      if (t) {
        console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
      }
      this.selectionController.deselectIndex(e);
    };
    e.prototype.selectNode = function (e, t, n) {
      if (undefined === t) {
        t = false;
      }
      if (undefined === n) {
        n = false;
      }
      console.warn("AG Grid: API for selection is deprecated, call node.setSelected(value) instead");
      if (n) {
        console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
      }
      e.setSelectedParams({
        newValue: true,
        clearSelection: !t
      });
    };
    e.prototype.deselectNode = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      console.warn("AG Grid: API for selection is deprecated, call node.setSelected(value) instead");
      if (t) {
        console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
      }
      e.setSelectedParams({
        newValue: false
      });
    };
    e.prototype.selectAll = function () {
      this.selectionController.selectAllRowNodes();
    };
    e.prototype.deselectAll = function () {
      this.selectionController.deselectAllRowNodes();
    };
    e.prototype.selectAllFiltered = function () {
      this.selectionController.selectAllRowNodes(true);
    };
    e.prototype.deselectAllFiltered = function () {
      this.selectionController.deselectAllRowNodes(true);
    };
    e.prototype.recomputeAggregates = function () {
      if (o(this.clientSideRowModel)) {
        console.warn("cannot call recomputeAggregates unless using normal row model");
      }
      console.warn("recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead");
      this.clientSideRowModel.refreshModel({
        step: exports.ClientSideRowModelSteps.AGGREGATE
      });
    };
    e.prototype.sizeColumnsToFit = function () {
      this.gridBodyCon.sizeColumnsToFit();
    };
    e.prototype.showLoadingOverlay = function () {
      this.overlayWrapperComp.showLoadingOverlay();
    };
    e.prototype.showNoRowsOverlay = function () {
      this.overlayWrapperComp.showNoRowsOverlay();
    };
    e.prototype.hideOverlay = function () {
      this.overlayWrapperComp.hideOverlay();
    };
    e.prototype.isNodeSelected = function (e) {
      console.warn("AG Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead");
      return e.isSelected();
    };
    e.prototype.getSelectedNodesById = function () {
      console.error("AG Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead");
      return null;
    };
    e.prototype.getSelectedNodes = function () {
      return this.selectionController.getSelectedNodes();
    };
    e.prototype.getSelectedRows = function () {
      return this.selectionController.getSelectedRows();
    };
    e.prototype.getBestCostNodeSelection = function () {
      return this.selectionController.getBestCostNodeSelection();
    };
    e.prototype.getRenderedNodes = function () {
      return this.rowRenderer.getRenderedNodes();
    };
    e.prototype.ensureColIndexVisible = function (e) {
      console.warn("AG Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.");
    };
    e.prototype.ensureColumnVisible = function (e) {
      this.gridBodyCon.getScrollFeature().ensureColumnVisible(e);
    };
    e.prototype.ensureIndexVisible = function (e, t) {
      this.gridBodyCon.getScrollFeature().ensureIndexVisible(e, t);
    };
    e.prototype.ensureNodeVisible = function (e, t) {
      if (undefined === t) {
        t = null;
      }
      this.gridBodyCon.getScrollFeature().ensureNodeVisible(e, t);
    };
    e.prototype.forEachLeafNode = function (e) {
      if (o(this.clientSideRowModel)) {
        console.warn("cannot call forEachNode unless using normal row model");
      }
      this.clientSideRowModel.forEachLeafNode(e);
    };
    e.prototype.forEachNode = function (e) {
      this.rowModel.forEachNode(e);
    };
    e.prototype.forEachNodeAfterFilter = function (e) {
      if (o(this.clientSideRowModel)) {
        console.warn("cannot call forEachNodeAfterFilter unless using normal row model");
      }
      this.clientSideRowModel.forEachNodeAfterFilter(e);
    };
    e.prototype.forEachNodeAfterFilterAndSort = function (e) {
      if (o(this.clientSideRowModel)) {
        console.warn("cannot call forEachNodeAfterFilterAndSort unless using normal row model");
      }
      this.clientSideRowModel.forEachNodeAfterFilterAndSort(e);
    };
    e.prototype.getFilterApiForColDef = function (e) {
      console.warn("ag-grid API method getFilterApiForColDef deprecated, use getFilterInstance instead");
      return this.getFilterInstance(e);
    };
    e.prototype.getFilterInstance = function (e, t) {
      var n = this.columnController.getPrimaryColumn(e);
      if (n) {
        var r = this.filterManager.getFilterComponent(n, "NO_UI");
        var o = r && r.resolveNow(null, function (e) {
          return e;
        });
        if (t) {
          if (o) {
            setTimeout(t, 0, o);
          } else {
            if (r) {
              r.then(t);
            }
          }
        }
        return o;
      }
    };
    e.prototype.getFilterApi = function (e) {
      console.warn("AG Grid: getFilterApi is deprecated, use getFilterInstance instead");
      return this.getFilterInstance(e);
    };
    e.prototype.destroyFilter = function (e) {
      var t = this.columnController.getPrimaryColumn(e);
      if (t) {
        return this.filterManager.destroyFilter(t, "filterDestroyed");
      }
    };
    e.prototype.getStatusPanel = function (e) {
      if (this.statusBarService) {
        return this.statusBarService.getStatusPanel(e);
      }
    };
    e.prototype.getColumnDef = function (e) {
      var t = this.columnController.getPrimaryColumn(e);
      return t ? t.getColDef() : null;
    };
    e.prototype.getColumnDefs = function () {
      return this.columnController.getColumnDefs();
    };
    e.prototype.onFilterChanged = function () {
      this.filterManager.onFilterChanged();
    };
    e.prototype.onSortChanged = function () {
      this.sortController.onSortChanged();
    };
    e.prototype.setSortModel = function (e, t) {
      console.warn("AG Grid: as of version 24.0.0, setSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.applyColumnState() instead.");
      var n = [];
      if (e) {
        e.forEach(function (e, t) {
          n.push({
            colId: e.colId,
            sort: e.sort,
            sortIndex: t
          });
        });
      }
      this.columnController.applyColumnState({
        state: n,
        defaultState: {
          sort: null
        }
      });
    };
    e.prototype.getSortModel = function () {
      console.warn("AG Grid: as of version 24.0.0, getSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.getColumnState() instead.");
      var e = this.columnController.getColumnState().filter(function (e) {
        return null != e.sort;
      });
      var t = {};
      e.forEach(function (e) {
        var n = e.colId;
        var r = e.sortIndex;
        t[n] = r;
      });
      var n = e.map(function (e) {
        return {
          colId: e.colId,
          sort: e.sort
        };
      });
      n.sort(function (e, n) {
        return t[e.colId] - t[n.colId];
      });
      return n;
    };
    e.prototype.setFilterModel = function (e) {
      this.filterManager.setFilterModel(e);
    };
    e.prototype.getFilterModel = function () {
      return this.filterManager.getFilterModel();
    };
    e.prototype.getFocusedCell = function () {
      return this.focusController.getFocusedCell();
    };
    e.prototype.clearFocusedCell = function () {
      return this.focusController.clearFocusedCell();
    };
    e.prototype.setFocusedCell = function (e, t, n) {
      this.focusController.setFocusedCell(e, t, n, true);
    };
    e.prototype.setSuppressRowDrag = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_SUPPRESS_ROW_DRAG, e);
    };
    e.prototype.setSuppressMoveWhenRowDragging = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG, e);
    };
    e.prototype.setSuppressRowClickSelection = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_SUPPRESS_ROW_CLICK_SELECTION, e);
    };
    e.prototype.addRowDropZone = function (e) {
      this.gridBodyCon.getRowDragFeature().addRowDropZone(e);
    };
    e.prototype.removeRowDropZone = function (e) {
      var t = this.dragAndDropService.findExternalZone(e);
      if (t) {
        this.dragAndDropService.removeDropTarget(t);
      }
    };
    e.prototype.getRowDropZoneParams = function (e) {
      return this.gridBodyCon.getRowDragFeature().getRowDropZone(e);
    };
    e.prototype.setHeaderHeight = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_HEADER_HEIGHT, e);
    };
    e.prototype.setDomLayout = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_DOM_LAYOUT, e);
    };
    e.prototype.setEnableCellTextSelection = function (e) {
      this.gridBodyCon.setCellTextSelection(e);
    };
    e.prototype.setFillHandleDirection = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_FILL_HANDLE_DIRECTION, e);
    };
    e.prototype.setGroupHeaderHeight = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GROUP_HEADER_HEIGHT, e);
    };
    e.prototype.setFloatingFiltersHeight = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_FLOATING_FILTERS_HEIGHT, e);
    };
    e.prototype.setPivotGroupHeaderHeight = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_PIVOT_GROUP_HEADER_HEIGHT, e);
    };
    e.prototype.setIsExternalFilterPresent = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_IS_EXTERNAL_FILTER_PRESENT, e);
    };
    e.prototype.setDoesExternalFilterPass = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_DOES_EXTERNAL_FILTER_PASS, e);
    };
    e.prototype.setNavigateToNextCell = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_NAVIGATE_TO_NEXT_CELL, e);
    };
    e.prototype.setTabToNextCell = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_TAB_TO_NEXT_CELL, e);
    };
    e.prototype.setTabToNextHeader = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_TAB_TO_NEXT_HEADER, e);
    };
    e.prototype.setNavigateToNextHeader = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_NAVIGATE_TO_NEXT_HEADER, e);
    };
    e.prototype.setGroupRowAggNodes = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GROUP_ROW_AGG_NODES, e);
    };
    e.prototype.setGetBusinessKeyForNode = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_BUSINESS_KEY_FOR_NODE, e);
    };
    e.prototype.setGetChildCount = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_CHILD_COUNT, e);
    };
    e.prototype.setProcessRowPostCreate = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_PROCESS_ROW_POST_CREATE, e);
    };
    e.prototype.setGetRowNodeId = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_ROW_NODE_ID, e);
    };
    e.prototype.setGetRowClass = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_ROW_CLASS, e);
    };
    e.prototype.setIsFullWidthCell = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_IS_FULL_WIDTH_CELL, e);
    };
    e.prototype.setIsRowSelectable = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_IS_ROW_SELECTABLE, e);
    };
    e.prototype.setIsRowMaster = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_IS_ROW_MASTER, e);
    };
    e.prototype.setPostSort = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_POST_SORT, e);
    };
    e.prototype.setGetDocument = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_DOCUMENT, e);
    };
    e.prototype.setGetContextMenuItems = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_CONTEXT_MENU_ITEMS, e);
    };
    e.prototype.setGetMainMenuItems = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_MAIN_MENU_ITEMS, e);
    };
    e.prototype.setProcessCellForClipboard = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_PROCESS_CELL_FOR_CLIPBOARD, e);
    };
    e.prototype.setSendToClipboard = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_SEND_TO_CLIPBOARD, e);
    };
    e.prototype.setProcessCellFromClipboard = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_PROCESS_CELL_FROM_CLIPBOARD, e);
    };
    e.prototype.setProcessSecondaryColDef = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_PROCESS_TO_SECONDARY_COLDEF, e);
    };
    e.prototype.setProcessSecondaryColGroupDef = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_PROCESS_SECONDARY_COL_GROUP_DEF, e);
    };
    e.prototype.setPostProcessPopup = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_POST_PROCESS_POPUP, e);
    };
    e.prototype.setDefaultGroupSortComparator = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_DEFAULT_GROUP_SORT_COMPARATOR, e);
    };
    e.prototype.setProcessChartOptions = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_PROCESS_CHART_OPTIONS, e);
    };
    e.prototype.setGetChartToolbarItems = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_CHART_TOOLBAR_ITEMS, e);
    };
    e.prototype.setPaginationNumberFormatter = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_PAGINATION_NUMBER_FORMATTER, e);
    };
    e.prototype.setGetServerSideStoreParams = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_SERVER_SIDE_STORE_PARAMS, e);
    };
    e.prototype.setIsServerSideGroupOpenByDefault = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT, e);
    };
    e.prototype.setIsApplyServerSideTransaction = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_IS_APPLY_SERVER_SIDE_TRANSACTION, e);
    };
    e.prototype.setIsServerSideGroup = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_IS_SERVER_SIDE_GROUP, e);
    };
    e.prototype.setGetServerSideGroupKey = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_SERVER_SIDE_GROUP_KEY, e);
    };
    e.prototype.setGetRowStyle = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_ROW_STYLE, e);
    };
    e.prototype.setGetRowHeight = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GET_ROW_HEIGHT, e);
    };
    e.prototype.setPivotHeaderHeight = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_PIVOT_HEADER_HEIGHT, e);
    };
    e.prototype.isSideBarVisible = function () {
      return !!this.sideBarComp && this.sideBarComp.isDisplayed();
    };
    e.prototype.setSideBarVisible = function (e) {
      if (this.sideBarComp) {
        this.sideBarComp.setDisplayed(e);
      } else {
        if (e) {
          console.warn("AG Grid: sideBar is not loaded");
        }
      }
    };
    e.prototype.setSideBarPosition = function (e) {
      if (this.sideBarComp) {
        this.sideBarComp.setSideBarPosition(e);
      } else {
        console.warn("AG Grid: sideBar is not loaded");
      }
    };
    e.prototype.openToolPanel = function (e) {
      if (this.sideBarComp) {
        this.sideBarComp.openToolPanel(e);
      } else {
        console.warn("AG Grid: toolPanel is only available in AG Grid Enterprise");
      }
    };
    e.prototype.closeToolPanel = function () {
      if (this.sideBarComp) {
        this.sideBarComp.close();
      } else {
        console.warn("AG Grid: toolPanel is only available in AG Grid Enterprise");
      }
    };
    e.prototype.getOpenedToolPanel = function () {
      return this.sideBarComp ? this.sideBarComp.openedItem() : null;
    };
    e.prototype.getSideBar = function () {
      return this.gridOptionsWrapper.getSideBar();
    };
    e.prototype.setSideBar = function (e) {
      this.gridOptionsWrapper.setProperty("sideBar", Ta.parse(e));
    };
    e.prototype.setSuppressClipboardPaste = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_SUPPRESS_CLIPBOARD_PASTE, e);
    };
    e.prototype.isToolPanelShowing = function () {
      return this.sideBarComp.isToolPanelShowing();
    };
    e.prototype.doLayout = function () {
      X(function () {
        return console.warn("AG Grid - since version 25.1, doLayout was taken out, as it's not needed. The grid responds to grid size changes automatically");
      }, "doLayoutDeprecated");
    };
    e.prototype.resetRowHeights = function () {
      if (r(this.clientSideRowModel)) {
        this.clientSideRowModel.resetRowHeights();
      }
    };
    e.prototype.setGroupRemoveSingleChildren = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GROUP_REMOVE_SINGLE_CHILDREN, e);
    };
    e.prototype.setGroupRemoveLowestSingleChildren = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, e);
    };
    e.prototype.onRowHeightChanged = function () {
      if (this.clientSideRowModel) {
        this.clientSideRowModel.onRowHeightChanged();
      } else {
        if (this.serverSideRowModel) {
          this.serverSideRowModel.onRowHeightChanged();
        }
      }
    };
    e.prototype.getValue = function (e, t) {
      var n = this.columnController.getPrimaryColumn(e);
      if (o(n)) {
        n = this.columnController.getGridColumn(e);
      }
      return o(n) ? null : this.valueService.getValue(n, t);
    };
    e.prototype.addEventListener = function (e, t) {
      var n = this.gridOptionsWrapper.useAsyncEvents();
      this.eventService.addEventListener(e, t, n);
    };
    e.prototype.addGlobalListener = function (e) {
      var t = this.gridOptionsWrapper.useAsyncEvents();
      this.eventService.addGlobalListener(e, t);
    };
    e.prototype.removeEventListener = function (e, t) {
      var n = this.gridOptionsWrapper.useAsyncEvents();
      this.eventService.removeEventListener(e, t, n);
    };
    e.prototype.removeGlobalListener = function (e) {
      var t = this.gridOptionsWrapper.useAsyncEvents();
      this.eventService.removeGlobalListener(e, t);
    };
    e.prototype.dispatchEvent = function (e) {
      this.eventService.dispatchEvent(e);
    };
    e.prototype.destroy = function () {
      if (!this.destroyCalled) {
        this.destroyCalled = true;
        this.gridCompController.destroyGridUi();
        this.context.destroy();
      }
    };
    e.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function () {
      setTimeout(H.bind(window, this, "Grid API"), 100);
    };
    e.prototype.warnIfDestroyed = function (e) {
      if (this.destroyCalled) {
        console.warn("AG Grid: Grid API method " + e + " was called on a grid that was destroyed.");
      }
      return this.destroyCalled;
    };
    e.prototype.resetQuickFilter = function () {
      if (!this.warnIfDestroyed("resetQuickFilter")) {
        this.rowModel.forEachNode(function (e) {
          return e.quickFilterAggregateText = null;
        });
      }
    };
    e.prototype.getRangeSelections = function () {
      console.warn("AG Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\n        getCellRanges() is a bit different, please check the AG Grid documentation.");
      return null;
    };
    e.prototype.getCellRanges = function () {
      return this.rangeController ? this.rangeController.getCellRanges() : (console.warn("AG Grid: cell range selection is only available in AG Grid Enterprise"), null);
    };
    e.prototype.camelCaseToHumanReadable = function (e) {
      return rt(e);
    };
    e.prototype.addRangeSelection = function (e) {
      console.warn("AG Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()");
    };
    e.prototype.addCellRange = function (e) {
      if (!this.rangeController) {
        console.warn("AG Grid: cell range selection is only available in AG Grid Enterprise");
      }
      this.rangeController.addCellRange(e);
    };
    e.prototype.clearRangeSelection = function () {
      if (!this.rangeController) {
        console.warn("AG Grid: cell range selection is only available in AG Grid Enterprise");
      }
      this.rangeController.removeAllCellRanges();
    };
    e.prototype.undoCellEditing = function () {
      this.undoRedoService.undo();
    };
    e.prototype.redoCellEditing = function () {
      this.undoRedoService.redo();
    };
    e.prototype.getCurrentUndoSize = function () {
      return this.undoRedoService.getCurrentUndoStackSize();
    };
    e.prototype.getCurrentRedoSize = function () {
      return this.undoRedoService.getCurrentRedoStackSize();
    };
    e.prototype.getChartModels = function () {
      if (Oe.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.getChartModels") && Oe.assertRegistered(exports.ModuleNames.GridChartsModule, "api.getChartModels")) {
        return this.chartService.getChartModels();
      }
    };
    e.prototype.createRangeChart = function (e) {
      if (Oe.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.createRangeChart") && Oe.assertRegistered(exports.ModuleNames.GridChartsModule, "api.createRangeChart")) {
        return this.chartService.createRangeChart(e);
      }
    };
    e.prototype.createCrossFilterChart = function (e) {
      if (Oe.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.createCrossFilterChart") && Oe.assertRegistered(exports.ModuleNames.GridChartsModule, "api.createCrossFilterChart")) {
        return this.chartService.createCrossFilterChart(e);
      }
    };
    e.prototype.restoreChart = function (e, n) {
      if (Oe.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.restoreChart") && Oe.assertRegistered(exports.ModuleNames.GridChartsModule, "api.restoreChart")) {
        return this.chartService.restoreChart(e, n);
      }
    };
    e.prototype.createPivotChart = function (e) {
      if (Oe.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.createPivotChart") && Oe.assertRegistered(exports.ModuleNames.GridChartsModule, "api.createPivotChart")) {
        return this.chartService.createPivotChart(e);
      }
    };
    e.prototype.copySelectedRowsToClipboard = function (e, t) {
      if (!this.clipboardService) {
        console.warn("AG Grid: clipboard is only available in AG Grid Enterprise");
      }
      this.clipboardService.copySelectedRowsToClipboard(e, t);
    };
    e.prototype.copySelectedRangeToClipboard = function (e) {
      if (!this.clipboardService) {
        console.warn("AG Grid: clipboard is only available in AG Grid Enterprise");
      }
      this.clipboardService.copySelectedRangeToClipboard(e);
    };
    e.prototype.copySelectedRangeDown = function () {
      if (!this.clipboardService) {
        console.warn("AG Grid: clipboard is only available in AG Grid Enterprise");
      }
      this.clipboardService.copyRangeDown();
    };
    e.prototype.showColumnMenuAfterButtonClick = function (e, t) {
      var n = this.columnController.getGridColumn(e);
      this.menuFactory.showMenuAfterButtonClick(n, t);
    };
    e.prototype.showColumnMenuAfterMouseClick = function (e, t) {
      var n = this.columnController.getGridColumn(e);
      if (!n) {
        n = this.columnController.getPrimaryColumn(e);
      }
      if (n) {
        this.menuFactory.showMenuAfterMouseEvent(n, t);
      } else {
        console.error("AG Grid: column '" + e + "' not found");
      }
    };
    e.prototype.hidePopupMenu = function () {
      if (this.contextMenuFactory) {
        this.contextMenuFactory.hideActiveMenu();
      }
      this.menuFactory.hideActiveMenu();
    };
    e.prototype.setPopupParent = function (e) {
      this.gridOptionsWrapper.setProperty(ka.PROP_POPUP_PARENT, e);
    };
    e.prototype.tabToNextCell = function () {
      return this.rowRenderer.tabToNextCell(false);
    };
    e.prototype.tabToPreviousCell = function () {
      return this.rowRenderer.tabToNextCell(true);
    };
    e.prototype.getCellRendererInstances = function (e) {
      if (undefined === e) {
        e = {};
      }
      return this.rowRenderer.getCellRendererInstances(e);
    };
    e.prototype.getCellEditorInstances = function (e) {
      if (undefined === e) {
        e = {};
      }
      return this.rowRenderer.getCellEditorInstances(e);
    };
    e.prototype.getEditingCells = function () {
      return this.rowRenderer.getEditingCells();
    };
    e.prototype.stopEditing = function (e) {
      if (undefined === e) {
        e = false;
      }
      this.rowRenderer.stopEditing(e);
    };
    e.prototype.startEditingCell = function (e) {
      var t = this.columnController.getGridColumn(e.colKey);
      if (t) {
        var n = {
          rowIndex: e.rowIndex,
          rowPinned: e.rowPinned || null,
          column: t
        };
        if (o(e.rowPinned)) {
          this.gridBodyCon.getScrollFeature().ensureIndexVisible(e.rowIndex);
        }
        this.rowRenderer.startEditingCell(n, e.keyPress, e.charPress);
      } else {
        console.warn("AG Grid: no column found for " + e.colKey);
      }
    };
    e.prototype.addAggFunc = function (e, t) {
      if (this.aggFuncService) {
        this.aggFuncService.addAggFunc(e, t);
      }
    };
    e.prototype.addAggFuncs = function (e) {
      if (this.aggFuncService) {
        this.aggFuncService.addAggFuncs(e);
      }
    };
    e.prototype.clearAggFuncs = function () {
      if (this.aggFuncService) {
        this.aggFuncService.clear();
      }
    };
    e.prototype.applyServerSideTransaction = function (e) {
      if (this.serverSideTransactionManager) {
        return this.serverSideTransactionManager.applyTransaction(e);
      }
      console.warn("AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.");
    };
    e.prototype.applyServerSideTransactionAsync = function (e, t) {
      if (this.serverSideTransactionManager) {
        return this.serverSideTransactionManager.applyTransactionAsync(e, t);
      }
      console.warn("AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.");
    };
    e.prototype.retryServerSideLoads = function () {
      if (this.serverSideRowModel) {
        this.serverSideRowModel.retryLoads();
      } else {
        console.warn("AG Grid: API retryServerSideLoads() can only be used when using Server-Side Row Model.");
      }
    };
    e.prototype.flushServerSideAsyncTransactions = function () {
      if (this.serverSideTransactionManager) {
        return this.serverSideTransactionManager.flushAsyncTransactions();
      }
      console.warn("AG Grid: Cannot flush Server Side Transaction if not using the Server Side Row Model.");
    };
    e.prototype.applyTransaction = function (e) {
      if (this.clientSideRowModel) {
        var t = this.clientSideRowModel.updateRowData(e);
        this.rowRenderer.refreshFullWidthRows(t.update);
        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {
          this.rowRenderer.refreshCells();
        }
        return t;
      }
      console.error("AG Grid: updateRowData() only works with ClientSideRowModel. Working with InfiniteRowModel was deprecated in v23.1 and removed in v24.1");
    };
    e.prototype.updateRowData = function (e) {
      X(function () {
        return console.warn("AG Grid: as of v23.1, grid API updateRowData(transaction) is now called applyTransaction(transaction). updateRowData is deprecated and will be removed in a future major release.");
      }, "updateRowData deprecated");
      return this.applyTransaction(e);
    };
    e.prototype.applyTransactionAsync = function (e, t) {
      if (this.clientSideRowModel) {
        this.clientSideRowModel.batchUpdateRowData(e, t);
      } else {
        console.error("AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.");
      }
    };
    e.prototype.flushAsyncTransactions = function () {
      if (this.clientSideRowModel) {
        this.clientSideRowModel.flushAsyncTransactions();
      } else {
        console.error("AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.");
      }
    };
    e.prototype.batchUpdateRowData = function (e, t) {
      X(function () {
        return console.warn("AG Grid: as of v23.1, grid API batchUpdateRowData(transaction, callback) is now called applyTransactionAsync(transaction, callback). batchUpdateRowData is deprecated and will be removed in a future major release.");
      }, "batchUpdateRowData deprecated");
      this.applyTransactionAsync(e, t);
    };
    e.prototype.insertItemsAtIndex = function (e, t, n) {
      console.warn("AG Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.");
      this.updateRowData({
        add: t,
        addIndex: e,
        update: null,
        remove: null
      });
    };
    e.prototype.removeItems = function (e, t) {
      console.warn("AG Grid: removeItems() is deprecated, use updateRowData(transaction) instead.");
      var n = e.map(function (e) {
        return e.data;
      });
      this.updateRowData({
        add: null,
        addIndex: null,
        update: null,
        remove: n
      });
    };
    e.prototype.addItems = function (e, t) {
      console.warn("AG Grid: addItems() is deprecated, use updateRowData(transaction) instead.");
      this.updateRowData({
        add: e,
        addIndex: null,
        update: null,
        remove: null
      });
    };
    e.prototype.refreshVirtualPageCache = function () {
      console.warn("AG Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead");
      this.refreshInfiniteCache();
    };
    e.prototype.refreshInfinitePageCache = function () {
      console.warn("AG Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead");
      this.refreshInfiniteCache();
    };
    e.prototype.refreshInfiniteCache = function () {
      if (this.infiniteRowModel) {
        this.infiniteRowModel.refreshCache();
      } else {
        console.warn("AG Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.");
      }
    };
    e.prototype.purgeVirtualPageCache = function () {
      console.warn("AG Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead");
      this.purgeInfinitePageCache();
    };
    e.prototype.purgeInfinitePageCache = function () {
      console.warn("AG Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead");
      this.purgeInfiniteCache();
    };
    e.prototype.purgeInfiniteCache = function () {
      if (this.infiniteRowModel) {
        this.infiniteRowModel.purgeCache();
      } else {
        console.warn("AG Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.");
      }
    };
    e.prototype.purgeEnterpriseCache = function (e) {
      console.warn("ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()");
      this.purgeServerSideCache(e);
    };
    e.prototype.purgeServerSideCache = function (e) {
      if (undefined === e) {
        e = [];
      }
      if (this.serverSideRowModel) {
        console.warn("AG Grid: since v25.0, api.purgeServerSideCache is deprecated. Please use api.refreshServerSideStore({purge: true}) instead.");
        this.refreshServerSideStore({
          route: e,
          purge: true
        });
      } else {
        console.warn("AG Grid: api.purgeServerSideCache is only available when rowModelType='serverSide'.");
      }
    };
    e.prototype.refreshServerSideStore = function (e) {
      if (this.serverSideRowModel) {
        this.serverSideRowModel.refreshStore(e);
      } else {
        console.warn("AG Grid: api.refreshServerSideStore is only available when rowModelType='serverSide'.");
      }
    };
    e.prototype.getServerSideStoreState = function () {
      return this.serverSideRowModel ? this.serverSideRowModel.getStoreState() : (console.warn("AG Grid: api.getServerSideStoreState is only available when rowModelType='serverSide'."), []);
    };
    e.prototype.getVirtualRowCount = function () {
      console.warn("AG Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead");
      return this.getInfiniteRowCount();
    };
    e.prototype.getInfiniteRowCount = function () {
      if (this.infiniteRowModel) {
        return this.infiniteRowModel.getRowCount();
      }
      console.warn("AG Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.");
    };
    e.prototype.isMaxRowFound = function () {
      console.warn("AG Grid: api.isLastRowIndexKnown is deprecated, please use api.isLastRowIndexKnown()");
      return this.isLastRowIndexKnown();
    };
    e.prototype.isLastRowIndexKnown = function () {
      if (this.infiniteRowModel) {
        return this.infiniteRowModel.isLastRowIndexKnown();
      }
      console.warn("AG Grid: api.isMaxRowFound is only available when rowModelType='virtual'.");
    };
    e.prototype.setVirtualRowCount = function (e, t) {
      console.warn("AG Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead");
      this.setRowCount(e, t);
    };
    e.prototype.setInfiniteRowCount = function (e, t) {
      console.warn("AG Grid: setInfiniteRowCount() is now called setRowCount(), please call setRowCount() instead");
      this.setRowCount(e, t);
    };
    e.prototype.setRowCount = function (e, t) {
      if (this.infiniteRowModel) {
        this.infiniteRowModel.setRowCount(e, t);
      } else {
        console.warn("AG Grid: api.setRowCount is only available for Infinite Row Model.");
      }
    };
    e.prototype.getVirtualPageState = function () {
      console.warn("AG Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead");
      return this.getCacheBlockState();
    };
    e.prototype.getInfinitePageState = function () {
      console.warn("AG Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead");
      return this.getCacheBlockState();
    };
    e.prototype.getCacheBlockState = function () {
      return this.rowNodeBlockLoader.getBlockState();
    };
    e.prototype.checkGridSize = function () {
      console.warn("in AG Grid v25.2.0, checkGridSize() was removed, as it was legacy and didn't do anything uesful.");
    };
    e.prototype.getFirstRenderedRow = function () {
      console.warn("in AG Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()");
      return this.getFirstDisplayedRow();
    };
    e.prototype.getFirstDisplayedRow = function () {
      return this.rowRenderer.getFirstVirtualRenderedRow();
    };
    e.prototype.getLastRenderedRow = function () {
      console.warn("in AG Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()");
      return this.getLastDisplayedRow();
    };
    e.prototype.getLastDisplayedRow = function () {
      return this.rowRenderer.getLastVirtualRenderedRow();
    };
    e.prototype.getDisplayedRowAtIndex = function (e) {
      return this.rowModel.getRow(e);
    };
    e.prototype.getDisplayedRowCount = function () {
      return this.rowModel.getRowCount();
    };
    e.prototype.paginationIsLastPageFound = function () {
      return this.paginationProxy.isLastPageFound();
    };
    e.prototype.paginationGetPageSize = function () {
      return this.paginationProxy.getPageSize();
    };
    e.prototype.paginationSetPageSize = function (e) {
      this.gridOptionsWrapper.setProperty("paginationPageSize", e);
    };
    e.prototype.paginationGetCurrentPage = function () {
      return this.paginationProxy.getCurrentPage();
    };
    e.prototype.paginationGetTotalPages = function () {
      return this.paginationProxy.getTotalPages();
    };
    e.prototype.paginationGetRowCount = function () {
      return this.paginationProxy.getMasterRowCount();
    };
    e.prototype.paginationGoToNextPage = function () {
      this.paginationProxy.goToNextPage();
    };
    e.prototype.paginationGoToPreviousPage = function () {
      this.paginationProxy.goToPreviousPage();
    };
    e.prototype.paginationGoToFirstPage = function () {
      this.paginationProxy.goToFirstPage();
    };
    e.prototype.paginationGoToLastPage = function () {
      this.paginationProxy.goToLastPage();
    };
    e.prototype.paginationGoToPage = function (e) {
      this.paginationProxy.goToPage(e);
    };
    vl([fe("immutableService")], e.prototype, "immutableService", undefined);
    vl([fe("csvCreator")], e.prototype, "csvCreator", undefined);
    vl([fe("excelCreator")], e.prototype, "excelCreator", undefined);
    vl([pe("rowRenderer")], e.prototype, "rowRenderer", undefined);
    vl([pe("filterManager")], e.prototype, "filterManager", undefined);
    vl([pe("columnController")], e.prototype, "columnController", undefined);
    vl([pe("selectionController")], e.prototype, "selectionController", undefined);
    vl([pe("gridOptionsWrapper")], e.prototype, "gridOptionsWrapper", undefined);
    vl([pe("valueService")], e.prototype, "valueService", undefined);
    vl([pe("alignedGridsService")], e.prototype, "alignedGridsService", undefined);
    vl([pe("eventService")], e.prototype, "eventService", undefined);
    vl([pe("pinnedRowModel")], e.prototype, "pinnedRowModel", undefined);
    vl([pe("context")], e.prototype, "context", undefined);
    vl([pe("rowModel")], e.prototype, "rowModel", undefined);
    vl([pe("sortController")], e.prototype, "sortController", undefined);
    vl([pe("paginationProxy")], e.prototype, "paginationProxy", undefined);
    vl([pe("focusController")], e.prototype, "focusController", undefined);
    vl([pe("dragAndDropService")], e.prototype, "dragAndDropService", undefined);
    vl([fe("rangeController")], e.prototype, "rangeController", undefined);
    vl([fe("clipboardService")], e.prototype, "clipboardService", undefined);
    vl([fe("aggFuncService")], e.prototype, "aggFuncService", undefined);
    vl([pe("menuFactory")], e.prototype, "menuFactory", undefined);
    vl([fe("contextMenuFactory")], e.prototype, "contextMenuFactory", undefined);
    vl([pe("valueCache")], e.prototype, "valueCache", undefined);
    vl([pe("animationFrameService")], e.prototype, "animationFrameService", undefined);
    vl([fe("statusBarService")], e.prototype, "statusBarService", undefined);
    vl([fe("chartService")], e.prototype, "chartService", undefined);
    vl([fe("undoRedoService")], e.prototype, "undoRedoService", undefined);
    vl([fe("headlessService")], e.prototype, "headlessService", undefined);
    vl([fe("rowNodeBlockLoader")], e.prototype, "rowNodeBlockLoader", undefined);
    vl([fe("ssrmTransactionManager")], e.prototype, "serverSideTransactionManager", undefined);
    vl([fe("controllersService")], e.prototype, "controllersService", undefined);
    vl([le], e.prototype, "init", null);
    vl([ue], e.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
    return e = vl([de("gridApi")], e);
  }();
  var yl = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var El = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ol = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var wl = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.expressionToFunctionCache = {};
      return t;
    }
    yl(t, e);
    t.prototype.setBeans = function (e) {
      this.logger = e.create("ExpressionService");
    };
    t.prototype.evaluate = function (e, t) {
      if ("function" === typeof e) {
        return e(t);
      }
      if ("string" === typeof e) {
        var n = e;
        return this.evaluateExpression(n, t);
      }
      console.error("AG Grid: value should be either a string or a function", e);
    };
    t.prototype.evaluateExpression = function (e, t) {
      try {
        return this.createExpressionFunction(e)(t.value, t.context, t.oldValue, t.newValue, t.value, t.node, t.data, t.colDef, t.rowIndex, t.api, t.columnApi, t.getValue, t.column, t.columnGroup);
      } catch (n) {
        console.log("Processing of the expression failed");
        console.log("Expression = " + e);
        console.log("Params =", t);
        console.log("Exception = " + n);
        return null;
      }
    };
    t.prototype.createExpressionFunction = function (e) {
      if (this.expressionToFunctionCache[e]) {
        return this.expressionToFunctionCache[e];
      }
      var t = this.createFunctionBody(e);
      var n = new Function("x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup", t);
      this.expressionToFunctionCache[e] = n;
      return n;
    };
    t.prototype.createFunctionBody = function (e) {
      return e.indexOf("return") >= 0 ? e : "return " + e + ";";
    };
    El([Ol(0, me("loggerFactory"))], t.prototype, "setBeans", null);
    return t = El([de("expressionService")], t);
  }(We);
  var Cl = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Tl = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Sl = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.templateCache = {};
      t.waitingCallbacks = {};
      return t;
    }
    Cl(t, e);
    t.prototype.getTemplate = function (e, t) {
      var n = this.templateCache[e];
      if (n) {
        return n;
      }
      var r = this.waitingCallbacks[e];
      var o = this;
      if (!r) {
        r = [];
        this.waitingCallbacks[e] = r;
        var i = new XMLHttpRequest();
        i.onload = function () {
          o.handleHttpResult(this, e);
        };
        i.open("GET", e);
        i.send();
      }
      if (t) {
        r.push(t);
      }
      return null;
    };
    t.prototype.handleHttpResult = function (e, t) {
      if (200 === e.status && null !== e.response) {
        this.templateCache[t] = e.response || e.responseText;
        for (var n = this.waitingCallbacks[t], r = 0; r < n.length; r++) {
          (0, n[r])();
        }
        if (this.$scope) {
          var o = this;
          window.setTimeout(function () {
            o.$scope.$apply();
          }, 0);
        }
      } else {
        console.warn("Unable to get template error " + e.status + " - " + t);
      }
    };
    Tl([pe("$scope")], t.prototype, "$scope", undefined);
    return t = Tl([de("templateService")], t);
  }(We);
  var Il = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Al = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var jl = function () {
    for (var e = 0, t = 0, n = arguments.length; t < n; t++) {
      e += arguments[t].length;
    }
    var r = Array(e);
    var o = 0;
    for (t = 0; t < n; t++) {
      for (var i = arguments[t], a = 0, s = i.length; a < s; a++, o++) {
        r[o] = i[a];
      }
    }
    return r;
  };
  var Nl = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    var r;
    Il(t, e);
    r = t;
    t.addKeyboardModeEvents = function (e, t) {
      var n = r.instancesMonitored.get(e);
      if (n && n.length > 0) {
        if (-1 === n.indexOf(t)) {
          n.push(t);
        }
      } else {
        r.instancesMonitored.set(e, [t]);
        e.addEventListener("keydown", r.toggleKeyboardMode);
        e.addEventListener("mousedown", r.toggleKeyboardMode);
      }
    };
    t.removeKeyboardModeEvents = function (e, t) {
      var n = r.instancesMonitored.get(e);
      var o = [];
      if (n && n.length) {
        o = jl(n).filter(function (e) {
          return e !== t;
        });
        r.instancesMonitored.set(e, o);
      }
      if (0 === o.length) {
        e.removeEventListener("keydown", r.toggleKeyboardMode);
        e.removeEventListener("mousedown", r.toggleKeyboardMode);
      }
    };
    t.toggleKeyboardMode = function (e) {
      var t = r.keyboardModeActive;
      var n = "keydown" === e.type;
      if ((!n || !(e.ctrlKey || e.metaKey || e.altKey)) && !(t && n || !t && !n)) {
        r.keyboardModeActive = n;
        var o = e.target.ownerDocument;
        if (o) {
          var i = r.instancesMonitored.get(o);
          if (i) {
            i.forEach(function (e) {
              e.dispatchEvent({
                type: n ? Ke.EVENT_KEYBOARD_FOCUS : Ke.EVENT_MOUSE_FOCUS
              });
            });
          }
        }
      }
    };
    t.prototype.init = function () {
      var e = this.clearFocusedCell.bind(this);
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_PIVOT_MODE_CHANGED, e);
      this.addManagedListener(this.eventService, Ke.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverythingChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_GROUP_OPENED, e);
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_ROW_GROUP_CHANGED, e);
    };
    t.prototype.registerGridCompController = function (e) {
      var t = this;
      this.gridCompController = e;
      var n = this.gridOptionsWrapper.getDocument();
      r.addKeyboardModeEvents(n, e);
      this.addDestroyFunc(function () {
        return t.unregisterGridCompController(e);
      });
    };
    t.prototype.unregisterGridCompController = function (e) {
      var t = this.gridOptionsWrapper.getDocument();
      r.removeKeyboardModeEvents(t, e);
    };
    t.prototype.onColumnEverythingChanged = function () {
      if (this.focusedCellPosition) {
        var e = this.focusedCellPosition.column;
        var t = this.columnController.getGridColumn(e.getId());
        if (e !== t) {
          this.clearFocusedCell();
        }
      }
    };
    t.prototype.isKeyboardMode = function () {
      return r.keyboardModeActive;
    };
    t.prototype.getFocusCellToUseAfterRefresh = function () {
      return this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedCellPosition ? null : this.getGridCellForDomElement(document.activeElement) ? this.focusedCellPosition : null;
    };
    t.prototype.getGridCellForDomElement = function (e) {
      for (var t = e; t;) {
        var n = this.gridOptionsWrapper.getDomData(t, rs.DOM_DATA_KEY_CELL_COMP);
        if (n) {
          return n.getCellPosition();
        }
        t = t.parentNode;
      }
      return null;
    };
    t.prototype.clearFocusedCell = function () {
      this.focusedCellPosition = null;
      this.onCellFocused(false);
    };
    t.prototype.getFocusedCell = function () {
      return this.focusedCellPosition;
    };
    t.prototype.setFocusedCell = function (e, t, r, o) {
      if (undefined === o) {
        o = false;
      }
      var i = this.columnController.getGridColumn(t);
      if (i) {
        this.focusedCellPosition = i ? {
          rowIndex: e,
          rowPinned: n(r),
          column: i
        } : null;
        this.onCellFocused(o);
      } else {
        this.focusedCellPosition = null;
      }
    };
    t.prototype.isCellFocused = function (e) {
      return null != this.focusedCellPosition && this.focusedCellPosition.column === e.column && this.isRowFocused(e.rowIndex, e.rowPinned);
    };
    t.prototype.isRowNodeFocused = function (e) {
      return this.isRowFocused(e.rowIndex, e.rowPinned);
    };
    t.prototype.isHeaderWrapperFocused = function (e) {
      if (null == this.focusedHeaderPosition) {
        return false;
      }
      var t = e.getColumn();
      var n = e.getParentComponent().getRowIndex();
      var r = e.getPinned();
      var o = this.focusedHeaderPosition;
      var i = o.column;
      var a = o.headerRowIndex;
      return t === i && n === a && r == i.getPinned();
    };
    t.prototype.clearFocusedHeader = function () {
      this.focusedHeaderPosition = null;
    };
    t.prototype.getFocusedHeader = function () {
      return this.focusedHeaderPosition;
    };
    t.prototype.setFocusedHeader = function (e, t) {
      this.focusedHeaderPosition = {
        headerRowIndex: e,
        column: t
      };
    };
    t.prototype.focusHeaderPosition = function (e, t, n, r, o) {
      if (undefined === t) {
        t = null;
      }
      if (undefined === n) {
        n = false;
      }
      if (undefined === r) {
        r = false;
      }
      if (r) {
        var i;
        var a = this.gridOptionsWrapper;
        var s = this.getFocusedHeader();
        var c = this.headerNavigationService.getHeaderRowCount();
        if (n) {
          if (i = a.getTabToNextHeaderFunc()) {
            e = i({
              backwards: "Before" === t,
              previousHeaderPosition: s,
              nextHeaderPosition: e,
              headerRowCount: c
            });
          }
        } else if ((i = a.getNavigateToNextHeaderFunc()) && o) {
          e = i({
            key: o.key,
            previousHeaderPosition: s,
            nextHeaderPosition: e,
            headerRowCount: c,
            event: o
          });
        }
      }
      if (!e) {
        return false;
      }
      if (-1 === e.headerRowIndex) {
        return this.focusGridView(e.column);
      }
      this.headerNavigationService.scrollToColumn(e.column, t);
      var l = this.headerNavigationService.getHeaderContainer(e.column.getPinned()).getRowComps()[e.headerRowIndex].getHeaderComps()[e.column.getUniqueId()];
      return !!l && (l.getFocusableElement().focus(), true);
    };
    t.prototype.isAnyCellFocused = function () {
      return !!this.focusedCellPosition;
    };
    t.prototype.isRowFocused = function (e, t) {
      return null != this.focusedCellPosition && this.focusedCellPosition.rowIndex === e && this.focusedCellPosition.rowPinned === n(t);
    };
    t.prototype.findFocusableElements = function (e, t, n) {
      if (undefined === n) {
        n = false;
      }
      var r = Ee.FOCUSABLE_SELECTOR;
      var o = Ee.FOCUSABLE_EXCLUDE;
      if (t) {
        o += ", " + t;
      }
      if (n) {
        o += ", [tabindex=\"-1\"]";
      }
      var i = Array.prototype.slice.apply(e.querySelectorAll(r));
      var a = Array.prototype.slice.apply(e.querySelectorAll(o));
      if (!a.length) {
        return i;
      }
      var s;
      s = a;
      return i.filter(function (e) {
        return -1 === s.indexOf(e);
      });
    };
    t.prototype.focusInto = function (e, t, n) {
      if (undefined === t) {
        t = false;
      }
      if (undefined === n) {
        n = false;
      }
      var r = this.findFocusableElements(e, null, n);
      var o = t ? m(r) : r[0];
      return !!o && (o.focus(), true);
    };
    t.prototype.findNextFocusableElement = function (e, t, n) {
      var r = this.findFocusableElements(e, t ? ":not([tabindex=\"-1\"])" : null);
      var o = (t ? C(r, function (e) {
        return e.contains(document.activeElement);
      }) : r.indexOf(document.activeElement)) + (n ? -1 : 1);
      return o < 0 || o >= r.length ? null : r[o];
    };
    t.prototype.isFocusUnderManagedComponent = function (e) {
      var t = e.querySelectorAll("." + So.FOCUS_MANAGED_CLASS);
      if (!t.length) {
        return false;
      }
      for (var n = 0; n < t.length; n++) {
        if (t[n].contains(document.activeElement)) {
          return true;
        }
      }
      return false;
    };
    t.prototype.findTabbableParent = function (e, t) {
      if (undefined === t) {
        t = 5;
      }
      for (var n = 0; e && null === Ut(e) && ++n <= t;) {
        e = e.parentElement;
      }
      return null === Ut(e) ? null : e;
    };
    t.prototype.onCellFocused = function (e) {
      var t = {
        type: Ke.EVENT_CELL_FOCUSED,
        forceBrowserFocus: e,
        rowIndex: null,
        column: null,
        floating: null,
        api: this.gridApi,
        columnApi: this.columnApi,
        rowPinned: null,
        isFullWidthCell: false
      };
      if (this.focusedCellPosition) {
        var n = t.rowIndex = this.focusedCellPosition.rowIndex;
        var r = t.rowPinned = this.focusedCellPosition.rowPinned;
        t.column = this.focusedCellPosition.column;
        var o = this.rowRenderer.getRowConByPosition({
          rowIndex: n,
          rowPinned: r
        });
        if (o) {
          t.isFullWidthCell = o.isFullWidth();
        }
      }
      this.eventService.dispatchEvent(t);
    };
    t.prototype.focusGridView = function (e, t) {
      var r = t ? this.rowPositionUtils.getLastRow() : this.rowPositionUtils.getFirstRow();
      if (!r) {
        return false;
      }
      var o = r.rowIndex;
      var i = r.rowPinned;
      var a = this.getFocusedHeader();
      if (!e && a) {
        e = a.column;
      }
      if (null == o || !e) {
        return false;
      }
      this.rowRenderer.ensureCellVisible({
        rowIndex: o,
        column: e,
        rowPinned: i
      });
      this.setFocusedCell(o, e, n(i), true);
      if (this.rangeController) {
        var s = {
          rowIndex: o,
          rowPinned: i,
          column: e
        };
        this.rangeController.setRangeToCell(s);
      }
      return true;
    };
    t.prototype.focusNextGridCoreContainer = function (e) {
      return !!this.gridCompController.focusNextInnerContainer(e) || (e || this.gridCompController.forceFocusOutOfContainer(), false);
    };
    t.AG_KEYBOARD_FOCUS = "ag-keyboard-focus";
    t.keyboardModeActive = false;
    t.instancesMonitored = new Map();
    Al([pe("columnController")], t.prototype, "columnController", undefined);
    Al([pe("headerNavigationService")], t.prototype, "headerNavigationService", undefined);
    Al([pe("columnApi")], t.prototype, "columnApi", undefined);
    Al([pe("gridApi")], t.prototype, "gridApi", undefined);
    Al([pe("rowRenderer")], t.prototype, "rowRenderer", undefined);
    Al([pe("rowPositionUtils")], t.prototype, "rowPositionUtils", undefined);
    Al([fe("rangeController")], t.prototype, "rangeController", undefined);
    Al([le], t.prototype, "init", null);
    return t = r = Al([de("focusController")], t);
  }(We);
  var Rl = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var kl = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var xl = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.popupList = [];
      return t;
    }
    Rl(t, e);
    t.prototype.registerGridCompController = function (e) {
      var t = this;
      this.gridCompController = e;
      this.addManagedListener(this.gridCompController, Ke.EVENT_KEYBOARD_FOCUS, function () {
        I(t.popupList, function (e) {
          return Qt(e.element, Nl.AG_KEYBOARD_FOCUS);
        });
      });
      this.addManagedListener(this.gridCompController, Ke.EVENT_MOUSE_FOCUS, function () {
        I(t.popupList, function (e) {
          return Zt(e.element, Nl.AG_KEYBOARD_FOCUS);
        });
      });
    };
    t.prototype.getPopupParent = function () {
      var e = this.gridOptionsWrapper.getPopupParent();
      return e || this.gridCompController.getGui();
    };
    t.prototype.positionPopupForMenu = function (e) {
      var t = e.eventSource.getBoundingClientRect();
      var n = this.getParentRect();
      var r = this.keepYWithinBounds(e, t.top - n.top);
      var o = e.ePopup.clientWidth > 0 ? e.ePopup.clientWidth : 200;
      e.ePopup.style.minWidth = o + "px";
      var i;
      var a = n.right - n.left - o;
      function s() {
        return t.right - n.left - 2;
      }
      function c() {
        return t.left - n.left - o;
      }
      if (this.gridOptionsWrapper.isEnableRtl()) {
        if ((i = c()) < 0) {
          i = s();
        }
        if (i > a) {
          i = 0;
        }
      } else {
        if ((i = s()) > a) {
          i = c();
        }
        if (i < 0) {
          i = 0;
        }
      }
      e.ePopup.style.left = i + "px";
      e.ePopup.style.top = r + "px";
    };
    t.prototype.positionPopupUnderMouseEvent = function (e) {
      var t = this.calculatePointerAlign(e.mouseEvent);
      var n = t.x;
      var r = t.y;
      var o = e.ePopup;
      var i = e.nudgeX;
      var a = e.nudgeY;
      this.positionPopup({
        ePopup: o,
        x: n,
        y: r,
        nudgeX: i,
        nudgeY: a,
        keepWithinBounds: true
      });
      this.callPostProcessPopup(e.type, e.ePopup, null, e.mouseEvent, e.column, e.rowNode);
    };
    t.prototype.calculatePointerAlign = function (e) {
      var t = this.getParentRect();
      return {
        x: e.clientX - t.left,
        y: e.clientY - t.top
      };
    };
    t.prototype.positionPopupUnderComponent = function (e) {
      var t = e.eventSource.getBoundingClientRect();
      var n = e.alignSide || "left";
      var r = this.getParentRect();
      var o = t.left - r.left;
      if ("right" === n) {
        o -= e.ePopup.offsetWidth - t.width;
      }
      this.positionPopup({
        ePopup: e.ePopup,
        minWidth: e.minWidth,
        minHeight: e.minHeight,
        nudgeX: e.nudgeX,
        nudgeY: e.nudgeY,
        x: o,
        y: t.top - r.top + t.height,
        keepWithinBounds: e.keepWithinBounds
      });
      this.callPostProcessPopup(e.type, e.ePopup, e.eventSource, null, e.column, e.rowNode);
    };
    t.prototype.positionPopupOverComponent = function (e) {
      var t = e.eventSource.getBoundingClientRect();
      var n = this.getParentRect();
      this.positionPopup({
        ePopup: e.ePopup,
        minWidth: e.minWidth,
        nudgeX: e.nudgeX,
        nudgeY: e.nudgeY,
        x: t.left - n.left,
        y: t.top - n.top,
        keepWithinBounds: e.keepWithinBounds
      });
      this.callPostProcessPopup(e.type, e.ePopup, e.eventSource, null, e.column, e.rowNode);
    };
    t.prototype.callPostProcessPopup = function (e, t, n, r, o, i) {
      var a = this.gridOptionsWrapper.getPostProcessPopupFunc();
      if (a) {
        a({
          column: o,
          rowNode: i,
          ePopup: t,
          type: e,
          eventSource: n,
          mouseEvent: r
        });
      }
    };
    t.prototype.positionPopup = function (e) {
      var t = e.x;
      var n = e.y;
      if (e.nudgeX) {
        t += e.nudgeX;
      }
      if (e.nudgeY) {
        n += e.nudgeY;
      }
      if (e.keepWithinBounds) {
        t = this.keepXWithinBounds(e, t);
        n = this.keepYWithinBounds(e, n);
      }
      e.ePopup.style.left = t + "px";
      e.ePopup.style.top = n + "px";
    };
    t.prototype.getActivePopups = function () {
      return this.popupList.map(function (e) {
        return e.element;
      });
    };
    t.prototype.getParentRect = function () {
      var e = this.getPopupParent();
      var t = this.gridOptionsWrapper.getDocument();
      if (e === t.body) {
        e = t.documentElement;
      }
      var n = getComputedStyle(e);
      var r = e.getBoundingClientRect();
      return {
        top: r.top + parseFloat(n.borderTopWidth) || 0,
        left: r.left + parseFloat(n.borderLeftWidth) || 0,
        right: r.right + parseFloat(n.borderRightWidth) || 0,
        bottom: r.bottom + parseFloat(n.borderBottomWidth) || 0
      };
    };
    t.prototype.keepYWithinBounds = function (e, t) {
      var n = this.gridOptionsWrapper.getDocument();
      var r = n.documentElement;
      var o = this.getPopupParent();
      var i = o.getBoundingClientRect();
      var a = n.documentElement.getBoundingClientRect();
      var s = o === n.body;
      var c = Math.min(200, i.height);
      var l = 0;
      if (e.minHeight && e.minHeight < c) {
        c = e.minHeight;
      } else {
        if (e.ePopup.offsetHeight > 0) {
          c = e.ePopup.clientHeight;
          l = ln(e.ePopup) - c;
        }
      }
      var u = s ? ln(r) + r.scrollTop : i.height;
      if (s) {
        u -= Math.abs(a.top - i.top);
      }
      var d = u - c - l;
      return Math.min(Math.max(t, 0), Math.abs(d));
    };
    t.prototype.keepXWithinBounds = function (e, t) {
      var n = this.gridOptionsWrapper.getDocument();
      var r = n.documentElement;
      var o = this.getPopupParent();
      var i = o.getBoundingClientRect();
      var a = n.documentElement.getBoundingClientRect();
      var s = o === n.body;
      var c = e.ePopup;
      var l = Math.min(200, i.width);
      var u = 0;
      if (e.minWidth && e.minWidth < l) {
        l = e.minWidth;
      } else {
        if (c.offsetWidth > 0) {
          l = c.offsetWidth;
          c.style.minWidth = l + "px";
          u = un(c) - l;
        }
      }
      var d = s ? un(r) + r.scrollLeft : i.width;
      if (s) {
        d -= Math.abs(a.left - i.left);
      }
      var p = d - l - u;
      return Math.min(Math.max(t, 0), Math.abs(p));
    };
    t.prototype.keepPopupPositionedRelativeTo = function (e) {
      var t = this.getPopupParent();
      var n = t.getBoundingClientRect();
      var r = e.element.getBoundingClientRect();
      var o = n.top - r.top;
      var i = n.left - r.left;
      var a = o;
      var s = i;
      var c = e.ePopup.style.top;
      var l = parseInt(c.substring(0, c.length - 1), 10);
      var u = e.ePopup.style.left;
      var d = parseInt(u.substring(0, u.length - 1), 10);
      var p = window.setInterval(function () {
        var n = t.getBoundingClientRect();
        var r = e.element.getBoundingClientRect();
        if (0 == r.top && 0 == r.left && 0 == r.height && 0 == r.width) {
          e.hidePopup();
        } else {
          var c = n.top - r.top;
          if (c != a) {
            var u = l + o - c;
            e.ePopup.style.top = u + "px";
          }
          a = c;
          var p = n.left - r.left;
          if (p != s) {
            var f = d + i - p;
            e.ePopup.style.left = f + "px";
          }
          s = p;
        }
      }, 200);
      return function () {
        if (null != p) {
          window.clearInterval(p);
        }
        p = undefined;
      };
    };
    t.prototype.addPopup = function (e) {
      var t = this;
      var n = e.modal;
      var r = e.eChild;
      var o = e.closeOnEsc;
      var i = e.closedCallback;
      var a = e.click;
      var s = e.alwaysOnTop;
      var c = e.afterGuiAttached;
      var l = e.positionCallback;
      var u = e.anchorToElement;
      var d = this.gridOptionsWrapper.getDocument();
      if (d) {
        var p = C(this.popupList, function (e) {
          return e.element === r;
        });
        if (-1 !== p) {
          var f = this.popupList[p];
          return {
            hideFunc: f.hideFunc,
            stopAnchoringFunc: f.stopAnchoringFunc
          };
        }
        var h = this.getPopupParent();
        h.appendChild(r);
        if (null == r.style.top) {
          r.style.top = "0px";
        }
        if (null == r.style.left) {
          r.style.left = "0px";
        }
        var m = document.createElement("div");
        var g = this.environment.getTheme().theme;
        if (g) {
          Qt(m, g);
        }
        Qt(m, "ag-popup");
        Qt(r, this.gridOptionsWrapper.isEnableRtl() ? "ag-rtl" : "ag-ltr");
        Qt(r, "ag-popup-child");
        if (this.focusController.isKeyboardMode()) {
          Qt(r, Nl.AG_KEYBOARD_FOCUS);
        }
        m.appendChild(r);
        h.appendChild(m);
        if (s) {
          this.setAlwaysOnTop(m, true);
        } else {
          this.bringPopupToFront(m);
        }
        var _;
        var v = false;
        var b = function (e) {
          if (m.contains(document.activeElement)) {
            if ((e.which || e.keyCode) === _o.ESCAPE) {
              O({
                keyboardEvent: e
              });
            }
          }
        };
        var y = function (e) {
          return O({
            mouseEvent: e
          });
        };
        var E = function (e) {
          return O({
            touchEvent: e
          });
        };
        var O = function (e) {
          if (undefined === e) {
            e = {};
          }
          var n = e.mouseEvent;
          var o = e.touchEvent;
          var s = e.keyboardEvent;
          if (!(t.isEventFromCurrentPopup({
            mouseEvent: n,
            touchEvent: o
          }, r) || t.isEventSameChainAsOriginalEvent({
            originalMouseEvent: a,
            mouseEvent: n,
            touchEvent: o
          }) || v)) {
            v = true;
            h.removeChild(m);
            d.removeEventListener("keydown", b);
            d.removeEventListener("mousedown", y);
            d.removeEventListener("touchstart", E);
            d.removeEventListener("contextmenu", y);
            t.eventService.removeEventListener(Ke.EVENT_DRAG_STARTED, y);
            if (i) {
              i(n || o || s);
            }
            t.popupList = t.popupList.filter(function (e) {
              return e.element !== r;
            });
            if (_) {
              _();
            }
          }
        };
        if (c) {
          c({
            hidePopup: O
          });
        }
        window.setTimeout(function () {
          if (o) {
            d.addEventListener("keydown", b);
          }
          if (n) {
            d.addEventListener("mousedown", y);
            t.eventService.addEventListener(Ke.EVENT_DRAG_STARTED, y);
            d.addEventListener("touchstart", E);
            d.addEventListener("contextmenu", y);
          }
        }, 0);
        if (l) {
          l();
        }
        if (u) {
          _ = this.keepPopupPositionedRelativeTo({
            element: u,
            ePopup: r,
            hidePopup: O
          });
        }
        this.popupList.push({
          element: r,
          hideFunc: O,
          stopAnchoringFunc: _
        });
        return {
          hideFunc: O,
          stopAnchoringFunc: _
        };
      }
      console.warn("ag-grid: could not find the document, document is empty");
    };
    t.prototype.isEventFromCurrentPopup = function (e, t) {
      var n = e.mouseEvent;
      var r = e.touchEvent;
      var o = n || r;
      if (!o) {
        return false;
      }
      var i = C(this.popupList, function (e) {
        return e.element === t;
      });
      if (-1 === i) {
        return false;
      }
      for (var a = i; a < this.popupList.length; a++) {
        if (Le(this.popupList[a].element, o)) {
          return true;
        }
      }
      return this.isElementWithinCustomPopup(o.target);
    };
    t.prototype.isElementWithinCustomPopup = function (e) {
      if (!this.popupList.length) {
        return false;
      }
      for (; e && e !== document.body;) {
        if (e.classList.contains("ag-custom-component-popup") || null === e.parentElement) {
          return true;
        }
        e = e.parentElement;
      }
      return false;
    };
    t.prototype.isEventSameChainAsOriginalEvent = function (e) {
      var t = e.originalMouseEvent;
      var n = e.mouseEvent;
      var r = e.touchEvent;
      var o = null;
      if (n) {
        o = n;
      } else {
        if (r) {
          o = r.touches[0];
        }
      }
      if (o && t) {
        var i = n ? n.screenX : 0;
        var a = n ? n.screenY : 0;
        var s = Math.abs(t.screenX - i) < 5;
        var c = Math.abs(t.screenY - a) < 5;
        if (s && c) {
          return true;
        }
      }
      return false;
    };
    t.prototype.getWrapper = function (e) {
      for (; !$t(e, "ag-popup") && e.parentElement;) {
        e = e.parentElement;
      }
      return $t(e, "ag-popup") ? e : null;
    };
    t.prototype.setAlwaysOnTop = function (e, t) {
      var n = this.getWrapper(e);
      if (n) {
        Jt(n, "ag-always-on-top", !!t);
        if (t) {
          this.bringPopupToFront(n);
        }
      }
    };
    t.prototype.bringPopupToFront = function (e) {
      var t = this.getPopupParent();
      var n = Array.prototype.slice.call(t.querySelectorAll(".ag-popup"));
      var r = n.length;
      var o = Array.prototype.slice.call(t.querySelectorAll(".ag-popup.ag-always-on-top"));
      var i = o.length;
      var a = this.getWrapper(e);
      if (a && !(r <= 1) && t.contains(e)) {
        var s = n.indexOf(a);
        if (i) {
          if ($t(a, "ag-always-on-top")) {
            if (s !== r - 1) {
              m(o).insertAdjacentElement("afterend", a);
            }
          } else {
            if (s !== r - i - 1) {
              o[0].insertAdjacentElement("beforebegin", a);
            }
          }
        } else if (s !== r - 1) {
          m(n).insertAdjacentElement("afterend", a);
        }
        var c = {
          type: "popupToFront",
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          eWrapper: a
        };
        this.eventService.dispatchEvent(c);
      }
    };
    kl([pe("environment")], t.prototype, "environment", undefined);
    kl([pe("focusController")], t.prototype, "focusController", undefined);
    return t = kl([de("popupService")], t);
  }(We);
  var Dl = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ml = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ll = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var Pl = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Dl(t, e);
    t.prototype.setBeans = function (e) {
      this.logging = e.isDebug();
    };
    t.prototype.create = function (e) {
      return new Bl(e, this.isLogging.bind(this));
    };
    t.prototype.isLogging = function () {
      return this.logging;
    };
    Ml([Ll(0, me("gridOptionsWrapper"))], t.prototype, "setBeans", null);
    return t = Ml([de("loggerFactory")], t);
  }(We);
  var Bl = function () {
    function e(e, t) {
      this.name = e;
      this.isLoggingFunc = t;
    }
    e.prototype.isLogging = function () {
      return this.isLoggingFunc();
    };
    e.prototype.log = function (e) {
      if (this.isLoggingFunc()) {
        console.log("AG Grid." + this.name + ": " + e);
      }
    };
    return e;
  }();
  var Fl = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Gl = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ul = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Fl(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      this.controllersService.whenReady(function (t) {
        e.centerRowContainerCon = t.centerRowContainerCon;
      });
    };
    t.prototype.registerHeaderRootComp = function (e) {
      this.headerRootComp = e;
    };
    t.prototype.getPreferredWidthForColumn = function (e, t) {
      var n = this.getHeaderCellForColumn(e);
      if (!n) {
        return -1;
      }
      var r = document.createElement("span");
      r.style.position = "fixed";
      var o = this.centerRowContainerCon.getContainerElement();
      o.appendChild(r);
      this.putRowCellsIntoDummyContainer(e, r);
      if (!t) {
        this.cloneItemIntoDummy(n, r);
      }
      var i = r.offsetWidth;
      o.removeChild(r);
      return i + this.gridOptionsWrapper.getAutoSizePadding();
    };
    t.prototype.getHeaderCellForColumn = function (e) {
      var t = null;
      this.headerRootComp.forEachHeaderElement(function (n) {
        if (n instanceof Ds) {
          var r = n;
          if (r.getColumn() === e) {
            t = r;
          }
        }
      });
      return t ? t.getGui() : null;
    };
    t.prototype.putRowCellsIntoDummyContainer = function (e, t) {
      var n = this;
      this.rowRenderer.getAllCellsForColumn(e).forEach(function (e) {
        return n.cloneItemIntoDummy(e, t);
      });
    };
    t.prototype.cloneItemIntoDummy = function (e, t) {
      var n = e.cloneNode(true);
      n.style.width = "";
      n.style.position = "static";
      n.style.left = "";
      var r = document.createElement("div");
      if ($t(n, "ag-header-cell")) {
        Qt(r, "ag-header");
        Qt(r, "ag-header-row");
        r.style.position = "static";
      } else {
        Qt(r, "ag-row");
      }
      r.style.display = "table-row";
      r.appendChild(n);
      t.appendChild(r);
    };
    Gl([pe("rowRenderer")], t.prototype, "rowRenderer", undefined);
    Gl([pe("controllersService")], t.prototype, "controllersService", undefined);
    Gl([le], t.prototype, "postConstruct", null);
    return t = Gl([de("autoWidthCalculator")], t);
  }(We);
  var Wl = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Hl = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Vl = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Wl(t, e);
    t.prototype.addResizeBar = function (e) {
      var t = this;
      var n = {
        dragStartPixels: e.dragStartPixels || 0,
        eElement: e.eResizeBar,
        onDragStart: this.onDragStart.bind(this, e),
        onDragStop: this.onDragStop.bind(this, e),
        onDragging: this.onDragging.bind(this, e)
      };
      this.dragService.addDragSource(n, true);
      return function () {
        return t.dragService.removeDragSource(n);
      };
    };
    t.prototype.onDragStart = function (e, t) {
      this.dragStartX = t.clientX;
      this.setResizeIcons();
      var n = t instanceof MouseEvent && true === t.shiftKey;
      e.onResizeStart(n);
    };
    t.prototype.setResizeIcons = function () {
      this.oldBodyCursor = this.eGridDiv.style.cursor;
      this.oldUserSelect = this.eGridDiv.style.userSelect;
      this.oldWebkitUserSelect = this.eGridDiv.style.webkitUserSelect;
      this.eGridDiv.style.cursor = "ew-resize";
      this.eGridDiv.style.userSelect = "none";
      this.eGridDiv.style.webkitUserSelect = "none";
    };
    t.prototype.onDragStop = function (e, t) {
      e.onResizeEnd(this.resizeAmount);
      this.resetIcons();
    };
    t.prototype.resetIcons = function () {
      this.eGridDiv.style.cursor = this.oldBodyCursor;
      this.eGridDiv.style.userSelect = this.oldUserSelect;
      this.eGridDiv.style.webkitUserSelect = this.oldWebkitUserSelect;
    };
    t.prototype.onDragging = function (e, t) {
      this.resizeAmount = t.clientX - this.dragStartX;
      e.onResizing(this.resizeAmount);
    };
    Hl([pe("dragService")], t.prototype, "dragService", undefined);
    Hl([pe("eGridDiv")], t.prototype, "eGridDiv", undefined);
    return t = Hl([de("horizontalResizeService")], t);
  }(We);
  var zl = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Yl = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Kl = function (e) {
    function n() {
      return e.call(this) || this;
    }
    zl(n, e);
    n.prototype.postConstruct = function () {
      var e = this;
      this.logger = this.loggerFactory.create("GridCompController");
      [this.gridApi, this.popupService, this.focusController, this.controllersService].forEach(function (t) {
        return t.registerGridCompController(e);
      });
      if (Oe.isRegistered(exports.ModuleNames.ClipboardModule)) {
        this.clipboardService.registerGridCompController(this);
      }
    };
    n.prototype.setView = function (e, t, n) {
      var r = this;
      this.view = e;
      this.eGridHostDiv = t;
      this.eGui = n;
      this.mouseEventService.stampTopLevelGridCompWithGridInstance(t);
      this.createManagedBean(new Ic(this.view));
      this.addRtlSupport();
      this.addManagedListener(this, Ke.EVENT_KEYBOARD_FOCUS, function () {
        r.view.addOrRemoveKeyboardFocusClass(true);
      });
      this.addManagedListener(this, Ke.EVENT_MOUSE_FOCUS, function () {
        r.view.addOrRemoveKeyboardFocusClass(false);
      });
      var o = this.resizeObserverService.observeResize(this.eGridHostDiv, this.onGridSizeChanged.bind(this));
      this.addDestroyFunc(function () {
        return o();
      });
    };
    n.prototype.showDropZones = function () {
      return Oe.isRegistered(exports.ModuleNames.RowGroupingModule);
    };
    n.prototype.showSideBar = function () {
      return Oe.isRegistered(exports.ModuleNames.SideBarModule);
    };
    n.prototype.showStatusBar = function () {
      return Oe.isRegistered(exports.ModuleNames.StatusBarModule);
    };
    n.prototype.showWatermark = function () {
      return Oe.isRegistered(exports.ModuleNames.EnterpriseCoreModule);
    };
    n.prototype.onGridSizeChanged = function () {
      var e = {
        type: Ke.EVENT_GRID_SIZE_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi,
        clientWidth: this.eGridHostDiv.clientWidth,
        clientHeight: this.eGridHostDiv.clientHeight
      };
      this.eventService.dispatchEvent(e);
    };
    n.prototype.addRtlSupport = function () {
      var e = this.gridOptionsWrapper.isEnableRtl() ? "ag-rtl" : "ag-ltr";
      this.view.setRtlClass(e);
    };
    n.prototype.destroyGridUi = function () {
      this.view.destroyGridUi();
    };
    n.prototype.getGui = function () {
      return this.eGui;
    };
    n.prototype.focusNextInnerContainer = function (e) {
      var t = this.view.getFocusableContainers();
      var n = C(t, function (e) {
        return e.contains(document.activeElement);
      }) + (e ? -1 : 1);
      return !(n < 0 || n >= t.length) && (0 === n ? this.focusGridHeader() : this.focusController.focusInto(t[n]));
    };
    n.prototype.focusGridHeader = function () {
      var e = this.columnController.getAllDisplayedColumns()[0];
      return !!e && (e.getParent() && (e = this.columnController.getColumnGroupAtLevel(e, 0)), this.focusController.focusHeaderPosition({
        headerRowIndex: 0,
        column: e
      }), true);
    };
    n.prototype.forceFocusOutOfContainer = function (e) {
      if (undefined === e) {
        e = false;
      }
      this.view.forceFocusOutOfContainer(e);
    };
    Yl([pe("columnApi")], n.prototype, "columnApi", undefined);
    Yl([pe("gridApi")], n.prototype, "gridApi", undefined);
    Yl([pe("popupService")], n.prototype, "popupService", undefined);
    Yl([pe("focusController")], n.prototype, "focusController", undefined);
    Yl([fe("clipboardService")], n.prototype, "clipboardService", undefined);
    Yl([pe("loggerFactory")], n.prototype, "loggerFactory", undefined);
    Yl([pe("resizeObserverService")], n.prototype, "resizeObserverService", undefined);
    Yl([pe("columnController")], n.prototype, "columnController", undefined);
    Yl([pe("controllersService")], n.prototype, "controllersService", undefined);
    Yl([pe("mouseEventService")], n.prototype, "mouseEventService", undefined);
    Yl([le], n.prototype, "postConstruct", null);
    return n;
  }(We);
  var ql = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Xl = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ql = function (e) {
    function n(t) {
      var n = e.call(this, undefined, true) || this;
      n.eGridDiv = t;
      return n;
    }
    ql(n, e);
    n.prototype.postConstruct = function () {
      var t = this;
      this.logger = this.loggerFactory.create("GridComp");
      var n = {
        destroyGridUi: function () {
          return t.destroyBean(t);
        },
        setRtlClass: function (e) {
          return Qt(t.getGui(), e);
        },
        addOrRemoveKeyboardFocusClass: function (e) {
          return t.addOrRemoveCssClass(Nl.AG_KEYBOARD_FOCUS, e);
        },
        forceFocusOutOfContainer: this.forceFocusOutOfContainer.bind(this),
        updateLayoutClasses: this.updateLayoutClasses.bind(this),
        getFocusableContainers: this.getFocusableContainers.bind(this)
      };
      this.con = this.createManagedBean(new Kl());
      var r = this.createTemplate();
      this.setTemplate(r);
      this.con.setView(n, this.eGridDiv, this.getGui());
      this.insertGridIntoDom();
      e.prototype.postConstruct.call(this);
    };
    n.prototype.insertGridIntoDom = function () {
      var e = this;
      var t = this.getGui();
      this.eGridDiv.appendChild(t);
      this.addDestroyFunc(function () {
        e.eGridDiv.removeChild(t);
        e.logger.log("Grid removed from DOM");
      });
    };
    n.prototype.updateLayoutClasses = function (e) {
      Jt(this.eRootWrapperBody, exports.LayoutCssClasses.AUTO_HEIGHT, e.autoHeight);
      Jt(this.eRootWrapperBody, exports.LayoutCssClasses.NORMAL, e.normal);
      Jt(this.eRootWrapperBody, exports.LayoutCssClasses.PRINT, e.print);
      this.addOrRemoveCssClass(exports.LayoutCssClasses.AUTO_HEIGHT, e.autoHeight);
      this.addOrRemoveCssClass(exports.LayoutCssClasses.NORMAL, e.normal);
      this.addOrRemoveCssClass(exports.LayoutCssClasses.PRINT, e.print);
    };
    n.prototype.createTemplate = function () {
      return "<div ref=\"eRootWrapper\" class=\"ag-root-wrapper\">\n                " + (this.con.showDropZones() ? "<ag-grid-header-drop-zones></ag-grid-header-drop-zones>" : "") + "\n                <div class=\"ag-root-wrapper-body\" ref=\"rootWrapperBody\">\n                    <ag-grid-body ref=\"gridBody\"></ag-grid-body>\n                    " + (this.con.showSideBar() ? "<ag-side-bar ref=\"sideBar\"></ag-side-bar>" : "") + "\n                </div>\n                " + (this.con.showStatusBar() ? "<ag-status-bar ref=\"statusBar\"></ag-status-bar>" : "") + "\n                <ag-pagination></ag-pagination>\n                " + (this.con.showWatermark() ? "<ag-watermark></ag-watermark>" : "") + "\n            </div>";
    };
    n.prototype.getFocusableElement = function () {
      return this.eRootWrapperBody;
    };
    n.prototype.getFocusableContainers = function () {
      var e = [this.gridBodyComp.getGui()];
      if (this.sideBarComp) {
        e.push(this.sideBarComp.getGui());
      }
      return e.filter(function (e) {
        return gn(e);
      });
    };
    n.prototype.focusInnerElement = function (e) {
      var t = this.getFocusableContainers();
      if (e) {
        if (t.length > 1) {
          return this.focusController.focusInto(m(t));
        }
        var n = m(this.columnController.getAllDisplayedColumns());
        if (this.focusController.focusGridView(n, true)) {
          return true;
        }
      }
      return this.con.focusGridHeader();
    };
    n.prototype.onTabKeyDown = function () {};
    Xl([pe("columnController")], n.prototype, "columnController", undefined);
    Xl([pe("loggerFactory")], n.prototype, "loggerFactory", undefined);
    Xl([uo("gridBody")], n.prototype, "gridBodyComp", undefined);
    Xl([uo("sideBar")], n.prototype, "sideBarComp", undefined);
    Xl([uo("rootWrapperBody")], n.prototype, "eRootWrapperBody", undefined);
    return n;
  }(So);
  var Zl = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Jl = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var $l = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Zl(t, e);
    t.prototype.registerGridComp = function (e) {
      this.gridBodyComp = e;
    };
    t.prototype.hideActiveMenu = function () {
      if (this.hidePopup) {
        this.hidePopup();
      }
    };
    t.prototype.showMenuAfterMouseEvent = function (e, t) {
      var n = this;
      this.showPopup(e, function (r) {
        n.popupService.positionPopupUnderMouseEvent({
          column: e,
          type: "columnMenu",
          mouseEvent: t,
          ePopup: r
        });
      }, t.target);
    };
    t.prototype.showMenuAfterButtonClick = function (e, t) {
      var n = this;
      this.showPopup(e, function (r) {
        n.popupService.positionPopupUnderComponent({
          type: "columnMenu",
          eventSource: t,
          ePopup: r,
          keepWithinBounds: true,
          column: e
        });
      }, t);
    };
    t.prototype.showPopup = function (e, t, n) {
      var r;
      var o = this;
      var i = this.filterManager.getOrCreateFilterWrapper(e, "COLUMN_MENU");
      var a = document.createElement("div");
      a.setAttribute("role", "presentation");
      Qt(a, "ag-menu");
      this.tabListener = this.addManagedListener(a, "keydown", function (e) {
        return o.trapFocusWithin(e, a);
      });
      i.guiPromise.then(function (e) {
        return a.appendChild(e);
      });
      var s = n || this.gridBodyComp.getGui();
      var c = this.popupService.addPopup({
        modal: true,
        eChild: a,
        closeOnEsc: true,
        closedCallback: function (t) {
          e.setMenuVisible(false, "contextMenu");
          var r = t instanceof KeyboardEvent;
          if (o.tabListener) {
            o.tabListener = o.tabListener();
          }
          if (r && n && gn(n)) {
            var i = o.focusController.findTabbableParent(n);
            if (i) {
              i.focus();
            }
          }
        },
        positionCallback: function () {
          return t(a);
        },
        anchorToElement: s
      });
      if (c) {
        this.hidePopup = r = c.hideFunc;
      }
      i.filterPromise.then(function (e) {
        t(a);
        if (e.afterGuiAttached) {
          e.afterGuiAttached({
            container: "columnMenu",
            hidePopup: r
          });
        }
      });
      e.setMenuVisible(true, "contextMenu");
    };
    t.prototype.trapFocusWithin = function (e, t) {
      if (!(e.keyCode !== _o.TAB || e.defaultPrevented || this.focusController.findNextFocusableElement(t, false, e.shiftKey))) {
        e.preventDefault();
        this.focusController.focusInto(t, e.shiftKey);
      }
    };
    t.prototype.isMenuEnabled = function (e) {
      return e.isFilterAllowed();
    };
    Jl([pe("filterManager")], t.prototype, "filterManager", undefined);
    Jl([pe("popupService")], t.prototype, "popupService", undefined);
    Jl([pe("focusController")], t.prototype, "focusController", undefined);
    return t = Jl([de("menuFactory")], t);
  }(We);
  var eu = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var tu = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var nu = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.dragEndFunctions = [];
      t.dragSources = [];
      return t;
    }
    eu(t, e);
    t.prototype.init = function () {
      this.logger = this.loggerFactory.create("DragService");
    };
    t.prototype.removeAllListeners = function () {
      this.dragSources.forEach(this.removeListener.bind(this));
      this.dragSources.length = 0;
    };
    t.prototype.removeListener = function (e) {
      var t = e.dragSource.eElement;
      var n = e.mouseDownListener;
      t.removeEventListener("mousedown", n);
      if (e.touchEnabled) {
        var r = e.touchStartListener;
        t.removeEventListener("touchstart", r, {
          passive: true
        });
      }
    };
    t.prototype.removeDragSource = function (e) {
      var t = u(this.dragSources, function (t) {
        return t.dragSource === e;
      });
      if (t) {
        this.removeListener(t);
        v(this.dragSources, t);
      }
    };
    t.prototype.setNoSelectToBody = function (e) {
      var t = this.gridOptionsWrapper.getDocument().querySelector("body");
      if (r(t)) {
        Jt(t, "ag-unselectable", e);
      }
    };
    t.prototype.isDragging = function () {
      return this.dragging;
    };
    t.prototype.addDragSource = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      var n = this.onMouseDown.bind(this, e);
      e.eElement.addEventListener("mousedown", n);
      var r = null;
      var o = this.gridOptionsWrapper.isSuppressTouch();
      if (t && !o) {
        r = this.onTouchStart.bind(this, e);
        e.eElement.addEventListener("touchstart", r, {
          passive: true
        });
      }
      this.dragSources.push({
        dragSource: e,
        mouseDownListener: n,
        touchStartListener: r,
        touchEnabled: t
      });
    };
    t.prototype.onTouchStart = function (e, t) {
      var n = this;
      this.currentDragParams = e;
      this.dragging = false;
      var r = t.touches[0];
      this.touchLastTime = r;
      this.touchStart = r;
      var o = function (t) {
        return n.onTouchUp(t, e.eElement);
      };
      var i = e.eElement;
      var a = [{
        target: document,
        type: "touchmove",
        listener: function (e) {
          if (e.cancelable) {
            e.preventDefault();
          }
        },
        options: {
          passive: false
        }
      }, {
        target: i,
        type: "touchmove",
        listener: function (t) {
          return n.onTouchMove(t, e.eElement);
        },
        options: {
          passive: true
        }
      }, {
        target: i,
        type: "touchend",
        listener: o,
        options: {
          passive: true
        }
      }, {
        target: i,
        type: "touchcancel",
        listener: o,
        options: {
          passive: true
        }
      }];
      this.addTemporaryEvents(a);
      if (0 === e.dragStartPixels) {
        this.onCommonMove(r, this.touchStart, e.eElement);
      }
    };
    t.prototype.onMouseDown = function (e, t) {
      var n = this;
      var r = t;
      if ((!e.skipMouseEvent || !e.skipMouseEvent(t)) && !r._alreadyProcessedByDragService && (r._alreadyProcessedByDragService = true, 0 === t.button)) {
        this.currentDragParams = e;
        this.dragging = false;
        this.mouseStartEvent = t;
        var o = this.gridOptionsWrapper.getDocument();
        this.setNoSelectToBody(true);
        var i = [{
          target: o,
          type: "mousemove",
          listener: function (t) {
            return n.onMouseMove(t, e.eElement);
          }
        }, {
          target: o,
          type: "mouseup",
          listener: function (t) {
            return n.onMouseUp(t, e.eElement);
          }
        }, {
          target: o,
          type: "contextmenu",
          listener: function (e) {
            return e.preventDefault();
          }
        }];
        this.addTemporaryEvents(i);
        if (0 === e.dragStartPixels) {
          this.onMouseMove(t, e.eElement);
        }
      }
    };
    t.prototype.addTemporaryEvents = function (e) {
      e.forEach(function (e) {
        var t = e.target;
        var n = e.type;
        var r = e.listener;
        var o = e.options;
        t.addEventListener(n, r, o);
      });
      this.dragEndFunctions.push(function () {
        e.forEach(function (e) {
          var t = e.target;
          var n = e.type;
          var r = e.listener;
          var o = e.options;
          t.removeEventListener(n, r, o);
        });
      });
    };
    t.prototype.isEventNearStartEvent = function (e, t) {
      var n = this.currentDragParams.dragStartPixels;
      return Ur(e, t, r(n) ? n : 4);
    };
    t.prototype.getFirstActiveTouch = function (e) {
      for (var t = 0; t < e.length; t++) {
        if (e[t].identifier === this.touchStart.identifier) {
          return e[t];
        }
      }
      return null;
    };
    t.prototype.onCommonMove = function (e, t, n) {
      if (!this.dragging) {
        if (!this.dragging && this.isEventNearStartEvent(e, t)) {
          return;
        }
        this.dragging = true;
        var r = {
          type: Ke.EVENT_DRAG_STARTED,
          api: this.gridApi,
          columnApi: this.columnApi,
          target: n
        };
        this.eventService.dispatchEvent(r);
        this.currentDragParams.onDragStart(t);
        this.currentDragParams.onDragging(t);
      }
      this.currentDragParams.onDragging(e);
    };
    t.prototype.onTouchMove = function (e, t) {
      var n = this.getFirstActiveTouch(e.touches);
      if (n) {
        this.onCommonMove(n, this.touchStart, t);
      }
    };
    t.prototype.onMouseMove = function (e, t) {
      this.onCommonMove(e, this.mouseStartEvent, t);
    };
    t.prototype.onTouchUp = function (e, t) {
      var n = this.getFirstActiveTouch(e.changedTouches);
      if (!n) {
        n = this.touchLastTime;
      }
      this.onUpCommon(n, t);
    };
    t.prototype.onMouseUp = function (e, t) {
      this.onUpCommon(e, t);
    };
    t.prototype.onUpCommon = function (e, t) {
      if (this.dragging) {
        this.dragging = false;
        this.currentDragParams.onDragStop(e);
        var n = {
          type: Ke.EVENT_DRAG_STOPPED,
          api: this.gridApi,
          columnApi: this.columnApi,
          target: t
        };
        this.eventService.dispatchEvent(n);
      }
      this.setNoSelectToBody(false);
      this.mouseStartEvent = null;
      this.touchStart = null;
      this.touchLastTime = null;
      this.currentDragParams = null;
      this.dragEndFunctions.forEach(function (e) {
        return e();
      });
      this.dragEndFunctions.length = 0;
    };
    tu([pe("loggerFactory")], t.prototype, "loggerFactory", undefined);
    tu([pe("columnApi")], t.prototype, "columnApi", undefined);
    tu([pe("gridApi")], t.prototype, "gridApi", undefined);
    tu([le], t.prototype, "init", null);
    tu([ue], t.prototype, "removeAllListeners", null);
    return t = tu([de("dragService")], t);
  }(We);
  var ru = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ou = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var iu = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    var n;
    ru(t, e);
    n = t;
    t.prototype.progressSort = function (e, t, n) {
      if (undefined === n) {
        n = "api";
      }
      var r = this.getNextSortDirection(e);
      this.setSortForColumn(e, r, t, n);
    };
    t.prototype.setSortForColumn = function (e, t, n, r) {
      if (undefined === r) {
        r = "api";
      }
      if (t !== Ee.SORT_ASC && t !== Ee.SORT_DESC) {
        t = null;
      }
      e.setSort(t, r);
      if (!(n && !this.gridOptionsWrapper.isSuppressMultiSort())) {
        this.clearSortBarThisColumn(e, r);
      }
      this.updateSortIndex(e);
      this.dispatchSortChangedEvents();
    };
    t.prototype.updateSortIndex = function (e) {
      var t = this.getColumnsWithSortingOrdered();
      var n = 0;
      t.forEach(function (t) {
        if (t !== e) {
          t.setSortIndex(n);
          n++;
        }
      });
      if (e.getSort()) {
        e.setSortIndex(n);
      }
      this.columnController.getPrimaryAndSecondaryAndAutoColumns().filter(function (e) {
        return null == e.getSort();
      }).forEach(function (e) {
        return e.setSortIndex();
      });
    };
    t.prototype.onSortChanged = function () {
      this.dispatchSortChangedEvents();
    };
    t.prototype.isSortActive = function () {
      var e = this.columnController.getPrimaryAndSecondaryAndAutoColumns().filter(function (e) {
        return !!e.getSort();
      });
      return e && e.length > 0;
    };
    t.prototype.dispatchSortChangedEvents = function () {
      var e = {
        type: Ke.EVENT_SORT_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(e);
    };
    t.prototype.clearSortBarThisColumn = function (e, t) {
      this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function (n) {
        if (n !== e) {
          n.setSort(undefined, t);
        }
      });
    };
    t.prototype.getNextSortDirection = function (e) {
      var t;
      t = e.getColDef().sortingOrder ? e.getColDef().sortingOrder : this.gridOptionsWrapper.getSortingOrder() ? this.gridOptionsWrapper.getSortingOrder() : n.DEFAULT_SORTING_ORDER;
      if (!Array.isArray(t) || t.length <= 0) {
        console.warn("ag-grid: sortingOrder must be an array with at least one element, currently it's " + t);
        return null;
      }
      var r;
      var o = t.indexOf(e.getSort());
      var i = o < 0;
      var a = o == t.length - 1;
      r = i || a ? t[0] : t[o + 1];
      return n.DEFAULT_SORTING_ORDER.indexOf(r) < 0 ? (console.warn("ag-grid: invalid sort type " + r), null) : r;
    };
    t.prototype.getColumnsWithSortingOrdered = function () {
      var e = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
      var t = e.filter(function (e) {
        return !!e.getSort();
      });
      var n = {};
      e.forEach(function (e, t) {
        return n[e.getId()] = t;
      });
      t.sort(function (e, t) {
        var r = e.getSortIndex();
        var o = t.getSortIndex();
        return null != r && null != o ? r - o : null == r && null == o ? n[e.getId()] > n[t.getId()] ? 1 : -1 : null == o ? -1 : 1;
      });
      return t;
    };
    t.prototype.getSortModel = function () {
      return this.getColumnsWithSortingOrdered().map(function (e) {
        return {
          sort: e.getSort(),
          colId: e.getId()
        };
      });
    };
    t.prototype.getSortOptions = function () {
      return this.getColumnsWithSortingOrdered().map(function (e) {
        return {
          sort: e.getSort(),
          column: e
        };
      });
    };
    t.DEFAULT_SORTING_ORDER = [Ee.SORT_ASC, Ee.SORT_DESC, null];
    ou([pe("columnController")], t.prototype, "columnController", undefined);
    ou([pe("columnApi")], t.prototype, "columnApi", undefined);
    ou([pe("gridApi")], t.prototype, "gridApi", undefined);
    return t = n = ou([de("sortController")], t);
  }(We);
  var au = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var su = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var cu = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.gridInstanceId = n.gridInstanceSequence.next();
      return t;
    }
    var n;
    au(t, e);
    n = t;
    t.prototype.stampTopLevelGridCompWithGridInstance = function (e) {
      e[n.GRID_DOM_KEY] = this.gridInstanceId;
    };
    t.prototype.getRenderedCellForEvent = function (e) {
      return De(this.gridOptionsWrapper, e, "cellComp");
    };
    t.prototype.isEventFromThisGrid = function (e) {
      return this.isElementInThisGrid(e.target);
    };
    t.prototype.isElementInThisGrid = function (e) {
      for (var t = e; t;) {
        var o = t[n.GRID_DOM_KEY];
        if (r(o)) {
          return o === this.gridInstanceId;
        }
        t = t.parentElement;
      }
      return false;
    };
    t.prototype.getCellPositionForEvent = function (e) {
      var t = this.getRenderedCellForEvent(e);
      return t ? t.getCellPosition() : null;
    };
    t.prototype.getNormalisedPosition = function (e) {
      var t;
      var n;
      var r = this.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_NORMAL;
      var o = e;
      if (null != o.clientX || null != o.clientY) {
        t = o.clientX;
        n = o.clientY;
      } else {
        t = o.x;
        n = o.y;
      }
      if (r) {
        var i = this.controllersService.getGridBodyController();
        var a = i.getScrollFeature().getVScrollPosition();
        t += i.getScrollFeature().getHScrollPosition().left;
        n += a.top;
      }
      return {
        x: t,
        y: n
      };
    };
    t.gridInstanceSequence = new Xr();
    t.GRID_DOM_KEY = "__ag_grid_instance";
    su([pe("controllersService")], t.prototype, "controllersService", undefined);
    return t = n = su([de("mouseEventService")], t);
  }(We);
  var lu = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var uu = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var du = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    lu(t, e);
    t.prototype.getNextCellToFocus = function (e, t) {
      for (var n = t, r = false; !r;) {
        switch (e) {
          case _o.UP:
            n = this.getCellAbove(n);
            break;
          case _o.DOWN:
            n = this.getCellBelow(n);
            break;
          case _o.RIGHT:
            n = this.gridOptionsWrapper.isEnableRtl() ? this.getCellToLeft(n) : this.getCellToRight(n);
            break;
          case _o.LEFT:
            n = this.gridOptionsWrapper.isEnableRtl() ? this.getCellToRight(n) : this.getCellToLeft(n);
            break;
          default:
            n = null;
            console.warn("AG Grid: unknown key for navigation " + e);
        }
        r = !n || this.isCellGoodToFocusOn(n);
      }
      return n;
    };
    t.prototype.isCellGoodToFocusOn = function (e) {
      var t;
      var n = e.column;
      switch (e.rowPinned) {
        case Ee.PINNED_TOP:
          t = this.pinnedRowModel.getPinnedTopRow(e.rowIndex);
          break;
        case Ee.PINNED_BOTTOM:
          t = this.pinnedRowModel.getPinnedBottomRow(e.rowIndex);
          break;
        default:
          t = this.rowModel.getRow(e.rowIndex);
      }
      return !!t && !n.isSuppressNavigable(t);
    };
    t.prototype.getCellToLeft = function (e) {
      if (!e) {
        return null;
      }
      var t = this.columnController.getDisplayedColBefore(e.column);
      return t ? {
        rowIndex: e.rowIndex,
        column: t,
        rowPinned: e.rowPinned
      } : null;
    };
    t.prototype.getCellToRight = function (e) {
      if (!e) {
        return null;
      }
      var t = this.columnController.getDisplayedColAfter(e.column);
      return t ? {
        rowIndex: e.rowIndex,
        column: t,
        rowPinned: e.rowPinned
      } : null;
    };
    t.prototype.getRowBelow = function (e) {
      var t = e.rowIndex;
      var n = e.rowPinned;
      if (this.isLastRowInContainer(e)) {
        switch (n) {
          case Ee.PINNED_BOTTOM:
            return null;
          case Ee.PINNED_TOP:
            return this.rowModel.isRowsToRender() ? {
              rowIndex: this.paginationProxy.getPageFirstRow(),
              rowPinned: null
            } : this.pinnedRowModel.isRowsToRender(Ee.PINNED_BOTTOM) ? {
              rowIndex: 0,
              rowPinned: Ee.PINNED_BOTTOM
            } : null;
          default:
            return this.pinnedRowModel.isRowsToRender(Ee.PINNED_BOTTOM) ? {
              rowIndex: 0,
              rowPinned: Ee.PINNED_BOTTOM
            } : null;
        }
      }
      return {
        rowIndex: t + 1,
        rowPinned: n
      };
    };
    t.prototype.getCellBelow = function (e) {
      if (!e) {
        return null;
      }
      var t = this.getRowBelow(e);
      return t ? {
        rowIndex: t.rowIndex,
        column: e.column,
        rowPinned: t.rowPinned
      } : null;
    };
    t.prototype.isLastRowInContainer = function (e) {
      var t = e.rowPinned;
      var n = e.rowIndex;
      return t === Ee.PINNED_TOP ? this.pinnedRowModel.getPinnedTopRowData().length - 1 <= n : t === Ee.PINNED_BOTTOM ? this.pinnedRowModel.getPinnedBottomRowData().length - 1 <= n : this.paginationProxy.getPageLastRow() <= n;
    };
    t.prototype.getRowAbove = function (e) {
      var t = e.rowIndex;
      var n = e.rowPinned;
      return (n ? 0 === t : t === this.paginationProxy.getPageFirstRow()) ? n === Ee.PINNED_TOP ? null : n && this.rowModel.isRowsToRender() ? this.getLastBodyCell() : this.pinnedRowModel.isRowsToRender(Ee.PINNED_TOP) ? this.getLastFloatingTopRow() : null : {
        rowIndex: t - 1,
        rowPinned: n
      };
    };
    t.prototype.getCellAbove = function (e) {
      if (!e) {
        return null;
      }
      var t = this.getRowAbove({
        rowIndex: e.rowIndex,
        rowPinned: e.rowPinned
      });
      return t ? {
        rowIndex: t.rowIndex,
        column: e.column,
        rowPinned: t.rowPinned
      } : null;
    };
    t.prototype.getLastBodyCell = function () {
      return {
        rowIndex: this.paginationProxy.getPageLastRow(),
        rowPinned: null
      };
    };
    t.prototype.getLastFloatingTopRow = function () {
      return {
        rowIndex: this.pinnedRowModel.getPinnedTopRowData().length - 1,
        rowPinned: Ee.PINNED_TOP
      };
    };
    t.prototype.getNextTabbedCell = function (e, t) {
      return t ? this.getNextTabbedCellBackwards(e) : this.getNextTabbedCellForwards(e);
    };
    t.prototype.getNextTabbedCellForwards = function (e) {
      var t = this.columnController.getAllDisplayedColumns();
      var n = e.rowIndex;
      var r = e.rowPinned;
      var i = this.columnController.getDisplayedColAfter(e.column);
      if (!i) {
        i = t[0];
        var a = this.getRowBelow(e);
        if (o(a)) {
          return null;
        }
        if (!a.rowPinned && !this.paginationProxy.isRowInPage(a)) {
          return null;
        }
        n = a ? a.rowIndex : null;
        r = a ? a.rowPinned : null;
      }
      return {
        rowIndex: n,
        column: i,
        rowPinned: r
      };
    };
    t.prototype.getNextTabbedCellBackwards = function (e) {
      var t = this.columnController.getAllDisplayedColumns();
      var n = e.rowIndex;
      var r = e.rowPinned;
      var i = this.columnController.getDisplayedColBefore(e.column);
      if (!i) {
        i = m(t);
        var a = this.getRowAbove({
          rowIndex: e.rowIndex,
          rowPinned: e.rowPinned
        });
        if (o(a)) {
          return null;
        }
        if (!a.rowPinned && !this.paginationProxy.isRowInPage(a)) {
          return null;
        }
        n = a ? a.rowIndex : null;
        r = a ? a.rowPinned : null;
      }
      return {
        rowIndex: n,
        column: i,
        rowPinned: r
      };
    };
    uu([pe("columnController")], t.prototype, "columnController", undefined);
    uu([pe("rowModel")], t.prototype, "rowModel", undefined);
    uu([pe("pinnedRowModel")], t.prototype, "pinnedRowModel", undefined);
    uu([pe("paginationProxy")], t.prototype, "paginationProxy", undefined);
    return t = uu([de("cellNavigationService")], t);
  }(We);
  var pu = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var fu = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var hu = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    pu(t, e);
    t.prototype.formatValue = function (e, t, n, r, o, i) {
      if (undefined === i) {
        i = true;
      }
      var a;
      var s = null;
      var c = e.getColDef();
      if (o) {
        a = o;
      } else {
        if (i) {
          a = t && t.rowPinned && c.pinnedRowValueFormatter ? c.pinnedRowValueFormatter : c.valueFormatter;
        }
      }
      if (a) {
        var l = {
          value: r,
          node: t,
          data: t ? t.data : null,
          colDef: c,
          column: e,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext()
        };
        l.$scope = n;
        s = this.expressionService.evaluate(a, l);
      } else if (c.refData) {
        return c.refData[r] || "";
      }
      if (null == s && Array.isArray(r)) {
        s = r.join(", ");
      }
      return s;
    };
    fu([pe("expressionService")], t.prototype, "expressionService", undefined);
    return t = fu([de("valueFormatterService")], t);
  }(We);
  var mu = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var gu = function (e) {
    function t(t) {
      return e.call(this, t, "ag-radio-button", "radio") || this;
    }
    mu(t, e);
    t.prototype.isSelected = function () {
      return this.eInput.checked;
    };
    t.prototype.toggle = function () {
      if (!this.isSelected()) {
        this.setValue(true);
      }
    };
    t.prototype.addInputListeners = function () {
      e.prototype.addInputListeners.call(this);
      this.addManagedListener(this.eventService, Ke.EVENT_CHECKBOX_CHANGED, this.onChange.bind(this));
    };
    t.prototype.onChange = function (e) {
      if (e.selected && e.name && this.eInput.name && this.eInput.name === e.name && e.id && this.eInput.id !== e.id) {
        this.setValue(false, true);
      }
    };
    return t;
  }(Ss);
  var _u = ["mouseover", "mouseout", "mouseenter", "mouseleave"];
  var vu = function () {
    function e() {
      this.isOutsideAngular = function (e) {
        return O(_u, e);
      };
    }
    e.prototype.setTimeout = function (e, t) {
      window.setTimeout(e, t);
    };
    e.prototype.addEventListener = function (e, t, n, r) {
      e.addEventListener(t, n, r);
    };
    e.prototype.dispatchEvent = function (e, t) {
      t();
    };
    return e;
  }();
  var bu = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var yu = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Eu = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    bu(t, e);
    t.prototype.postConstruct = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
    };
    t.prototype.onDisplayedColumnsChanged = function () {
      this.update();
    };
    t.prototype.onDisplayedColumnsWidthChanged = function () {
      this.update();
    };
    t.prototype.update = function () {
      this.updateImpl();
      setTimeout(this.updateImpl.bind(this), 500);
    };
    t.prototype.updateImpl = function () {
      var e = {
        horizontalScrollShowing: this.controllersService.getCenterRowContainerCon().isHorizontalScrollShowing(),
        verticalScrollShowing: this.isVerticalScrollShowing()
      };
      this.setScrollsVisible(e);
    };
    t.prototype.setScrollsVisible = function (e) {
      if (this.horizontalScrollShowing !== e.horizontalScrollShowing || this.verticalScrollShowing !== e.verticalScrollShowing) {
        this.horizontalScrollShowing = e.horizontalScrollShowing;
        this.verticalScrollShowing = e.verticalScrollShowing;
        var t = {
          type: Ke.EVENT_SCROLL_VISIBILITY_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(t);
      }
    };
    t.prototype.isHorizontalScrollShowing = function () {
      return this.horizontalScrollShowing;
    };
    t.prototype.isVerticalScrollShowing = function () {
      return this.verticalScrollShowing;
    };
    yu([pe("columnApi")], t.prototype, "columnApi", undefined);
    yu([pe("gridApi")], t.prototype, "gridApi", undefined);
    yu([pe("controllersService")], t.prototype, "controllersService", undefined);
    yu([le], t.prototype, "postConstruct", null);
    return t = yu([de("scrollVisibleService")], t);
  }(We);
  var Ou = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var wu = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Cu = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Ou(t, e);
    t.prototype.processAllCellClasses = function (e, t, n, r) {
      this.processClassRules(e.cellClassRules, t, n, r);
      this.processStaticCellClasses(e, t, n);
    };
    t.prototype.processClassRules = function (e, t, n, r) {
      if (V(e)) {
        for (var o = Object.keys(e), i = 0; i < o.length; i++) {
          var a = o[i];
          var s = e[a];
          var c = undefined;
          if ("string" === typeof s) {
            c = this.expressionService.evaluate(s, t);
          } else {
            if ("function" === typeof s) {
              c = s(t);
            }
          }
          if (c) {
            n(a);
          } else {
            if (r) {
              r(a);
            }
          }
        }
      }
    };
    t.prototype.processStaticCellClasses = function (e, t, n) {
      if (e.cellClass) {
        var r = undefined;
        if ("function" === typeof e.cellClass) {
          r = (0, e.cellClass)(t);
        } else {
          r = e.cellClass;
        }
        if ("string" === typeof r) {
          n(r);
        } else {
          if (Array.isArray(r)) {
            r.forEach(function (e) {
              n(e);
            });
          }
        }
      }
    };
    wu([pe("expressionService")], t.prototype, "expressionService", undefined);
    return t = wu([de("stylingService")], t);
  }(We);
  var Tu = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Su = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Iu = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Tu(t, e);
    t.prototype.setMouseOver = function (e) {
      this.selectedColumns = e;
      var t = {
        type: Ke.EVENT_COLUMN_HOVER_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(t);
    };
    t.prototype.clearMouseOver = function () {
      this.selectedColumns = null;
      var e = {
        type: Ke.EVENT_COLUMN_HOVER_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(e);
    };
    t.prototype.isHovered = function (e) {
      return !!this.selectedColumns && this.selectedColumns.indexOf(e) >= 0;
    };
    Su([pe("columnApi")], t.prototype, "columnApi", undefined);
    Su([pe("gridApi")], t.prototype, "gridApi", undefined);
    return t = Su([de("columnHoverService")], t);
  }(We);
  var Au = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ju = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Nu = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.executeNextFuncs = [];
      t.executeLaterFuncs = [];
      t.active = false;
      t.animationThreadCount = 0;
      return t;
    }
    Au(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      this.controllersService.whenReady(function (t) {
        return e.gridBodyCon = t.gridBodyCon;
      });
    };
    t.prototype.isActive = function () {
      return this.active;
    };
    t.prototype.start = function () {
      if (!(this.active || this.gridOptionsWrapper.isSuppressColumnMoveAnimation() || this.gridOptionsWrapper.isEnableRtl())) {
        this.ensureAnimationCssClassPresent();
        this.active = true;
      }
    };
    t.prototype.finish = function () {
      if (this.active) {
        this.flush();
        this.active = false;
      }
    };
    t.prototype.executeNextVMTurn = function (e) {
      if (this.active) {
        this.executeNextFuncs.push(e);
      } else {
        e();
      }
    };
    t.prototype.executeLaterVMTurn = function (e) {
      if (this.active) {
        this.executeLaterFuncs.push(e);
      } else {
        e();
      }
    };
    t.prototype.ensureAnimationCssClassPresent = function () {
      var e = this;
      this.animationThreadCount++;
      var t = this.animationThreadCount;
      this.gridBodyCon.setColumnMovingCss(true);
      this.executeLaterFuncs.push(function () {
        if (e.animationThreadCount === t) {
          e.gridBodyCon.setColumnMovingCss(false);
        }
      });
    };
    t.prototype.flush = function () {
      var e = this.executeNextFuncs;
      this.executeNextFuncs = [];
      var t = this.executeLaterFuncs;
      this.executeLaterFuncs = [];
      if (!(0 === e.length && 0 === t.length)) {
        window.setTimeout(function () {
          return e.forEach(function (e) {
            return e();
          });
        }, 0);
        window.setTimeout(function () {
          return t.forEach(function (e) {
            return e();
          });
        }, 300);
      }
    };
    ju([pe("controllersService")], t.prototype, "controllersService", undefined);
    ju([le], t.prototype, "postConstruct", null);
    return t = ju([de("columnAnimationService")], t);
  }(We);
  var Ru = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ku = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var xu = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    var n;
    Ru(t, e);
    n = t;
    t.prototype.createAutoGroupColumns = function (e) {
      var t = this;
      var n = [];
      var r = this.gridOptionsWrapper.isTreeData();
      var o = this.gridOptionsWrapper.isGroupMultiAutoColumn();
      if (r && o) {
        console.warn("AG Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data");
        o = false;
      }
      if (o) {
        e.forEach(function (e, r) {
          n.push(t.createOneAutoGroupColumn(e, r));
        });
      } else {
        n.push(this.createOneAutoGroupColumn());
      }
      return n;
    };
    t.prototype.createOneAutoGroupColumn = function (e, t) {
      var r;
      var i = this.generateDefaultColDef(e);
      if (!(r = e ? Ee.GROUP_AUTO_COLUMN_ID + "-" + e.getId() : n.GROUP_AUTO_COLUMN_BUNDLE_ID, F(i, this.gridOptionsWrapper.getAutoGroupColumnDef()), (i = this.columnFactory.mergeColDefs(i)).colId = r, this.gridOptionsWrapper.isTreeData())) {
        if (o(i.field) && o(i.valueGetter) && o(i.filterValueGetter)) {
          i.filter = false;
        }
      }
      if (t && t > 0) {
        i.headerCheckboxSelection = false;
      }
      var a = new Ce(i, null, r, true);
      this.context.createBean(a);
      return a;
    };
    t.prototype.generateDefaultColDef = function (e) {
      var t = this.gridOptionsWrapper.getAutoGroupColumnDef();
      var n = {
        headerName: this.gridOptionsWrapper.getLocaleTextFunc()("group", "Group")
      };
      if (!(t && (t.cellRenderer || t.cellRendererFramework || t.cellRendererSelector))) {
        n.cellRenderer = "agGroupCellRenderer";
      }
      if (e) {
        var r = e.getColDef();
        G(n, {
          headerName: this.columnController.getDisplayNameForColumn(e, "header"),
          headerValueGetter: r.headerValueGetter
        });
        if (r.cellRenderer) {
          G(n, {
            cellRendererParams: {
              innerRenderer: r.cellRenderer,
              innerRendererParams: r.cellRendererParams
            }
          });
        }
        n.showRowGroup = e.getColId();
      } else {
        n.showRowGroup = true;
      }
      return n;
    };
    t.GROUP_AUTO_COLUMN_BUNDLE_ID = Ee.GROUP_AUTO_COLUMN_ID;
    ku([pe("columnController")], t.prototype, "columnController", undefined);
    ku([pe("columnFactory")], t.prototype, "columnFactory", undefined);
    return t = n = ku([de("autoGroupColService")], t);
  }(We);
  var Du = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Mu = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Lu = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.currentPage = 0;
      t.topDisplayedRowIndex = 0;
      t.bottomDisplayedRowIndex = 0;
      t.pixelOffset = 0;
      t.masterRowCount = 0;
      return t;
    }
    Du(t, e);
    t.prototype.postConstruct = function () {
      this.active = this.gridOptionsWrapper.isPagination();
      this.paginateChildRows = this.gridOptionsWrapper.isPaginateChildRows();
      this.addManagedListener(this.eventService, Ke.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
      this.addManagedListener(this.gridOptionsWrapper, "paginationPageSize", this.onPaginationPageSizeChanged.bind(this));
      this.onModelUpdated();
    };
    t.prototype.ensureRowHeightsValid = function (e, t, n, r) {
      var o = this.rowModel.ensureRowHeightsValid(e, t, this.getPageFirstRow(), this.getPageLastRow());
      if (o) {
        this.calculatePages();
      }
      return o;
    };
    t.prototype.onModelUpdated = function (e) {
      this.calculatePages();
      var t = {
        type: Ke.EVENT_PAGINATION_CHANGED,
        animate: !!e && e.animate,
        newData: !!e && e.newData,
        newPage: !!e && e.newPage,
        keepRenderedRows: !!e && e.keepRenderedRows,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(t);
    };
    t.prototype.onPaginationPageSizeChanged = function () {
      this.calculatePages();
      var e = {
        type: Ke.EVENT_PAGINATION_CHANGED,
        animate: false,
        newData: false,
        newPage: false,
        keepRenderedRows: true,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(e);
    };
    t.prototype.goToPage = function (e) {
      if (this.active && this.currentPage !== e) {
        this.currentPage = e;
        var t = {
          type: Ke.EVENT_MODEL_UPDATED,
          animate: false,
          keepRenderedRows: false,
          newData: false,
          newPage: true,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.onModelUpdated(t);
      }
    };
    t.prototype.getPixelOffset = function () {
      return this.pixelOffset;
    };
    t.prototype.getRow = function (e) {
      return this.rowModel.getRow(e);
    };
    t.prototype.getRowNode = function (e) {
      return this.rowModel.getRowNode(e);
    };
    t.prototype.getRowIndexAtPixel = function (e) {
      return this.rowModel.getRowIndexAtPixel(e);
    };
    t.prototype.getCurrentPageHeight = function () {
      return o(this.topRowBounds) || o(this.bottomRowBounds) ? 0 : Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);
    };
    t.prototype.getCurrentPagePixelRange = function () {
      return {
        pageFirstPixel: this.topRowBounds ? this.topRowBounds.rowTop : 0,
        pageLastPixel: this.bottomRowBounds ? this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight : 0
      };
    };
    t.prototype.isRowPresent = function (e) {
      return !!this.rowModel.isRowPresent(e) && e.rowIndex >= this.topDisplayedRowIndex && e.rowIndex <= this.bottomDisplayedRowIndex;
    };
    t.prototype.isEmpty = function () {
      return this.rowModel.isEmpty();
    };
    t.prototype.isRowsToRender = function () {
      return this.rowModel.isRowsToRender();
    };
    t.prototype.getNodesInRangeForSelection = function (e, t) {
      return this.rowModel.getNodesInRangeForSelection(e, t);
    };
    t.prototype.forEachNode = function (e) {
      return this.rowModel.forEachNode(e);
    };
    t.prototype.getType = function () {
      return this.rowModel.getType();
    };
    t.prototype.getRowBounds = function (e) {
      var t = this.rowModel.getRowBounds(e);
      t.rowIndex = e;
      return t;
    };
    t.prototype.getPageFirstRow = function () {
      return this.topRowBounds ? this.topRowBounds.rowIndex : -1;
    };
    t.prototype.getPageLastRow = function () {
      return this.bottomRowBounds ? this.bottomRowBounds.rowIndex : -1;
    };
    t.prototype.getRowCount = function () {
      return this.rowModel.getRowCount();
    };
    t.prototype.getPageForIndex = function (e) {
      return Math.floor(e / this.pageSize);
    };
    t.prototype.goToPageWithIndex = function (e) {
      if (this.active) {
        var t = this.getPageForIndex(e);
        this.goToPage(t);
      }
    };
    t.prototype.isRowInPage = function (e) {
      return !this.active || this.getPageForIndex(e.rowIndex) === this.currentPage;
    };
    t.prototype.isLastPageFound = function () {
      return this.rowModel.isLastRowIndexKnown();
    };
    t.prototype.getCurrentPage = function () {
      return this.currentPage;
    };
    t.prototype.goToNextPage = function () {
      this.goToPage(this.currentPage + 1);
    };
    t.prototype.goToPreviousPage = function () {
      this.goToPage(this.currentPage - 1);
    };
    t.prototype.goToFirstPage = function () {
      this.goToPage(0);
    };
    t.prototype.goToLastPage = function () {
      var e = this.rowModel.getRowCount();
      var t = Math.floor(e / this.pageSize);
      this.goToPage(t);
    };
    t.prototype.getPageSize = function () {
      return this.pageSize;
    };
    t.prototype.getTotalPages = function () {
      return this.totalPages;
    };
    t.prototype.setPageSize = function () {
      this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();
      if (null == this.pageSize || this.pageSize < 1) {
        this.pageSize = 100;
      }
    };
    t.prototype.calculatePages = function () {
      if (this.active) {
        this.setPageSize();
        if (this.paginateChildRows) {
          this.calculatePagesAllRows();
        } else {
          this.calculatePagesMasterRowsOnly();
        }
      } else {
        this.calculatedPagesNotActive();
      }
      this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex);
      if (this.topRowBounds) {
        this.topRowBounds.rowIndex = this.topDisplayedRowIndex;
      }
      this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex);
      if (this.bottomRowBounds) {
        this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;
      }
      this.setPixelOffset(r(this.topRowBounds) ? this.topRowBounds.rowTop : 0);
    };
    t.prototype.setPixelOffset = function (e) {
      if (this.pixelOffset !== e) {
        this.pixelOffset = e;
        this.eventService.dispatchEvent({
          type: Ke.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED
        });
      }
    };
    t.prototype.setZeroRows = function () {
      this.masterRowCount = 0;
      this.topDisplayedRowIndex = 0;
      this.bottomDisplayedRowIndex = -1;
      this.currentPage = 0;
      this.totalPages = 0;
    };
    t.prototype.calculatePagesMasterRowsOnly = function () {
      this.masterRowCount = this.rowModel.getTopLevelRowCount();
      if (this.masterRowCount <= 0) {
        this.setZeroRows();
      } else {
        var e = this.masterRowCount - 1;
        this.totalPages = Math.floor(e / this.pageSize) + 1;
        if (this.currentPage >= this.totalPages) {
          this.currentPage = this.totalPages - 1;
        }
        if (!ht(this.currentPage) || this.currentPage < 0) {
          this.currentPage = 0;
        }
        var t = this.pageSize * this.currentPage;
        var n = this.pageSize * (this.currentPage + 1) - 1;
        if (n > e) {
          n = e;
        }
        this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(t);
        if (n === e) {
          this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
        } else {
          var r = this.rowModel.getTopLevelRowDisplayedIndex(n + 1);
          this.bottomDisplayedRowIndex = r - 1;
        }
      }
    };
    t.prototype.getMasterRowCount = function () {
      return this.masterRowCount;
    };
    t.prototype.calculatePagesAllRows = function () {
      this.masterRowCount = this.rowModel.getRowCount();
      if (0 !== this.masterRowCount) {
        var e = this.masterRowCount - 1;
        this.totalPages = Math.floor(e / this.pageSize) + 1;
        if (this.currentPage >= this.totalPages) {
          this.currentPage = this.totalPages - 1;
        }
        if (!ht(this.currentPage) || this.currentPage < 0) {
          this.currentPage = 0;
        }
        this.topDisplayedRowIndex = this.pageSize * this.currentPage;
        this.bottomDisplayedRowIndex = this.pageSize * (this.currentPage + 1) - 1;
        if (this.bottomDisplayedRowIndex > e) {
          this.bottomDisplayedRowIndex = e;
        }
      } else {
        this.setZeroRows();
      }
    };
    t.prototype.calculatedPagesNotActive = function () {
      this.pageSize = this.rowModel.getRowCount();
      this.totalPages = 1;
      this.currentPage = 0;
      this.topDisplayedRowIndex = 0;
      this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
    };
    Mu([pe("rowModel")], t.prototype, "rowModel", undefined);
    Mu([pe("columnApi")], t.prototype, "columnApi", undefined);
    Mu([pe("gridApi")], t.prototype, "gridApi", undefined);
    Mu([le], t.prototype, "postConstruct", null);
    return t = Mu([de("paginationProxy")], t);
  }(We);
  var Pu = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Bu = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Fu = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Pu(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      this.controllersService.whenReady(function (t) {
        e.centerRowContainerCon = t.centerRowContainerCon;
        e.addManagedListener(e.eventService, Ke.EVENT_BODY_HEIGHT_CHANGED, e.onBodyHeightChanged.bind(e));
        e.addManagedListener(e.eventService, Ke.EVENT_SCROLL_VISIBILITY_CHANGED, e.onScrollVisibilityChanged.bind(e));
        e.checkPageSize();
      });
    };
    t.prototype.notActive = function () {
      return !this.gridOptionsWrapper.isPaginationAutoPageSize();
    };
    t.prototype.onScrollVisibilityChanged = function () {
      this.checkPageSize();
    };
    t.prototype.onBodyHeightChanged = function () {
      this.checkPageSize();
    };
    t.prototype.checkPageSize = function () {
      if (!this.notActive()) {
        var e = this.gridOptionsWrapper.getRowHeightAsNumber();
        var t = this.centerRowContainerCon.getViewportSizeFeature().getBodyHeight();
        if (t > 0) {
          var n = Math.floor(t / e);
          this.gridOptionsWrapper.setProperty("paginationPageSize", n);
        }
      }
    };
    Bu([pe("controllersService")], t.prototype, "controllersService", undefined);
    Bu([le], t.prototype, "postConstruct", null);
    return t = Bu([de("paginationAutoPageSizeService")], t);
  }(We);
  var Gu = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Uu = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Wu = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.cacheVersion = 0;
      return t;
    }
    Gu(t, e);
    t.prototype.init = function () {
      this.active = this.gridOptionsWrapper.isValueCache();
      this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();
    };
    t.prototype.onDataChanged = function () {
      if (!this.neverExpires) {
        this.expire();
      }
    };
    t.prototype.expire = function () {
      this.cacheVersion++;
    };
    t.prototype.setValue = function (e, t, n) {
      if (this.active) {
        if (e.__cacheVersion !== this.cacheVersion) {
          e.__cacheVersion = this.cacheVersion;
          e.__cacheData = {};
        }
        e.__cacheData[t] = n;
      }
    };
    t.prototype.getValue = function (e, t) {
      if (this.active && e.__cacheVersion === this.cacheVersion) {
        return e.__cacheData[t];
      }
    };
    Uu([le], t.prototype, "init", null);
    return t = Uu([de("valueCache")], t);
  }(We);
  var Hu = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Vu = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var zu = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Hu(t, e);
    t.prototype.init = function () {
      if (this.rowModel.getType() === Ee.ROW_MODEL_TYPE_CLIENT_SIDE) {
        this.clientSideRowModel = this.rowModel;
      }
      this.addManagedListener(this.eventService, Ke.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
    };
    t.prototype.onCellValueChanged = function (e) {
      if (e.source !== Ee.SOURCE_PASTE) {
        this.doChangeDetection(e.node, e.column);
      }
    };
    t.prototype.doChangeDetection = function (e, t) {
      if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {
        if (this.clientSideRowModel && !e.isRowPinned()) {
          var n = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();
          var r = new xa(n, this.clientSideRowModel.getRootNode());
          r.addParentNode(e.parent, [t]);
          this.clientSideRowModel.doAggregate(r);
        }
        this.rowRenderer.refreshCells();
      }
    };
    Vu([pe("rowModel")], t.prototype, "rowModel", undefined);
    Vu([pe("rowRenderer")], t.prototype, "rowRenderer", undefined);
    Vu([le], t.prototype, "init", null);
    return t = Vu([de("changeDetectionService")], t);
  }(We);
  var Yu = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ku = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var qu = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var Xu = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.consuming = false;
      return t;
    }
    Yu(t, e);
    t.prototype.setBeans = function (e) {
      this.logger = e.create("AlignedGridsService");
    };
    t.prototype.init = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
    };
    t.prototype.fireEvent = function (e) {
      if (!this.consuming) {
        var t = this.gridOptionsWrapper.getAlignedGrids();
        if (t) {
          t.forEach(function (t) {
            if (t.api) {
              var n = t.api.__getAlignedGridService();
              e(n);
            }
          });
        }
      }
    };
    t.prototype.onEvent = function (e) {
      this.consuming = true;
      e();
      this.consuming = false;
    };
    t.prototype.fireColumnEvent = function (e) {
      this.fireEvent(function (t) {
        t.onColumnEvent(e);
      });
    };
    t.prototype.fireScrollEvent = function (e) {
      if ("horizontal" === e.direction) {
        this.fireEvent(function (t) {
          t.onScrollEvent(e);
        });
      }
    };
    t.prototype.onScrollEvent = function (e) {
      var t = this;
      this.onEvent(function () {
        t.controllersService.getGridBodyController().getScrollFeature().setHorizontalScrollPosition(e.left);
      });
    };
    t.prototype.getMasterColumns = function (e) {
      var t = [];
      if (e.columns) {
        e.columns.forEach(function (e) {
          t.push(e);
        });
      } else {
        if (e.column) {
          t.push(e.column);
        }
      }
      return t;
    };
    t.prototype.getColumnIds = function (e) {
      var t = [];
      if (e.columns) {
        e.columns.forEach(function (e) {
          t.push(e.getColId());
        });
      } else {
        if (e.column) {
          t.push(e.column.getColId());
        }
      }
      return t;
    };
    t.prototype.onColumnEvent = function (e) {
      var t = this;
      this.onEvent(function () {
        switch (e.type) {
          case Ke.EVENT_COLUMN_MOVED:
          case Ke.EVENT_COLUMN_VISIBLE:
          case Ke.EVENT_COLUMN_PINNED:
          case Ke.EVENT_COLUMN_RESIZED:
            var n = e;
            t.processColumnEvent(n);
            break;
          case Ke.EVENT_COLUMN_GROUP_OPENED:
            var r = e;
            t.processGroupOpenedEvent(r);
            break;
          case Ke.EVENT_COLUMN_PIVOT_CHANGED:
            console.warn("AG Grid: pivoting is not supported with aligned grids. You can only use one of these features at a time in a grid.");
        }
      });
    };
    t.prototype.processGroupOpenedEvent = function (e) {
      var t = e.columnGroup;
      var n = null;
      if (t) {
        var r = t.getGroupId();
        n = this.columnController.getOriginalColumnGroup(r);
      }
      if (!(t && !n)) {
        this.logger.log("onColumnEvent-> processing " + e + " expanded = " + t.isExpanded());
        this.columnController.setColumnGroupOpened(n, t.isExpanded(), "alignedGridChanged");
      }
    };
    t.prototype.processColumnEvent = function (e) {
      var t = this;
      var n = e.column;
      var r = null;
      if (n) {
        r = this.columnController.getPrimaryColumn(n.getColId());
      }
      if (!n || r) {
        var o = this.getMasterColumns(e);
        switch (e.type) {
          case Ke.EVENT_COLUMN_MOVED:
            var i = e,
              a = e.columnApi.getColumnState().map(function (e) {
                return {
                  colId: e.colId
                };
              });
            this.columnController.applyColumnState({
              state: a,
              applyOrder: true
            }, "alignedGridChanged");
            this.logger.log("onColumnEvent-> processing " + e.type + " toIndex = " + i.toIndex);
            break;
          case Ke.EVENT_COLUMN_VISIBLE:
            var s = e;
            a = e.columnApi.getColumnState().map(function (e) {
              return {
                colId: e.colId,
                hide: e.hide
              };
            });
            this.columnController.applyColumnState({
              state: a
            }, "alignedGridChanged");
            this.logger.log("onColumnEvent-> processing " + e.type + " visible = " + s.visible);
            break;
          case Ke.EVENT_COLUMN_PINNED:
            var c = e;
            a = e.columnApi.getColumnState().map(function (e) {
              return {
                colId: e.colId,
                pinned: e.pinned
              };
            });
            this.columnController.applyColumnState({
              state: a
            }, "alignedGridChanged");
            this.logger.log("onColumnEvent-> processing " + e.type + " pinned = " + c.pinned);
            break;
          case Ke.EVENT_COLUMN_RESIZED:
            var l = e;
            o.forEach(function (n) {
              t.logger.log("onColumnEvent-> processing " + e.type + " actualWidth = " + n.getActualWidth());
              var r = [{
                key: n.getColId(),
                newWidth: n.getActualWidth()
              }];
              t.columnController.setColumnWidths(r, false, l.finished, "alignedGridChanged");
            });
        }
        var u = this.controllersService.getGridBodyController().isVerticalScrollShowing();
        var d = this.gridOptionsWrapper.getAlignedGrids();
        if (d) {
          d.forEach(function (e) {
            if (e.api) {
              e.api.setAlwaysShowVerticalScroll(u);
            }
          });
        }
      }
    };
    Ku([pe("columnController")], t.prototype, "columnController", undefined);
    Ku([pe("controllersService")], t.prototype, "controllersService", undefined);
    Ku([qu(0, me("loggerFactory"))], t.prototype, "setBeans", null);
    Ku([le], t.prototype, "init", null);
    return t = Ku([de("alignedGridsService")], t);
  }(We);
  var Qu = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Zu = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ju = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Qu(t, e);
    t.prototype.adaptFunction = function (e, t, n, r) {
      if (null == t) {
        return {
          component: null,
          componentFromFramework: n,
          source: r,
          paramsFromSelector: null
        };
      }
      var o = this.componentMetadataProvider.retrieve(e);
      return o && o.functionAdapter ? {
        componentFromFramework: n,
        component: o.functionAdapter(t),
        source: r,
        paramsFromSelector: null
      } : null;
    };
    t.prototype.adaptCellRendererFunction = function (e) {
      return function () {
        function t() {}
        t.prototype.refresh = function (e) {
          return false;
        };
        t.prototype.getGui = function () {
          var t = e(this.params);
          var n = typeof t;
          return "string" === n || "number" === n || "boolean" === n ? _n("<span>" + t + "</span>") : t;
        };
        t.prototype.init = function (e) {
          this.params = e;
        };
        return t;
      }();
    };
    t.prototype.doesImplementIComponent = function (e) {
      return !!e && e.prototype && "getGui" in e.prototype;
    };
    Zu([pe("componentMetadataProvider")], t.prototype, "componentMetadataProvider", undefined);
    return t = Zu([de("agComponentUtils")], t);
  }(We);
  var $u = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ed = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var td = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    $u(t, e);
    t.prototype.postConstruct = function () {
      this.componentMetaData = {
        dateComponent: {
          mandatoryMethodList: ["getDate", "setDate"],
          optionalMethodList: ["afterGuiAttached", "setInputPlaceholder", "setInputAriaLabel"]
        },
        detailCellRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh"]
        },
        headerComponent: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh"]
        },
        headerGroupComponent: {
          mandatoryMethodList: [],
          optionalMethodList: []
        },
        loadingCellRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: []
        },
        loadingOverlayComponent: {
          mandatoryMethodList: [],
          optionalMethodList: []
        },
        noRowsOverlayComponent: {
          mandatoryMethodList: [],
          optionalMethodList: []
        },
        floatingFilterComponent: {
          mandatoryMethodList: ["onParentModelChanged"],
          optionalMethodList: ["afterGuiAttached"]
        },
        floatingFilterWrapperComponent: {
          mandatoryMethodList: [],
          optionalMethodList: []
        },
        cellRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh", "afterGuiAttached"],
          functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
        },
        cellEditor: {
          mandatoryMethodList: ["getValue"],
          optionalMethodList: ["isPopup", "isCancelBeforeStart", "isCancelAfterEnd", "getPopupPosition", "focusIn", "focusOut", "afterGuiAttached"]
        },
        innerRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: ["afterGuiAttached"],
          functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
        },
        fullWidthCellRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh", "afterGuiAttached"],
          functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
        },
        pinnedRowCellRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh", "afterGuiAttached"],
          functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
        },
        groupRowRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: ["afterGuiAttached"],
          functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
        },
        filter: {
          mandatoryMethodList: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
          optionalMethodList: ["afterGuiAttached", "onNewRowsLoaded", "getModelAsString", "onFloatingFilterChanged"]
        },
        filterComponent: {
          mandatoryMethodList: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
          optionalMethodList: ["afterGuiAttached", "onNewRowsLoaded", "getModelAsString", "onFloatingFilterChanged"]
        },
        statusPanel: {
          mandatoryMethodList: [],
          optionalMethodList: ["afterGuiAttached"]
        },
        toolPanel: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh", "afterGuiAttached"]
        },
        tooltipComponent: {
          mandatoryMethodList: [],
          optionalMethodList: []
        }
      };
    };
    t.prototype.retrieve = function (e) {
      return this.componentMetaData[e];
    };
    ed([pe("agComponentUtils")], t.prototype, "agComponentUtils", undefined);
    ed([le], t.prototype, "postConstruct", null);
    return t = ed([de("componentMetadataProvider")], t);
  }(We);
  var nd = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var rd = function () {
    function e() {}
    e.prototype.registerGridComp = function (e) {
      this.gridBodyComp = e;
    };
    e.prototype.postConstruct = function () {
      this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
      if (this.gridOptionsWrapper.isRowModelDefault()) {
        this.clientSideRowModel = this.rowModel;
      }
      if (this.gridOptionsWrapper.isRowModelServerSide()) {
        this.serverSideRowModel = this.rowModel;
      }
    };
    nd([pe("resizeObserverService")], e.prototype, "resizeObserverService", undefined);
    nd([pe("paginationProxy")], e.prototype, "paginationProxy", undefined);
    nd([pe("context")], e.prototype, "context", undefined);
    nd([pe("columnApi")], e.prototype, "columnApi", undefined);
    nd([pe("gridApi")], e.prototype, "gridApi", undefined);
    nd([pe("gridOptionsWrapper")], e.prototype, "gridOptionsWrapper", undefined);
    nd([pe("expressionService")], e.prototype, "expressionService", undefined);
    nd([pe("rowRenderer")], e.prototype, "rowRenderer", undefined);
    nd([pe("$compile")], e.prototype, "$compile", undefined);
    nd([pe("templateService")], e.prototype, "templateService", undefined);
    nd([pe("valueService")], e.prototype, "valueService", undefined);
    nd([pe("eventService")], e.prototype, "eventService", undefined);
    nd([pe("columnController")], e.prototype, "columnController", undefined);
    nd([pe("headerNavigationService")], e.prototype, "headerNavigationService", undefined);
    nd([pe("columnAnimationService")], e.prototype, "columnAnimationService", undefined);
    nd([fe("rangeController")], e.prototype, "rangeController", undefined);
    nd([pe("focusController")], e.prototype, "focusController", undefined);
    nd([fe("contextMenuFactory")], e.prototype, "contextMenuFactory", undefined);
    nd([pe("popupService")], e.prototype, "popupService", undefined);
    nd([pe("valueFormatterService")], e.prototype, "valueFormatterService", undefined);
    nd([pe("stylingService")], e.prototype, "stylingService", undefined);
    nd([pe("columnHoverService")], e.prototype, "columnHoverService", undefined);
    nd([pe("userComponentFactory")], e.prototype, "userComponentFactory", undefined);
    nd([pe("animationFrameService")], e.prototype, "taskQueue", undefined);
    nd([pe("dragAndDropService")], e.prototype, "dragAndDropService", undefined);
    nd([pe("sortController")], e.prototype, "sortController", undefined);
    nd([pe("filterManager")], e.prototype, "filterManager", undefined);
    nd([pe("rowContainerHeightService")], e.prototype, "rowContainerHeightService", undefined);
    nd([pe("frameworkOverrides")], e.prototype, "frameworkOverrides", undefined);
    nd([pe("detailRowCompCache")], e.prototype, "detailRowCompCache", undefined);
    nd([pe("cellPositionUtils")], e.prototype, "cellPositionUtils", undefined);
    nd([pe("rowPositionUtils")], e.prototype, "rowPositionUtils", undefined);
    nd([pe("selectionController")], e.prototype, "selectionController", undefined);
    nd([fe("selectionHandleFactory")], e.prototype, "selectionHandleFactory", undefined);
    nd([pe("rowCssClassCalculator")], e.prototype, "rowCssClassCalculator", undefined);
    nd([pe("rowModel")], e.prototype, "rowModel", undefined);
    nd([pe("controllersService")], e.prototype, "controllersService", undefined);
    nd([le], e.prototype, "postConstruct", null);
    return e = nd([de("beans")], e);
  }();
  var od = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var id = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var ad = {
    "ag-theme-custom": {
      headerHeight: 25,
      headerCellMinWidth: 24,
      listItemHeight: 20,
      rowHeight: 25,
      chartMenuPanelWidth: 220
    },
    "ag-theme-material": {
      headerHeight: 56,
      headerCellMinWidth: 48,
      listItemHeight: 32,
      rowHeight: 48,
      chartMenuPanelWidth: 240
    },
    "ag-theme-balham": {
      headerHeight: 32,
      headerCellMinWidth: 24,
      listItemHeight: 24,
      rowHeight: 28,
      chartMenuPanelWidth: 220
    },
    "ag-theme-alpine": {
      headerHeight: 48,
      headerCellMinWidth: 36,
      listItemHeight: 24,
      rowHeight: 42,
      chartMenuPanelWidth: 240
    }
  };
  var sd = {
    headerHeight: ["ag-header-row"],
    headerCellMinWidth: ["ag-header-cell"],
    listItemHeight: ["ag-virtual-list-item"],
    rowHeight: ["ag-row"],
    chartMenuPanelWidth: ["ag-chart-docked-container"]
  };
  var cd = {};
  var ld = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    od(t, e);
    t.prototype.getSassVariable = function (e, t) {
      var n = "ag-theme-" + (e.match("material") ? "material" : e.match("balham") ? "balham" : e.match("alpine") ? "alpine" : "custom");
      var r = ad[n][t];
      var o = 0;
      if (!cd[e]) {
        cd[e] = {};
      }
      var i = cd[e][t];
      if (null != i) {
        return i;
      }
      if (sd[t]) {
        var a = sd[t];
        var s = document.createElement("div");
        Qt(s, e);
        s.style.position = "absolute";
        var c = a.reduce(function (e, t) {
          var n = document.createElement("div");
          n.style.position = "static";
          Qt(n, t);
          e.appendChild(n);
          return n;
        }, s);
        if (document.body) {
          document.body.appendChild(s);
          var l = -1 !== t.toLowerCase().indexOf("height") ? "height" : "width";
          o = parseInt(window.getComputedStyle(c)[l], 10);
          document.body.removeChild(s);
        }
      }
      cd[e][t] = o || r;
      return cd[e][t];
    };
    t.prototype.isThemeDark = function () {
      var e = this.getTheme().theme;
      return !!e && e.indexOf("dark") >= 0;
    };
    t.prototype.chartMenuPanelWidth = function () {
      var e = this.getTheme().themeFamily;
      return this.getSassVariable(e, "chartMenuPanelWidth");
    };
    t.prototype.getTheme = function () {
      for (var e = /\bag-(material|(?:theme-([\w\-]*)))\b/, t = this.eGridDiv, n = null; t && !(n = e.exec(t.className));) {
        t = t.parentElement || undefined;
      }
      if (!n) {
        return {};
      }
      var r = n[0];
      if (undefined === n[2]) {
        var o = r.replace("ag-", "ag-theme-");
        X(function () {
          return console.warn("AG Grid: As of v19 old theme are no longer provided. Please replace " + r + " with " + o + ".");
        }, "using-old-theme");
      }
      return {
        theme: r,
        el: t,
        themeFamily: r.replace(/-dark$/, "")
      };
    };
    id([pe("eGridDiv")], t.prototype, "eGridDiv", undefined);
    return t = id([de("environment")], t);
  }(We);
  var ud = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var dd = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var pd = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.createTasksP1 = {
        list: [],
        sorted: false
      };
      t.createTasksP2 = {
        list: [],
        sorted: false
      };
      t.destroyTasks = [];
      t.ticking = false;
      t.scrollGoingDown = true;
      t.lastScrollTop = 0;
      t.taskCount = 0;
      t.cancelledTasks = new Set();
      return t;
    }
    ud(t, e);
    t.prototype.setScrollTop = function (e) {
      this.scrollGoingDown = e > this.lastScrollTop;
      this.lastScrollTop = e;
    };
    t.prototype.init = function () {
      this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
    };
    t.prototype.verifyAnimationFrameOn = function (e) {
      if (false === this.useAnimationFrame) {
        console.warn("AG Grid: AnimationFrameService." + e + " called but animation frames are off");
      }
    };
    t.prototype.createTask = function (e, t, n) {
      this.verifyAnimationFrameOn(n);
      var r = {
        task: e,
        index: t,
        createOrder: ++this.taskCount
      };
      this.addTaskToList(this[n], r);
      this.schedule();
    };
    t.prototype.cancelTask = function (e) {
      this.cancelledTasks.add(e);
    };
    t.prototype.addTaskToList = function (e, t) {
      e.list.push(t);
      e.sorted = false;
    };
    t.prototype.sortTaskList = function (e) {
      if (!e.sorted) {
        var t = this.scrollGoingDown ? 1 : -1;
        e.list.sort(function (e, n) {
          return e.index !== n.index ? t * (n.index - e.index) : n.createOrder - e.createOrder;
        });
        e.sorted = true;
      }
    };
    t.prototype.addDestroyTask = function (e) {
      this.verifyAnimationFrameOn("createTasksP3");
      this.destroyTasks.push(e);
      this.schedule();
    };
    t.prototype.executeFrame = function (e) {
      this.verifyAnimationFrameOn("executeFrame");
      for (var t = this.createTasksP1, n = t.list, r = this.createTasksP2, o = r.list, i = this.destroyTasks, a = new Date().getTime(), s = new Date().getTime() - a, c = e <= 0, l = this.controllersService.getGridBodyController(); c || s < e;) {
        if (!l.getScrollFeature().executeAnimationFrameScroll()) {
          var u = undefined;
          if (n.length) {
            this.sortTaskList(t);
            u = n.pop().task;
          } else if (o.length) {
            this.sortTaskList(r);
            u = o.pop().task;
          } else {
            if (!i.length) {
              this.cancelledTasks.clear();
              break;
            }
            u = i.pop();
          }
          if (!this.cancelledTasks.has(u)) {
            u();
          }
        }
        s = new Date().getTime() - a;
      }
      if (n.length || o.length || i.length) {
        this.requestFrame();
      } else {
        this.stopTicking();
      }
    };
    t.prototype.stopTicking = function () {
      this.ticking = false;
      var e = {
        type: Ke.EVENT_ANIMATION_QUEUE_EMPTY,
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        api: this.gridOptionsWrapper.getApi()
      };
      this.eventService.dispatchEvent(e);
    };
    t.prototype.flushAllFrames = function () {
      if (this.useAnimationFrame) {
        this.executeFrame(-1);
      }
    };
    t.prototype.schedule = function () {
      if (this.useAnimationFrame) {
        if (!this.ticking) {
          this.ticking = true;
          this.requestFrame();
        }
      }
    };
    t.prototype.requestFrame = function () {
      var e = this.executeFrame.bind(this, 60);
      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(e);
      } else {
        if (window.webkitRequestAnimationFrame) {
          window.webkitRequestAnimationFrame(e);
        } else {
          window.setTimeout(e, 0);
        }
      }
    };
    t.prototype.isQueueEmpty = function () {
      return !this.ticking;
    };
    dd([pe("controllersService")], t.prototype, "controllersService", undefined);
    dd([le], t.prototype, "init", null);
    return t = dd([de("animationFrameService")], t);
  }(We);
  var fd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var hd = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var md = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.timeLastPageEventProcessed = 0;
      return t;
    }
    fd(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      this.controllersService.whenReady(function (t) {
        e.gridBodyCon = t.gridBodyCon;
      });
    };
    t.prototype.handlePageScrollingKey = function (e) {
      var t = e.which || e.keyCode;
      var n = e.altKey;
      var r = e.ctrlKey || e.metaKey;
      var o = this.mouseEventService.getCellPositionForEvent(e);
      if (!o) {
        return false;
      }
      var i = false;
      switch (t) {
        case _o.PAGE_HOME:
        case _o.PAGE_END:
          if (!(r || n)) {
            this.onHomeOrEndKey(t);
            i = true;
          }
          break;
        case _o.LEFT:
        case _o.RIGHT:
          if (r && !n) {
            this.onCtrlLeftOrRight(t, o);
            i = true;
          }
          break;
        case _o.UP:
        case _o.DOWN:
          if (r && !n) {
            this.onCtrlUpOrDown(t, o);
            i = true;
          }
          break;
        case _o.PAGE_DOWN:
          if (!(r || n)) {
            this.onPageDown(o);
            i = true;
          }
          break;
        case _o.PAGE_UP:
          if (!(r || n)) {
            this.onPageUp(o);
            i = true;
          }
      }
      if (i) {
        e.preventDefault();
      }
      return i;
    };
    t.prototype.isTimeSinceLastPageEventToRecent = function () {
      return new Date().getTime() - this.timeLastPageEventProcessed < 100;
    };
    t.prototype.setTimeLastPageEventProcessed = function () {
      this.timeLastPageEventProcessed = new Date().getTime();
    };
    t.prototype.navigateTo = function (e) {
      var t = e.scrollIndex;
      var n = e.scrollType;
      var o = e.scrollColumn;
      var i = e.focusIndex;
      var a = e.focusColumn;
      if (r(o)) {
        this.gridBodyCon.getScrollFeature().ensureColumnVisible(o);
      }
      if (r(t)) {
        this.gridBodyCon.getScrollFeature().ensureIndexVisible(t, n);
      }
      this.animationFrameService.flushAllFrames();
      this.focusController.setFocusedCell(i, a, null, true);
      if (this.rangeController) {
        var s = {
          rowIndex: i,
          rowPinned: null,
          column: a
        };
        this.rangeController.setRangeToCell(s);
      }
    };
    t.prototype.onPageDown = function (e) {
      if (!this.isTimeSinceLastPageEventToRecent()) {
        var t = this.controllersService.getGridBodyController().getScrollFeature().getVScrollPosition();
        var n = this.gridOptionsWrapper.getScrollbarWidth();
        var r = t.bottom - t.top;
        if (this.controllersService.getCenterRowContainerCon().isHorizontalScrollShowing()) {
          r -= n;
        }
        var o = this.paginationProxy.getPixelOffset();
        var i = t.top + r;
        var a = this.paginationProxy.getRowIndexAtPixel(i + o);
        var s = this.paginationProxy.getRow(e.rowIndex).rowTop + r - o;
        var c = this.paginationProxy.getRowIndexAtPixel(s + o);
        var l = this.paginationProxy.getPageLastRow();
        if (c > l) {
          c = l;
        }
        if (a > l) {
          a = l;
        }
        this.navigateTo({
          scrollIndex: a,
          scrollType: "top",
          scrollColumn: null,
          focusIndex: c,
          focusColumn: e.column
        });
        this.setTimeLastPageEventProcessed();
      }
    };
    t.prototype.onPageUp = function (e) {
      if (!this.isTimeSinceLastPageEventToRecent()) {
        var t = this.controllersService.getGridBodyController().getScrollFeature().getVScrollPosition();
        var n = this.gridOptionsWrapper.getScrollbarWidth();
        var r = t.bottom - t.top;
        if (this.controllersService.getCenterRowContainerCon().isHorizontalScrollShowing()) {
          r -= n;
        }
        var o = this.paginationProxy.getPixelOffset();
        var i = t.top;
        var a = this.paginationProxy.getRowIndexAtPixel(i + o);
        var s = this.paginationProxy.getRow(e.rowIndex);
        var c = s.rowTop + s.rowHeight - r - o;
        var l = this.paginationProxy.getRowIndexAtPixel(c + o);
        var u = this.paginationProxy.getPageFirstRow();
        if (l < u) {
          l = u;
        }
        if (a < u) {
          a = u;
        }
        this.navigateTo({
          scrollIndex: a,
          scrollType: "bottom",
          scrollColumn: null,
          focusIndex: l,
          focusColumn: e.column
        });
        this.setTimeLastPageEventProcessed();
      }
    };
    t.prototype.getIndexToFocus = function (e, t) {
      var n = e;
      if (t) {
        var r = this.paginationProxy.getRow(e);
        if (r && r.stub) {
          n -= 1;
        }
      }
      return n;
    };
    t.prototype.onCtrlUpOrDown = function (e, t) {
      var n = e === _o.UP;
      var r = n ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
      this.navigateTo({
        scrollIndex: r,
        scrollType: null,
        scrollColumn: t.column,
        focusIndex: this.getIndexToFocus(r, !n),
        focusColumn: t.column
      });
    };
    t.prototype.onCtrlLeftOrRight = function (e, t) {
      var n = e === _o.LEFT;
      var r = this.columnController.getAllDisplayedColumns();
      var o = n ? r[0] : m(r);
      this.navigateTo({
        scrollIndex: t.rowIndex,
        scrollType: null,
        scrollColumn: o,
        focusIndex: t.rowIndex,
        focusColumn: o
      });
    };
    t.prototype.onHomeOrEndKey = function (e) {
      var t = e === _o.PAGE_HOME;
      var n = this.columnController.getAllDisplayedColumns();
      var r = t ? n[0] : m(n);
      var o = t ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
      this.navigateTo({
        scrollIndex: o,
        scrollType: null,
        scrollColumn: r,
        focusIndex: this.getIndexToFocus(o, !t),
        focusColumn: r
      });
    };
    hd([pe("mouseEventService")], t.prototype, "mouseEventService", undefined);
    hd([pe("paginationProxy")], t.prototype, "paginationProxy", undefined);
    hd([pe("focusController")], t.prototype, "focusController", undefined);
    hd([pe("animationFrameService")], t.prototype, "animationFrameService", undefined);
    hd([fe("rangeController")], t.prototype, "rangeController", undefined);
    hd([pe("columnController")], t.prototype, "columnController", undefined);
    hd([pe("controllersService")], t.prototype, "controllersService", undefined);
    hd([le], t.prototype, "postConstruct", null);
    return t = hd([de("navigationService")], t);
  }(We);
  var gd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var _d = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var vd = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var bd = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.scrollY = 0;
      t.uiBodyHeight = 0;
      return t;
    }
    gd(t, e);
    t.prototype.agWire = function (e) {
      this.logger = e.create("RowContainerHeightService");
    };
    t.prototype.postConstruct = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));
      this.maxDivHeight = Wt();
      this.logger.log("maxDivHeight = " + this.maxDivHeight);
    };
    t.prototype.isStretching = function () {
      return this.stretching;
    };
    t.prototype.getDivStretchOffset = function () {
      return this.divStretchOffset;
    };
    t.prototype.updateOffset = function () {
      if (this.stretching) {
        var e = this.controllersService.getGridBodyController().getScrollFeature().getVScrollPosition().top;
        var t = this.getUiBodyHeight();
        if (e !== this.scrollY || t !== this.uiBodyHeight) {
          this.scrollY = e;
          this.uiBodyHeight = t;
          this.calculateOffset();
        }
      }
    };
    t.prototype.calculateOffset = function () {
      this.setUiContainerHeight(this.maxDivHeight);
      this.pixelsToShave = this.modelHeight - this.uiContainerHeight;
      this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;
      var e = this.scrollY / this.maxScrollY;
      var t = e * this.pixelsToShave;
      this.logger.log("Div Stretch Offset = " + t + " (" + this.pixelsToShave + " * " + e + ")");
      this.setDivStretchOffset(t);
    };
    t.prototype.setUiContainerHeight = function (e) {
      if (e !== this.uiContainerHeight) {
        this.uiContainerHeight = e;
        this.eventService.dispatchEvent({
          type: Ke.EVENT_ROW_CONTAINER_HEIGHT_CHANGED
        });
      }
    };
    t.prototype.clearOffset = function () {
      this.setUiContainerHeight(this.modelHeight);
      this.pixelsToShave = 0;
      this.setDivStretchOffset(0);
    };
    t.prototype.setDivStretchOffset = function (e) {
      var t = "number" === typeof e ? Math.floor(e) : null;
      if (this.divStretchOffset !== t) {
        this.divStretchOffset = t;
        this.eventService.dispatchEvent({
          type: Ke.EVENT_HEIGHT_SCALE_CHANGED
        });
      }
    };
    t.prototype.setModelHeight = function (e) {
      this.modelHeight = e;
      this.stretching = null != e && this.maxDivHeight > 0 && e > this.maxDivHeight;
      if (this.stretching) {
        this.calculateOffset();
      } else {
        this.clearOffset();
      }
    };
    t.prototype.getUiContainerHeight = function () {
      return this.uiContainerHeight;
    };
    t.prototype.getRealPixelPosition = function (e) {
      return e - this.divStretchOffset;
    };
    t.prototype.getUiBodyHeight = function () {
      var e = this.controllersService.getGridBodyController().getScrollFeature().getVScrollPosition();
      return e.bottom - e.top;
    };
    t.prototype.getScrollPositionForPixel = function (e) {
      if (this.pixelsToShave <= 0) {
        return e;
      }
      var t = e / (this.modelHeight - this.getUiBodyHeight());
      return this.maxScrollY * t;
    };
    _d([pe("controllersService")], t.prototype, "controllersService", undefined);
    _d([vd(0, me("loggerFactory"))], t.prototype, "agWire", null);
    _d([le], t.prototype, "postConstruct", null);
    return t = _d([de("rowContainerHeightService")], t);
  }(We);
  var yd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ed = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Od = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    yd(t, e);
    t.prototype.init = function () {
      this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
      this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
    };
    t.prototype.updateSelectableAfterGrouping = function (e) {
      if (this.isRowSelectableFunc) {
        this.recurseDown(e.childrenAfterGroup, function (e) {
          return e.childrenAfterGroup;
        });
      }
    };
    t.prototype.updateSelectableAfterFiltering = function (e) {
      if (this.isRowSelectableFunc) {
        this.recurseDown(e.childrenAfterGroup, function (e) {
          return e.childrenAfterFilter;
        });
      }
    };
    t.prototype.recurseDown = function (e, t) {
      var n = this;
      if (e) {
        e.forEach(function (e) {
          if (e.group) {
            var o;
            if (e.hasChildren()) {
              n.recurseDown(t(e), t);
            }
            if (n.groupSelectsChildren) {
              o = r(u(t(e), "selectable", true));
            } else {
              o = !!n.isRowSelectableFunc && n.isRowSelectableFunc(e);
            }
            e.setRowSelectable(o);
          }
        });
      }
    };
    Ed([le], t.prototype, "init", null);
    return t = Ed([de("selectableService")], t);
  }(We);
  var wd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Cd = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Td = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    wd(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      this.controllersService.whenReady(function (t) {
        e.centerRowContainerCon = t.centerRowContainerCon;
      });
    };
    t.prototype.getPreferredHeightForRow = function (e) {
      var t = this;
      var n = document.createElement("div");
      this.addInRowCssClasses(e, n);
      var r = this.centerRowContainerCon.getContainerElement();
      r.appendChild(n);
      var o = Ua.createChildScopeOrNull(e, this.$scope, this.beans.gridOptionsWrapper);
      var i = o ? o.scope : undefined;
      var a = o ? o.scopeDestroyFunc : undefined;
      var s = [];
      var c = this.columnController.getAllAutoRowHeightCols();
      var l = this.columnController.getAllDisplayedColumns();
      c.filter(function (e) {
        return l.indexOf(e) >= 0;
      }).forEach(function (r) {
        var o = new rs(i, t.beans, r, e, null, true, false, n, false);
        s.push(o);
      });
      s.forEach(function (e) {
        return n.appendChild(e.getGui());
      });
      if (i) {
        this.$compile(n)(i);
      }
      for (var u = 0, d = 0; d < n.children.length; d++) {
        var p = n.children[d];
        if (p.offsetHeight > u) {
          u = p.offsetHeight;
        }
      }
      r.removeChild(n);
      s.forEach(function (e) {
        e.detach();
        e.destroy();
      });
      if (a) {
        a();
      }
      return u;
    };
    t.prototype.addInRowCssClasses = function (e, t) {
      var n = e.rowIndex;
      var r = {
        rowNode: e,
        rowIsEven: n % 2 === 0,
        rowLevel: this.rowCssClassCalculator.calculateRowLevel(e),
        firstRowOnPage: n === this.beans.paginationProxy.getPageFirstRow(),
        lastRowOnPage: n === this.beans.paginationProxy.getPageLastRow(),
        printLayout: false,
        expandable: e.isExpandable()
      };
      Qt(t, this.rowCssClassCalculator.getInitialRowClasses(r).join(" "));
    };
    Cd([pe("beans")], t.prototype, "beans", undefined);
    Cd([pe("$scope")], t.prototype, "$scope", undefined);
    Cd([pe("columnController")], t.prototype, "columnController", undefined);
    Cd([pe("rowCssClassCalculator")], t.prototype, "rowCssClassCalculator", undefined);
    Cd([pe("$compile")], t.prototype, "$compile", undefined);
    Cd([pe("controllersService")], t.prototype, "controllersService", undefined);
    Cd([le], t.prototype, "postConstruct", null);
    return t = Cd([de("autoHeightCalculator")], t);
  }(We);
  var Sd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Id = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ad = function (e) {
    function t() {
      var t = e.call(this) || this;
      t.previousAndFirstButtonsDisabled = false;
      t.nextButtonDisabled = false;
      t.lastButtonDisabled = false;
      return t;
    }
    Sd(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      var t = this.gridOptionsWrapper.isEnableRtl();
      this.setTemplate(this.getTemplate());
      this.btFirst.insertAdjacentElement("afterbegin", Dr(t ? "last" : "first", this.gridOptionsWrapper));
      this.btPrevious.insertAdjacentElement("afterbegin", Dr(t ? "next" : "previous", this.gridOptionsWrapper));
      this.btNext.insertAdjacentElement("afterbegin", Dr(t ? "previous" : "next", this.gridOptionsWrapper));
      this.btLast.insertAdjacentElement("afterbegin", Dr(t ? "first" : "last", this.gridOptionsWrapper));
      if (this.gridOptionsWrapper.isPagination() && !this.gridOptionsWrapper.isSuppressPaginationPanel()) {
        this.addManagedListener(this.eventService, Ke.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
        [{
          el: this.btFirst,
          fn: this.onBtFirst.bind(this)
        }, {
          el: this.btPrevious,
          fn: this.onBtPrevious.bind(this)
        }, {
          el: this.btNext,
          fn: this.onBtNext.bind(this)
        }, {
          el: this.btLast,
          fn: this.onBtLast.bind(this)
        }].forEach(function (t) {
          var n = t.el;
          var r = t.fn;
          e.addManagedListener(n, "click", r);
          e.addManagedListener(n, "keydown", function (e) {
            if (!(e.keyCode !== _o.ENTER && e.keyCode !== _o.SPACE)) {
              e.preventDefault();
              r();
            }
          });
        });
        this.onPaginationChanged();
      } else {
        this.setDisplayed(false);
      }
    };
    t.prototype.onPaginationChanged = function () {
      this.enableOrDisableButtons();
      this.updateRowLabels();
      this.setCurrentPageLabel();
      this.setTotalLabels();
    };
    t.prototype.onBtFirst = function () {
      if (!this.previousAndFirstButtonsDisabled) {
        this.paginationProxy.goToFirstPage();
      }
    };
    t.prototype.setCurrentPageLabel = function () {
      var e = this.paginationProxy.getTotalPages() > 0;
      var t = this.paginationProxy.getCurrentPage();
      var n = e ? t + 1 : 0;
      this.lbCurrent.innerHTML = this.formatNumber(n);
    };
    t.prototype.formatNumber = function (e) {
      var t = this.gridOptionsWrapper.getPaginationNumberFormatterFunc();
      return t ? t({
        value: e
      }) : gt(e);
    };
    t.prototype.getTemplate = function () {
      var e = this.gridOptionsWrapper.getLocaleTextFunc();
      var t = e("page", "Page");
      var n = e("to", "to");
      var r = e("of", "of");
      var o = e("firstPage", "First Page");
      var i = e("previousPage", "Previous Page");
      var a = e("nextPage", "Next Page");
      var s = e("lastPage", "Last Page");
      var c = this.getCompId();
      return "<div class=\"ag-paging-panel ag-unselectable\" id=\"ag-" + c + "\" aria-live=\"polite\" aria-describedby=\"" + ("ag-" + c + "-start-page ag-" + c + "-start-page-number ag-" + c + "-of-page ag-" + c + "-of-page-number") + " " + ("ag-" + c + "-first-row ag-" + c + "-to ag-" + c + "-last-row ag-" + c + "-of ag-" + c + "-row-count") + "\">\n                <span class=\"ag-paging-row-summary-panel\" aria-hidden=\"true\">\n                    <span id=\"ag-" + c + "-first-row\" ref=\"lbFirstRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-" + c + "-to\">" + n + "</span>\n                    <span id=\"ag-" + c + "-last-row\" ref=\"lbLastRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-" + c + "-of\">" + r + "</span>\n                    <span id=\"ag-" + c + "-row-count\" ref=\"lbRecordCount\" class=\"ag-paging-row-summary-panel-number\"></span>\n                </span>\n                <span class=\"ag-paging-page-summary-panel\" role=\"presentation\">\n                    <div ref=\"btFirst\" class=\"ag-paging-button\" role=\"button\" aria-label=\"" + o + "\" tabindex=\"0\"></div>\n                    <div ref=\"btPrevious\" class=\"ag-paging-button\" role=\"button\" aria-label=\"" + i + "\" tabindex=\"0\"></div>\n                    <span class=\"ag-paging-description\" aria-hidden=\"true\">\n                        <span id=\"ag-" + c + "-start-page\">" + t + "</span>\n                        <span id=\"ag-" + c + "-start-page-number\" ref=\"lbCurrent\" class=\"ag-paging-number\"></span>\n                        <span id=\"ag-" + c + "-of-page\">" + r + "</span>\n                        <span id=\"ag-" + c + "-of-page-number\" ref=\"lbTotal\" class=\"ag-paging-number\"></span>\n                    </span>\n                    <div ref=\"btNext\" class=\"ag-paging-button\" role=\"button\" aria-label=\"" + a + "\" tabindex=\"0\"></div>\n                    <div ref=\"btLast\" class=\"ag-paging-button\" role=\"button\" aria-label=\"" + s + "\" tabindex=\"0\"></div>\n                </span>\n            </div>";
    };
    t.prototype.onBtNext = function () {
      if (!this.nextButtonDisabled) {
        this.paginationProxy.goToNextPage();
      }
    };
    t.prototype.onBtPrevious = function () {
      if (!this.previousAndFirstButtonsDisabled) {
        this.paginationProxy.goToPreviousPage();
      }
    };
    t.prototype.onBtLast = function () {
      if (!this.lastButtonDisabled) {
        this.paginationProxy.goToLastPage();
      }
    };
    t.prototype.enableOrDisableButtons = function () {
      var e = this.paginationProxy.getCurrentPage();
      var t = this.paginationProxy.isLastPageFound();
      var n = this.paginationProxy.getTotalPages();
      this.previousAndFirstButtonsDisabled = 0 === e;
      Jt(this.btFirst, "ag-disabled", this.previousAndFirstButtonsDisabled);
      sr(this.btFirst, this.previousAndFirstButtonsDisabled);
      Jt(this.btPrevious, "ag-disabled", this.previousAndFirstButtonsDisabled);
      sr(this.btPrevious, this.previousAndFirstButtonsDisabled);
      var r = this.isZeroPagesToDisplay();
      var o = t && e === n - 1;
      this.nextButtonDisabled = o || r;
      Jt(this.btNext, "ag-disabled", this.nextButtonDisabled);
      sr(this.btNext, this.nextButtonDisabled);
      this.lastButtonDisabled = !t || r || e === n - 1;
      Jt(this.btLast, "ag-disabled", this.lastButtonDisabled);
      sr(this.btLast, this.lastButtonDisabled);
    };
    t.prototype.updateRowLabels = function () {
      var e;
      var t;
      var n = this.paginationProxy.getCurrentPage();
      var r = this.paginationProxy.getPageSize();
      var o = this.paginationProxy.isLastPageFound();
      var i = this.paginationProxy.isLastPageFound() ? this.paginationProxy.getMasterRowCount() : null;
      if (this.isZeroPagesToDisplay()) {
        e = t = 0;
      } else {
        t = (e = r * n + 1) + r - 1;
        if (o && t > i) {
          t = i;
        }
      }
      this.lbFirstRowOnPage.innerHTML = this.formatNumber(e);
      if (this.rowNodeBlockLoader.isLoading()) {
        this.lbLastRowOnPage.innerHTML = "?";
      } else {
        this.lbLastRowOnPage.innerHTML = this.formatNumber(t);
      }
    };
    t.prototype.isZeroPagesToDisplay = function () {
      var e = this.paginationProxy.isLastPageFound();
      var t = this.paginationProxy.getTotalPages();
      return e && 0 === t;
    };
    t.prototype.setTotalLabels = function () {
      var e = this.paginationProxy.isLastPageFound();
      var t = this.paginationProxy.getTotalPages();
      var n = e ? this.paginationProxy.getMasterRowCount() : null;
      if (e) {
        this.lbTotal.innerHTML = this.formatNumber(t);
        this.lbRecordCount.innerHTML = this.formatNumber(n);
      } else {
        var r = this.gridOptionsWrapper.getLocaleTextFunc()("more", "more");
        this.lbTotal.innerHTML = r;
        this.lbRecordCount.innerHTML = r;
      }
    };
    Id([pe("paginationProxy")], t.prototype, "paginationProxy", undefined);
    Id([pe("rowNodeBlockLoader")], t.prototype, "rowNodeBlockLoader", undefined);
    Id([uo("btFirst")], t.prototype, "btFirst", undefined);
    Id([uo("btPrevious")], t.prototype, "btPrevious", undefined);
    Id([uo("btNext")], t.prototype, "btNext", undefined);
    Id([uo("btLast")], t.prototype, "btLast", undefined);
    Id([uo("lbRecordCount")], t.prototype, "lbRecordCount", undefined);
    Id([uo("lbFirstRowOnPage")], t.prototype, "lbFirstRowOnPage", undefined);
    Id([uo("lbLastRowOnPage")], t.prototype, "lbLastRowOnPage", undefined);
    Id([uo("lbCurrent")], t.prototype, "lbCurrent", undefined);
    Id([uo("lbTotal")], t.prototype, "lbTotal", undefined);
    Id([le], t.prototype, "postConstruct", null);
    return t;
  }(so);
  var jd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Nd = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Rd = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    jd(t, e);
    t.prototype.observeResize = function (e, t, n) {
      if (undefined === n) {
        n = 50;
      }
      var r = this.getFrameworkOverrides();
      var o = re(t, n);
      var i = this.gridOptionsWrapper.isSuppressBrowserResizeObserver();
      return !!window.ResizeObserver && !i ? function () {
        var t = new window.ResizeObserver(o);
        t.observe(e);
        return function () {
          return t.disconnect();
        };
      }() : function () {
        var o = bn(e);
        var i = vn(e);
        var a = true;
        (function s() {
          if (a) {
            var c = bn(e);
            var l = vn(e);
            if (c !== o || l !== i) {
              o = c;
              i = l;
              t();
            }
            r.setTimeout(s, n);
          }
        })();
        return function () {
          return a = false;
        };
      }();
    };
    return t = Nd([de("resizeObserverService")], t);
  }(We);
  var kd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var xd = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  !function (e) {
    e[e.Loading = 0] = "Loading";
    e[e.NoRows = 1] = "NoRows";
  }(_l || (_l = {}));
  var Dd = function (e) {
    function n() {
      var t = e.call(this, n.TEMPLATE) || this;
      t.inProgress = false;
      t.destroyRequested = false;
      return t;
    }
    kd(n, e);
    n.prototype.updateLayoutClasses = function (e) {
      Jt(this.eOverlayWrapper, exports.LayoutCssClasses.AUTO_HEIGHT, e.autoHeight);
      Jt(this.eOverlayWrapper, exports.LayoutCssClasses.NORMAL, e.normal);
      Jt(this.eOverlayWrapper, exports.LayoutCssClasses.PRINT, e.print);
    };
    n.prototype.postConstruct = function () {
      this.createManagedBean(new Ic(this));
      this.setDisplayed(false);
      this.addManagedListener(this.eventService, Ke.EVENT_ROW_DATA_CHANGED, this.onRowDataChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_ROW_DATA_UPDATED, this.onRowDataChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
      if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) {
        this.showLoadingOverlay();
      }
      this.gridApi.registerOverlayWrapperComp(this);
    };
    n.prototype.setWrapperTypeClass = function (e) {
      Jt(this.eOverlayWrapper, "ag-overlay-loading-wrapper", e === _l.Loading);
      Jt(this.eOverlayWrapper, "ag-overlay-no-rows-wrapper", e === _l.NoRows);
    };
    n.prototype.showLoadingOverlay = function () {
      if (!this.gridOptionsWrapper.isSuppressLoadingOverlay()) {
        var e = this.userComponentFactory.newLoadingOverlayComponent({
          api: this.gridOptionsWrapper.getApi()
        });
        this.showOverlay(e, _l.Loading);
      }
    };
    n.prototype.showNoRowsOverlay = function () {
      if (!this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
        var e = this.userComponentFactory.newNoRowsOverlayComponent({
          api: this.gridOptionsWrapper.getApi()
        });
        this.showOverlay(e, _l.NoRows);
      }
    };
    n.prototype.showOverlay = function (e, t) {
      var n = this;
      if (!this.inProgress) {
        this.setWrapperTypeClass(t);
        this.destroyActiveOverlay();
        this.inProgress = true;
        if (e) {
          e.then(function (e) {
            n.inProgress = false;
            n.eOverlayWrapper.appendChild(e.getGui());
            n.activeOverlay = e;
            if (n.destroyRequested) {
              n.destroyRequested = false;
              n.destroyActiveOverlay();
            }
          });
        }
        this.setDisplayed(true);
      }
    };
    n.prototype.destroyActiveOverlay = function () {
      if (this.inProgress) {
        this.destroyRequested = true;
      } else {
        if (this.activeOverlay) {
          this.activeOverlay = this.getContext().destroyBean(this.activeOverlay);
          hn(this.eOverlayWrapper);
        }
      }
    };
    n.prototype.hideOverlay = function () {
      this.destroyActiveOverlay();
      this.setDisplayed(false);
    };
    n.prototype.destroy = function () {
      this.destroyActiveOverlay();
      e.prototype.destroy.call(this);
    };
    n.prototype.showOrHideOverlay = function () {
      var e = this.paginationProxy.isEmpty();
      var t = this.gridOptionsWrapper.isSuppressNoRowsOverlay();
      if (e && !t) {
        this.showNoRowsOverlay();
      } else {
        this.hideOverlay();
      }
    };
    n.prototype.onRowDataChanged = function () {
      this.showOrHideOverlay();
    };
    n.prototype.onNewColumnsLoaded = function () {
      if (this.columnController.isReady() && !this.paginationProxy.isEmpty()) {
        this.hideOverlay();
      }
    };
    n.TEMPLATE = "\n        <div class=\"ag-overlay\" aria-hidden=\"true\">\n            <div class=\"ag-overlay-panel\">\n                <div class=\"ag-overlay-wrapper\" ref=\"eOverlayWrapper\"></div>\n            </div>\n        </div>";
    xd([pe("userComponentFactory")], n.prototype, "userComponentFactory", undefined);
    xd([pe("paginationProxy")], n.prototype, "paginationProxy", undefined);
    xd([pe("gridApi")], n.prototype, "gridApi", undefined);
    xd([pe("columnController")], n.prototype, "columnController", undefined);
    xd([uo("eOverlayWrapper")], n.prototype, "eOverlayWrapper", undefined);
    xd([le], n.prototype, "postConstruct", null);
    return n;
  }(so);
  var Md = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ld = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Pd = function (e) {
    function t(n) {
      if (undefined === n) {
        n = {};
      }
      var r = e.call(this, t.getTemplate(n)) || this;
      r.suppressEnabledCheckbox = true;
      r.suppressOpenCloseIcons = false;
      var o = n.title;
      var i = n.enabled;
      var a = n.items;
      var s = n.suppressEnabledCheckbox;
      var c = n.suppressOpenCloseIcons;
      r.title = o;
      r.cssIdentifier = n.cssIdentifier || "default";
      r.enabled = null == i || i;
      r.items = a || [];
      r.alignItems = n.alignItems || "center";
      if (null != s) {
        r.suppressEnabledCheckbox = s;
      }
      if (null != c) {
        r.suppressOpenCloseIcons = c;
      }
      return r;
    }
    Md(t, e);
    t.getTemplate = function (e) {
      var t = e.cssIdentifier || "default";
      return "<div class=\"ag-group ag-" + t + "-group\">\n            <div class=\"ag-group-title-bar ag-" + t + "-group-title-bar ag-unselectable\" ref=\"eTitleBar\">\n                <span class=\"ag-group-title-bar-icon ag-" + t + "-group-title-bar-icon\" ref=\"eGroupOpenedIcon\"></span>\n                <span class=\"ag-group-title-bar-icon ag-" + t + "-group-title-bar-icon\" ref=\"eGroupClosedIcon\"></span>\n                <span ref=\"eTitle\" class=\"ag-group-title ag-" + t + "-group-title\"></span>\n            </div>\n            <div ref=\"eToolbar\" class=\"ag-group-toolbar ag-" + t + "-group-toolbar\">\n                <ag-checkbox ref=\"cbGroupEnabled\"></ag-checkbox>\n            </div>\n            <div ref=\"eContainer\" class=\"ag-group-container ag-group-container-" + (e.direction || "vertical") + " ag-" + t + "-group-container\"></div>\n        </div>";
    };
    t.prototype.postConstruct = function () {
      if (this.items.length) {
        var e = this.items;
        this.items = [];
        this.addItems(e);
      }
      var t = this.gridOptionsWrapper.getLocaleTextFunc();
      this.cbGroupEnabled.setLabel(t("enabled", "Enabled"));
      if (this.title) {
        this.setTitle(this.title);
      }
      if (this.enabled) {
        this.setEnabled(this.enabled);
      }
      this.setAlignItems(this.alignItems);
      this.hideEnabledCheckbox(this.suppressEnabledCheckbox);
      this.hideOpenCloseIcons(this.suppressOpenCloseIcons);
      this.setupExpandContract();
      this.refreshChildDisplay();
    };
    t.prototype.setupExpandContract = function () {
      var e = this;
      this.eGroupClosedIcon.appendChild(xr("columnSelectClosed", this.gridOptionsWrapper, null));
      this.eGroupOpenedIcon.appendChild(xr("columnSelectOpen", this.gridOptionsWrapper, null));
      this.addManagedListener(this.eTitleBar, "click", function () {
        return e.toggleGroupExpand();
      });
      this.addManagedListener(this.eTitleBar, "keydown", function (t) {
        switch (t.keyCode) {
          case _o.ENTER:
            e.toggleGroupExpand();
            break;
          case _o.RIGHT:
            e.toggleGroupExpand(true);
            break;
          case _o.LEFT:
            e.toggleGroupExpand(false);
        }
      });
    };
    t.prototype.refreshChildDisplay = function () {
      var e = !this.suppressOpenCloseIcons;
      tn(this.eToolbar, this.expanded && !this.suppressEnabledCheckbox);
      tn(this.eGroupOpenedIcon, e && this.expanded);
      tn(this.eGroupClosedIcon, e && !this.expanded);
    };
    t.prototype.isExpanded = function () {
      return this.expanded;
    };
    t.prototype.setAlignItems = function (e) {
      var t = this.getGui();
      if (this.alignItems !== e) {
        Zt(t, "ag-group-item-alignment-" + this.alignItems);
      }
      this.alignItems = e;
      Qt(t, "ag-group-item-alignment-" + this.alignItems);
      return this;
    };
    t.prototype.toggleGroupExpand = function (e) {
      return this.suppressOpenCloseIcons ? (this.expanded = true, this.refreshChildDisplay(), tn(this.eContainer, true), this) : (e = null != e ? e : !this.expanded, this.expanded === e || (this.expanded = e, this.refreshChildDisplay(), tn(this.eContainer, e), this.dispatchEvent({
        type: this.expanded ? t.EVENT_EXPANDED : t.EVENT_COLLAPSED
      })), this);
    };
    t.prototype.addItems = function (e) {
      var t = this;
      e.forEach(function (e) {
        return t.addItem(e);
      });
    };
    t.prototype.addItem = function (e) {
      var t = this.eContainer;
      var n = e instanceof so ? e.getGui() : e;
      Qt(n, "ag-group-item");
      Qt(n, "ag-" + this.cssIdentifier + "-group-item");
      t.appendChild(n);
      this.items.push(n);
    };
    t.prototype.hideItem = function (e, t) {
      Jt(this.items[t], "ag-hidden", e);
    };
    t.prototype.setTitle = function (e) {
      this.eTitle.innerText = e;
      return this;
    };
    t.prototype.addCssClassToTitleBar = function (e) {
      Qt(this.eTitleBar, e);
    };
    t.prototype.setEnabled = function (e, t) {
      this.enabled = e;
      this.refreshDisabledStyles();
      this.toggleGroupExpand(e);
      if (!t) {
        this.cbGroupEnabled.setValue(e);
      }
      return this;
    };
    t.prototype.isEnabled = function () {
      return this.enabled;
    };
    t.prototype.onEnableChange = function (e) {
      var t = this;
      this.cbGroupEnabled.onValueChange(function (n) {
        t.setEnabled(n, true);
        e(n);
      });
      return this;
    };
    t.prototype.hideEnabledCheckbox = function (e) {
      this.suppressEnabledCheckbox = e;
      this.refreshChildDisplay();
      this.refreshDisabledStyles();
      return this;
    };
    t.prototype.hideOpenCloseIcons = function (e) {
      this.suppressOpenCloseIcons = e;
      if (e) {
        this.toggleGroupExpand(true);
      }
      return this;
    };
    t.prototype.refreshDisabledStyles = function () {
      Jt(this.getGui(), "ag-disabled", !this.enabled);
      if (this.suppressEnabledCheckbox && !this.enabled) {
        Qt(this.eTitleBar, "ag-disabled-group-title-bar");
        this.eTitleBar.removeAttribute("tabindex");
      } else {
        Zt(this.eTitleBar, "ag-disabled-group-title-bar");
        this.eTitleBar.setAttribute("tabindex", "0");
      }
      Jt(this.eContainer, "ag-disabled-group-container", !this.enabled);
    };
    t.EVENT_EXPANDED = "expanded";
    t.EVENT_COLLAPSED = "collapsed";
    Ld([uo("eTitleBar")], t.prototype, "eTitleBar", undefined);
    Ld([uo("eGroupOpenedIcon")], t.prototype, "eGroupOpenedIcon", undefined);
    Ld([uo("eGroupClosedIcon")], t.prototype, "eGroupClosedIcon", undefined);
    Ld([uo("eToolbar")], t.prototype, "eToolbar", undefined);
    Ld([uo("cbGroupEnabled")], t.prototype, "cbGroupEnabled", undefined);
    Ld([uo("eTitle")], t.prototype, "eTitle", undefined);
    Ld([uo("eContainer")], t.prototype, "eContainer", undefined);
    Ld([le], t.prototype, "postConstruct", null);
    return t;
  }(so);
  var Bd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Fd = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Gd = function (e) {
    function t(n) {
      var r = e.call(this, t.getTemplate(n)) || this;
      r.closable = true;
      r.positioned = false;
      r.dragStartPosition = {
        x: 0,
        y: 0
      };
      r.position = {
        x: 0,
        y: 0
      };
      r.size = {
        width: undefined,
        height: undefined
      };
      r.config = n;
      return r;
    }
    Bd(t, e);
    t.getTemplate = function (e) {
      var t = e && e.cssIdentifier || "default";
      return "<div class=\"ag-panel ag-" + t + "-panel\" tabindex=\"-1\">\n            <div ref=\"eTitleBar\" class=\"ag-panel-title-bar ag-" + t + "-panel-title-bar ag-unselectable\">\n                <span ref=\"eTitle\" class=\"ag-panel-title-bar-title ag-" + t + "-panel-title-bar-title\"></span>\n                <div ref=\"eTitleBarButtons\" class=\"ag-panel-title-bar-buttons ag-" + t + "-panel-title-bar-buttons\"></div>\n            </div>\n            <div ref=\"eContentWrapper\" class=\"ag-panel-content-wrapper ag-" + t + "-panel-content-wrapper\"></div>\n        </div>";
    };
    t.prototype.postConstruct = function () {
      var e = this;
      var t = this.config;
      var n = t.component;
      var r = t.closable;
      var o = t.hideTitleBar;
      var i = t.title;
      var a = t.minWidth;
      var s = t.width;
      var c = t.minHeight;
      var l = t.height;
      var u = t.centered;
      var d = t.x;
      var p = t.y;
      var f = this.getGui();
      if (n) {
        this.setBodyComponent(n);
      }
      if (o) {
        Qt(this.eTitleBar, "ag-hidden");
      } else {
        if (i) {
          this.setTitle(i);
        }
        this.setClosable(null != r ? r : this.closable);
      }
      this.addManagedListener(this.eTitleBar, "mousedown", function (t) {
        if (f.contains(t.relatedTarget) || f.contains(document.activeElement) || e.eTitleBarButtons.contains(t.target)) {
          t.preventDefault();
        } else {
          var n = e.eContentWrapper.querySelector("button, [href], input, select, textarea, [tabindex]");
          if (n) {
            n.focus();
          }
        }
      });
      if (!this.positioned) {
        this.minHeight = null != c ? c : 250;
        this.minWidth = null != a ? a : 250;
        this.popupParent = this.popupService.getPopupParent();
        if (s) {
          this.setWidth(s);
        }
        if (l) {
          this.setHeight(l);
        }
        if (this.renderComponent) {
          this.renderComponent();
        }
        if (!(s && l)) {
          this.refreshSize();
        }
        if (u) {
          this.center();
        } else {
          if (d || p) {
            this.offsetElement(d, p);
          }
        }
        this.positioned = true;
        this.eContentWrapper.style.height = "0";
      }
    };
    t.prototype.renderComponent = function () {
      var e = this;
      var t = this.getGui();
      t.focus();
      this.close = function () {
        t.parentElement.removeChild(t);
        e.destroy();
      };
    };
    t.prototype.updateDragStartPosition = function (e, t) {
      this.dragStartPosition = {
        x: e,
        y: t
      };
    };
    t.prototype.calculateMouseMovement = function (e) {
      var t = this.popupParent.getBoundingClientRect();
      var n = e.e;
      var r = e.isLeft;
      var o = e.isTop;
      var i = e.anywhereWithin;
      var a = e.topBuffer;
      var s = n.clientX - this.dragStartPosition.x;
      var c = n.clientY - this.dragStartPosition.y;
      var l = this.getWidth();
      var u = this.getHeight();
      var d = t.left >= n.clientX && this.position.x <= 0 || t.right <= n.clientX && t.right <= this.position.x + t.left + l;
      if (!d) {
        d = r ? s < 0 && n.clientX > this.position.x + t.left || s > 0 && n.clientX < this.position.x + t.left : i ? s < 0 && n.clientX > this.position.x + t.left + l || s > 0 && n.clientX < this.position.x + t.left : s < 0 && n.clientX > this.position.x + t.left + l || s > 0 && n.clientX < this.position.x + t.left + l;
      }
      return {
        movementX: s = d ? 0 : s,
        movementY: c = t.top >= n.clientY && this.position.y <= 0 || t.bottom <= n.clientY && t.bottom <= this.position.y + t.top + u || o && (c < 0 && n.clientY > this.position.y + t.top + (a || 0) || c > 0 && n.clientY < this.position.y + t.top) || !o && (c < 0 && n.clientY > this.position.y + t.top + u || c > 0 && n.clientY < this.position.y + t.top + u) ? 0 : c
      };
    };
    t.prototype.refreshSize = function () {
      var e = this.size;
      var t = e.width;
      var n = e.height;
      if (!t) {
        this.setWidth(this.getGui().offsetWidth);
      }
      if (!n) {
        this.setHeight(this.getGui().offsetHeight);
      }
    };
    t.prototype.offsetElement = function (e, t) {
      if (undefined === e) {
        e = 0;
      }
      if (undefined === t) {
        t = 0;
      }
      var n = this.getGui();
      this.popupService.positionPopup({
        ePopup: n,
        x: e,
        y: t,
        minWidth: this.minWidth,
        minHeight: this.minHeight,
        keepWithinBounds: true
      });
      this.position.x = parseInt(n.style.left, 10);
      this.position.y = parseInt(n.style.top, 10);
    };
    t.prototype.getHeight = function () {
      return this.size.height;
    };
    t.prototype.setHeight = function (e) {
      var t = this.getGui();
      var n = false;
      if ("string" === typeof e && -1 !== e.indexOf("%")) {
        An(t, e);
        e = ln(t);
        n = true;
      } else {
        e = Math.max(this.minHeight, e);
        var r = t.offsetParent;
        if (r && r.clientHeight && e + this.position.y > r.clientHeight) {
          e = r.clientHeight - this.position.y;
        }
      }
      if (this.size.height !== e) {
        this.size.height = e;
        if (n) {
          t.style.maxHeight = "unset";
          t.style.minHeight = "unset";
        } else {
          An(t, e);
        }
      }
    };
    t.prototype.getWidth = function () {
      return this.size.width;
    };
    t.prototype.setWidth = function (e) {
      var t = this.getGui();
      var n = false;
      if ("string" === typeof e && -1 !== e.indexOf("%")) {
        In(t, e);
        e = un(t);
        n = true;
      } else {
        e = Math.max(this.minWidth, e);
        var r = t.offsetParent;
        if (r && r.clientWidth && e + this.position.x > r.clientWidth) {
          e = r.clientWidth - this.position.x;
        }
      }
      if (this.size.width !== e) {
        this.size.width = e;
        if (n) {
          t.style.maxWidth = "unset";
          t.style.minWidth = "unset";
        } else {
          In(t, e);
        }
      }
    };
    t.prototype.center = function () {
      var e = this.getGui();
      var t = e.offsetParent.clientWidth / 2 - this.getWidth() / 2;
      var n = e.offsetParent.clientHeight / 2 - this.getHeight() / 2;
      this.offsetElement(t, n);
    };
    t.prototype.setClosable = function (e) {
      if (e !== this.closable) {
        this.closable = e;
      }
      if (e) {
        var n = this.closeButtonComp = new so(t.CLOSE_BTN_TEMPLATE);
        this.getContext().createBean(n);
        (r = n.getGui()).appendChild(Qt(Dr("close", this.gridOptionsWrapper), "ag-panel-title-bar-button-icon"));
        this.addTitleBarButton(n);
        n.addManagedListener(r, "click", this.onBtClose.bind(this));
      } else if (this.closeButtonComp) {
        var r;
        (r = this.closeButtonComp.getGui()).parentElement.removeChild(r);
        this.closeButtonComp = this.destroyBean(this.closeButtonComp);
      }
    };
    t.prototype.setBodyComponent = function (e) {
      e.setParentComponent(this);
      this.eContentWrapper.appendChild(e.getGui());
    };
    t.prototype.addTitleBarButton = function (e, t) {
      var n = this.eTitleBarButtons;
      var r = n.children;
      var o = r.length;
      if (null == t) {
        t = o;
      }
      t = Math.max(0, Math.min(t, o));
      var i = e.getGui();
      Qt(i, "ag-panel-title-bar-button");
      if (0 === t) {
        n.insertAdjacentElement("afterbegin", i);
      } else {
        if (t === o) {
          n.insertAdjacentElement("beforeend", i);
        } else {
          r[t - 1].insertAdjacentElement("afterend", i);
        }
      }
      e.setParentComponent(this);
    };
    t.prototype.getBodyHeight = function () {
      return sn(this.eContentWrapper);
    };
    t.prototype.getBodyWidth = function () {
      return cn(this.eContentWrapper);
    };
    t.prototype.setTitle = function (e) {
      this.eTitle.innerText = e;
    };
    t.prototype.onBtClose = function () {
      this.close();
    };
    t.prototype.destroy = function () {
      if (this.closeButtonComp) {
        this.closeButtonComp = this.destroyBean(this.closeButtonComp);
      }
      var t = this.getGui();
      if (t && t.offsetParent) {
        this.close();
      }
      e.prototype.destroy.call(this);
    };
    t.CLOSE_BTN_TEMPLATE = "<div class=\"ag-button\"></div>";
    Fd([pe("popupService")], t.prototype, "popupService", undefined);
    Fd([uo("eContentWrapper")], t.prototype, "eContentWrapper", undefined);
    Fd([uo("eTitleBar")], t.prototype, "eTitleBar", undefined);
    Fd([uo("eTitleBarButtons")], t.prototype, "eTitleBarButtons", undefined);
    Fd([uo("eTitle")], t.prototype, "eTitle", undefined);
    Fd([le], t.prototype, "postConstruct", null);
    return t;
  }(so);
  var Ud = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Wd = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Hd = function (e) {
    function t(t) {
      var n = e.call(this, t) || this;
      n.RESIZE_TEMPLATE = "<div class=\"ag-resizer-wrapper\">\n            <div ref=\"eTopLeftResizer\" class=\"ag-resizer ag-resizer-topLeft\"></div>\n            <div ref=\"eTopResizer\" class=\"ag-resizer ag-resizer-top\"></div>\n            <div ref=\"eTopRightResizer\" class=\"ag-resizer ag-resizer-topRight\"></div>\n            <div ref=\"eRightResizer\" class=\"ag-resizer ag-resizer-right\"></div>\n            <div ref=\"eBottomRightResizer\" class=\"ag-resizer ag-resizer-bottomRight\"></div>\n            <div ref=\"eBottomResizer\" class=\"ag-resizer ag-resizer-bottom\"></div>\n            <div ref=\"eBottomLeftResizer\" class=\"ag-resizer ag-resizer-bottomLeft\"></div>\n            <div ref=\"eLeftResizer\" class=\"ag-resizer ag-resizer-left\"></div>\n        </div>";
      n.resizable = {};
      n.movable = false;
      n.isMoving = false;
      n.isMaximizable = false;
      n.isMaximized = false;
      n.maximizeListeners = [];
      n.resizeListenerDestroy = null;
      n.isResizing = false;
      n.lastPosition = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
      return n;
    }
    Ud(t, e);
    t.prototype.postConstruct = function () {
      var t = this;
      var n = this.getGui();
      var r = this.config;
      var o = r.movable;
      var i = r.resizable;
      var a = r.maximizable;
      Qt(n, "ag-dialog");
      this.moveElement = this.eTitleBar;
      e.prototype.postConstruct.call(this);
      this.addManagedListener(n, "focusin", function (e) {
        if (!n.contains(e.relatedTarget)) {
          t.popupService.bringPopupToFront(n);
        }
      });
      if (o) {
        this.setMovable(o);
      }
      if (a) {
        this.setMaximizable(a);
      }
      this.addResizers();
      if (i) {
        this.setResizable(i);
      }
    };
    t.prototype.renderComponent = function () {
      var e = this.getGui();
      var t = this.config;
      var n = t.alwaysOnTop;
      var r = t.modal;
      var o = this.popupService.addPopup({
        modal: r,
        eChild: e,
        closeOnEsc: true,
        closedCallback: this.destroy.bind(this),
        alwaysOnTop: n
      });
      if (o) {
        this.close = o.hideFunc;
      }
    };
    t.prototype.addResizers = function () {
      var e = this.getGui();
      if (e) {
        var t = new DOMParser().parseFromString(this.RESIZE_TEMPLATE, "text/html").body;
        e.appendChild(t.firstChild);
        this.createMap();
      }
    };
    t.prototype.createMap = function () {
      var e = this.getGui();
      this.resizerMap = {
        topLeft: {
          element: e.querySelector("[ref=eTopLeftResizer]")
        },
        top: {
          element: e.querySelector("[ref=eTopResizer]")
        },
        topRight: {
          element: e.querySelector("[ref=eTopRightResizer]")
        },
        right: {
          element: e.querySelector("[ref=eRightResizer]")
        },
        bottomRight: {
          element: e.querySelector("[ref=eBottomRightResizer]")
        },
        bottom: {
          element: e.querySelector("[ref=eBottomResizer]")
        },
        bottomLeft: {
          element: e.querySelector("[ref=eBottomLeftResizer]")
        },
        left: {
          element: e.querySelector("[ref=eLeftResizer]")
        }
      };
    };
    t.prototype.getResizerElement = function (e) {
      return this.resizerMap[e].element;
    };
    t.prototype.onResizeStart = function (e) {
      this.isResizing = true;
      this.updateDragStartPosition(e.clientX, e.clientY);
    };
    t.prototype.onResize = function (e, t) {
      if (this.isResizing) {
        var n = !!t.match(/left/i);
        var r = !!t.match(/right/i);
        var o = !!t.match(/top/i);
        var i = !!t.match(/bottom/i);
        var a = n || r;
        var s = o || i;
        var c = this.calculateMouseMovement({
          e: e,
          isLeft: n,
          isTop: o
        });
        var l = c.movementX;
        var u = c.movementY;
        var d = 0;
        var p = 0;
        if (a && l) {
          var f = n ? -1 : 1;
          var h = this.getWidth();
          var m = h + l * f;
          var g = false;
          if (n) {
            d = h - m;
            if (this.position.x + d <= 0 || m <= this.minWidth) {
              g = true;
              d = 0;
            }
          }
          if (!g) {
            this.setWidth(m);
          }
        }
        if (s && u) {
          f = o ? -1 : 1;
          var _ = this.getHeight();
          var v = _ + u * f;
          var b = false;
          if (o) {
            p = _ - v;
            if (this.position.y + p <= 0 || v <= this.minHeight) {
              b = true;
              p = 0;
            }
          }
          if (!b) {
            this.setHeight(v);
          }
        }
        this.updateDragStartPosition(e.clientX, e.clientY);
        if (d || p) {
          this.offsetElement(this.position.x + d, this.position.y + p);
        }
      }
    };
    t.prototype.onResizeEnd = function () {
      this.isResizing = false;
      var e = {
        type: "resize",
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi()
      };
      this.dispatchEvent(e);
    };
    t.prototype.onMoveStart = function (e) {
      this.isMoving = true;
      this.updateDragStartPosition(e.clientX, e.clientY);
    };
    t.prototype.onMove = function (e) {
      if (this.isMoving) {
        var t = this.position;
        var n = t.x;
        var r = t.y;
        var o = this.calculateMouseMovement({
          e: e,
          isTop: true,
          anywhereWithin: true,
          topBuffer: this.getHeight() - this.getBodyHeight()
        });
        var i = o.movementX;
        var a = o.movementY;
        this.offsetElement(n + i, r + a);
        this.updateDragStartPosition(e.clientX, e.clientY);
      }
    };
    t.prototype.onMoveEnd = function () {
      this.isMoving = false;
    };
    t.prototype.toggleMaximize = function () {
      if (this.isMaximized) {
        var e = this.lastPosition;
        var t = e.x;
        var n = e.y;
        var r = e.width;
        var o = e.height;
        this.setWidth(r);
        this.setHeight(o);
        this.offsetElement(t, n);
      } else {
        this.lastPosition.width = this.getWidth();
        this.lastPosition.height = this.getHeight();
        this.lastPosition.x = this.position.x;
        this.lastPosition.y = this.position.y;
        this.offsetElement(0, 0);
        this.setHeight("100%");
        this.setWidth("100%");
      }
      this.isMaximized = !this.isMaximized;
      this.refreshMaximizeIcon();
    };
    t.prototype.refreshMaximizeIcon = function () {
      tn(this.maximizeIcon, !this.isMaximized);
      tn(this.minimizeIcon, this.isMaximized);
    };
    t.prototype.clearMaximizebleListeners = function () {
      if (this.maximizeListeners.length) {
        this.maximizeListeners.forEach(function (e) {
          return e();
        });
        this.maximizeListeners.length = 0;
      }
      if (this.resizeListenerDestroy) {
        this.resizeListenerDestroy();
        this.resizeListenerDestroy = null;
      }
    };
    t.prototype.destroy = function () {
      this.setResizable(false);
      this.setMovable(false);
      this.maximizeButtonComp = this.destroyBean(this.maximizeButtonComp);
      this.clearMaximizebleListeners();
      e.prototype.destroy.call(this);
    };
    t.prototype.setResizable = function (e) {
      var t = this;
      if ("boolean" === typeof e) {
        e = {
          topLeft: e,
          top: e,
          topRight: e,
          right: e,
          bottomRight: e,
          bottom: e,
          bottomLeft: e,
          left: e
        };
      }
      Object.keys(e).forEach(function (n) {
        var r = n;
        var o = !!e[r];
        var i = t.getResizerElement(r);
        var a = t.resizerMap[r].dragSource || {
          eElement: i,
          onDragStart: t.onResizeStart.bind(t),
          onDragging: function (e) {
            return t.onResize(e, r);
          },
          onDragStop: t.onResizeEnd.bind(t)
        };
        if (!(!!t.resizable[r] === o && (t.isAlive() || o))) {
          if (o) {
            t.dragService.addDragSource(a);
            i.style.pointerEvents = "all";
          } else {
            t.dragService.removeDragSource(a);
            i.style.pointerEvents = "none";
          }
          t.resizerMap[r].dragSource = o ? a : undefined;
        }
      });
    };
    t.prototype.setMovable = function (e) {
      if (e !== this.movable) {
        this.movable = e;
        var t = this.moveElementDragListener || {
          eElement: this.moveElement,
          onDragStart: this.onMoveStart.bind(this),
          onDragging: this.onMove.bind(this),
          onDragStop: this.onMoveEnd.bind(this)
        };
        if (e) {
          this.dragService.addDragSource(t);
          this.moveElementDragListener = t;
        } else {
          this.dragService.removeDragSource(t);
          this.moveElementDragListener = undefined;
        }
      }
    };
    t.prototype.setMaximizable = function (e) {
      var t = this;
      if (!e) {
        this.clearMaximizebleListeners();
        return void (this.maximizeButtonComp && (this.destroyBean(this.maximizeButtonComp), this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = undefined));
      }
      var n = this.eTitleBar;
      if (n && e !== this.isMaximizable) {
        var r = this.maximizeButtonComp = this.createBean(new so("<div class=\"ag-dialog-button\"></span>"));
        var o = r.getGui();
        o.appendChild(this.maximizeIcon = Dr("maximize", this.gridOptionsWrapper));
        Qt(this.maximizeIcon, "ag-panel-title-bar-button-icon");
        o.appendChild(this.minimizeIcon = Dr("minimize", this.gridOptionsWrapper));
        Qt(this.minimizeIcon, "ag-panel-title-bar-button-icon");
        Qt(this.minimizeIcon, "ag-hidden");
        r.addManagedListener(o, "click", this.toggleMaximize.bind(this));
        this.addTitleBarButton(r, 0);
        this.maximizeListeners.push(this.addManagedListener(n, "dblclick", this.toggleMaximize.bind(this)));
        this.resizeListenerDestroy = this.addManagedListener(this, "resize", function () {
          t.isMaximized = false;
          t.refreshMaximizeIcon();
        });
      }
    };
    Wd([pe("dragService")], t.prototype, "dragService", undefined);
    return t;
  }(Gd);
  var Vd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var zd = function (e) {
    function t(t, n, r) {
      if (undefined === n) {
        n = "ag-text-field";
      }
      if (undefined === r) {
        r = "text";
      }
      return e.call(this, t, n, r) || this;
    }
    Vd(t, e);
    t.prototype.postConstruct = function () {
      e.prototype.postConstruct.call(this);
      if (this.config.allowedCharPattern) {
        this.preventDisallowedCharacters();
      }
    };
    t.prototype.setValue = function (t, n) {
      var o = e.prototype.setValue.call(this, t, n);
      if (this.eInput.value !== t) {
        this.eInput.value = r(t) ? t : "";
      }
      return o;
    };
    t.prototype.preventDisallowedCharacters = function () {
      var e = new RegExp("[" + this.config.allowedCharPattern + "]");
      this.addManagedListener(this.eInput, "keypress", function (t) {
        if (t.key && !e.test(t.key)) {
          t.preventDefault();
        }
      });
      this.addManagedListener(this.eInput, "paste", function (t) {
        if (S(t.clipboardData.getData("text"), function (t) {
          return !e.test(t);
        })) {
          t.preventDefault();
        }
      });
    };
    return t;
  }(Cs);
  var Yd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Kd = function (e) {
    function t(t) {
      return e.call(this, t, "ag-text-area", null, "textarea") || this;
    }
    Yd(t, e);
    t.prototype.setValue = function (t, n) {
      var r = e.prototype.setValue.call(this, t, n);
      this.eInput.value = t;
      return r;
    };
    t.prototype.setCols = function (e) {
      this.eInput.cols = e;
      return this;
    };
    t.prototype.setRows = function (e) {
      this.eInput.rows = e;
      return this;
    };
    return t;
  }(Cs);
  var qd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Xd = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Qd = function (e) {
    function t(n) {
      var r = e.call(this, n, t.TEMPLATE) || this;
      r.labelAlignment = "top";
      return r;
    }
    qd(t, e);
    t.prototype.init = function () {
      Qt(this.eSlider.getGui(), "ag-slider-field");
    };
    t.prototype.onValueChange = function (e) {
      var t = this;
      var n = Es.EVENT_CHANGED;
      this.addManagedListener(this.eText, n, function () {
        var n = parseFloat(t.eText.getValue());
        t.eSlider.setValue(n.toString(), true);
        e(n || 0);
      });
      this.addManagedListener(this.eSlider, n, function () {
        var n = t.eSlider.getValue();
        t.eText.setValue(n, true);
        e(parseFloat(n));
      });
      return this;
    };
    t.prototype.setSliderWidth = function (e) {
      this.eSlider.setWidth(e);
      return this;
    };
    t.prototype.setTextFieldWidth = function (e) {
      this.eText.setWidth(e);
      return this;
    };
    t.prototype.setMinValue = function (e) {
      this.eSlider.setMinValue(e);
      this.eText.setMin(e);
      return this;
    };
    t.prototype.setMaxValue = function (e) {
      this.eSlider.setMaxValue(e);
      this.eText.setMax(e);
      return this;
    };
    t.prototype.getValue = function () {
      return this.eText.getValue();
    };
    t.prototype.setValue = function (e) {
      if (!(this.getValue() === e)) {
        this.eText.setValue(e, true);
        this.eSlider.setValue(e, true);
        this.dispatchEvent({
          type: Es.EVENT_CHANGED
        });
      }
      return this;
    };
    t.prototype.setStep = function (e) {
      this.eSlider.setStep(e);
      this.eText.setStep(e);
      return this;
    };
    t.TEMPLATE = "<div class=\"ag-slider\">\n            <label ref=\"eLabel\"></label>\n            <div class=\"ag-wrapper ag-slider-wrapper\">\n                <ag-input-range ref=\"eSlider\"></ag-input-range>\n                <ag-input-number-field ref=\"eText\"></ag-input-number-field>\n            </div>\n        </div>";
    Xd([uo("eLabel")], t.prototype, "eLabel", undefined);
    Xd([uo("eSlider")], t.prototype, "eSlider", undefined);
    Xd([uo("eText")], t.prototype, "eText", undefined);
    Xd([le], t.prototype, "init", null);
    return t;
  }(bs);
  var Zd = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Jd = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var $d = function (e) {
    function t(n) {
      var r = e.call(this, t.TEMPLATE) || this;
      r.H = 1;
      r.S = 1;
      r.B = 1;
      r.A = 1;
      r.isSpectrumDragging = false;
      r.isSpectrumHueDragging = false;
      r.isSpectrumAlphaDragging = false;
      r.colorChanged = false;
      r.picker = n.picker;
      return r;
    }
    Zd(t, e);
    t.prototype.postConstruct = function () {
      var e = this.getGui();
      this.initRecentColors();
      this.addManagedListener(this.spectrumVal, "mousedown", this.onSpectrumDraggerDown.bind(this));
      this.addManagedListener(e, "mousemove", this.onSpectrumDraggerMove.bind(this));
      this.addManagedListener(this.spectrumHue, "mousedown", this.onSpectrumHueDown.bind(this));
      this.addManagedListener(e, "mousemove", this.onSpectrumHueMove.bind(this));
      this.addManagedListener(this.spectrumAlpha, "mousedown", this.onSpectrumAlphaDown.bind(this));
      this.addManagedListener(e, "mousemove", this.onSpectrumAlphaMove.bind(this));
      this.addManagedListener(document, "mouseup", this.onMouseUp.bind(this));
      this.addManagedListener(this.recentColors, "click", this.onRecentColorClick.bind(this));
    };
    t.prototype.refreshSpectrumRect = function () {
      return this.spectrumValRect = this.spectrumVal.getBoundingClientRect();
    };
    t.prototype.refreshHueRect = function () {
      return this.spectrumHueRect = this.spectrumHue.getBoundingClientRect();
    };
    t.prototype.refreshAlphaRect = function () {
      return this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect();
    };
    t.prototype.onSpectrumDraggerDown = function (e) {
      this.refreshSpectrumRect();
      this.isSpectrumDragging = true;
      this.moveDragger(e);
    };
    t.prototype.onSpectrumDraggerMove = function (e) {
      if (this.isSpectrumDragging) {
        this.moveDragger(e);
      }
    };
    t.prototype.onSpectrumHueDown = function (e) {
      this.refreshHueRect();
      this.isSpectrumHueDragging = true;
      this.moveHueSlider(e);
    };
    t.prototype.onSpectrumHueMove = function (e) {
      if (this.isSpectrumHueDragging) {
        this.moveHueSlider(e);
      }
    };
    t.prototype.onSpectrumAlphaDown = function (e) {
      this.refreshAlphaRect();
      this.isSpectrumAlphaDragging = true;
      this.moveAlphaSlider(e);
    };
    t.prototype.onSpectrumAlphaMove = function (e) {
      if (this.isSpectrumAlphaDragging) {
        this.moveAlphaSlider(e);
      }
    };
    t.prototype.onMouseUp = function () {
      this.isSpectrumDragging = false;
      this.isSpectrumHueDragging = false;
      this.isSpectrumAlphaDragging = false;
    };
    t.prototype.moveDragger = function (e) {
      var t = this.spectrumValRect;
      if (t) {
        var n = e.clientX - t.left;
        var r = e.clientY - t.top;
        n = Math.max(n, 0);
        n = Math.min(n, t.width);
        r = Math.max(r, 0);
        r = Math.min(r, t.height);
        this.setSpectrumValue(n / t.width, 1 - r / t.height);
      }
    };
    t.prototype.moveHueSlider = function (e) {
      var t = this.spectrumHueRect;
      if (t) {
        var n = this.spectrumHueSlider;
        var r = n.getBoundingClientRect();
        var o = e.clientX - t.left;
        o = Math.max(o, 0);
        o = Math.min(o, t.width);
        this.H = 1 - o / t.width;
        n.style.left = o + r.width / 2 + "px";
        this.update();
      }
    };
    t.prototype.moveAlphaSlider = function (e) {
      var t = this.spectrumAlphaRect;
      if (t) {
        var n = this.spectrumAlphaSlider;
        var r = n.getBoundingClientRect();
        var o = e.clientX - t.left;
        o = Math.max(o, 0);
        o = Math.min(o, t.width);
        this.A = o / t.width;
        n.style.left = o + r.width / 2 + "px";
        this.update();
      }
    };
    t.prototype.update = function () {
      var e = Yn.fromHSB(360 * this.H, this.S, this.B, this.A);
      var t = Yn.fromHSB(360 * this.H, 1, 1);
      var n = e.toRgbaString();
      var r = this.picker;
      if (Yn.fromString(r.getValue()).toRgbaString() !== n) {
        this.colorChanged = true;
      }
      r.setValue(n);
      this.spectrumColor.style.backgroundColor = t.toRgbaString();
      this.spectrumDragger.style.backgroundColor = n;
    };
    t.prototype.setSpectrumValue = function (e, t) {
      var n = this.spectrumValRect || this.refreshSpectrumRect();
      if (n) {
        var r = this.spectrumDragger;
        var o = r.getBoundingClientRect();
        e = Math.max(0, e);
        e = Math.min(1, e);
        t = Math.max(0, t);
        t = Math.min(1, t);
        this.S = e;
        this.B = t;
        r.style.left = e * n.width - o.width / 2 + "px";
        r.style.top = (1 - t) * n.height - o.height / 2 + "px";
        this.update();
      }
    };
    t.prototype.initRecentColors = function () {
      var e = t.recentColors.map(function (e, t) {
        return "<div class=\"ag-recent-color\" id=" + t + " style=\"background-color: " + e + "; width: 15px; height: 15px;\" recent-color=\"" + e + "\"></div>";
      });
      this.recentColors.innerHTML = e.join("");
    };
    t.prototype.setValue = function (e) {
      var t = Yn.fromString(e);
      var n = t.toHSB();
      var r = n[0];
      var o = n[1];
      var i = n[2];
      this.H = (isNaN(r) ? 0 : r) / 360;
      this.A = t.a;
      var a = this.spectrumHueRect || this.refreshHueRect();
      var s = this.spectrumAlphaRect || this.refreshAlphaRect();
      this.spectrumHueSlider.style.left = (this.H - 1) * -a.width + "px";
      this.spectrumAlphaSlider.style.left = this.A * s.width + "px";
      this.setSpectrumValue(o, i);
    };
    t.prototype.onRecentColorClick = function (e) {
      var n = e.target;
      if (r(n.id)) {
        var o = parseInt(n.id, 10);
        this.setValue(t.recentColors[o]);
        this.destroy();
      }
    };
    t.prototype.addRecentColor = function () {
      var e = Yn.fromHSB(360 * this.H, this.S, this.B, this.A).toRgbaString();
      var n = t.recentColors;
      if (this.colorChanged && n[0] !== e) {
        n = n.filter(function (t) {
          return t != e;
        });
        if ((n = [e].concat(n)).length > t.maxRecentColors) {
          n = n.slice(0, t.maxRecentColors);
        }
        t.recentColors = n;
      }
    };
    t.prototype.destroy = function () {
      this.addRecentColor();
      e.prototype.destroy.call(this);
    };
    t.maxRecentColors = 8;
    t.recentColors = [];
    t.TEMPLATE = "<div class=\"ag-color-panel\">\n            <div ref=\"spectrumColor\" class=\"ag-spectrum-color\">\n                <div class=\"ag-spectrum-sat ag-spectrum-fill\">\n                    <div ref=\"spectrumVal\" class=\"ag-spectrum-val ag-spectrum-fill\">\n                        <div ref=\"spectrumDragger\" class=\"ag-spectrum-dragger\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"ag-spectrum-tools\">\n                <div ref=\"spectrumHue\" class=\"ag-spectrum-hue ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-hue-background\"></div>\n                    <div ref=\"spectrumHueSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"spectrumAlpha\" class=\"ag-spectrum-alpha ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-alpha-background\"></div>\n                    <div ref=\"spectrumAlphaSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"recentColors\" class=\"ag-recent-colors\"></div>\n            </div>\n        </div>";
    Jd([uo("spectrumColor")], t.prototype, "spectrumColor", undefined);
    Jd([uo("spectrumVal")], t.prototype, "spectrumVal", undefined);
    Jd([uo("spectrumDragger")], t.prototype, "spectrumDragger", undefined);
    Jd([uo("spectrumHue")], t.prototype, "spectrumHue", undefined);
    Jd([uo("spectrumHueSlider")], t.prototype, "spectrumHueSlider", undefined);
    Jd([uo("spectrumAlpha")], t.prototype, "spectrumAlpha", undefined);
    Jd([uo("spectrumAlphaSlider")], t.prototype, "spectrumAlphaSlider", undefined);
    Jd([uo("recentColors")], t.prototype, "recentColors", undefined);
    Jd([le], t.prototype, "postConstruct", null);
    return t;
  }(so);
  var ep = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var tp = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var np = function (e) {
    function t(t, n, r, o) {
      var i = e.call(this, t, "<div class=\"ag-picker-field\" role=\"presentation\">\n                <div ref=\"eLabel\"></div>\n                <div ref=\"eWrapper\"\n                    class=\"ag-wrapper ag-picker-field-wrapper\"\n                    tabIndex=\"-1\"\n                    " + (o ? "aria-haspopup=\"" + o + "\"" : "") + "\n                >\n                    <div ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\n                    <div ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n                </div>\n            </div>", n) || this;
      i.pickerIcon = r;
      i.isPickerDisplayed = false;
      i.isDestroyingPicker = false;
      i.skipClick = false;
      return i;
    }
    ep(t, e);
    t.prototype.postConstruct = function () {
      var t = this;
      e.prototype.postConstruct.call(this);
      var n = this.getCompId() + "-display";
      this.eDisplayField.setAttribute("id", n);
      ar(this.eWrapper, n);
      var r = function () {
        if (t.skipClick) {
          t.skipClick = false;
        } else {
          if (!t.isDisabled()) {
            t.pickerComponent = t.showPicker();
          }
        }
      };
      var o = this.getGui();
      this.addManagedListener(o, "mousedown", function (e) {
        if (!t.skipClick && t.pickerComponent && t.pickerComponent.isAlive() && gn(t.pickerComponent.getGui()) && o.contains(e.target)) {
          t.skipClick = true;
        }
      });
      this.addManagedListener(o, "keydown", function (e) {
        switch (e.keyCode) {
          case _o.UP:
          case _o.DOWN:
          case _o.ENTER:
          case _o.SPACE:
            r();
          case _o.ESCAPE:
            if (t.isPickerDisplayed) {
              e.preventDefault();
            }
        }
      });
      this.addManagedListener(this.eWrapper, "click", r);
      this.addManagedListener(this.eLabel, "click", r);
      if (this.pickerIcon) {
        var i = Dr(this.pickerIcon, this.gridOptionsWrapper);
        if (i) {
          this.eIcon.appendChild(i);
        }
      }
    };
    t.prototype.refreshLabel = function () {
      if (r(this.getLabel())) {
        ir(this.eWrapper, this.getLabelId());
      } else {
        this.eWrapper.removeAttribute("aria-labelledby");
      }
      e.prototype.refreshLabel.call(this);
    };
    t.prototype.setAriaLabel = function (e) {
      or(this.eWrapper, e);
      return this;
    };
    t.prototype.setInputWidth = function (e) {
      Sn(this.eWrapper, e);
      return this;
    };
    t.prototype.getFocusableElement = function () {
      return this.eWrapper;
    };
    tp([uo("eLabel")], t.prototype, "eLabel", undefined);
    tp([uo("eWrapper")], t.prototype, "eWrapper", undefined);
    tp([uo("eDisplayField")], t.prototype, "eDisplayField", undefined);
    tp([uo("eIcon")], t.prototype, "eIcon", undefined);
    return t;
  }(Es);
  var rp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var op = function (e) {
    function t(t) {
      var n = e.call(this, t, "ag-color-picker", "colorPicker") || this;
      if (t && t.color) {
        n.value = t.color;
      }
      return n;
    }
    rp(t, e);
    t.prototype.postConstruct = function () {
      e.prototype.postConstruct.call(this);
      if (this.value) {
        this.setValue(this.value);
      }
    };
    t.prototype.showPicker = function () {
      var e = this;
      var t = this.getGui().getBoundingClientRect();
      var n = this.createBean(new Hd({
        closable: false,
        modal: true,
        hideTitleBar: true,
        minWidth: 190,
        width: 190,
        height: 250,
        x: t.right - 190,
        y: t.top - 250
      }));
      this.isPickerDisplayed = true;
      Qt(n.getGui(), "ag-color-dialog");
      var r = this.createBean(new $d({
        picker: this
      }));
      r.addDestroyFunc(function () {
        if (n.isAlive()) {
          e.destroyBean(n);
        }
      });
      n.setParentComponent(this);
      n.setBodyComponent(r);
      r.setValue(this.getValue());
      n.addDestroyFunc(function () {
        if (e.isDestroyingPicker) {
          e.isDestroyingPicker = false;
        } else {
          e.isDestroyingPicker = true;
          if (r.isAlive()) {
            e.destroyBean(r);
          }
        }
        if (e.isAlive()) {
          e.getFocusableElement().focus();
        }
        e.isPickerDisplayed = false;
      });
      return n;
    };
    t.prototype.setValue = function (t) {
      return this.value === t ? this : (this.eDisplayField.style.backgroundColor = t, e.prototype.setValue.call(this, t));
    };
    t.prototype.getValue = function () {
      return this.value;
    };
    return t;
  }(np);
  var ip = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ap = function (e) {
    function t(t) {
      return e.call(this, t, "ag-number-field", "number") || this;
    }
    ip(t, e);
    t.prototype.postConstruct = function () {
      var t = this;
      e.prototype.postConstruct.call(this);
      this.addManagedListener(this.eInput, "blur", function () {
        var e = parseFloat(t.eInput.value);
        var n = isNaN(e) ? "" : t.normalizeValue(e.toString());
        if (t.value !== n) {
          t.setValue(n);
        }
      });
    };
    t.prototype.normalizeValue = function (e) {
      if ("" === e) {
        return "";
      }
      if (this.precision) {
        e = this.adjustPrecision(e);
      }
      var t = parseFloat(e);
      if (null != this.min && t < this.min) {
        e = this.min.toString();
      } else {
        if (null != this.max && t > this.max) {
          e = this.max.toString();
        }
      }
      return e;
    };
    t.prototype.adjustPrecision = function (e) {
      if (this.precision) {
        var t = parseFloat(e).toFixed(this.precision);
        e = parseFloat(t).toString();
      }
      return e;
    };
    t.prototype.setMin = function (e) {
      if (!(this.min === e)) {
        this.min = e;
        Mn(this.eInput, "min", e);
      }
      return this;
    };
    t.prototype.setMax = function (e) {
      if (!(this.max === e)) {
        this.max = e;
        Mn(this.eInput, "max", e);
      }
      return this;
    };
    t.prototype.setPrecision = function (e) {
      this.precision = e;
      return this;
    };
    t.prototype.setStep = function (e) {
      if (!(this.step === e)) {
        this.step = e;
        Mn(this.eInput, "step", e);
      }
      return this;
    };
    t.prototype.setValue = function (t, n) {
      return (t = this.adjustPrecision(t)) != this.normalizeValue(t) ? this : e.prototype.setValue.call(this, t, n);
    };
    return t;
  }(zd);
  var sp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var cp = function (e) {
    function t(t) {
      return e.call(this, t, "ag-range-field", "range") || this;
    }
    sp(t, e);
    t.prototype.postConstruct = function () {
      e.prototype.postConstruct.call(this);
      var t = this.config;
      var n = t.min;
      var r = t.max;
      var o = t.step;
      if (null != n) {
        this.setMinValue(n);
      }
      if (null != r) {
        this.setMaxValue(r);
      }
      this.setStep(o || 1);
    };
    t.prototype.addInputListeners = function () {
      var e = this;
      var t = Mt() ? "change" : "input";
      this.addManagedListener(this.eInput, t, function (t) {
        var n = t.target.value;
        e.setValue(n);
      });
    };
    t.prototype.setMinValue = function (e) {
      this.min = e;
      this.eInput.setAttribute("min", e.toString());
      return this;
    };
    t.prototype.setMaxValue = function (e) {
      this.max = e;
      this.eInput.setAttribute("max", e.toString());
      return this;
    };
    t.prototype.setStep = function (e) {
      this.eInput.setAttribute("step", e.toString());
      return this;
    };
    t.prototype.setValue = function (t, n) {
      if (null != this.min) {
        t = Math.max(parseFloat(t), this.min).toString();
      }
      if (null != this.max) {
        t = Math.min(parseFloat(t), this.max).toString();
      }
      var r = e.prototype.setValue.call(this, t, n);
      this.eInput.value = t;
      return r;
    };
    return t;
  }(Cs);
  var lp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var up = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var dp = function (e) {
    function t(t) {
      if (undefined === t) {
        t = "default";
      }
      var n = e.call(this, "<div class=\"ag-list ag-" + t + "-list\" role=\"listbox\"></div>") || this;
      n.cssIdentifier = t;
      n.options = [];
      n.itemEls = [];
      return n;
    }
    lp(t, e);
    t.prototype.init = function () {
      this.addManagedListener(this.getGui(), "keydown", this.handleKeyDown.bind(this));
    };
    t.prototype.handleKeyDown = function (e) {
      var t = e.keyCode;
      switch (t) {
        case _o.ENTER:
          if (this.highlightedEl) {
            var n = this.itemEls.indexOf(this.highlightedEl);
            this.setValueByIndex(n);
          } else {
            this.setValue(this.getValue());
          }
          break;
        case _o.DOWN:
        case _o.UP:
          var r = t === _o.DOWN,
            o = undefined;
          if (e.preventDefault(), this.highlightedEl) {
            var i = this.itemEls.indexOf(this.highlightedEl) + (r ? 1 : -1);
            i = Math.min(Math.max(i, 0), this.itemEls.length - 1);
            o = this.itemEls[i];
          } else {
            o = this.itemEls[r ? 0 : this.itemEls.length - 1];
          }
          this.highlightItem(o);
      }
    };
    t.prototype.addOptions = function (e) {
      var t = this;
      e.forEach(function (e) {
        return t.addOption(e);
      });
      return this;
    };
    t.prototype.addOption = function (e) {
      var t = e.value;
      var n = nt(e.text || t);
      this.options.push({
        value: t,
        text: n
      });
      this.renderOption(t, n);
      return this;
    };
    t.prototype.renderOption = function (e, t) {
      var n = this;
      var r = document.createElement("div");
      r.setAttribute("role", "option");
      Qt(r, "ag-list-item");
      Qt(r, "ag-" + this.cssIdentifier + "-list-item");
      r.innerHTML = "<span>" + t + "</span>";
      r.tabIndex = -1;
      this.itemEls.push(r);
      this.addManagedListener(r, "mouseover", function () {
        return n.highlightItem(r);
      });
      this.addManagedListener(r, "mouseleave", function () {
        return n.clearHighlighted();
      });
      this.addManagedListener(r, "click", function () {
        return n.setValue(e);
      });
      this.getGui().appendChild(r);
    };
    t.prototype.setValue = function (e, t) {
      if (this.value === e) {
        this.fireItemSelected();
        return this;
      }
      if (null == e) {
        this.reset();
        return this;
      }
      var n = C(this.options, function (t) {
        return t.value === e;
      });
      if (-1 !== n) {
        var r = this.options[n];
        this.value = r.value;
        this.displayValue = null != r.text ? r.text : r.value;
        this.highlightItem(this.itemEls[n]);
        if (!t) {
          this.fireChangeEvent();
        }
      }
      return this;
    };
    t.prototype.setValueByIndex = function (e) {
      return this.setValue(this.options[e].value);
    };
    t.prototype.getValue = function () {
      return this.value;
    };
    t.prototype.getDisplayValue = function () {
      return this.displayValue;
    };
    t.prototype.refreshHighlighted = function () {
      var e = this;
      this.clearHighlighted();
      var t = C(this.options, function (t) {
        return t.value === e.value;
      });
      if (-1 !== t) {
        this.highlightItem(this.itemEls[t]);
      }
    };
    t.prototype.reset = function () {
      this.value = null;
      this.displayValue = null;
      this.clearHighlighted();
      this.fireChangeEvent();
    };
    t.prototype.highlightItem = function (e) {
      if (e.offsetParent) {
        this.clearHighlighted();
        this.highlightedEl = e;
        Qt(this.highlightedEl, t.ACTIVE_CLASS);
        yr(this.highlightedEl, true);
        this.highlightedEl.focus();
      }
    };
    t.prototype.clearHighlighted = function () {
      if (this.highlightedEl && this.highlightedEl.offsetParent) {
        Zt(this.highlightedEl, t.ACTIVE_CLASS);
        yr(this.highlightedEl, false);
        this.highlightedEl = null;
      }
    };
    t.prototype.fireChangeEvent = function () {
      this.dispatchEvent({
        type: Es.EVENT_CHANGED
      });
      this.fireItemSelected();
    };
    t.prototype.fireItemSelected = function () {
      this.dispatchEvent({
        type: t.EVENT_ITEM_SELECTED
      });
    };
    t.EVENT_ITEM_SELECTED = "selectedItem";
    t.ACTIVE_CLASS = "ag-active-item";
    up([le], t.prototype, "init", null);
    return t;
  }(so);
  var pp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var fp = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var hp = function (e) {
    function t(t) {
      return e.call(this, t, "ag-select", "smallDown", "listbox") || this;
    }
    pp(t, e);
    t.prototype.init = function () {
      var e = this;
      this.listComponent = this.createBean(new dp("select"));
      this.listComponent.setParentComponent(this);
      this.eWrapper.tabIndex = 0;
      this.listComponent.addManagedListener(this.listComponent, dp.EVENT_ITEM_SELECTED, function () {
        if (e.hideList) {
          e.hideList();
        }
      });
      this.listComponent.addManagedListener(this.listComponent, Es.EVENT_CHANGED, function () {
        e.setValue(e.listComponent.getValue(), false, true);
        if (e.hideList) {
          e.hideList();
        }
      });
    };
    t.prototype.showPicker = function () {
      var e = this;
      var t = this.listComponent.getGui();
      var n = this.addManagedListener(document.body, "wheel", function (n) {
        if (!t.contains(n.target) && e.hideList) {
          e.hideList();
        }
      });
      var r = this.addManagedListener(t, "focusout", function (n) {
        if (!t.contains(n.relatedTarget) && e.hideList) {
          e.hideList();
        }
      });
      var o = this.popupService.addPopup({
        modal: true,
        eChild: t,
        closeOnEsc: true,
        closedCallback: function () {
          e.hideList = null;
          e.isPickerDisplayed = false;
          r();
          n();
          if (e.isAlive()) {
            e.getFocusableElement().focus();
          }
        }
      });
      if (o) {
        this.hideList = o.hideFunc;
      }
      this.isPickerDisplayed = true;
      Sn(t, un(this.eWrapper));
      t.style.maxHeight = sn(this.popupService.getPopupParent()) + "px";
      t.style.position = "absolute";
      this.popupService.positionPopupUnderComponent({
        type: "ag-list",
        eventSource: this.eWrapper,
        ePopup: t,
        keepWithinBounds: true
      });
      this.listComponent.refreshHighlighted();
      return this.listComponent;
    };
    t.prototype.addOptions = function (e) {
      var t = this;
      e.forEach(function (e) {
        return t.addOption(e);
      });
      return this;
    };
    t.prototype.addOption = function (e) {
      this.listComponent.addOption(e);
      return this;
    };
    t.prototype.setValue = function (t, n, r) {
      return this.value === t ? this : (r || this.listComponent.setValue(t, true), this.listComponent.getValue() === this.getValue() ? this : (this.eDisplayField.innerHTML = this.listComponent.getDisplayValue(), e.prototype.setValue.call(this, t, n)));
    };
    t.prototype.destroy = function () {
      if (this.hideList) {
        this.hideList();
      }
      this.destroyBean(this.listComponent);
      e.prototype.destroy.call(this);
    };
    fp([pe("popupService")], t.prototype, "popupService", undefined);
    fp([le], t.prototype, "init", null);
    return t;
  }(np);
  var mp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var gp = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var _p = function (e) {
    function t(n) {
      var r = e.call(this, n, t.TEMPLATE) || this;
      r.radius = 0;
      r.offsetX = 0;
      r.offsetY = 0;
      return r;
    }
    mp(t, e);
    t.prototype.postConstruct = function () {
      var t = this;
      e.prototype.postConstruct.call(this);
      this.dragListener = {
        eElement: this.eParentCircle,
        dragStartPixels: 0,
        onDragStart: function (e) {
          t.parentCircleRect = t.eParentCircle.getBoundingClientRect();
        },
        onDragging: function (e) {
          return t.calculateAngleDrag(e);
        },
        onDragStop: function () {}
      };
      this.dragService.addDragSource(this.dragListener);
      this.eAngleValue.setLabel("").setLabelWidth(5).setInputWidth(45).setMin(0).setMax(360).setValue("" + this.degrees).onValueChange(function (e) {
        if (!(null != e && "" !== e)) {
          e = "0";
        }
        e = t.eAngleValue.normalizeValue(e);
        var n = parseFloat(e);
        if (n > 180) {
          n -= 360;
        }
        t.setValue(n);
      });
      this.updateNumberInput();
      if (r(this.getValue())) {
        this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());
      }
      this.addManagedListener(this, Es.EVENT_CHANGED, function () {
        if (!t.eAngleValue.getInputElement().contains(document.activeElement)) {
          t.updateNumberInput();
        }
      });
    };
    t.prototype.updateNumberInput = function () {
      var e = this.normalizeNegativeValue(this.getValue());
      this.eAngleValue.setValue(e.toString());
    };
    t.prototype.positionChildCircle = function (e) {
      var t = this.parentCircleRect || {
        width: 24,
        height: 24
      };
      var n = this.eChildCircle;
      var r = t.width / 2;
      var o = t.height / 2;
      n.style.left = r + 8 * Math.cos(e) + "px";
      n.style.top = o + 8 * Math.sin(e) + "px";
    };
    t.prototype.calculatePolar = function () {
      var e = this.offsetX;
      var t = this.offsetY;
      var n = Math.atan2(t, e);
      this.degrees = this.toDegrees(n);
      this.radius = Math.sqrt(e * e + t * t);
      this.positionChildCircle(n);
    };
    t.prototype.calculateCartesian = function () {
      var e = this.toRadians(this.getValue());
      var t = this.getRadius();
      this.setOffsetX(Math.cos(e) * t).setOffsetY(Math.sin(e) * t);
    };
    t.prototype.setOffsetX = function (e) {
      if (this.offsetX !== e) {
        this.offsetX = e;
        this.calculatePolar();
      }
      return this;
    };
    t.prototype.setOffsetY = function (e) {
      if (this.offsetY !== e) {
        this.offsetY = e;
        this.calculatePolar();
      }
      return this;
    };
    t.prototype.calculateAngleDrag = function (e) {
      var t = this.parentCircleRect;
      var n = t.width / 2;
      var r = t.height / 2;
      var o = e.clientX - t.left - n;
      var i = e.clientY - t.top - r;
      var a = Math.atan2(i, o);
      this.setValue(a, true);
    };
    t.prototype.toDegrees = function (e) {
      return e / Math.PI * 180;
    };
    t.prototype.toRadians = function (e) {
      return e / 180 * Math.PI;
    };
    t.prototype.normalizeNegativeValue = function (e) {
      return e < 0 ? 360 + e : e;
    };
    t.prototype.normalizeAngle180 = function (e) {
      if ((e %= 2 * Math.PI) < -Math.PI) {
        e += 2 * Math.PI;
      } else {
        if (e >= Math.PI) {
          e -= 2 * Math.PI;
        }
      }
      return e;
    };
    t.prototype.getRadius = function () {
      return this.radius;
    };
    t.prototype.setRadius = function (e) {
      if (!(this.radius === e)) {
        this.radius = e;
        this.calculateCartesian();
      }
      return this;
    };
    t.prototype.onValueChange = function (e) {
      var t = this;
      this.addManagedListener(this, Es.EVENT_CHANGED, function () {
        e(t.degrees);
      });
      return this;
    };
    t.prototype.getValue = function (e) {
      return e ? this.toRadians(this.degrees) : this.degrees;
    };
    t.prototype.setValue = function (e, t) {
      var n;
      n = t ? e : this.normalizeAngle180(this.toRadians(e));
      e = this.toDegrees(n);
      if (this.degrees !== e) {
        this.degrees = Math.floor(e);
        this.calculateCartesian();
        this.positionChildCircle(n);
        this.dispatchEvent({
          type: Es.EVENT_CHANGED
        });
      }
      return this;
    };
    t.prototype.setWidth = function (e) {
      In(this.getGui(), e);
      return this;
    };
    t.prototype.destroy = function () {
      this.dragService.removeDragSource(this.dragListener);
      e.prototype.destroy.call(this);
    };
    t.TEMPLATE = "<div class=\"ag-angle-select\">\n            <div ref=\"eLabel\"></div>\n            <div class=\"ag-wrapper ag-angle-select-wrapper\">\n                <div ref=\"eAngleSelectField\" class=\"ag-angle-select-field\">\n                    <div ref=\"eParentCircle\" class=\"ag-angle-select-parent-circle\">\n                        <div ref=\"eChildCircle\" class=\"ag-angle-select-child-circle\"></div>\n                    </div>\n                </div>\n                <ag-input-number-field ref=\"eAngleValue\"></ag-input-number-field>\n            </div>\n        </div>";
    gp([uo("eLabel")], t.prototype, "eLabel", undefined);
    gp([uo("eParentCircle")], t.prototype, "eParentCircle", undefined);
    gp([uo("eChildCircle")], t.prototype, "eChildCircle", undefined);
    gp([uo("eAngleValue")], t.prototype, "eAngleValue", undefined);
    gp([pe("dragService")], t.prototype, "dragService", undefined);
    return t;
  }(bs);
  var vp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var bp = function (e) {
    function t(t) {
      return e.call(this, t, "ag-toggle-button") || this;
    }
    vp(t, e);
    t.prototype.setValue = function (t, n) {
      e.prototype.setValue.call(this, t, n);
      Jt(this.getGui(), "ag-selected", this.getValue());
      return this;
    };
    return t;
  }(Ss);
  var yp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ep = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Op = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.cacheItems = [];
      return t;
    }
    yp(t, e);
    t.prototype.postConstruct = function () {
      this.active = this.gridOptionsWrapper.isKeepDetailRows();
      this.maxCacheSize = this.gridOptionsWrapper.getKeepDetailRowsCount();
    };
    t.prototype.addOrDestroy = function (e, t, n) {
      if (!this.active || !e.detail) {
        this.destroyFullWidthRow(n);
      } else {
        var r = this.getCacheItem(e, true);
        switch (t) {
          case Ee.PINNED_LEFT:
            this.destroyFullWidthRow(r.left);
            r.left = n;
            break;
          case Ee.PINNED_RIGHT:
            this.destroyFullWidthRow(r.right);
            r.right = n;
            break;
          default:
            this.destroyFullWidthRow(r.center);
            r.center = n;
        }
        this.cacheItems.sort(function (e, t) {
          return t.lastAccessedTime - e.lastAccessedTime;
        });
        this.purgeCache(this.maxCacheSize);
      }
    };
    t.prototype.getCacheItem = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      for (var n = null, r = 0; r < this.cacheItems.length; r++) {
        var o = this.cacheItems[r];
        if (o.rowNode === e) {
          n = o;
          break;
        }
      }
      if (!n && t) {
        n = {
          rowNode: e
        };
        this.cacheItems.push(n);
      }
      if (n) {
        this.stampCacheItem(n);
      }
      return n;
    };
    t.prototype.stampCacheItem = function (e) {
      e.lastAccessedTime = new Date().getTime();
    };
    t.prototype.destroyFullWidthRow = function (e) {
      this.getContext().destroyBean(e);
    };
    t.prototype.purgeCache = function (e) {
      for (var t = e; t < this.cacheItems.length; t++) {
        var n = this.cacheItems[t];
        this.destroyFullWidthRow(n.center);
        this.destroyFullWidthRow(n.left);
        this.destroyFullWidthRow(n.right);
      }
      if (this.cacheItems.length > e) {
        this.cacheItems.length = e;
      }
    };
    t.prototype.get = function (e, t) {
      if (e.detail) {
        var n;
        var r = this.getCacheItem(e);
        if (r) {
          switch (t) {
            case Ee.PINNED_LEFT:
              if (r.left) {
                n = r.left;
                r.left = undefined;
              }
              break;
            case Ee.PINNED_RIGHT:
              if (r.right) {
                n = r.right;
                r.right = undefined;
              }
              break;
            default:
              if (r.center) {
                n = r.center;
                r.center = undefined;
              }
          }
        }
        return n;
      }
    };
    t.prototype.destroy = function () {
      e.prototype.destroy.call(this);
      this.purgeCache(0);
    };
    Ep([le], t.prototype, "postConstruct", null);
    Ep([ue], t.prototype, "destroy", null);
    return t = Ep([de("detailRowCompCache")], t);
  }(We);
  var wp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Cp = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Tp = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    wp(t, e);
    t.prototype.getFirstRow = function () {
      var e;
      var t = 0;
      if (this.pinnedRowModel.getPinnedTopRowCount()) {
        e = Ee.PINNED_TOP;
      } else {
        if (this.rowModel.getRowCount()) {
          e = null;
          t = this.paginationProxy.getPageFirstRow();
        } else {
          if (this.pinnedRowModel.getPinnedBottomRowCount()) {
            e = Ee.PINNED_BOTTOM;
          }
        }
      }
      return undefined === e ? null : {
        rowIndex: t,
        rowPinned: e
      };
    };
    t.prototype.getLastRow = function () {
      var e;
      var t = null;
      var n = this.pinnedRowModel.getPinnedBottomRowCount();
      var r = this.pinnedRowModel.getPinnedTopRowCount();
      if (n) {
        t = Ee.PINNED_BOTTOM;
        e = n - 1;
      } else {
        if (this.rowModel.getRowCount()) {
          t = null;
          e = this.paginationProxy.getPageLastRow();
        } else {
          if (r) {
            t = Ee.PINNED_TOP;
            e = r - 1;
          }
        }
      }
      return undefined === e ? null : {
        rowIndex: e,
        rowPinned: t
      };
    };
    t.prototype.getRowNode = function (e) {
      switch (e.rowPinned) {
        case Ee.PINNED_TOP:
          return this.pinnedRowModel.getPinnedTopRowData()[e.rowIndex];
        case Ee.PINNED_BOTTOM:
          return this.pinnedRowModel.getPinnedBottomRowData()[e.rowIndex];
        default:
          return this.rowModel.getRow(e.rowIndex);
      }
    };
    t.prototype.sameRow = function (e, t) {
      return !e && !t || !(e && !t || !e && t) && e.rowIndex === t.rowIndex && e.rowPinned == t.rowPinned;
    };
    t.prototype.before = function (e, t) {
      switch (e.rowPinned) {
        case Ee.PINNED_TOP:
          if (t.rowPinned !== Ee.PINNED_TOP) {
            return true;
          }
          break;
        case Ee.PINNED_BOTTOM:
          if (t.rowPinned !== Ee.PINNED_BOTTOM) {
            return false;
          }
          break;
        default:
          if (r(t.rowPinned)) {
            return t.rowPinned !== Ee.PINNED_TOP;
          }
      }
      return e.rowIndex < t.rowIndex;
    };
    Cp([pe("rowModel")], t.prototype, "rowModel", undefined);
    Cp([pe("pinnedRowModel")], t.prototype, "pinnedRowModel", undefined);
    Cp([pe("paginationProxy")], t.prototype, "paginationProxy", undefined);
    return t = Cp([de("rowPositionUtils")], t);
  }(We);
  var Sp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ip = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ap = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Sp(t, e);
    t.prototype.createId = function (e) {
      var t = e.rowIndex;
      var n = e.rowPinned;
      var r = e.column;
      return this.createIdFromValues(t, r, n);
    };
    t.prototype.createIdFromValues = function (e, t, n) {
      return e + "." + (null == n ? "null" : n) + "." + t.getId();
    };
    t.prototype.equals = function (e, t) {
      var n = e.column === t.column;
      var r = e.rowPinned === t.rowPinned;
      var o = e.rowIndex === t.rowIndex;
      return n && r && o;
    };
    return t = Ip([de("cellPositionUtils")], t);
  }(We);
  var jp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Np = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Rp = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    jp(t, e);
    t.prototype.init = function () {
      this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());
      this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());
    };
    t.prototype.isEmpty = function (e) {
      return i(e === Ee.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows);
    };
    t.prototype.isRowsToRender = function (e) {
      return !this.isEmpty(e);
    };
    t.prototype.getRowAtPixel = function (e, t) {
      var n = t === Ee.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
      if (i(n)) {
        return 0;
      }
      for (var r = 0; r < n.length; r++) {
        var o = n[r];
        if (o.rowTop + o.rowHeight - 1 >= e) {
          return r;
        }
      }
      return n.length - 1;
    };
    t.prototype.setPinnedTopRowData = function (e) {
      this.pinnedTopRows = this.createNodesFromData(e, true);
      var t = {
        type: Ke.EVENT_PINNED_ROW_DATA_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(t);
    };
    t.prototype.setPinnedBottomRowData = function (e) {
      this.pinnedBottomRows = this.createNodesFromData(e, false);
      var t = {
        type: Ke.EVENT_PINNED_ROW_DATA_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(t);
    };
    t.prototype.createNodesFromData = function (e, t) {
      var n = this;
      var r = [];
      if (e) {
        var o = 0;
        e.forEach(function (e, i) {
          var a = new Ko();
          n.context.createBean(a);
          a.data = e;
          var s = t ? Ko.ID_PREFIX_TOP_PINNED : Ko.ID_PREFIX_BOTTOM_PINNED;
          a.id = s + i;
          a.rowPinned = t ? Ee.PINNED_TOP : Ee.PINNED_BOTTOM;
          a.setRowTop(o);
          a.setRowHeight(n.gridOptionsWrapper.getRowHeightForNode(a).height);
          a.setRowIndex(i);
          o += a.rowHeight;
          r.push(a);
        });
      }
      return r;
    };
    t.prototype.getPinnedTopRowData = function () {
      return this.pinnedTopRows;
    };
    t.prototype.getPinnedBottomRowData = function () {
      return this.pinnedBottomRows;
    };
    t.prototype.getPinnedTopTotalHeight = function () {
      return this.getTotalHeight(this.pinnedTopRows);
    };
    t.prototype.getPinnedTopRowCount = function () {
      return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
    };
    t.prototype.getPinnedBottomRowCount = function () {
      return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
    };
    t.prototype.getPinnedTopRow = function (e) {
      return this.pinnedTopRows[e];
    };
    t.prototype.getPinnedBottomRow = function (e) {
      return this.pinnedBottomRows[e];
    };
    t.prototype.forEachPinnedTopRow = function (e) {
      if (!i(this.pinnedTopRows)) {
        this.pinnedTopRows.forEach(e);
      }
    };
    t.prototype.forEachPinnedBottomRow = function (e) {
      if (!i(this.pinnedBottomRows)) {
        this.pinnedBottomRows.forEach(e);
      }
    };
    t.prototype.getPinnedBottomTotalHeight = function () {
      return this.getTotalHeight(this.pinnedBottomRows);
    };
    t.prototype.getTotalHeight = function (e) {
      if (!e || 0 === e.length) {
        return 0;
      }
      var t = m(e);
      return t.rowTop + t.rowHeight;
    };
    Np([pe("columnApi")], t.prototype, "columnApi", undefined);
    Np([pe("gridApi")], t.prototype, "gridApi", undefined);
    Np([le], t.prototype, "init", null);
    return t = Np([de("pinnedRowModel")], t);
  }(We);
  var kp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var xp = function (e) {
    this.cellValueChanges = e;
  };
  var Dp = function (e) {
    function t(t, n, r) {
      var o = e.call(this, t) || this;
      o.initialRange = n;
      o.finalRange = r;
      return o;
    }
    kp(t, e);
    return t;
  }(xp);
  var Mp = function () {
    function e(t) {
      this.actionStack = [];
      this.maxStackSize = t || e.DEFAULT_STACK_SIZE;
      this.actionStack = new Array(this.maxStackSize);
    }
    e.prototype.pop = function () {
      return this.actionStack.pop();
    };
    e.prototype.push = function (e) {
      if (e.cellValueChanges && e.cellValueChanges.length > 0) {
        if (this.actionStack.length === this.maxStackSize) {
          this.actionStack.shift();
        }
        this.actionStack.push(e);
      }
    };
    e.prototype.clear = function () {
      this.actionStack = [];
    };
    e.prototype.getCurrentStackSize = function () {
      return this.actionStack.length;
    };
    e.DEFAULT_STACK_SIZE = 10;
    return e;
  }();
  var Lp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Pp = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Bp = function (e) {
    function n() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.cellValueChanges = [];
      t.isCellEditing = false;
      t.isRowEditing = false;
      t.isPasting = false;
      t.isFilling = false;
      t.onCellValueChanged = function (e) {
        if (t.isCellEditing || t.isRowEditing || t.isPasting || t.isFilling) {
          var n = e.rowPinned;
          var r = e.rowIndex;
          var o = e.column;
          var i = e.oldValue;
          var a = e.value;
          var s = {
            rowPinned: n,
            rowIndex: r,
            columnId: o.getColId(),
            newValue: a,
            oldValue: i
          };
          t.cellValueChanges.push(s);
        }
      };
      t.clearStacks = function () {
        t.undoStack.clear();
        t.redoStack.clear();
      };
      return t;
    }
    Lp(n, e);
    n.prototype.init = function () {
      if (this.gridOptionsWrapper.isUndoRedoCellEditing()) {
        var e = this.gridOptionsWrapper.getUndoRedoCellEditingLimit();
        if (!(e <= 0)) {
          this.undoStack = new Mp(e);
          this.redoStack = new Mp(e);
          this.addRowEditingListeners();
          this.addCellEditingListeners();
          this.addPasteListeners();
          this.addFillListeners();
          this.addManagedListener(this.eventService, Ke.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);
          this.addManagedListener(this.eventService, Ke.EVENT_MODEL_UPDATED, this.clearStacks);
          this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);
          this.addManagedListener(this.eventService, Ke.EVENT_NEW_COLUMNS_LOADED, this.clearStacks);
          this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);
          this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);
          this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_MOVED, this.clearStacks);
          this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_PINNED, this.clearStacks);
          this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_VISIBLE, this.clearStacks);
          this.addManagedListener(this.eventService, Ke.EVENT_ROW_DRAG_END, this.clearStacks);
        }
      }
    };
    n.prototype.getCurrentUndoStackSize = function () {
      return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;
    };
    n.prototype.getCurrentRedoStackSize = function () {
      return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;
    };
    n.prototype.undo = function () {
      if (this.undoStack) {
        var e = this.undoStack.pop();
        if (e && e.cellValueChanges) {
          this.processAction(e, function (e) {
            return e.oldValue;
          });
          if (e instanceof Dp) {
            this.processRangeAndCellFocus(e.cellValueChanges, e.initialRange);
          } else {
            this.processRangeAndCellFocus(e.cellValueChanges);
          }
          this.redoStack.push(e);
        }
      }
    };
    n.prototype.redo = function () {
      if (this.redoStack) {
        var e = this.redoStack.pop();
        if (e && e.cellValueChanges) {
          this.processAction(e, function (e) {
            return e.newValue;
          });
          if (e instanceof Dp) {
            this.processRangeAndCellFocus(e.cellValueChanges, e.finalRange);
          } else {
            this.processRangeAndCellFocus(e.cellValueChanges);
          }
          this.undoStack.push(e);
        }
      }
    };
    n.prototype.processAction = function (e, t) {
      var n = this;
      e.cellValueChanges.forEach(function (e) {
        var r = e.rowIndex;
        var o = e.rowPinned;
        var i = e.columnId;
        var a = {
          rowIndex: r,
          rowPinned: o
        };
        var s = n.getRowNode(a);
        if (s.displayed) {
          s.setDataValue(i, t(e));
        }
      });
    };
    n.prototype.processRangeAndCellFocus = function (e, t) {
      var n;
      if (t) {
        var r = t.startRow;
        var o = t.endRow;
        n = {
          rowPinned: r.rowPinned,
          rowIndex: r.rowIndex,
          columnId: t.startColumn.getColId()
        };
        this.setLastFocusedCell(n);
        var i = {
          rowStartIndex: r.rowIndex,
          rowStartPinned: r.rowPinned,
          rowEndIndex: o.rowIndex,
          rowEndPinned: o.rowPinned,
          columnStart: t.startColumn,
          columns: t.columns
        };
        this.gridApi.addCellRange(i);
      } else {
        var a = e[0];
        var s = {
          rowIndex: a.rowIndex,
          rowPinned: a.rowPinned
        };
        var c = this.getRowNode(s);
        n = {
          rowPinned: a.rowPinned,
          rowIndex: c.rowIndex,
          columnId: a.columnId
        };
        this.setLastFocusedCell(n);
      }
    };
    n.prototype.setLastFocusedCell = function (e) {
      var n = e.rowIndex;
      var r = e.columnId;
      var o = e.rowPinned;
      this.gridApi.ensureIndexVisible(n);
      this.gridApi.ensureColumnVisible(r);
      if (Oe.isRegistered(exports.ModuleNames.RangeSelectionModule)) {
        this.gridApi.clearRangeSelection();
      }
      this.focusController.setFocusedCell(n, r, o, true);
    };
    n.prototype.addRowEditingListeners = function () {
      var e = this;
      this.addManagedListener(this.eventService, Ke.EVENT_ROW_EDITING_STARTED, function () {
        e.isRowEditing = true;
      });
      this.addManagedListener(this.eventService, Ke.EVENT_ROW_EDITING_STOPPED, function () {
        var t = new xp(e.cellValueChanges);
        e.pushActionsToUndoStack(t);
        e.isRowEditing = false;
      });
    };
    n.prototype.addCellEditingListeners = function () {
      var e = this;
      this.addManagedListener(this.eventService, Ke.EVENT_CELL_EDITING_STARTED, function () {
        e.isCellEditing = true;
      });
      this.addManagedListener(this.eventService, Ke.EVENT_CELL_EDITING_STOPPED, function () {
        e.isCellEditing = false;
        if (!e.isRowEditing && !e.isPasting && !e.isFilling) {
          var t = new xp(e.cellValueChanges);
          e.pushActionsToUndoStack(t);
        }
      });
    };
    n.prototype.addPasteListeners = function () {
      var e = this;
      this.addManagedListener(this.eventService, Ke.EVENT_PASTE_START, function () {
        e.isPasting = true;
      });
      this.addManagedListener(this.eventService, Ke.EVENT_PASTE_END, function () {
        var t = new xp(e.cellValueChanges);
        e.pushActionsToUndoStack(t);
        e.isPasting = false;
      });
    };
    n.prototype.addFillListeners = function () {
      var e = this;
      this.addManagedListener(this.eventService, Ke.EVENT_FILL_START, function () {
        e.isFilling = true;
      });
      this.addManagedListener(this.eventService, Ke.EVENT_FILL_END, function (t) {
        var n = new Dp(e.cellValueChanges, t.initialRange, t.finalRange);
        e.pushActionsToUndoStack(n);
        e.isFilling = false;
      });
    };
    n.prototype.pushActionsToUndoStack = function (e) {
      this.undoStack.push(e);
      this.cellValueChanges = [];
      this.redoStack.clear();
    };
    n.prototype.getRowNode = function (e) {
      switch (e.rowPinned) {
        case Ee.PINNED_TOP:
          return this.pinnedRowModel.getPinnedTopRowData()[e.rowIndex];
        case Ee.PINNED_BOTTOM:
          return this.pinnedRowModel.getPinnedBottomRowData()[e.rowIndex];
        default:
          return this.rowModel.getRow(e.rowIndex);
      }
    };
    Pp([pe("focusController")], n.prototype, "focusController", undefined);
    Pp([pe("gridApi")], n.prototype, "gridApi", undefined);
    Pp([pe("rowModel")], n.prototype, "rowModel", undefined);
    Pp([pe("pinnedRowModel")], n.prototype, "pinnedRowModel", undefined);
    Pp([le], n.prototype, "init", null);
    return n = Pp([de("undoRedoService")], n);
  }(We);
  var Fp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Gp = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Up = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.componentsMappedByName = {};
      return t;
    }
    Fp(t, e);
    t.prototype.setupComponents = function (e) {
      var t = this;
      if (e) {
        e.forEach(function (e) {
          return t.addComponent(e);
        });
      }
    };
    t.prototype.addComponent = function (e) {
      var t = e.componentName.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase().toUpperCase();
      this.componentsMappedByName[t] = e.componentClass;
    };
    t.prototype.getComponentClass = function (e) {
      return this.componentsMappedByName[e];
    };
    return t = Gp([de("agStackComponentsRegistry")], t);
  }(We);
  var Wp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Hp = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Vp = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Wp(t, e);
    t.prototype.findHeader = function (e, t) {
      var n;
      var r;
      var o;
      if (e.column instanceof Se) {
        r = "getDisplayedGroup" + t;
        n = this.columnController[r](e.column);
      } else {
        o = "getDisplayedCol" + t;
        n = this.columnController[o](e.column);
      }
      if (n) {
        return {
          column: n,
          headerRowIndex: e.headerRowIndex
        };
      }
    };
    t.prototype.findColAtEdgeForHeaderRow = function (e, t) {
      var n = this.columnController.getAllDisplayedColumns();
      var r = n["start" === t ? 0 : n.length - 1];
      if (r) {
        var o = this.headerNavigationService.getHeaderContainer(r.getPinned()).getRowComps()[e];
        return (o && o.getType()) == Xa.COLUMN_GROUP ? {
          headerRowIndex: e,
          column: this.columnController.getColumnGroupAtLevel(r, e)
        } : {
          headerRowIndex: o ? e : -1,
          column: r
        };
      }
    };
    Hp([pe("columnController")], t.prototype, "columnController", undefined);
    Hp([pe("headerNavigationService")], t.prototype, "headerNavigationService", undefined);
    return t = Hp([de("headerPositionUtils")], t);
  }(We);
  var zp = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Yp = function () {
    function e() {}
    e.prototype.buildColumnDefs = function (e, t, n) {
      var r = this;
      var o = [];
      var i = {};
      e.forEach(function (e) {
        for (var a = true, s = r.createDefFromColumn(e, t, n), c = e.getOriginalParent(); c;) {
          var l = null;
          if (c.isPadding()) {
            c = c.getOriginalParent();
          } else {
            var u = i[c.getGroupId()];
            if (u) {
              u.children.push(s);
              a = false;
              break;
            }
            if (l = r.createDefFromGroup(c)) {
              l.children = [s];
              i[l.groupId] = l;
              s = l;
              c = c.getOriginalParent();
            }
          }
        }
        if (a) {
          o.push(s);
        }
      });
      return o;
    };
    e.prototype.createDefFromGroup = function (e) {
      var t = x(e.getColGroupDef(), ["children"]);
      if (t) {
        t.groupId = e.getGroupId();
      }
      return t;
    };
    e.prototype.createDefFromColumn = function (e, t, n) {
      var r = x(e.getColDef());
      r.colId = e.getColId();
      r.width = e.getActualWidth();
      r.rowGroup = e.isRowGroupActive();
      r.rowGroupIndex = e.isRowGroupActive() ? t.indexOf(e) : null;
      r.pivot = e.isPivotActive();
      r.pivotIndex = e.isPivotActive() ? n.indexOf(e) : null;
      r.aggFunc = e.isValueActive() ? e.getAggFunc() : null;
      r.hide = !e.isVisible() || undefined;
      r.pinned = e.isPinned() ? e.getPinned() : null;
      r.sort = e.getSort() ? e.getSort() : null;
      r.sortIndex = null != e.getSortIndex() ? e.getSortIndex() : null;
      return r;
    };
    return e = zp([de("columnDefFactory")], e);
  }();
  var Kp = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var qp = function () {
    function e() {}
    e.prototype.getInitialRowClasses = function (e) {
      var t = [];
      if (r(e.extraCssClass)) {
        t.push(e.extraCssClass);
      }
      t.push("ag-row");
      t.push(e.rowFocused ? "ag-row-focus" : "ag-row-no-focus");
      if (e.fadeRowIn) {
        t.push("ag-opacity-zero");
      }
      t.push(e.rowIsEven ? "ag-row-even" : "ag-row-odd");
      if (e.rowNode.isRowPinned()) {
        t.push("ag-row-pinned");
      }
      if (e.rowNode.isSelected()) {
        t.push("ag-row-selected");
      }
      if (e.rowNode.footer) {
        t.push("ag-row-footer");
      }
      t.push("ag-row-level-" + e.rowLevel);
      if (e.rowNode.stub) {
        t.push("ag-row-loading");
      }
      if (e.fullWidthRow) {
        t.push("ag-full-width-row");
      }
      if (e.expandable) {
        t.push("ag-row-group");
        t.push(e.rowNode.expanded ? "ag-row-group-expanded" : "ag-row-group-contracted");
      }
      if (e.rowNode.dragging) {
        t.push("ag-row-dragging");
      }
      w(t, this.processClassesFromGridOptions(e.rowNode, e.scope));
      w(t, this.preProcessRowClassRules(e.rowNode, e.scope));
      t.push(e.printLayout ? "ag-row-position-relative" : "ag-row-position-absolute");
      if (e.firstRowOnPage) {
        t.push("ag-row-first");
      }
      if (e.lastRowOnPage) {
        t.push("ag-row-last");
      }
      if (e.fullWidthRow) {
        if (e.pinned === Ee.PINNED_LEFT) {
          t.push("ag-cell-last-left-pinned");
        }
        if (e.pinned === Ee.PINNED_RIGHT) {
          t.push("ag-cell-first-right-pinned");
        }
      }
      return t;
    };
    e.prototype.processClassesFromGridOptions = function (e, t) {
      var n = [];
      var r = function (e) {
        if ("string" === typeof e) {
          n.push(e);
        } else {
          if (Array.isArray(e)) {
            e.forEach(function (e) {
              return n.push(e);
            });
          }
        }
      };
      var o = this.gridOptionsWrapper.getRowClass();
      if (o) {
        if ("function" === typeof o) {
          console.warn("AG Grid: rowClass should not be a function, please use getRowClass instead");
          return [];
        }
        r(o);
      }
      var i = this.gridOptionsWrapper.getRowClassFunc();
      if (i) {
        r(i({
          data: e.data,
          node: e,
          rowIndex: e.rowIndex,
          $scope: t,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext()
        }));
      }
      return n;
    };
    e.prototype.preProcessRowClassRules = function (e, t) {
      var n = [];
      this.processRowClassRules(e, t, function (e) {
        n.push(e);
      }, function (e) {});
      return n;
    };
    e.prototype.processRowClassRules = function (e, t, n, r) {
      var o = {
        data: e.data,
        node: e,
        rowIndex: e.rowIndex,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        $scope: t,
        context: this.gridOptionsWrapper.getContext()
      };
      this.stylingService.processClassRules(this.gridOptionsWrapper.rowClassRules(), o, n, r);
    };
    e.prototype.calculateRowLevel = function (e) {
      return e.group ? e.level : e.parent ? e.parent.level + 1 : 0;
    };
    Kp([pe("stylingService")], e.prototype, "stylingService", undefined);
    Kp([pe("gridOptionsWrapper")], e.prototype, "gridOptionsWrapper", undefined);
    return e = Kp([de("rowCssClassCalculator")], e);
  }();
  var Xp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Qp = function (e) {
    function t(n) {
      var r = e.call(this) || this;
      r.state = t.STATE_WAITING_TO_LOAD;
      r.version = 0;
      r.id = n;
      return r;
    }
    Xp(t, e);
    t.prototype.getId = function () {
      return this.id;
    };
    t.prototype.load = function () {
      this.state = t.STATE_LOADING;
      this.loadFromDatasource();
    };
    t.prototype.getVersion = function () {
      return this.version;
    };
    t.prototype.setStateWaitingToLoad = function () {
      this.version++;
      this.state = t.STATE_WAITING_TO_LOAD;
    };
    t.prototype.getState = function () {
      return this.state;
    };
    t.prototype.pageLoadFailed = function (e) {
      if (this.isRequestMostRecentAndLive(e)) {
        this.state = t.STATE_FAILED;
        this.processServerFail();
      }
      this.dispatchLoadCompleted(false);
    };
    t.prototype.success = function (e, t) {
      this.successCommon(e, t);
    };
    t.prototype.pageLoaded = function (e, t, n) {
      this.successCommon(e, {
        rowData: t,
        rowCount: n
      });
    };
    t.prototype.isRequestMostRecentAndLive = function (e) {
      var t = e === this.version;
      var n = this.isAlive();
      return t && n;
    };
    t.prototype.successCommon = function (e, n) {
      this.dispatchLoadCompleted();
      if (this.isRequestMostRecentAndLive(e)) {
        this.state = t.STATE_LOADED;
        this.processServerResult(n);
      }
    };
    t.prototype.dispatchLoadCompleted = function (e) {
      if (undefined === e) {
        e = true;
      }
      var n = {
        type: t.EVENT_LOAD_COMPLETE,
        success: e,
        block: this
      };
      this.dispatchEvent(n);
    };
    t.EVENT_LOAD_COMPLETE = "loadComplete";
    t.STATE_WAITING_TO_LOAD = "needsLoading";
    t.STATE_LOADING = "loading";
    t.STATE_LOADED = "loaded";
    t.STATE_FAILED = "failed";
    return t;
  }(We);
  var Zp = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Jp = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var $p = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var ef = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.activeBlockLoadsCount = 0;
      t.blocks = [];
      t.active = true;
      return t;
    }
    var n;
    Zp(t, e);
    n = t;
    t.prototype.postConstruct = function () {
      this.maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
      var e = this.gridOptionsWrapper.getBlockLoadDebounceMillis();
      if (e && e > 0) {
        this.checkBlockToLoadDebounce = qr.debounce(this.performCheckBlocksToLoad.bind(this), e);
      }
    };
    t.prototype.setBeans = function (e) {
      this.logger = e.create("RowNodeBlockLoader");
    };
    t.prototype.addBlock = function (e) {
      this.blocks.push(e);
      e.addEventListener(Qp.EVENT_LOAD_COMPLETE, this.loadComplete.bind(this));
      this.checkBlockToLoad();
    };
    t.prototype.removeBlock = function (e) {
      qr.removeFromArray(this.blocks, e);
    };
    t.prototype.destroy = function () {
      e.prototype.destroy.call(this);
      this.active = false;
    };
    t.prototype.loadComplete = function () {
      this.activeBlockLoadsCount--;
      this.checkBlockToLoad();
      if (0 == this.activeBlockLoadsCount) {
        this.dispatchEvent({
          type: n.BLOCK_LOADER_FINISHED_EVENT
        });
      }
    };
    t.prototype.checkBlockToLoad = function () {
      if (this.checkBlockToLoadDebounce) {
        this.checkBlockToLoadDebounce();
      } else {
        this.performCheckBlocksToLoad();
      }
    };
    t.prototype.performCheckBlocksToLoad = function () {
      if (this.active) {
        this.printCacheStatus();
        if (null != this.maxConcurrentRequests && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
          this.logger.log("checkBlockToLoad: max loads exceeded");
        } else {
          var e = null;
          this.blocks.forEach(function (t) {
            if (t.getState() === Qp.STATE_WAITING_TO_LOAD) {
              e = t;
            }
          });
          if (e) {
            e.load();
            this.activeBlockLoadsCount++;
            this.printCacheStatus();
          }
        }
      }
    };
    t.prototype.getBlockState = function () {
      var e = {};
      this.blocks.forEach(function (t) {
        var n = t.getBlockStateJson();
        var r = n.id;
        var o = n.state;
        e[r] = o;
      });
      return e;
    };
    t.prototype.printCacheStatus = function () {
      if (this.logger.isLogging()) {
        this.logger.log("printCacheStatus: activePageLoadsCount = " + this.activeBlockLoadsCount + ", blocks = " + JSON.stringify(this.getBlockState()));
      }
    };
    t.prototype.isLoading = function () {
      return this.activeBlockLoadsCount > 0;
    };
    t.BLOCK_LOADER_FINISHED_EVENT = "blockLoaderFinished";
    Jp([le], t.prototype, "postConstruct", null);
    Jp([$p(0, me("loggerFactory"))], t.prototype, "setBeans", null);
    return t = n = Jp([de("rowNodeBlockLoader")], t);
  }(We);
  var tf = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var nf = function () {
    function e() {}
    e.prototype.doFullSort = function (e, t) {
      var n = e.map(function (e, t) {
        return {
          currentPos: t,
          rowNode: e
        };
      });
      n.sort(this.compareRowNodes.bind(this, t));
      return n.map(function (e) {
        return e.rowNode;
      });
    };
    e.prototype.compareRowNodes = function (e, t, n) {
      for (var r = t.rowNode, o = n.rowNode, i = 0, a = e.length; i < a; i++) {
        var s = e[i];
        var c = s.sort === Ee.SORT_DESC;
        var l = this.getValue(r, s.column);
        var u = this.getValue(o, s.column);
        var d = undefined;
        var p = s.column.getColDef().comparator;
        if (0 !== (d = p ? p(l, u, r, o, c) : qr.defaultComparator(l, u, this.gridOptionsWrapper.isAccentedSort()))) {
          return s.sort === Ee.SORT_ASC ? d : -1 * d;
        }
      }
      return t.currentPos - n.currentPos;
    };
    e.prototype.getValue = function (e, t) {
      return this.valueService.getValue(t, e);
    };
    tf([pe("gridOptionsWrapper")], e.prototype, "gridOptionsWrapper", undefined);
    tf([pe("valueService")], e.prototype, "valueService", undefined);
    return e = tf([de("rowNodeSorter")], e);
  }();
  var rf = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var of = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var af = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.ready = false;
      t.readyCallbacks = [];
      return t;
    }
    rf(t, e);
    t.prototype.checkReady = function () {
      this.ready = null != this.gridCompCon && null != this.gridBodyCon && null != this.centerRowContainerCon && null != this.leftRowContainerCon && null != this.rightRowContainerCon && null != this.bottomCenterRowContainerCon && null != this.bottomLeftRowContainerCon && null != this.bottomRightRowContainerCon && null != this.topCenterRowContainerCon && null != this.topLeftRowContainerCon && null != this.topRightRowContainerCon && null != this.fakeHScrollCon && null != this.headerRootComp;
      if (this.ready) {
        var e = this.createReadyParams();
        this.readyCallbacks.forEach(function (t) {
          return t(e);
        });
        this.readyCallbacks.length = 0;
      }
    };
    t.prototype.whenReady = function (e) {
      if (this.ready) {
        e(this.createReadyParams());
      } else {
        this.readyCallbacks.push(e);
      }
    };
    t.prototype.createReadyParams = function () {
      return {
        centerRowContainerCon: this.centerRowContainerCon,
        leftRowContainerCon: this.leftRowContainerCon,
        rightRowContainerCon: this.rightRowContainerCon,
        bottomCenterRowContainerCon: this.bottomCenterRowContainerCon,
        bottomLeftRowContainerCon: this.bottomLeftRowContainerCon,
        bottomRightRowContainerCon: this.bottomRightRowContainerCon,
        topCenterRowContainerCon: this.topCenterRowContainerCon,
        topLeftRowContainerCon: this.topLeftRowContainerCon,
        topRightRowContainerCon: this.topRightRowContainerCon,
        fakeHScrollCon: this.fakeHScrollCon,
        gridBodyCon: this.gridBodyCon,
        gridCompCon: this.gridCompCon,
        headerRootComp: this.headerRootComp
      };
    };
    t.prototype.registerFakeHScrollCon = function (e) {
      this.fakeHScrollCon = e;
      this.checkReady();
    };
    t.prototype.registerHeaderRootComp = function (e) {
      this.headerRootComp = e;
      this.checkReady();
    };
    t.prototype.registerCenterRowContainerCon = function (e) {
      this.centerRowContainerCon = e;
      this.checkReady();
    };
    t.prototype.registerLeftRowContainerCon = function (e) {
      this.leftRowContainerCon = e;
      this.checkReady();
    };
    t.prototype.registerRightRowContainerCon = function (e) {
      this.rightRowContainerCon = e;
      this.checkReady();
    };
    t.prototype.registerTopCenterRowContainerCon = function (e) {
      this.topCenterRowContainerCon = e;
      this.checkReady();
    };
    t.prototype.registerTopLeftRowContainerCon = function (e) {
      this.topLeftRowContainerCon = e;
      this.checkReady();
    };
    t.prototype.registerTopRightRowContainerCon = function (e) {
      this.topRightRowContainerCon = e;
      this.checkReady();
    };
    t.prototype.registerBottomCenterRowContainerCon = function (e) {
      this.bottomCenterRowContainerCon = e;
      this.checkReady();
    };
    t.prototype.registerBottomLeftRowContainerCon = function (e) {
      this.bottomLeftRowContainerCon = e;
      this.checkReady();
    };
    t.prototype.registerBottomRightRowContainerCon = function (e) {
      this.bottomRightRowContainerCon = e;
      this.checkReady();
    };
    t.prototype.registerGridBodyController = function (e) {
      this.gridBodyCon = e;
      this.checkReady();
    };
    t.prototype.registerGridCompController = function (e) {
      this.gridCompCon = e;
      this.checkReady();
    };
    t.prototype.getFakeHScrollCon = function () {
      return this.fakeHScrollCon;
    };
    t.prototype.getHeaderRootComp = function () {
      return this.headerRootComp;
    };
    t.prototype.getGridCompController = function () {
      return this.gridCompCon;
    };
    t.prototype.getCenterRowContainerCon = function () {
      return this.centerRowContainerCon;
    };
    t.prototype.getTopCenterRowContainerCon = function () {
      return this.topCenterRowContainerCon;
    };
    t.prototype.getBottomCenterRowContainerCon = function () {
      return this.bottomCenterRowContainerCon;
    };
    t.prototype.getGridBodyController = function () {
      return this.gridBodyCon;
    };
    return t = of([de("controllersService")], t);
  }(We);
  var sf = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var cf = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var lf = function (e) {
    function t() {
      return e.call(this) || this;
    }
    sf(t, e);
    t.prototype.setView = function (e, t, n) {
      this.view = e;
      this.eViewport = t;
      this.eContainer = n;
      this.addManagedListener(this.eventService, Ke.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
      this.onScrollVisibilityChanged();
      var r = this.setFakeHScrollSpacerWidths.bind(this);
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, r);
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, r);
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_DOM_LAYOUT, r);
      this.setFakeHScrollSpacerWidths();
      this.controllersService.registerFakeHScrollCon(this);
    };
    t.prototype.postConstruct = function () {
      this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
    };
    t.prototype.onScrollVisibilityChanged = function () {
      this.setScrollVisible();
      this.setFakeHScrollSpacerWidths();
    };
    t.prototype.setFakeHScrollSpacerWidths = function () {
      var e = this.scrollVisibleService.isVerticalScrollShowing();
      var t = this.columnController.getDisplayedColumnsRightWidth();
      var n = !this.enableRtl && e;
      var r = this.gridOptionsWrapper.getScrollbarWidth();
      if (n) {
        t += r;
      }
      this.view.setRightSpacerFixedWidth(t);
      this.view.includeRightSpacerScrollerCss("ag-scroller-corner", t <= r);
      var o = this.columnController.getDisplayedColumnsLeftWidth();
      if (this.enableRtl && e) {
        o += r;
      }
      this.view.setLeftSpacerFixedWidth(o);
      this.view.includeLeftSpacerScrollerCss("ag-scroller-corner", o <= r);
    };
    t.prototype.setScrollVisible = function () {
      var e = this.scrollVisibleService.isHorizontalScrollShowing();
      var t = zt();
      var n = this.gridOptionsWrapper.isSuppressHorizontalScroll();
      var r = e && this.gridOptionsWrapper.getScrollbarWidth() || 0;
      var o = n ? 0 : 0 === r && t ? 15 : r;
      var i = Mt() && e;
      this.view.setInvisibleStyles(t);
      this.view.setHeight(o);
      this.view.setViewportHeight(o + (i ? 1 : 0));
      this.view.setContainerHeight(o);
    };
    t.prototype.getViewport = function () {
      return this.eViewport;
    };
    t.prototype.getContainer = function () {
      return this.eContainer;
    };
    cf([pe("scrollVisibleService")], t.prototype, "scrollVisibleService", undefined);
    cf([pe("columnController")], t.prototype, "columnController", undefined);
    cf([pe("controllersService")], t.prototype, "controllersService", undefined);
    cf([le], t.prototype, "postConstruct", null);
    return t;
  }(We);
  var uf = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var df = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var pf = function (e) {
    function t() {
      return e.call(this, t.TEMPLATE) || this;
    }
    uf(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      var t = {
        setHeight: function (t) {
          return An(e.getGui(), t);
        },
        setContainerHeight: function (t) {
          return An(e.eContainer, t);
        },
        setViewportHeight: function (t) {
          return An(e.eViewport, t);
        },
        setRightSpacerFixedWidth: function (t) {
          return In(e.eRightSpacer, t);
        },
        setLeftSpacerFixedWidth: function (t) {
          return In(e.eLeftSpacer, t);
        },
        setInvisibleStyles: function (t) {
          return Jt(e.getGui(), "ag-invisible-scrollbar", t);
        },
        includeLeftSpacerScrollerCss: function (t, n) {
          return Jt(e.eLeftSpacer, t, n);
        },
        includeRightSpacerScrollerCss: function (t, n) {
          return Jt(e.eRightSpacer, t, n);
        }
      };
      this.controller = this.createManagedBean(new lf());
      this.controller.setView(t, this.eViewport, this.eContainer);
      this.createManagedBean(new fc(function (t) {
        return e.eContainer.style.width = t + "px";
      }));
    };
    t.TEMPLATE = "<div class=\"ag-body-horizontal-scroll\" aria-hidden=\"true\">\n            <div class=\"ag-horizontal-left-spacer\" ref=\"eLeftSpacer\"></div>\n            <div class=\"ag-body-horizontal-scroll-viewport\" ref=\"eViewport\">\n                <div class=\"ag-body-horizontal-scroll-container\" ref=\"eContainer\"></div>\n            </div>\n            <div class=\"ag-horizontal-right-spacer\" ref=\"eRightSpacer\"></div>\n        </div>";
    df([uo("eLeftSpacer")], t.prototype, "eLeftSpacer", undefined);
    df([uo("eRightSpacer")], t.prototype, "eRightSpacer", undefined);
    df([uo("eViewport")], t.prototype, "eViewport", undefined);
    df([uo("eContainer")], t.prototype, "eContainer", undefined);
    df([le], t.prototype, "postConstruct", null);
    return t;
  }(so);
  var ff = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var hf = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var mf = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    ff(t, e);
    t.prototype.postConstruct = function () {
      var e = this.checkContainerWidths.bind(this);
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_CHANGED, e);
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, e);
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_DOM_LAYOUT, e);
    };
    t.prototype.checkContainerWidths = function () {
      var e = this.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_PRINT;
      var t = e ? 0 : this.columnController.getDisplayedColumnsLeftWidth();
      var n = e ? 0 : this.columnController.getDisplayedColumnsRightWidth();
      if (t != this.leftWidth) {
        this.leftWidth = t;
        this.eventService.dispatchEvent({
          type: Ke.EVENT_LEFT_PINNED_WIDTH_CHANGED
        });
      }
      if (n != this.rightWidth) {
        this.rightWidth = n;
        this.eventService.dispatchEvent({
          type: Ke.EVENT_RIGHT_PINNED_WIDTH_CHANGED
        });
      }
    };
    t.prototype.getPinnedRightWidth = function () {
      return this.rightWidth;
    };
    t.prototype.getPinnedLeftWidth = function () {
      return this.leftWidth;
    };
    hf([pe("columnController")], t.prototype, "columnController", undefined);
    hf([le], t.prototype, "postConstruct", null);
    return t = hf([de("pinnedWidthService")], t);
  }(We);
  var gf = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var _f = function (e) {
    function n(t, n, r, o) {
      var i = e.call(this) || this;
      i.cellComps = {};
      i.container = n;
      i.beans = r;
      i.rowNode = t.getRowNode();
      i.pinned = o;
      i.controller = t;
      var a = i.createTemplate();
      switch (i.setTemplate(a), i.afterRowAttached(), o) {
        case Ee.PINNED_LEFT:
          t.setLeftRowComp(i);
          break;
        case Ee.PINNED_RIGHT:
          t.setRightRowComp(i);
          break;
        default:
          if (t.isFullWidth() && !r.gridOptionsWrapper.isEmbedFullWidthRows()) {
            t.setFullWidthRowComp(i);
          } else {
            t.setCenterRowComp(i);
          }
      }
      if (t.isFullWidth()) {
        i.createFullWidthRowCell();
      } else {
        i.onColumnChanged();
        i.controller.refreshAriaLabel(i.getGui(), !!i.rowNode.isSelected());
      }
      return i;
    }
    gf(n, e);
    n.prototype.createFullWidthRowCell = function () {
      var e = this;
      var n = this.controller.createFullWidthParams(this.getGui(), this.pinned);
      var r = function (t) {
        if (e.isAlive()) {
          var n = t.getGui();
          e.getGui().appendChild(n);
          if (e.controller.getRowType() === Ra.FullWidthDetail) {
            e.controller.setupDetailRowAutoHeight(n);
          }
          e.setFullWidthRowComp(t);
        } else {
          e.beans.context.destroyBean(t);
        }
      };
      var o = this.beans.detailRowCompCache.get(this.rowNode, this.pinned);
      if (o) {
        r(o);
      } else {
        var i = Ya.get(this.controller.getRowType());
        var a = za.get(this.controller.getRowType());
        var s = this.beans.userComponentFactory.newFullWidthCellRenderer(n, i, a);
        if (s) {
          s.then(r);
        } else {
          var c = Oe.isRegistered(exports.ModuleNames.MasterDetailModule);
          if ("agDetailCellRenderer" !== a || c) {
            console.error("AG Grid: fullWidthCellRenderer " + a + " not found");
          } else {
            console.warn("AG Grid: cell renderer agDetailCellRenderer (for master detail) not found. Did you forget to include the master detail module?");
          }
        }
      }
    };
    n.prototype.onColumnChanged = function () {
      var e = this;
      var t = this.controller.getColsForRowComp(this.pinned);
      var n = G({}, this.cellComps);
      t.forEach(function (t) {
        var r = t.getId();
        var o = e.cellComps[r];
        if (o && o.getColumn() !== t) {
          e.destroyCells([o]);
          o = null;
        }
        if (null == o) {
          e.newCellComp(t);
        } else {
          n[r] = null;
        }
      });
      var r = B(n).filter(function (t) {
        return !!t && e.isCellEligibleToBeRemoved(t);
      });
      this.destroyCells(r);
      this.ensureDomOrder(t);
    };
    n.prototype.ensureDomOrder = function (e) {
      var t = this;
      if (this.beans.gridOptionsWrapper.isEnsureDomOrder()) {
        var n = [];
        e.forEach(function (e) {
          var r = t.cellComps[e.getColId()];
          if (r) {
            n.push(r.getGui());
          }
        });
        En(this.getGui(), n);
      }
    };
    n.prototype.isCellEligibleToBeRemoved = function (e) {
      if (e.getColumn().getPinned() != this.pinned) {
        return true;
      }
      var t = e.isEditing();
      var n = this.beans.focusController.isCellFocused(e.getCellPosition());
      if (t || n) {
        var r = e.getColumn();
        return !(this.beans.columnController.getAllDisplayedColumns().indexOf(r) >= 0);
      }
      return true;
    };
    n.prototype.newCellComp = function (e) {
      var t = new rs(this.controller.getScope(), this.beans, e, this.rowNode, this.controller, false, this.controller.isPrintLayout(), this.getGui(), this.controller.isEditing());
      this.cellComps[e.getId()] = t;
      this.getGui().appendChild(t.getGui());
    };
    n.prototype.getCellComp = function (e) {
      return this.cellComps[e];
    };
    n.prototype.getCellCompSpanned = function (e) {
      var t = this;
      var n = Object.keys(this.cellComps).map(function (e) {
        return t.cellComps[e];
      }).filter(function (t) {
        return t && -1 !== t.getColSpanningList().indexOf(e);
      });
      return n.length ? n[0] : null;
    };
    n.prototype.destroy = function () {
      e.prototype.destroy.call(this);
      this.destroyAllCells();
    };
    n.prototype.destroyAllCells = function () {
      var e = B(this.cellComps).filter(function (e) {
        return null != e;
      });
      this.destroyCells(e);
    };
    n.prototype.getContainer = function () {
      return this.container;
    };
    n.prototype.setFullWidthRowComp = function (e) {
      var t = this;
      if (this.fullWidthRowComponent) {
        console.error("AG Grid - should not be setting fullWidthRowComponent twice");
      }
      this.fullWidthRowComponent = e;
      this.addDestroyFunc(function () {
        t.beans.detailRowCompCache.addOrDestroy(t.rowNode, t.pinned, e);
        t.fullWidthRowComponent = null;
      });
    };
    n.prototype.getFullWidthRowComp = function () {
      return this.fullWidthRowComponent;
    };
    n.prototype.createTemplate = function () {
      var e = this.controller;
      var t = [];
      var n = this.rowNode.rowHeight;
      var r = e.getInitialRowClasses(this.pinned).join(" ");
      var o = nt(this.rowNode.id);
      var i = e.preProcessStylesFromGridOptions();
      var a = e.getRowBusinessKey();
      var s = nt(a);
      var c = e.getInitialRowTopStyle();
      var l = this.rowNode.getRowIndexString();
      var u = this.beans.headerNavigationService.getHeaderRowCount();
      t.push("<div");
      t.push(" role=\"row\"");
      t.push(" row-index=\"" + l + "\" aria-rowindex=\"" + (u + this.rowNode.rowIndex + 1) + "\"");
      t.push(o ? " row-id=\"" + o + "\"" : "");
      t.push(a ? " row-business-key=\"" + s + "\"" : "");
      t.push(" comp-id=\"" + this.getCompId() + "\"");
      t.push(" class=\"" + r + "\"");
      if (e.isFullWidth()) {
        t.push(" tabindex=\"-1\"");
      }
      if (this.beans.gridOptionsWrapper.isRowSelection()) {
        t.push(" aria-selected=\"" + (this.rowNode.isSelected() ? "true" : "false") + "\"");
      }
      if (this.rowNode.group) {
        t.push(" aria-expanded=" + (this.rowNode.expanded ? "true" : "false"));
      }
      t.push(" style=\"height: " + n + "px; " + c + " " + i + "\">");
      t.push("</div>");
      return t.join("");
    };
    n.prototype.afterRowAttached = function () {
      this.addDomData();
      var e = this.getGui();
      if (this.controller.isUseAnimationFrameForCreate()) {
        this.beans.taskQueue.createTask(this.controller.addHoverFunctionality.bind(this.controller, e), this.rowNode.rowIndex, "createTasksP2");
      } else {
        this.controller.addHoverFunctionality(e);
      }
      this.controller.executeProcessRowPostCreateFunc();
    };
    n.prototype.addDomData = function () {
      var e = this;
      var t = this.beans.gridOptionsWrapper;
      t.setDomData(this.getGui(), qa.DOM_DATA_KEY_RENDERED_ROW, this.controller);
      this.addDestroyFunc(function () {
        return t.setDomData(e.getGui(), qa.DOM_DATA_KEY_RENDERED_ROW, null);
      });
    };
    n.prototype.destroyCells = function (e) {
      var t = this;
      e.forEach(function (e) {
        if (e) {
          var n = e.getColumn().getId();
          if (t.cellComps[n] === e) {
            e.detach();
            e.destroy();
            t.cellComps[n] = null;
          }
        }
      });
    };
    n.prototype.forEachCellComp = function (e) {
      R(this.cellComps, function (t, n) {
        if (n) {
          e(n);
        }
      });
    };
    return n;
  }(so);
  var vf = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var bf = function () {
    return (bf = Object.assign || function (e) {
      for (var t, n = 1, r = arguments.length; n < r; n++) {
        for (var o in t = arguments[n]) if (Object.prototype.hasOwnProperty.call(t, o)) {
          e[o] = t[o];
        }
      }
      return e;
    }).apply(this, arguments);
  };
  var yf = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ef = function (e) {
    function t() {
      var t = e.call(this, function () {
        var e;
        var t = no.getAttribute("name");
        var n = ll.get(t);
        var r = ul.get(t);
        var o = dl.get(t);
        switch (t) {
          case Bc.LEFT:
          case Bc.RIGHT:
          case Bc.FULL_WIDTH:
          case Bc.TOP_LEFT:
          case Bc.TOP_RIGHT:
          case Bc.TOP_FULL_WITH:
          case Bc.BOTTOM_LEFT:
          case Bc.BOTTOM_RIGHT:
          case Bc.BOTTOM_FULL_WITH:
            e = "<div class=\"" + n + "\" ref=\"eContainer\" role=\"presentation\" unselectable=\"on\"></div>";
            break;
          case Bc.CENTER:
            e = "<div class=\"" + o + "\" ref=\"eWrapper\" role=\"presentation\" unselectable=\"on\">\n                <div class=\"" + r + "\" ref=\"eViewport\" role=\"presentation\">\n                    <div class=\"" + n + "\" ref=\"eContainer\" role=\"rowgroup\" unselectable=\"on\"></div>\n                </div>\n            </div>";
            break;
          case Bc.TOP_CENTER:
          case Bc.BOTTOM_CENTER:
            e = "<div class=\"" + r + "\" ref=\"eViewport\" role=\"presentation\" unselectable=\"on\">\n                <div class=\"" + n + "\" ref=\"eContainer\" role=\"presentation\" unselectable=\"on\"></div>\n            </div>";
            break;
          default:
            return "";
        }
        return e;
      }()) || this;
      t.renderedRows = {};
      t.name = no.getAttribute("name");
      return t;
    }
    vf(t, e);
    t.prototype.postConstruct = function () {
      var e = this;
      this.embedFullWidthRows = this.gridOptionsWrapper.isEmbedFullWidthRows();
      var t = {
        setViewportHeight: function (t) {
          return e.eViewport.style.height = t;
        }
      };
      this.createManagedBean(new pl(this.name)).setView(t, this.eContainer, this.eViewport, this.eWrapper);
      this.listenOnDomOrder();
      this.stopHScrollOnPinnedRows();
      this.addManagedListener(this.eventService, Ke.EVENT_DISPLAYED_ROWS_CHANGED, this.onDisplayedRowsChanged.bind(this));
    };
    t.prototype.forContainers = function (e, t) {
      if (e.indexOf(this.name) >= 0) {
        t();
      }
    };
    t.prototype.stopHScrollOnPinnedRows = function () {
      var e = this;
      this.forContainers([Bc.TOP_CENTER, Bc.BOTTOM_CENTER], function () {
        e.addManagedListener(e.eViewport, "scroll", function () {
          return e.eViewport.scrollLeft = 0;
        });
      });
    };
    t.prototype.listenOnDomOrder = function () {
      var e = this;
      var t = function () {
        return e.domOrder = e.gridOptionsWrapper.isEnsureDomOrder();
      };
      this.gridOptionsWrapper.addEventListener(ka.PROP_DOM_LAYOUT, t);
      t();
    };
    t.prototype.getViewportElement = function () {
      return this.eViewport;
    };
    t.prototype.clearLastPlacedElement = function () {
      this.lastPlacedElement = null;
    };
    t.prototype.appendRow = function (e) {
      if (this.domOrder) {
        On(this.eContainer, e, this.lastPlacedElement);
      } else {
        this.eContainer.appendChild(e);
      }
      this.lastPlacedElement = e;
    };
    t.prototype.ensureDomOrder = function (e) {
      if (this.domOrder) {
        yn(this.eContainer, e, this.lastPlacedElement);
        this.lastPlacedElement = e;
      }
    };
    t.prototype.removeRow = function (e) {
      this.eContainer.removeChild(e);
    };
    t.prototype.onDisplayedRowsChanged = function () {
      var e = this;
      var t = this.name === Bc.TOP_FULL_WITH || this.name === Bc.BOTTOM_FULL_WITH || this.name === Bc.FULL_WIDTH;
      var n = bf({}, this.renderedRows);
      this.renderedRows = {};
      this.clearLastPlacedElement();
      this.getRowCons().filter(function (n) {
        var r = n.isFullWidth();
        var o = e.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_PRINT;
        var i = e.embedFullWidthRows || o;
        return t ? !i && r : i || !r;
      }).forEach(function (t) {
        var r = t.getInstanceId();
        var o = n[r];
        if (o) {
          e.renderedRows[r] = o;
          delete n[r];
          e.ensureDomOrder(o.getGui());
        } else {
          var i = e.newRowComp(t);
          e.renderedRows[r] = i;
          e.appendRow(i.getGui());
        }
      });
      B(n).forEach(function (t) {
        return e.removeRow(t.getGui());
      });
    };
    t.prototype.getRowCons = function () {
      switch (this.name) {
        case Bc.TOP_CENTER:
        case Bc.TOP_LEFT:
        case Bc.TOP_RIGHT:
        case Bc.TOP_FULL_WITH:
          return this.rowRenderer.getTopRowCons();
        case Bc.BOTTOM_CENTER:
        case Bc.BOTTOM_LEFT:
        case Bc.BOTTOM_RIGHT:
        case Bc.BOTTOM_FULL_WITH:
          return this.rowRenderer.getBottomRowCons();
        default:
          return this.rowRenderer.getRowCons();
      }
    };
    t.prototype.newRowComp = function (e) {
      var t;
      switch (this.name) {
        case Bc.BOTTOM_LEFT:
        case Bc.TOP_LEFT:
        case Bc.LEFT:
          t = Ee.PINNED_LEFT;
          break;
        case Bc.BOTTOM_RIGHT:
        case Bc.TOP_RIGHT:
        case Bc.RIGHT:
          t = Ee.PINNED_RIGHT;
          break;
        default:
          t = null;
      }
      return new _f(e, this, this.beans, t);
    };
    yf([pe("rowRenderer")], t.prototype, "rowRenderer", undefined);
    yf([pe("beans")], t.prototype, "beans", undefined);
    yf([uo("eViewport")], t.prototype, "eViewport", undefined);
    yf([uo("eContainer")], t.prototype, "eContainer", undefined);
    yf([uo("eWrapper")], t.prototype, "eWrapper", undefined);
    yf([le], t.prototype, "postConstruct", null);
    return t;
  }(so);
  var Of = function () {
    function e(e, t, n) {
      if (t) {
        this.gridOptions = t;
        new wf().create(e, t, function (t) {
          var n = new Ql(e);
          t.createBean(n);
        }, n);
      } else {
        console.error("AG Grid: no gridOptions provided to the grid");
      }
    }
    e.prototype.destroy = function () {
      if (this.gridOptions && this.gridOptions.api) {
        this.gridOptions.api.destroy();
      }
    };
    return e;
  }();
  var wf = function () {
    function e() {}
    e.prototype.create = function (e, n, r, o) {
      var i = !!n.debug;
      var a = this.getRegisteredModules(o);
      var s = this.createBeansList(n.rowModelType, a);
      var c = this.createProvidedBeans(e, n, o);
      if (s) {
        var l = {
          providedBeanInstances: c,
          beanClasses: s,
          debug: i
        };
        var u = new Bl("AG Grid", function () {
          return n.debug;
        });
        var d = new Bl("Context", function () {
          return l.debug;
        });
        var p = new se(l, d);
        this.registerModuleUserComponents(p, a);
        this.registerStackComponents(p, a);
        r(p);
        this.setColumnsAndData(p);
        this.dispatchGridReadyEvent(p, n);
        var f = Oe.isRegistered(exports.ModuleNames.EnterpriseCoreModule);
        u.log("initialised successfully, enterprise = " + f);
      }
    };
    e.prototype.registerStackComponents = function (e, t) {
      var n = this.createAgStackComponentsList(t);
      e.getBean("agStackComponentsRegistry").setupComponents(n);
    };
    e.prototype.getRegisteredModules = function (e) {
      var t = e ? e.modules : null;
      var n = Oe.getRegisteredModules();
      var r = [];
      var o = {};
      function i(e, t) {
        var n;
        if (!o[(n = t).moduleName]) {
          o[n.moduleName] = true;
          r.push(n);
          Oe.register(n, e);
        }
        if (t.dependantModules) {
          t.dependantModules.forEach(i.bind(null, e));
        }
      }
      if (t) {
        t.forEach(i.bind(null, true));
      }
      if (n) {
        n.forEach(i.bind(null, !Oe.isPackageBased()));
      }
      return r;
    };
    e.prototype.registerModuleUserComponents = function (e, t) {
      var n = e.getBean("userComponentRegistry");
      this.extractModuleEntity(t, function (e) {
        return e.userComponents ? e.userComponents : [];
      }).forEach(function (e) {
        n.registerDefaultComponent(e.componentName, e.componentClass);
      });
    };
    e.prototype.createProvidedBeans = function (e, t, n) {
      var r = n ? n.frameworkOverrides : null;
      if (o(r)) {
        r = new vu();
      }
      var i = {
        gridOptions: t,
        eGridDiv: e,
        $scope: n ? n.$scope : null,
        $compile: n ? n.$compile : null,
        globalEventListener: n ? n.globalEventListener : null,
        frameworkOverrides: r
      };
      if (n && n.providedBeanInstances) {
        G(i, n.providedBeanInstances);
      }
      return i;
    };
    e.prototype.createAgStackComponentsList = function (e) {
      var t = [{
        componentName: "AgCheckbox",
        componentClass: Ss
      }, {
        componentName: "AgRadioButton",
        componentClass: gu
      }, {
        componentName: "AgToggleButton",
        componentClass: bp
      }, {
        componentName: "AgInputTextField",
        componentClass: zd
      }, {
        componentName: "AgInputTextArea",
        componentClass: Kd
      }, {
        componentName: "AgInputNumberField",
        componentClass: ap
      }, {
        componentName: "AgInputRange",
        componentClass: cp
      }, {
        componentName: "AgSelect",
        componentClass: hp
      }, {
        componentName: "AgSlider",
        componentClass: Qd
      }, {
        componentName: "AgAngleSelect",
        componentClass: _p
      }, {
        componentName: "AgColorPicker",
        componentClass: op
      }, {
        componentName: "AgGridBody",
        componentClass: gl
      }, {
        componentName: "AgHeaderRoot",
        componentClass: gc
      }, {
        componentName: "AgPagination",
        componentClass: Ad
      }, {
        componentName: "AgOverlayWrapper",
        componentClass: Dd
      }, {
        componentName: "AgGroupComponent",
        componentClass: Pd
      }, {
        componentName: "AgPanel",
        componentClass: Gd
      }, {
        componentName: "AgDialog",
        componentClass: Hd
      }, {
        componentName: "AgRowContainer",
        componentClass: Ef
      }, {
        componentName: "AgFakeHorizontalScroll",
        componentClass: pf
      }];
      var n = this.extractModuleEntity(e, function (e) {
        return e.agStackComponents ? e.agStackComponents : [];
      });
      return t = t.concat(n);
    };
    e.prototype.createBeansList = function (e, t) {
      var n = this.getRowModelClass(e, t);
      if (n) {
        var r = [n, rd, Tp, Ap, Vp, Fu, bl, Ca, Ju, td, Rd, gi, bd, Td, Vl, Rp, nu, Rt, ye, ka, xl, Pa, yc, dt, lc, Lu, ls, wl, Ye, Sl, Xu, md, Wu, wc, Pl, At, Ul, $l, yi, Fa, Nl, cu, ld, du, hu, Cu, Eu, iu, Iu, Nu, Od, xu, zu, pd, Op, Bp, Up, Yp, qp, ef, nf, af, mf];
        var o = this.extractModuleEntity(t, function (e) {
          return e.beans ? e.beans : [];
        });
        r.push.apply(r, o);
        var i = [];
        r.forEach(function (e) {
          if (i.indexOf(e) < 0) {
            i.push(e);
          }
        });
        return i;
      }
    };
    e.prototype.extractModuleEntity = function (e, t) {
      return [].concat.apply([], e.map(t));
    };
    e.prototype.setColumnsAndData = function (e) {
      var t = e.getBean("gridOptionsWrapper");
      var n = e.getBean("columnController");
      var r = t.getColumnDefs();
      n.setColumnDefs(r || [], "gridInitializing");
      e.getBean("rowModel").start();
    };
    e.prototype.dispatchGridReadyEvent = function (e, t) {
      var n = e.getBean("eventService");
      var r = {
        type: Ke.EVENT_GRID_READY,
        api: t.api,
        columnApi: t.columnApi
      };
      n.dispatchEvent(r);
    };
    e.prototype.getRowModelClass = function (e, n) {
      if (!e) {
        e = Ee.ROW_MODEL_TYPE_CLIENT_SIDE;
      }
      var o = {};
      n.forEach(function (e) {
        R(e.rowModels, function (e, t) {
          o[e] = t;
        });
      });
      var i = o[e];
      if (r(i)) {
        return i;
      }
      if (e === Ee.ROW_MODEL_TYPE_INFINITE) {
        console.error("AG Grid: Row Model \"Infinite\" not found. Please ensure the " + exports.ModuleNames.InfiniteRowModelModule + " is registered.';");
      }
      console.error("AG Grid: could not find matching row model for rowModelType " + e);
      if (e === Ee.ROW_MODEL_TYPE_VIEWPORT) {
        console.error("AG Grid: Row Model \"Viewport\" not found. Please ensure the AG Grid Enterprise Module " + exports.ModuleNames.ViewportRowModelModule + " is registered.';");
      }
      if (e === Ee.ROW_MODEL_TYPE_SERVER_SIDE) {
        console.error("AG Grid: Row Model \"Server Side\" not found. Please ensure the AG Grid Enterprise Module " + exports.ModuleNames.ServerSideRowModelModule + " is registered.';");
      }
      if (e === Ee.ROW_MODEL_TYPE_CLIENT_SIDE) {
        console.error("AG Grid: Row Model \"Client Side\" not found. Please ensure the " + exports.ModuleNames.ClientSideRowModelModule + " is registered.';");
      }
    };
    return e;
  }();
  function Cf(e, t, n, r) {
    var o;
    var i = r.agGrid;
    if (o = t.$eval(i)) {
      var a = e[0];
      var s = new Of(a, o, {
        $scope: t,
        $compile: n
      });
      var c = i + ".quickFilterText";
      var l = t.$watch(c, function (e) {
        o.api.setQuickFilter(e);
      });
      t.$on("$destroy", function () {
        l();
        if (s) {
          s.destroy();
        }
        s = null;
      });
    } else {
      console.warn("WARNING - grid options for AG Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");
    }
  }
  var Tf = false;
  var Sf;
  var If = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Af = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var jf = function (e) {
    function t(n) {
      var r = e.call(this, t.getTemplate(n.cssClass)) || this;
      r.items = [];
      r.params = n;
      if (n.items) {
        n.items.forEach(function (e) {
          return r.addItem(e);
        });
      }
      return r;
    }
    If(t, e);
    t.getTemplate = function (e) {
      return "<div class=\"ag-tabs " + e + "\">\n            <div ref=\"eHeader\" role=\"menu\" class=\"ag-tabs-header " + (e ? e + "-header" : "") + "\"></div>\n            <div ref=\"eBody\" role=\"presentation\" class=\"ag-tabs-body " + (e ? e + "-body" : "") + "\"></div>\n        </div>";
    };
    t.prototype.handleKeyDown = function (e) {
      switch (e.keyCode) {
        case _o.RIGHT:
        case _o.LEFT:
          if (!this.eHeader.contains(document.activeElement)) {
            return;
          }
          var t = this.items.indexOf(this.activeItem),
            n = e.keyCode === _o.RIGHT ? Math.min(t + 1, this.items.length - 1) : Math.max(t - 1, 0);
          if (t === n) {
            return;
          }
          e.preventDefault();
          var r = this.items[n];
          this.showItemWrapper(r);
          r.eHeaderButton.focus();
          break;
        case _o.UP:
        case _o.DOWN:
          e.stopPropagation();
      }
    };
    t.prototype.onTabKeyDown = function (e) {
      if (!e.defaultPrevented) {
        var t = this.focusController;
        var n = this.eHeader;
        var r = this.eBody;
        var o = this.activeItem;
        var i = document.activeElement;
        e.preventDefault();
        if (n.contains(i)) {
          t.focusInto(r, e.shiftKey);
        } else if (t.isFocusUnderManagedComponent(r)) {
          o.eHeaderButton.focus();
        } else {
          var a = t.findNextFocusableElement(r, false, e.shiftKey);
          if (a) {
            a.focus();
          } else {
            o.eHeaderButton.focus();
          }
        }
      }
    };
    t.prototype.setAfterAttachedParams = function (e) {
      this.afterAttachedParams = e;
    };
    t.prototype.getMinDimensions = function () {
      var e = this.getGui().cloneNode(true);
      var t = e.querySelector("[ref=\"eBody\"]");
      e.style.position = "fixed";
      this.getGui().appendChild(e);
      var n = 0;
      var r = 0;
      this.items.forEach(function (o) {
        hn(t);
        var i = o.tabbedItem.bodyPromise.resolveNow(null, function (e) {
          return e.cloneNode(true);
        });
        if (null != i) {
          t.appendChild(i);
          if (n < e.offsetWidth) {
            n = e.offsetWidth;
          }
          if (r < e.offsetHeight) {
            r = e.offsetHeight;
          }
        }
      });
      this.getGui().removeChild(e);
      return {
        height: r,
        width: n
      };
    };
    t.prototype.showFirstItem = function () {
      if (this.items.length > 0) {
        this.showItemWrapper(this.items[0]);
      }
    };
    t.prototype.addItem = function (e) {
      var t = document.createElement("span");
      t.setAttribute("tabIndex", "-1");
      t.setAttribute("role", "menuitem");
      t.appendChild(e.title);
      Qt(t, "ag-tab");
      this.eHeader.appendChild(t);
      or(t, e.titleLabel);
      var n = {
        tabbedItem: e,
        eHeaderButton: t
      };
      this.items.push(n);
      t.addEventListener("click", this.showItemWrapper.bind(this, n));
    };
    t.prototype.showItem = function (e) {
      var t = u(this.items, function (t) {
        return t.tabbedItem === e;
      });
      if (t) {
        this.showItemWrapper(t);
      }
    };
    t.prototype.showItemWrapper = function (e) {
      var t = this;
      if (this.params.onItemClicked) {
        this.params.onItemClicked({
          item: e.tabbedItem
        });
      }
      if (this.activeItem !== e) {
        hn(this.eBody);
        e.tabbedItem.bodyPromise.then(function (n) {
          t.eBody.appendChild(n);
          var r = !t.focusController.isKeyboardMode();
          t.focusController.focusInto(t.eBody, false, r);
          if (e.tabbedItem.afterAttachedCallback) {
            e.tabbedItem.afterAttachedCallback(t.afterAttachedParams);
          }
        });
        if (this.activeItem) {
          Zt(this.activeItem.eHeaderButton, "ag-tab-selected");
        }
        Qt(e.eHeaderButton, "ag-tab-selected");
        this.activeItem = e;
      } else {
        ie(this.params.onActiveItemClicked);
      }
    };
    Af([uo("eHeader")], t.prototype, "eHeader", undefined);
    Af([uo("eBody")], t.prototype, "eBody", undefined);
    return t;
  }(So);
  (Sf = exports.ServerSideTransactionResultStatus || (exports.ServerSideTransactionResultStatus = {})).StoreNotFound = "StoreNotFound";
  Sf.StoreLoading = "StoreLoading";
  Sf.StoreWaitingToLoad = "StoreWaitingToLoad";
  Sf.StoreLoadingFailed = "StoreLoadingFailed";
  Sf.StoreWrongType = "StoreWrongType";
  Sf.Applied = "Applied";
  Sf.Cancelled = "Cancelled";
  var Nf;
  var Rf = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var kf = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var xf = function (e) {
    function t(n, r) {
      if (undefined === n) {
        n = "default";
      }
      if (undefined === r) {
        r = "listbox";
      }
      var o = e.call(this, t.getTemplate(n), true) || this;
      o.cssIdentifier = n;
      o.ariaRole = r;
      o.renderedRows = new Map();
      o.rowHeight = 20;
      o.isDestroyed = false;
      return o;
    }
    Rf(t, e);
    t.prototype.postConstruct = function () {
      this.addScrollListener();
      this.rowHeight = this.getItemHeight();
      this.addResizeObserver();
      e.prototype.postConstruct.call(this);
    };
    t.prototype.addResizeObserver = function () {
      var e = this.drawVirtualRows.bind(this);
      var t = this.resizeObserverService.observeResize(this.getGui(), e);
      this.addDestroyFunc(t);
    };
    t.prototype.focusInnerElement = function (e) {
      this.focusRow(e ? this.model.getRowCount() - 1 : 0);
    };
    t.prototype.onFocusIn = function (t) {
      e.prototype.onFocusIn.call(this, t);
      var n = t.target;
      if ($t(n, "ag-virtual-list-item")) {
        this.lastFocusedRowIndex = nr(n) - 1;
      }
    };
    t.prototype.onFocusOut = function (t) {
      e.prototype.onFocusOut.call(this, t);
      if (!this.getFocusableElement().contains(t.relatedTarget)) {
        this.lastFocusedRowIndex = null;
      }
    };
    t.prototype.handleKeyDown = function (e) {
      switch (e.keyCode) {
        case _o.UP:
        case _o.DOWN:
          if (this.navigate(e.keyCode === _o.UP)) {
            e.preventDefault();
          }
      }
    };
    t.prototype.onTabKeyDown = function (e) {
      if (this.navigate(e.shiftKey)) {
        e.preventDefault();
      } else {
        this.focusController.focusInto(this.getGui(), !e.shiftKey);
      }
    };
    t.prototype.navigate = function (e) {
      if (null == this.lastFocusedRowIndex) {
        return false;
      }
      var t = this.lastFocusedRowIndex + (e ? -1 : 1);
      return !(t < 0 || t >= this.model.getRowCount()) && (this.focusRow(t), true);
    };
    t.prototype.getLastFocusedRow = function () {
      return this.lastFocusedRowIndex;
    };
    t.prototype.focusRow = function (e) {
      var t = this;
      this.ensureIndexVisible(e);
      window.setTimeout(function () {
        var n = t.renderedRows.get(e);
        if (n) {
          n.eDiv.focus();
        }
      }, 10);
    };
    t.prototype.getComponentAt = function (e) {
      var t = this.renderedRows.get(e);
      return t && t.rowComponent;
    };
    t.getTemplate = function (e) {
      return "\n            <div class=\"ag-virtual-list-viewport ag-" + e + "-virtual-list-viewport\" role=\"listbox\">\n                <div class=\"ag-virtual-list-container ag-" + e + "-virtual-list-container\" ref=\"eContainer\"></div>\n            </div>";
    };
    t.prototype.getItemHeight = function () {
      return this.gridOptionsWrapper.getListItemHeight();
    };
    t.prototype.ensureIndexVisible = function (e) {
      var t = this.model.getRowCount();
      if ("number" !== typeof e || e < 0 || e >= t) {
        console.warn("invalid row index for ensureIndexVisible: " + e);
      } else {
        var n = e * this.rowHeight;
        var r = n + this.rowHeight;
        var o = this.getGui();
        var i = o.scrollTop;
        var a = o.offsetHeight;
        var s = i + a < r;
        if (i > n) {
          o.scrollTop = n;
        } else if (s) {
          var c = r - a;
          o.scrollTop = c;
        }
      }
    };
    t.prototype.setComponentCreator = function (e) {
      this.componentCreator = e;
    };
    t.prototype.getRowHeight = function () {
      return this.rowHeight;
    };
    t.prototype.getScrollTop = function () {
      return this.getGui().scrollTop;
    };
    t.prototype.setRowHeight = function (e) {
      this.rowHeight = e;
      this.refresh();
    };
    t.prototype.refresh = function () {
      var e = this;
      if (null != this.model && !this.isDestroyed) {
        var t = this.model.getRowCount();
        this.eContainer.style.height = t * this.rowHeight + "px";
        oe(function () {
          return e.eContainer.clientHeight >= t * e.rowHeight;
        }, function () {
          if (!e.isDestroyed) {
            e.clearVirtualRows();
            e.drawVirtualRows();
          }
        });
      }
    };
    t.prototype.clearVirtualRows = function () {
      var e = this;
      this.renderedRows.forEach(function (t, n) {
        return e.removeRow(n);
      });
    };
    t.prototype.drawVirtualRows = function () {
      var e = this.getGui();
      var t = e.scrollTop;
      var n = t + e.offsetHeight;
      var r = Math.floor(t / this.rowHeight);
      var o = Math.floor(n / this.rowHeight);
      this.ensureRowsRendered(r, o);
    };
    t.prototype.ensureRowsRendered = function (e, t) {
      var n = this;
      this.renderedRows.forEach(function (r, o) {
        if ((o < e || o > t) && o !== n.lastFocusedRowIndex) {
          n.removeRow(o);
        }
      });
      for (var r = e; r <= t; r++) {
        if (!this.renderedRows.has(r)) {
          if (r < this.model.getRowCount()) {
            this.insertRow(r);
          }
        }
      }
    };
    t.prototype.insertRow = function (e) {
      var t = this;
      var n = this.model.getRow(e);
      var r = document.createElement("div");
      Qt(r, "ag-virtual-list-item");
      Qt(r, "ag-" + this.cssIdentifier + "-virtual-list-item");
      r.setAttribute("role", "tree" === this.ariaRole ? "treeitem" : "option");
      ur(r, this.model.getRowCount());
      dr(r, e + 1);
      r.setAttribute("tabindex", "-1");
      if ("function" === typeof this.model.isRowSelected) {
        var o = this.model.isRowSelected(e);
        yr(r, !!o);
        Er(r, o);
      }
      r.style.height = this.rowHeight + "px";
      r.style.top = this.rowHeight * e + "px";
      var i = this.componentCreator(n, r);
      i.addGuiEventListener("focusin", function () {
        return t.lastFocusedRowIndex = e;
      });
      r.appendChild(i.getGui());
      if (this.renderedRows.has(e - 1)) {
        this.renderedRows.get(e - 1).eDiv.insertAdjacentElement("afterend", r);
      } else {
        if (this.renderedRows.has(e + 1)) {
          this.renderedRows.get(e + 1).eDiv.insertAdjacentElement("beforebegin", r);
        } else {
          this.eContainer.appendChild(r);
        }
      }
      this.renderedRows.set(e, {
        rowComponent: i,
        eDiv: r
      });
    };
    t.prototype.removeRow = function (e) {
      var t = this.renderedRows.get(e);
      this.eContainer.removeChild(t.eDiv);
      this.destroyBean(t.rowComponent);
      this.renderedRows.delete(e);
    };
    t.prototype.addScrollListener = function () {
      var e = this;
      this.addGuiEventListener("scroll", function () {
        return e.drawVirtualRows();
      });
    };
    t.prototype.setModel = function (e) {
      this.model = e;
    };
    t.prototype.destroy = function () {
      if (!this.isDestroyed) {
        this.clearVirtualRows();
        this.isDestroyed = true;
        e.prototype.destroy.call(this);
      }
    };
    kf([pe("resizeObserverService")], t.prototype, "resizeObserverService", undefined);
    kf([uo("eContainer")], t.prototype, "eContainer", undefined);
    return t;
  }(So);
  (Nf = exports.ServerSideStoreType || (exports.ServerSideStoreType = {})).Full = "full";
  Nf.Partial = "partial";
  var Df;
  var Mf;
  var Lf = function () {
    function e() {}
    e.prototype.wrap = function (e, t, n, r, o) {
      var i = this;
      if (undefined === n) {
        n = [];
      }
      var a = this.createWrapper(e, r, o);
      t.forEach(function (e) {
        i.createMethod(a, e, true);
      });
      n.forEach(function (e) {
        i.createMethod(a, e, false);
      });
      return a;
    };
    e.prototype.createMethod = function (e, t, n) {
      e.addMethod(t, this.createMethodProxy(e, t, n));
    };
    e.prototype.createMethodProxy = function (e, t, n) {
      return function () {
        return e.hasMethod(t) ? e.callMethod(t, arguments) : (n && console.warn("AG Grid: Framework component is missing the method " + t + "()"), null);
      };
    };
    return e;
  }();
  (Df = exports.ChartType || (exports.ChartType = {})).Column = "column";
  Df.GroupedColumn = "groupedColumn";
  Df.StackedColumn = "stackedColumn";
  Df.NormalizedColumn = "normalizedColumn";
  Df.Bar = "bar";
  Df.GroupedBar = "groupedBar";
  Df.StackedBar = "stackedBar";
  Df.NormalizedBar = "normalizedBar";
  Df.Line = "line";
  Df.Scatter = "scatter";
  Df.Bubble = "bubble";
  Df.Pie = "pie";
  Df.Doughnut = "doughnut";
  Df.Area = "area";
  Df.StackedArea = "stackedArea";
  Df.NormalizedArea = "normalizedArea";
  Df.Histogram = "histogram";
  (Mf = exports.LegendPosition || (exports.LegendPosition = {})).Top = "top";
  Mf.Right = "right";
  Mf.Bottom = "bottom";
  Mf.Left = "left";
  var Pf = "undefined" === typeof e ? {} : e;
  Pf.HTMLElement = "undefined" === typeof HTMLElement ? {} : HTMLElement;
  Pf.HTMLButtonElement = "undefined" === typeof HTMLButtonElement ? {} : HTMLButtonElement;
  Pf.HTMLSelectElement = "undefined" === typeof HTMLSelectElement ? {} : HTMLSelectElement;
  Pf.HTMLInputElement = "undefined" === typeof HTMLInputElement ? {} : HTMLInputElement;
  Pf.Node = "undefined" === typeof Node ? {} : Node;
  Pf.MouseEvent = "undefined" === typeof MouseEvent ? {} : MouseEvent;
  var Bf;
  var Ff = function () {
    for (var e = 0, t = 0, n = arguments.length; t < n; t++) {
      e += arguments[t].length;
    }
    var r = Array(e);
    var o = 0;
    for (t = 0; t < n; t++) {
      for (var i = arguments[t], a = 0, s = i.length; a < s; a++, o++) {
        r[o] = i[a];
      }
    }
    return r;
  };
  var Gf = function () {
    function e(t, n, r, o, i, a, s, c) {
      this.nextId = 0;
      this.allNodesMap = {};
      this.rootNode = t;
      this.gridOptionsWrapper = n;
      this.context = r;
      this.eventService = o;
      this.columnController = i;
      this.gridApi = a;
      this.columnApi = s;
      this.selectionController = c;
      this.rootNode.group = true;
      this.rootNode.level = -1;
      this.rootNode.id = e.ROOT_NODE_ID;
      this.rootNode.allLeafChildren = [];
      this.rootNode.childrenAfterGroup = [];
      this.rootNode.childrenAfterSort = [];
      this.rootNode.childrenAfterFilter = [];
      this.postConstruct();
    }
    e.prototype.postConstruct = function () {
      this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();
      this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();
      this.doingTreeData = this.gridOptionsWrapper.isTreeData();
      this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
    };
    e.prototype.getCopyOfNodesMap = function () {
      return qr.cloneObject(this.allNodesMap);
    };
    e.prototype.getRowNode = function (e) {
      return this.allNodesMap[e];
    };
    e.prototype.setRowData = function (t) {
      this.rootNode.childrenAfterFilter = null;
      this.rootNode.childrenAfterGroup = null;
      this.rootNode.childrenAfterSort = null;
      this.rootNode.childrenMapped = null;
      this.rootNode.updateHasChildren();
      this.nextId = 0;
      this.allNodesMap = {};
      if (!t) {
        this.rootNode.allLeafChildren = [];
        return void (this.rootNode.childrenAfterGroup = []);
      }
      this.rootNode.allLeafChildren = this.recursiveFunction(t, this.rootNode, e.TOP_LEVEL);
    };
    e.prototype.updateRowData = function (e, t) {
      var n = {
        remove: [],
        update: [],
        add: []
      };
      var r = [];
      this.executeRemove(e, n, r);
      this.executeUpdate(e, n, r);
      this.executeAdd(e, n);
      this.updateSelection(r);
      if (t) {
        qr.sortRowNodesByOrder(this.rootNode.allLeafChildren, t);
      }
      return n;
    };
    e.prototype.updateSelection = function (e) {
      var t = e.length > 0;
      if (t) {
        e.forEach(function (e) {
          e.setSelected(false, false, true);
        });
      }
      this.selectionController.updateGroupsFromChildrenSelections();
      if (t) {
        var n = {
          type: Ke.EVENT_SELECTION_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(n);
      }
    };
    e.prototype.executeAdd = function (t, n) {
      var r = this;
      var o = t.add;
      var i = t.addIndex;
      if (!qr.missingOrEmpty(o)) {
        var a = o.map(function (t) {
          return r.createNode(t, r.rootNode, e.TOP_LEVEL);
        });
        if ("number" === typeof i && i >= 0) {
          var s = this.rootNode.allLeafChildren;
          var c = s.slice(0, i);
          var l = s.slice(i, s.length);
          this.rootNode.allLeafChildren = Ff(c, a, l);
        } else {
          this.rootNode.allLeafChildren = Ff(this.rootNode.allLeafChildren, a);
        }
        n.add = a;
      }
    };
    e.prototype.executeRemove = function (e, t, n) {
      var r = this;
      var o = e.remove;
      if (!qr.missingOrEmpty(o)) {
        var i = {};
        o.forEach(function (e) {
          var o = r.lookupRowNode(e);
          if (o) {
            if (o.isSelected()) {
              n.push(o);
            }
            o.clearRowTopAndRowIndex();
            i[o.id] = true;
            delete r.allNodesMap[o.id];
            t.remove.push(o);
          }
        });
        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (e) {
          return !i[e.id];
        });
      }
    };
    e.prototype.executeUpdate = function (t, n, r) {
      var o = this;
      var i = t.update;
      if (!qr.missingOrEmpty(i)) {
        i.forEach(function (t) {
          var i = o.lookupRowNode(t);
          if (i) {
            i.updateData(t);
            if (!i.selectable && i.isSelected()) {
              r.push(i);
            }
            o.setMasterForRow(i, t, e.TOP_LEVEL, false);
            n.update.push(i);
          }
        });
      }
    };
    e.prototype.lookupRowNode = function (e) {
      var t;
      var n = this.gridOptionsWrapper.getRowNodeIdFunc();
      if (qr.exists(n)) {
        var r = n(e);
        if (!(t = this.allNodesMap[r])) {
          console.error("AG Grid: could not find row id=" + r + ", data item was not found for this id");
          return null;
        }
      } else if (!(t = qr.find(this.rootNode.allLeafChildren, function (t) {
        return t.data === e;
      }))) {
        console.error("AG Grid: could not find data item as object was not found", e);
        return null;
      }
      return t;
    };
    e.prototype.recursiveFunction = function (e, t, n) {
      var r = this;
      if ("string" !== typeof e) {
        var o = [];
        e.forEach(function (e) {
          var i = r.createNode(e, t, n);
          o.push(i);
        });
        return o;
      }
      console.warn("AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first");
    };
    e.prototype.createNode = function (e, t, n) {
      var r = new Ko();
      this.context.createBean(r);
      r.group = false;
      this.setMasterForRow(r, e, n, true);
      if (t && !this.suppressParentsInRowNodes) {
        r.parent = t;
      }
      r.level = n;
      r.setDataAndId(e, this.nextId.toString());
      if (this.allNodesMap[r.id]) {
        console.warn("ag-grid: duplicate node id '" + r.id + "' detected from getRowNodeId callback, this could cause issues in your grid.");
      }
      this.allNodesMap[r.id] = r;
      this.nextId++;
      return r;
    };
    e.prototype.setMasterForRow = function (e, t, n, r) {
      if (this.doingTreeData) {
        e.setMaster(false);
        if (r) {
          e.expanded = false;
        }
      } else if (this.doingMasterDetail ? this.isRowMasterFunc ? e.setMaster(this.isRowMasterFunc(t)) : e.setMaster(true) : e.setMaster(false), r) {
        var o = this.columnController.getRowGroupColumns();
        var i = n + (o ? o.length : 0);
        e.expanded = !!e.master && this.isExpanded(i);
      }
    };
    e.prototype.isExpanded = function (e) {
      var t = this.gridOptionsWrapper.getGroupDefaultExpanded();
      return -1 === t || e < t;
    };
    e.TOP_LEVEL = 0;
    e.ROOT_NODE_ID = "ROOT_NODE_ID";
    return e;
  }();
  var Uf = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Wf = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  !function (e) {
    e[e.Normal = 0] = "Normal";
    e[e.AfterFilter = 1] = "AfterFilter";
    e[e.AfterFilterAndSort = 2] = "AfterFilterAndSort";
    e[e.PivotNodes = 3] = "PivotNodes";
  }(Bf || (Bf = {}));
  var Hf = function (e) {
    function n() {
      var t = null !== e && e.apply(this, arguments) || this;
      t.onRowGroupOpenedPending = false;
      return t;
    }
    Uf(n, e);
    n.prototype.init = function () {
      var e = this.refreshModel.bind(this, {
        step: exports.ClientSideRowModelSteps.EVERYTHING
      });
      var n = this.refreshModel.bind(this, {
        step: exports.ClientSideRowModelSteps.EVERYTHING,
        afterColumnsChanged: true,
        keepRenderedRows: true,
        animate: true
      });
      this.addManagedListener(this.eventService, Ke.EVENT_NEW_COLUMNS_LOADED, n);
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_ROW_GROUP_CHANGED, e);
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, {
        step: exports.ClientSideRowModelSteps.PIVOT
      }));
      this.addManagedListener(this.eventService, Ke.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_COLUMN_PIVOT_MODE_CHANGED, e);
      var r = this.refreshModel.bind(this, {
        step: exports.ClientSideRowModelSteps.MAP,
        keepRenderedRows: true,
        animate: true
      });
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_GROUP_REMOVE_SINGLE_CHILDREN, r);
      this.addManagedListener(this.gridOptionsWrapper, ka.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, r);
      this.rootNode = new Ko();
      this.nodeManager = new Gf(this.rootNode, this.gridOptionsWrapper, this.getContext(), this.eventService, this.columnController, this.gridApi, this.columnApi, this.selectionController);
      this.createBean(this.rootNode);
    };
    n.prototype.start = function () {
      var e = this.gridOptionsWrapper.getRowData();
      if (e) {
        this.setRowData(e);
      }
    };
    n.prototype.ensureRowHeightsValid = function (e, t, n, r) {
      var o;
      var i = false;
      do {
        o = false;
        for (var a = this.getRowIndexAtPixel(e), s = this.getRowIndexAtPixel(t), c = Math.max(a, n), l = Math.min(s, r), u = c; u <= l; u++) {
          var d = this.getRow(u);
          if (d.rowHeightEstimated) {
            var p = this.gridOptionsWrapper.getRowHeightForNode(d);
            d.setRowHeight(p.height);
            o = true;
            i = true;
          }
        }
        if (o) {
          this.setRowTops();
        }
      } while (o);
      return i;
    };
    n.prototype.setRowTops = function () {
      for (var e = 0, t = 0; t < this.rowsToDisplay.length; t++) {
        var n = this.gridOptionsWrapper.getDomLayout() === Ee.DOM_LAYOUT_NORMAL;
        var r = this.rowsToDisplay[t];
        if (qr.missing(r.rowHeight)) {
          var o = this.gridOptionsWrapper.getRowHeightForNode(r, n);
          r.setRowHeight(o.height, o.estimated);
        }
        r.setRowTop(e);
        r.setRowIndex(t);
        e += r.rowHeight;
      }
    };
    n.prototype.resetRowTops = function (e) {
      var t = {};
      this.rowsToDisplay.forEach(function (e) {
        if (null != e.id) {
          t[e.id] = e;
        }
      });
      var n = function (e) {
        if (e && null != e.id && null == t[e.id]) {
          e.clearRowTopAndRowIndex();
        }
      };
      !function t(r) {
        n(r);
        n(r.detailNode);
        n(r.sibling);
        if (r.hasChildren() && r.childrenAfterGroup) {
          var o = -1 == r.level;
          if (!(e.isActive() && !o && !r.expanded)) {
            r.childrenAfterGroup.forEach(t);
          }
        }
      }(this.rootNode);
    };
    n.prototype.ensureRowsAtPixel = function (e, n, r) {
      var o = this;
      if (undefined === r) {
        r = 0;
      }
      var i = this.getRowIndexAtPixel(n);
      return this.getRow(i) !== e[0] && (e.forEach(function (e) {
        qr.removeFromArray(o.rootNode.allLeafChildren, e);
      }), e.forEach(function (e, t) {
        qr.insertIntoArray(o.rootNode.allLeafChildren, e, Math.max(i + r, 0) + t);
      }), this.refreshModel({
        step: exports.ClientSideRowModelSteps.EVERYTHING,
        keepRenderedRows: true,
        animate: true,
        keepEditingRows: true
      }), true);
    };
    n.prototype.highlightRowAtPixel = function (e, t) {
      var n = null != t ? this.getRowIndexAtPixel(t) : null;
      var r = null != n ? this.getRow(n) : null;
      if (r && e && r !== e && null != t) {
        var o = this.getHighlightPosition(t, r);
        if (this.lastHighlightedRow && this.lastHighlightedRow !== r) {
          this.lastHighlightedRow.setHighlighted(null);
          this.lastHighlightedRow = null;
        }
        r.setHighlighted(o);
        this.lastHighlightedRow = r;
      } else if (this.lastHighlightedRow) {
        this.lastHighlightedRow.setHighlighted(null);
        this.lastHighlightedRow = null;
      }
    };
    n.prototype.getHighlightPosition = function (e, t) {
      if (!t) {
        var n = this.getRowIndexAtPixel(e);
        if (!(t = this.getRow(n || 0))) {
          return "below";
        }
      }
      return e - t.rowTop < t.rowHeight / 2 ? "above" : "below";
    };
    n.prototype.getLastHighlightedRowNode = function () {
      return this.lastHighlightedRow;
    };
    n.prototype.isLastRowIndexKnown = function () {
      return true;
    };
    n.prototype.getRowCount = function () {
      return this.rowsToDisplay ? this.rowsToDisplay.length : 0;
    };
    n.prototype.getTopLevelRowCount = function () {
      return this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode ? 1 : this.rootNode.childrenAfterFilter ? this.rootNode.childrenAfterFilter.length : 0;
    };
    n.prototype.getTopLevelRowDisplayedIndex = function (e) {
      if (this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode) {
        return e;
      }
      var t = this.rootNode.childrenAfterSort[e];
      if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
        for (; t.expanded && t.childrenAfterSort && t.childrenAfterSort.length > 0;) {
          t = t.childrenAfterSort[0];
        }
      }
      return t.rowIndex;
    };
    n.prototype.getRowBounds = function (e) {
      if (qr.missing(this.rowsToDisplay)) {
        return null;
      }
      var t = this.rowsToDisplay[e];
      return t ? {
        rowTop: t.rowTop,
        rowHeight: t.rowHeight
      } : null;
    };
    n.prototype.onRowGroupOpened = function () {
      var e = this;
      if (!this.onRowGroupOpenedPending) {
        this.onRowGroupOpenedPending = true;
        var n = function () {
          e.onRowGroupOpenedPending = false;
          var n = e.gridOptionsWrapper.isAnimateRows();
          e.refreshModel({
            step: exports.ClientSideRowModelSteps.MAP,
            keepRenderedRows: true,
            animate: n
          });
        };
        if (this.gridOptionsWrapper.isSuppressAnimationFrame()) {
          n();
        } else {
          this.animationFrameService.addDestroyTask(n);
        }
      }
    };
    n.prototype.onFilterChanged = function (e) {
      if (!e.afterDataChange) {
        var n = this.gridOptionsWrapper.isAnimateRows();
        this.refreshModel({
          step: exports.ClientSideRowModelSteps.FILTER,
          keepRenderedRows: true,
          animate: n
        });
      }
    };
    n.prototype.onSortChanged = function () {
      var e = this.gridOptionsWrapper.isAnimateRows();
      this.refreshModel({
        step: exports.ClientSideRowModelSteps.SORT,
        keepRenderedRows: true,
        animate: e,
        keepEditingRows: true
      });
    };
    n.prototype.getType = function () {
      return Ee.ROW_MODEL_TYPE_CLIENT_SIDE;
    };
    n.prototype.onValueChanged = function () {
      if (this.columnController.isPivotActive()) {
        this.refreshModel({
          step: exports.ClientSideRowModelSteps.PIVOT
        });
      } else {
        this.refreshModel({
          step: exports.ClientSideRowModelSteps.AGGREGATE
        });
      }
    };
    n.prototype.createChangePath = function (e) {
      var t = qr.missingOrEmpty(e);
      var n = new xa(false, this.rootNode);
      if (t || this.gridOptionsWrapper.isTreeData()) {
        n.setInactive();
      }
      return n;
    };
    n.prototype.isSuppressModelUpdateAfterUpdateTransaction = function (e) {
      if (!this.gridOptionsWrapper.isSuppressModelUpdateAfterUpdateTransaction()) {
        return false;
      }
      if (null == e.rowNodeTransactions) {
        return false;
      }
      var t = qr.filter(e.rowNodeTransactions, function (e) {
        return null != e.add && e.add.length > 0 || null != e.remove && e.remove.length > 0;
      });
      return null == t || 0 == t.length;
    };
    n.prototype.refreshModel = function (e) {
      var n = this;
      if (!this.isSuppressModelUpdateAfterUpdateTransaction(e)) {
        var r = this.createChangePath(e.rowNodeTransactions);
        switch (e.step) {
          case exports.ClientSideRowModelSteps.EVERYTHING:
            this.doRowGrouping(e.groupState, e.rowNodeTransactions, e.rowNodeOrder, r, !!e.afterColumnsChanged);
          case exports.ClientSideRowModelSteps.FILTER:
            this.doFilter(r);
          case exports.ClientSideRowModelSteps.PIVOT:
            this.doPivot(r);
          case exports.ClientSideRowModelSteps.AGGREGATE:
            this.doAggregate(r);
          case exports.ClientSideRowModelSteps.SORT:
            this.doSort(e.rowNodeTransactions, r);
          case exports.ClientSideRowModelSteps.MAP:
            this.doRowsToDisplay();
        }
        this.setRowTops();
        this.resetRowTops(r);
        var o = {
          type: Ke.EVENT_MODEL_UPDATED,
          api: this.gridApi,
          columnApi: this.columnApi,
          animate: e.animate,
          keepRenderedRows: e.keepRenderedRows,
          newData: e.newData,
          newPage: false
        };
        this.eventService.dispatchEvent(o);
        if (this.$scope) {
          window.setTimeout(function () {
            n.$scope.$apply();
          }, 0);
        }
      }
    };
    n.prototype.isEmpty = function () {
      var e = qr.missing(this.rootNode.allLeafChildren) || 0 === this.rootNode.allLeafChildren.length;
      return qr.missing(this.rootNode) || e || !this.columnController.isReady();
    };
    n.prototype.isRowsToRender = function () {
      return qr.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
    };
    n.prototype.getNodesInRangeForSelection = function (e, t) {
      var n;
      var r = !t;
      var o = false;
      var i = [];
      var a = this.gridOptionsWrapper.isGroupSelectsChildren();
      this.forEachNodeAfterFilterAndSort(function (s) {
        var c = r && !o;
        if (!(r || s !== t && s !== e)) {
          r = true;
        }
        if (!(s.group && a)) {
          var l = r && !o;
          var u = s.isParentOfNode(n);
          if (l || u) {
            i.push(s);
          }
        }
        if (c) {
          if (!(s !== t && s !== e)) {
            o = true;
            n = s === t ? t : e;
          }
        }
      });
      return i;
    };
    n.prototype.setDatasource = function (e) {
      console.error("AG Grid: should never call setDatasource on clientSideRowController");
    };
    n.prototype.getTopLevelNodes = function () {
      return this.rootNode ? this.rootNode.childrenAfterGroup : null;
    };
    n.prototype.getRootNode = function () {
      return this.rootNode;
    };
    n.prototype.getRow = function (e) {
      return this.rowsToDisplay[e];
    };
    n.prototype.isRowPresent = function (e) {
      return this.rowsToDisplay.indexOf(e) >= 0;
    };
    n.prototype.getRowIndexAtPixel = function (e) {
      if (this.isEmpty()) {
        return -1;
      }
      var t = 0;
      var n = this.rowsToDisplay.length - 1;
      if (e <= 0) {
        return 0;
      }
      if (qr.last(this.rowsToDisplay).rowTop <= e) {
        return this.rowsToDisplay.length - 1;
      }
      for (;;) {
        var r = Math.floor((t + n) / 2);
        var o = this.rowsToDisplay[r];
        if (this.isRowInPixel(o, e)) {
          return r;
        }
        if (o.rowTop < e) {
          t = r + 1;
        } else {
          if (o.rowTop > e) {
            n = r - 1;
          }
        }
      }
    };
    n.prototype.isRowInPixel = function (e, t) {
      var n = e.rowTop;
      var r = e.rowTop + e.rowHeight;
      return n <= t && r > t;
    };
    n.prototype.forEachLeafNode = function (e) {
      if (this.rootNode.allLeafChildren) {
        this.rootNode.allLeafChildren.forEach(function (t, n) {
          return e(t, n);
        });
      }
    };
    n.prototype.forEachNode = function (e) {
      this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, e, Bf.Normal, 0);
    };
    n.prototype.forEachNodeAfterFilter = function (e) {
      this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, e, Bf.AfterFilter, 0);
    };
    n.prototype.forEachNodeAfterFilterAndSort = function (e) {
      this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, e, Bf.AfterFilterAndSort, 0);
    };
    n.prototype.forEachPivotNode = function (e) {
      this.recursivelyWalkNodesAndCallback([this.rootNode], e, Bf.PivotNodes, 0);
    };
    n.prototype.recursivelyWalkNodesAndCallback = function (e, t, n, r) {
      if (!e) {
        return r;
      }
      for (var o = 0; o < e.length; o++) {
        var i = e[o];
        t(i, r++);
        if (i.hasChildren()) {
          var a = null;
          switch (n) {
            case Bf.Normal:
              a = i.childrenAfterGroup;
              break;
            case Bf.AfterFilter:
              a = i.childrenAfterFilter;
              break;
            case Bf.AfterFilterAndSort:
              a = i.childrenAfterSort;
              break;
            case Bf.PivotNodes:
              a = i.leafGroup ? null : i.childrenAfterSort;
          }
          if (a) {
            r = this.recursivelyWalkNodesAndCallback(a, t, n, r);
          }
        }
      }
      return r;
    };
    n.prototype.doAggregate = function (e) {
      if (this.aggregationStage) {
        this.aggregationStage.execute({
          rowNode: this.rootNode,
          changedPath: e
        });
      }
    };
    n.prototype.expandOrCollapseAll = function (e) {
      var n = this.gridOptionsWrapper.isTreeData();
      if (this.rootNode) {
        (function t(r) {
          if (!r) {
            return;
          }
          r.forEach(function (r) {
            if (n ? qr.exists(r.childrenAfterGroup) : r.group) {
              r.expanded = e;
              t(r.childrenAfterGroup);
            }
          });
        })(this.rootNode.childrenAfterGroup);
      }
      this.refreshModel({
        step: exports.ClientSideRowModelSteps.MAP
      });
      var r = e ? "expandAll" : "collapseAll";
      var o = {
        api: this.gridApi,
        columnApi: this.columnApi,
        type: Ke.EVENT_EXPAND_COLLAPSE_ALL,
        source: r
      };
      this.eventService.dispatchEvent(o);
    };
    n.prototype.doSort = function (e, t) {
      this.sortStage.execute({
        rowNode: this.rootNode,
        rowNodeTransactions: e,
        changedPath: t
      });
    };
    n.prototype.doRowGrouping = function (e, t, n, r, o) {
      if (this.groupStage) {
        if (t) {
          this.groupStage.execute({
            rowNode: this.rootNode,
            rowNodeTransactions: t,
            rowNodeOrder: n,
            changedPath: r
          });
        } else {
          this.selectionController.removeGroupsFromSelection();
          this.groupStage.execute({
            rowNode: this.rootNode,
            changedPath: r,
            afterColumnsChanged: o
          });
          this.restoreGroupState(e);
        }
        if (this.gridOptionsWrapper.isGroupSelectsChildren()) {
          this.selectionController.updateGroupsFromChildrenSelections(r);
        }
      } else {
        this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
        this.rootNode.updateHasChildren();
      }
    };
    n.prototype.restoreGroupState = function (e) {
      if (e) {
        qr.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (t, n) {
          if ("boolean" === typeof e[n]) {
            t.expanded = e[n];
          }
        });
      }
    };
    n.prototype.doFilter = function (e) {
      this.filterStage.execute({
        rowNode: this.rootNode,
        changedPath: e
      });
    };
    n.prototype.doPivot = function (e) {
      if (this.pivotStage) {
        this.pivotStage.execute({
          rowNode: this.rootNode,
          changedPath: e
        });
      }
    };
    n.prototype.getGroupState = function () {
      if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {
        return null;
      }
      var e = {};
      qr.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (t, n) {
        return e[n] = t.expanded;
      });
      return e;
    };
    n.prototype.getCopyOfNodesMap = function () {
      return this.nodeManager.getCopyOfNodesMap();
    };
    n.prototype.getRowNode = function (e) {
      if ("string" == typeof e && 0 == e.indexOf(Ko.ID_PREFIX_ROW_GROUP)) {
        var t = null;
        this.forEachNode(function (n) {
          if (n.id === e) {
            t = n;
          }
        });
        return t;
      }
      return this.nodeManager.getRowNode(e);
    };
    n.prototype.setRowData = function (e) {
      var n = this.getGroupState();
      this.nodeManager.setRowData(e);
      var r = {
        type: Ke.EVENT_ROW_DATA_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(r);
      this.refreshModel({
        step: exports.ClientSideRowModelSteps.EVERYTHING,
        groupState: n,
        newData: true
      });
    };
    n.prototype.batchUpdateRowData = function (e, t) {
      var n = this;
      if (null == this.applyAsyncTransactionsTimeout) {
        this.rowDataTransactionBatch = [];
        var r = this.gridOptionsWrapper.getAsyncTransactionWaitMillis();
        this.applyAsyncTransactionsTimeout = window.setTimeout(function () {
          n.executeBatchUpdateRowData();
        }, r);
      }
      this.rowDataTransactionBatch.push({
        rowDataTransaction: e,
        callback: t
      });
    };
    n.prototype.flushAsyncTransactions = function () {
      if (null != this.applyAsyncTransactionsTimeout) {
        clearTimeout(this.applyAsyncTransactionsTimeout);
        this.executeBatchUpdateRowData();
      }
    };
    n.prototype.executeBatchUpdateRowData = function () {
      var e = this;
      this.valueCache.onDataChanged();
      var t = [];
      var n = [];
      var r = false;
      if (this.rowDataTransactionBatch) {
        this.rowDataTransactionBatch.forEach(function (o) {
          var i = e.nodeManager.updateRowData(o.rowDataTransaction, undefined);
          n.push(i);
          if (o.callback) {
            t.push(o.callback.bind(null, i));
          }
          if ("number" === typeof o.rowDataTransaction.addIndex) {
            r = true;
          }
        });
      }
      this.commonUpdateRowData(n, undefined, r);
      if (t.length > 0) {
        window.setTimeout(function () {
          t.forEach(function (e) {
            return e();
          });
        }, 0);
      }
      if (n.length > 0) {
        var o = {
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          type: Ke.EVENT_ASYNC_TRANSACTIONS_FLUSHED,
          results: n
        };
        this.eventService.dispatchEvent(o);
      }
      this.rowDataTransactionBatch = null;
      this.applyAsyncTransactionsTimeout = undefined;
    };
    n.prototype.updateRowData = function (e, t) {
      this.valueCache.onDataChanged();
      var n = this.nodeManager.updateRowData(e, t);
      var r = "number" === typeof e.addIndex;
      this.commonUpdateRowData([n], t, r);
      return n;
    };
    n.prototype.createRowNodeOrder = function () {
      if (!this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder()) {
        var e = {};
        if (this.rootNode && this.rootNode.allLeafChildren) {
          for (var t = 0; t < this.rootNode.allLeafChildren.length; t++) {
            e[this.rootNode.allLeafChildren[t].id] = t;
          }
        }
        return e;
      }
    };
    n.prototype.commonUpdateRowData = function (e, n, r) {
      if (r) {
        n = this.createRowNodeOrder();
      }
      this.refreshModel({
        step: exports.ClientSideRowModelSteps.EVERYTHING,
        rowNodeTransactions: e,
        rowNodeOrder: n,
        keepRenderedRows: true,
        animate: true,
        keepEditingRows: true
      });
      var o = {
        type: Ke.EVENT_ROW_DATA_UPDATED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(o);
    };
    n.prototype.doRowsToDisplay = function () {
      this.rowsToDisplay = this.flattenStage.execute({
        rowNode: this.rootNode
      });
    };
    n.prototype.onRowHeightChanged = function () {
      this.refreshModel({
        step: exports.ClientSideRowModelSteps.MAP,
        keepRenderedRows: true,
        keepEditingRows: true
      });
    };
    n.prototype.resetRowHeights = function () {
      var e = false;
      this.forEachNode(function (t) {
        t.setRowHeight(t.rowHeight, true);
        var n = t.detailNode;
        if (n) {
          n.setRowHeight(n.rowHeight, true);
        }
        e = true;
      });
      if (e) {
        this.onRowHeightChanged();
      }
    };
    Wf([pe("columnController")], n.prototype, "columnController", undefined);
    Wf([pe("$scope")], n.prototype, "$scope", undefined);
    Wf([pe("selectionController")], n.prototype, "selectionController", undefined);
    Wf([pe("valueCache")], n.prototype, "valueCache", undefined);
    Wf([pe("columnApi")], n.prototype, "columnApi", undefined);
    Wf([pe("gridApi")], n.prototype, "gridApi", undefined);
    Wf([pe("animationFrameService")], n.prototype, "animationFrameService", undefined);
    Wf([pe("filterStage")], n.prototype, "filterStage", undefined);
    Wf([pe("sortStage")], n.prototype, "sortStage", undefined);
    Wf([pe("flattenStage")], n.prototype, "flattenStage", undefined);
    Wf([fe("groupStage")], n.prototype, "groupStage", undefined);
    Wf([fe("aggregationStage")], n.prototype, "aggregationStage", undefined);
    Wf([fe("pivotStage")], n.prototype, "pivotStage", undefined);
    Wf([le], n.prototype, "init", null);
    return n = Wf([de("rowModel")], n);
  }(We);
  var Vf = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var zf = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Yf = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Vf(t, e);
    t.prototype.execute = function (e) {
      var t = e.rowNode;
      var n = e.changedPath;
      this.filterService.filter(n);
      this.selectableService.updateSelectableAfterFiltering(t);
    };
    zf([pe("selectableService")], t.prototype, "selectableService", undefined);
    zf([pe("filterService")], t.prototype, "filterService", undefined);
    return t = zf([de("filterStage")], t);
  }(We);
  var Kf = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var qf = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Xf = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Kf(t, e);
    t.prototype.execute = function (e) {
      var t = this.sortController.getSortOptions();
      var n = qr.exists(t) && t.length > 0;
      var r = n && qr.exists(e.rowNodeTransactions) && this.gridOptionsWrapper.isDeltaSort();
      var o = r ? this.calculateDirtyNodes(e.rowNodeTransactions) : null;
      var i = this.columnController.getValueColumns();
      var a = qr.missingOrEmpty(i);
      this.sortService.sort(t, n, r, o, e.changedPath, a);
    };
    t.prototype.calculateDirtyNodes = function (e) {
      var t = {};
      var n = function (e) {
        if (e) {
          e.forEach(function (e) {
            return t[e.id] = true;
          });
        }
      };
      if (e) {
        e.forEach(function (e) {
          n(e.add);
          n(e.update);
          n(e.remove);
        });
      }
      return t;
    };
    qf([pe("sortService")], t.prototype, "sortService", undefined);
    qf([pe("sortController")], t.prototype, "sortController", undefined);
    qf([pe("columnController")], t.prototype, "columnController", undefined);
    return t = qf([de("sortStage")], t);
  }(We);
  var Qf = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Zf = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Jf = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Qf(t, e);
    t.prototype.execute = function (e) {
      var t = e.rowNode;
      var n = [];
      var r = {
        value: 0
      };
      var o = this.columnController.isPivotMode();
      var i = o && t.leafGroup;
      var a = i ? [t] : t.childrenAfterSort;
      this.recursivelyAddToRowsToDisplay(a, n, r, o, 0);
      if (!i && n.length > 0 && this.gridOptionsWrapper.isGroupIncludeTotalFooter()) {
        this.ensureFooterNodeExists(t);
        this.addRowNodeToRowsToDisplay(t.sibling, n, r, 0);
      }
      return n;
    };
    t.prototype.recursivelyAddToRowsToDisplay = function (e, t, n, r, o) {
      if (!qr.missingOrEmpty(e)) {
        for (var i = this.gridOptionsWrapper.isGroupHideOpenParents(), a = this.gridOptionsWrapper.isGroupRemoveSingleChildren(), s = !a && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren(), c = 0; c < e.length; c++) {
          var l = e[c];
          var u = l.hasChildren();
          var d = r && !u;
          var p = a && u && 1 === l.childrenAfterGroup.length;
          var f = s && u && l.leafGroup && 1 === l.childrenAfterGroup.length;
          var h = r && l.leafGroup;
          var m = i && l.expanded && !h;
          if (!d && !m && !p && !f) {
            this.addRowNodeToRowsToDisplay(l, t, n, o);
          }
          if (!r || !l.leafGroup) {
            if (u) {
              var g = p || f;
              if (l.expanded || g) {
                var _ = g ? o : o + 1;
                this.recursivelyAddToRowsToDisplay(l.childrenAfterSort, t, n, r, _);
                if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
                  this.ensureFooterNodeExists(l);
                  this.addRowNodeToRowsToDisplay(l.sibling, t, n, o);
                }
              }
            } else if (l.master && l.expanded) {
              var v = this.createDetailNode(l);
              this.addRowNodeToRowsToDisplay(v, t, n, o);
            }
          }
        }
      }
    };
    t.prototype.addRowNodeToRowsToDisplay = function (e, t, n, r) {
      var o = this.gridOptionsWrapper.isGroupMultiAutoColumn();
      t.push(e);
      e.setUiLevel(o ? 0 : r);
    };
    t.prototype.ensureFooterNodeExists = function (e) {
      if (!qr.exists(e.sibling)) {
        var t = new Ko();
        this.context.createBean(t);
        Object.keys(e).forEach(function (n) {
          t[n] = e[n];
        });
        t.footer = true;
        t.setRowTop(null);
        t.setRowIndex(null);
        t.oldRowTop = null;
        if (qr.exists(t.id)) {
          t.id = "rowGroupFooter_" + t.id;
        }
        t.sibling = e;
        e.sibling = t;
      }
    };
    t.prototype.createDetailNode = function (e) {
      if (qr.exists(e.detailNode)) {
        return e.detailNode;
      }
      var t = new Ko();
      this.context.createBean(t);
      t.detail = true;
      t.selectable = false;
      t.parent = e;
      if (qr.exists(e.id)) {
        t.id = "detail_" + e.id;
      }
      t.data = e.data;
      t.level = e.level + 1;
      e.detailNode = t;
      return t;
    };
    Zf([pe("columnController")], t.prototype, "columnController", undefined);
    return t = Zf([de("flattenStage")], t);
  }(We);
  var $f = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var eh = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var th = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    $f(t, e);
    t.prototype.init = function () {
      this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();
    };
    t.prototype.sort = function (e, t, n, r, o, i) {
      var a = this;
      if (o) {
        o.forEachChangedNodeDepthFirst(function (s) {
          a.pullDownGroupDataForHideOpenParents(s.childrenAfterFilter, true);
          s.childrenAfterSort = t ? n ? a.doDeltaSort(s, e, r, o, i) : a.rowNodeSorter.doFullSort(s.childrenAfterFilter, e) : s.childrenAfterFilter.slice(0);
          a.updateChildIndexes(s);
          if (a.postSortFunc) {
            a.postSortFunc(s.childrenAfterSort);
          }
        });
      }
      this.updateGroupDataForHiddenOpenParents(o);
    };
    t.prototype.mapNodeToSortedNode = function (e, t) {
      return {
        currentPos: t,
        rowNode: e
      };
    };
    t.prototype.doDeltaSort = function (e, t, n, r, o) {
      var i = e.childrenAfterSort.filter(function (e) {
        var t = !n[e.id];
        var i = o || r && r.canSkip(e);
        return t && i;
      }).map(this.mapNodeToSortedNode.bind(this));
      var a = {};
      i.forEach(function (e) {
        return a[e.rowNode.id] = e.rowNode;
      });
      var s = e.childrenAfterFilter.filter(function (e) {
        return !a[e.id];
      }).map(this.mapNodeToSortedNode.bind(this));
      s.sort(this.rowNodeSorter.compareRowNodes.bind(this, t));
      return (0 === s.length ? i : 0 === i.length ? s : this.mergeSortedArrays(t, i, s)).map(function (e) {
        return e.rowNode;
      });
    };
    t.prototype.mergeSortedArrays = function (e, t, n) {
      for (var r = [], o = 0, i = 0; o < t.length && i < n.length;) {
        if (this.rowNodeSorter.compareRowNodes(e, t[o], n[i]) < 0) {
          r.push(t[o++]);
        } else {
          r.push(n[i++]);
        }
      }
      for (; o < t.length;) {
        r.push(t[o++]);
      }
      for (; i < n.length;) {
        r.push(n[i++]);
      }
      return r;
    };
    t.prototype.updateChildIndexes = function (e) {
      if (!qr.missing(e.childrenAfterSort)) {
        for (var t = e.childrenAfterSort, n = 0; n < t.length; n++) {
          var r = t[n];
          var o = 0 === n;
          var i = n === e.childrenAfterSort.length - 1;
          r.setFirstChild(o);
          r.setLastChild(i);
          r.setChildIndex(n);
        }
      }
    };
    t.prototype.updateGroupDataForHiddenOpenParents = function (e) {
      var t = this;
      if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
        if (e) {
          e.executeFromRootNode(function (e) {
            return function e(n) {
              t.pullDownGroupDataForHideOpenParents(n.childrenAfterSort, false);
              n.childrenAfterSort.forEach(function (t) {
                if (t.hasChildren()) {
                  e(t);
                }
              });
            }(e);
          });
        }
      }
    };
    t.prototype.pullDownGroupDataForHideOpenParents = function (e, t) {
      var n = this;
      if (this.gridOptionsWrapper.isGroupHideOpenParents() && !qr.missing(e)) {
        e.forEach(function (e) {
          n.columnController.getGroupDisplayColumns().forEach(function (r) {
            var o = r.getColDef().showRowGroup;
            if ("string" === typeof o) {
              var i = o;
              var a = n.columnController.getPrimaryColumn(i);
              if (!(a === e.rowGroupColumn)) {
                if (t) {
                  e.setGroupValue(r.getId(), null);
                } else {
                  var s = e.getFirstChildOfFirstChild(a);
                  if (s) {
                    e.setGroupValue(r.getId(), s.key);
                  }
                }
              }
            } else {
              console.error("AG Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup");
            }
          });
        });
      }
    };
    eh([pe("columnController")], t.prototype, "columnController", undefined);
    eh([pe("rowNodeSorter")], t.prototype, "rowNodeSorter", undefined);
    eh([le], t.prototype, "init", null);
    return t = eh([de("sortService")], t);
  }(We);
  var nh = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var rh = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var oh = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    nh(t, e);
    t.prototype.postConstruct = function () {
      this.doingTreeData = this.gridOptionsWrapper.isTreeData();
    };
    t.prototype.filter = function (e) {
      var t = this.filterManager.isAnyFilterPresent();
      this.filterNodes(t, e);
    };
    t.prototype.filterNodes = function (e, t) {
      var n = this;
      var r = function (t, r) {
        if (t.hasChildren()) {
          t.childrenAfterFilter = e && !r ? t.childrenAfterGroup.filter(function (e) {
            var t = e.childrenAfterFilter && e.childrenAfterFilter.length > 0;
            var r = e.data && n.filterManager.doesRowPassFilter({
              rowNode: e
            });
            return t || r;
          }) : t.childrenAfterGroup;
          n.setAllChildrenCount(t);
        } else {
          t.childrenAfterFilter = t.childrenAfterGroup;
          t.setAllChildrenCount(null);
        }
      };
      if (this.doingTreeDataFiltering()) {
        t.executeFromRootNode(function (e) {
          return function e(t, o) {
            if (t.childrenAfterGroup) {
              for (var i = 0; i < t.childrenAfterGroup.length; i++) {
                var a = t.childrenAfterGroup[i];
                var s = o || n.filterManager.doesRowPassFilter({
                  rowNode: a
                });
                if (a.childrenAfterGroup) {
                  e(t.childrenAfterGroup[i], s);
                } else {
                  r(a, s);
                }
              }
            }
            r(t, o);
          }(e, false);
        });
      } else {
        t.forEachChangedNodeDepthFirst(function (e) {
          return r(e, false);
        }, true);
      }
    };
    t.prototype.setAllChildrenCountTreeData = function (e) {
      var t = 0;
      e.childrenAfterFilter.forEach(function (e) {
        t++;
        t += e.allChildrenCount;
      });
      e.setAllChildrenCount(t);
    };
    t.prototype.setAllChildrenCountGridGrouping = function (e) {
      var t = 0;
      e.childrenAfterFilter.forEach(function (e) {
        if (e.group) {
          t += e.allChildrenCount;
        } else {
          t++;
        }
      });
      e.setAllChildrenCount(t);
    };
    t.prototype.setAllChildrenCount = function (e) {
      if (this.doingTreeData) {
        this.setAllChildrenCountTreeData(e);
      } else {
        this.setAllChildrenCountGridGrouping(e);
      }
    };
    t.prototype.doingTreeDataFiltering = function () {
      return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();
    };
    rh([pe("filterManager")], t.prototype, "filterManager", undefined);
    rh([le], t.prototype, "postConstruct", null);
    return t = rh([de("filterService")], t);
  }(We);
  var ih = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var ah = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var sh = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    ih(t, e);
    t.prototype.postConstruct = function () {
      if (this.rowModel.getType() === Ee.ROW_MODEL_TYPE_CLIENT_SIDE) {
        this.clientSideRowModel = this.rowModel;
      }
    };
    t.prototype.createTransactionForRowData = function (e) {
      if (qr.missing(this.clientSideRowModel)) {
        console.error("AG Grid: ImmutableService only works with ClientSideRowModel");
      } else {
        var t = this.gridOptionsWrapper.getRowNodeIdFunc();
        if (t && !qr.missing(t)) {
          var n = {
            remove: [],
            update: [],
            add: []
          };
          var r = this.clientSideRowModel.getCopyOfNodesMap();
          var o = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder() ? null : {};
          if (qr.exists(e)) {
            e.forEach(function (e, i) {
              var a = t(e);
              var s = r[a];
              if (o) {
                o[a] = i;
              }
              if (s) {
                if (s.data !== e) {
                  n.update.push(e);
                }
                r[a] = undefined;
              } else {
                n.add.push(e);
              }
            });
          }
          qr.iterateObject(r, function (e, t) {
            if (t) {
              n.remove.push(t.data);
            }
          });
          return [n, o];
        }
        console.error("AG Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!");
      }
    };
    ah([pe("rowModel")], t.prototype, "rowModel", undefined);
    ah([le], t.prototype, "postConstruct", null);
    return t = ah([de("immutableService")], t);
  }(We);
  var ch = {
    moduleName: exports.ModuleNames.ClientSideRowModelModule,
    beans: [Yf, Xf, Jf, th, oh, sh],
    rowModels: {
      clientSide: Hf
    }
  };
  var lh = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var uh = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var dh = function (e) {
    function t(t, n, r) {
      var o = e.call(this, t) || this;
      o.parentCache = n;
      o.params = r;
      o.startRow = t * r.blockSize;
      o.endRow = o.startRow + r.blockSize;
      return o;
    }
    lh(t, e);
    t.prototype.postConstruct = function () {
      this.createRowNodes();
    };
    t.prototype.getBlockStateJson = function () {
      return {
        id: "" + this.getId(),
        state: {
          blockNumber: this.getId(),
          startRow: this.getStartRow(),
          endRow: this.getEndRow(),
          pageStatus: this.getState()
        }
      };
    };
    t.prototype.setDataAndId = function (e, t, n) {
      if (qr.exists(t)) {
        e.setDataAndId(t, n.toString());
      } else {
        e.setDataAndId(undefined, undefined);
      }
    };
    t.prototype.loadFromDatasource = function () {
      var e = this;
      var t = this.createLoadParams();
      if (qr.missing(this.params.datasource.getRows)) {
        console.warn("AG Grid: datasource is missing getRows method");
      } else {
        window.setTimeout(function () {
          e.params.datasource.getRows(t);
        }, 0);
      }
    };
    t.prototype.processServerFail = function () {};
    t.prototype.createLoadParams = function () {
      return {
        startRow: this.getStartRow(),
        endRow: this.getEndRow(),
        successCallback: this.pageLoaded.bind(this, this.getVersion()),
        failCallback: this.pageLoadFailed.bind(this, this.getVersion()),
        sortModel: this.params.sortModel,
        filterModel: this.params.filterModel,
        context: this.gridOptionsWrapper.getContext()
      };
    };
    t.prototype.forEachNode = function (e, t, n) {
      var r = this;
      this.rowNodes.forEach(function (o, i) {
        if (r.startRow + i < n) {
          e(o, t.next());
        }
      });
    };
    t.prototype.getLastAccessed = function () {
      return this.lastAccessed;
    };
    t.prototype.getRow = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      if (!t) {
        this.lastAccessed = this.params.lastAccessedSequence.next();
      }
      var n = e - this.startRow;
      return this.rowNodes[n];
    };
    t.prototype.getStartRow = function () {
      return this.startRow;
    };
    t.prototype.getEndRow = function () {
      return this.endRow;
    };
    t.prototype.createRowNodes = function () {
      this.rowNodes = [];
      for (var e = 0; e < this.params.blockSize; e++) {
        var t = this.startRow + e;
        var n = this.getContext().createBean(new Ko());
        n.setRowHeight(this.params.rowHeight);
        n.uiLevel = 0;
        n.setRowIndex(t);
        n.setRowTop(this.params.rowHeight * t);
        this.rowNodes.push(n);
      }
    };
    t.prototype.processServerResult = function (e) {
      var t = this;
      this.rowNodes.forEach(function (n, r) {
        var o = e.rowData ? e.rowData[r] : undefined;
        t.setDataAndId(n, o, t.startRow + r);
      });
      var n = null != e.rowCount && e.rowCount >= 0 ? e.rowCount : undefined;
      this.parentCache.pageLoaded(this, n);
    };
    t.prototype.destroyRowNodes = function () {
      this.rowNodes.forEach(function (e) {
        e.clearRowTopAndRowIndex();
      });
    };
    uh([le], t.prototype, "postConstruct", null);
    uh([ue], t.prototype, "destroyRowNodes", null);
    return t;
  }(Qp);
  var ph = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var fh = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var hh = function (e, t) {
    return function (n, r) {
      t(n, r, e);
    };
  };
  var mh = function (e) {
    function t(t) {
      var n = e.call(this) || this;
      n.lastRowIndexKnown = false;
      n.blocks = {};
      n.blockCount = 0;
      n.rowCount = t.initialRowCount;
      n.params = t;
      return n;
    }
    ph(t, e);
    t.prototype.setBeans = function (e) {
      this.logger = e.create("InfiniteCache");
    };
    t.prototype.getRow = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      var n = Math.floor(e / this.params.blockSize);
      var r = this.blocks[n];
      if (!r) {
        if (t) {
          return null;
        }
        r = this.createBlock(n);
      }
      return r.getRow(e);
    };
    t.prototype.createBlock = function (e) {
      var t = this.createBean(new dh(e, this, this.params));
      this.blocks[t.getId()] = t;
      this.blockCount++;
      this.purgeBlocksIfNeeded(t);
      this.params.rowNodeBlockLoader.addBlock(t);
      return t;
    };
    t.prototype.refreshCache = function () {
      if (0 == this.blockCount) {
        this.purgeCache();
      } else {
        this.getBlocksInOrder().forEach(function (e) {
          return e.setStateWaitingToLoad();
        });
        this.params.rowNodeBlockLoader.checkBlockToLoad();
      }
    };
    t.prototype.destroyAllBlocks = function () {
      var e = this;
      this.getBlocksInOrder().forEach(function (t) {
        return e.destroyBlock(t);
      });
    };
    t.prototype.getRowCount = function () {
      return this.rowCount;
    };
    t.prototype.isLastRowIndexKnown = function () {
      return this.lastRowIndexKnown;
    };
    t.prototype.pageLoaded = function (e, t) {
      if (this.isAlive()) {
        this.logger.log("onPageLoaded: page = " + e.getId() + ", lastRow = " + t);
        this.checkRowCount(e, t);
        this.onCacheUpdated();
      }
    };
    t.prototype.purgeBlocksIfNeeded = function (e) {
      var n = this;
      var r = this.getBlocksInOrder().filter(function (t) {
        return t != e;
      });
      r.sort(function (e, t) {
        return t.getLastAccessed() - e.getLastAccessed();
      });
      var o = this.params.maxBlocksInCache > 0;
      var i = o ? this.params.maxBlocksInCache - 1 : null;
      var a = t.MAX_EMPTY_BLOCKS_TO_KEEP - 1;
      r.forEach(function (e, t) {
        if (e.getState() === dh.STATE_WAITING_TO_LOAD && t >= a || !!o && t >= i) {
          if (n.isBlockCurrentlyDisplayed(e)) {
            return;
          }
          if (n.isBlockFocused(e)) {
            return;
          }
          n.removeBlockFromCache(e);
        }
      });
    };
    t.prototype.isBlockFocused = function (e) {
      var t = this.focusController.getFocusCellToUseAfterRefresh();
      if (!t) {
        return false;
      }
      if (null != t.rowPinned) {
        return false;
      }
      var n = e.getStartRow();
      var r = e.getEndRow();
      return t.rowIndex >= n && t.rowIndex < r;
    };
    t.prototype.isBlockCurrentlyDisplayed = function (e) {
      var t = e.getStartRow();
      var n = e.getEndRow() - 1;
      return this.rowRenderer.isRangeInRenderedViewport(t, n);
    };
    t.prototype.removeBlockFromCache = function (e) {
      if (e) {
        this.destroyBlock(e);
      }
    };
    t.prototype.checkRowCount = function (e, t) {
      if ("number" === typeof t && t >= 0) {
        this.rowCount = t;
        this.lastRowIndexKnown = true;
      } else if (!this.lastRowIndexKnown) {
        var n = (e.getId() + 1) * this.params.blockSize + this.params.overflowSize;
        if (this.rowCount < n) {
          this.rowCount = n;
        }
      }
    };
    t.prototype.setRowCount = function (e, t) {
      this.rowCount = e;
      if (qr.exists(t)) {
        this.lastRowIndexKnown = t;
      }
      if (!this.lastRowIndexKnown) {
        if (this.rowCount % this.params.blockSize === 0) {
          this.rowCount++;
        }
      }
      this.onCacheUpdated();
    };
    t.prototype.forEachNodeDeep = function (e) {
      var t = this;
      var n = new Xr();
      this.getBlocksInOrder().forEach(function (r) {
        return r.forEachNode(e, n, t.rowCount);
      });
    };
    t.prototype.getBlocksInOrder = function () {
      return qr.getAllValuesInObject(this.blocks).sort(function (e, t) {
        return e.getId() - t.getId();
      });
    };
    t.prototype.destroyBlock = function (e) {
      delete this.blocks[e.getId()];
      this.destroyBean(e);
      this.blockCount--;
      this.params.rowNodeBlockLoader.removeBlock(e);
    };
    t.prototype.onCacheUpdated = function () {
      if (this.isAlive()) {
        this.destroyAllBlocksPastVirtualRowCount();
        var e = {
          type: Ke.EVENT_STORE_UPDATED
        };
        this.eventService.dispatchEvent(e);
      }
    };
    t.prototype.destroyAllBlocksPastVirtualRowCount = function () {
      var e = this;
      var t = [];
      this.getBlocksInOrder().forEach(function (n) {
        if (n.getId() * e.params.blockSize >= e.rowCount) {
          t.push(n);
        }
      });
      if (t.length > 0) {
        t.forEach(function (t) {
          return e.destroyBlock(t);
        });
      }
    };
    t.prototype.purgeCache = function () {
      var e = this;
      this.getBlocksInOrder().forEach(function (t) {
        return e.removeBlockFromCache(t);
      });
      this.lastRowIndexKnown = false;
      if (0 === this.rowCount) {
        this.rowCount = this.params.initialRowCount;
      }
      this.onCacheUpdated();
    };
    t.prototype.getRowNodesInRange = function (e, t) {
      var n = this;
      var r = [];
      var o = -1;
      var i = false;
      var a = new Xr();
      if (qr.missing(e)) {
        i = true;
      }
      var s = false;
      this.getBlocksInOrder().forEach(function (c) {
        if (!s) {
          if (i && o + 1 !== c.getId()) {
            s = true;
          } else {
            o = c.getId();
            c.forEachNode(function (n) {
              var o = n === e || n === t;
              if (i || o) {
                r.push(n);
              }
              if (o) {
                i = !i;
              }
            }, a, n.rowCount);
          }
        }
      });
      return s || i ? [] : r;
    };
    t.MAX_EMPTY_BLOCKS_TO_KEEP = 2;
    fh([pe("rowRenderer")], t.prototype, "rowRenderer", undefined);
    fh([pe("focusController")], t.prototype, "focusController", undefined);
    fh([hh(0, me("loggerFactory"))], t.prototype, "setBeans", null);
    fh([ue], t.prototype, "destroyAllBlocks", null);
    return t;
  }(We);
  var gh = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var _h = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var vh = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    gh(t, e);
    t.prototype.getRowBounds = function (e) {
      return {
        rowHeight: this.rowHeight,
        rowTop: this.rowHeight * e
      };
    };
    t.prototype.ensureRowHeightsValid = function (e, t, n, r) {
      return false;
    };
    t.prototype.init = function () {
      var e = this;
      if (this.gridOptionsWrapper.isRowModelInfinite()) {
        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
        this.addEventListeners();
        this.addDestroyFunc(function () {
          return e.destroyCache();
        });
        this.verifyProps();
      }
    };
    t.prototype.verifyProps = function () {
      if (null != this.gridOptionsWrapper.getDefaultGroupSortComparator()) {
        qr.doOnce(function () {
          return console.warn("AG Grid: defaultGroupSortComparator cannot be used with Infinite Row Model. If using Infinite Row Model, then sorting is done on the server side, nothing to do with the client.");
        }, "IRM.DefaultGroupSortComparator");
      }
    };
    t.prototype.start = function () {
      this.setDatasource(this.gridOptionsWrapper.getDatasource());
    };
    t.prototype.destroyDatasource = function () {
      if (this.datasource) {
        this.getContext().destroyBean(this.datasource);
        this.rowRenderer.datasourceChanged();
        this.datasource = null;
      }
    };
    t.prototype.addEventListeners = function () {
      this.addManagedListener(this.eventService, Ke.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));
      this.addManagedListener(this.eventService, Ke.EVENT_STORE_UPDATED, this.onCacheUpdated.bind(this));
    };
    t.prototype.onFilterChanged = function () {
      this.reset();
    };
    t.prototype.onSortChanged = function () {
      this.reset();
    };
    t.prototype.onColumnEverything = function () {
      if (!this.cacheParams || this.isSortModelDifferent()) {
        this.reset();
      }
    };
    t.prototype.isSortModelDifferent = function () {
      return !qr.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());
    };
    t.prototype.getType = function () {
      return Ee.ROW_MODEL_TYPE_INFINITE;
    };
    t.prototype.setDatasource = function (e) {
      this.destroyDatasource();
      this.datasource = e;
      if (e) {
        this.reset();
      }
    };
    t.prototype.isEmpty = function () {
      return !this.infiniteCache;
    };
    t.prototype.isRowsToRender = function () {
      return !!this.infiniteCache;
    };
    t.prototype.getNodesInRangeForSelection = function (e, t) {
      return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(e, t) : [];
    };
    t.prototype.reset = function () {
      if (this.datasource) {
        if (!qr.exists(this.gridOptionsWrapper.getRowNodeIdFunc())) {
          this.selectionController.reset();
        }
        this.resetCache();
        var e = this.createModelUpdatedEvent();
        this.eventService.dispatchEvent(e);
      }
    };
    t.prototype.createModelUpdatedEvent = function () {
      return {
        type: Ke.EVENT_MODEL_UPDATED,
        api: this.gridApi,
        columnApi: this.columnApi,
        newPage: false,
        newData: false,
        keepRenderedRows: true,
        animate: false
      };
    };
    t.prototype.resetCache = function () {
      this.destroyCache();
      var e = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
      this.cacheParams = {
        datasource: this.datasource,
        filterModel: this.filterManager.getFilterModel(),
        sortModel: this.sortController.getSortModel(),
        rowNodeBlockLoader: this.rowNodeBlockLoader,
        maxConcurrentRequests: this.defaultIfInvalid(e, 2),
        initialRowCount: this.defaultIfInvalid(this.gridOptionsWrapper.getInfiniteInitialRowCount(), 1),
        maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),
        rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
        overflowSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheOverflowSize(), 1),
        blockSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheBlockSize(), 100),
        lastAccessedSequence: new Xr()
      };
      this.infiniteCache = this.createBean(new mh(this.cacheParams));
    };
    t.prototype.defaultIfInvalid = function (e, t) {
      return e > 0 ? e : t;
    };
    t.prototype.destroyCache = function () {
      if (this.infiniteCache) {
        this.infiniteCache = this.destroyBean(this.infiniteCache);
      }
    };
    t.prototype.onCacheUpdated = function () {
      var e = this.createModelUpdatedEvent();
      this.eventService.dispatchEvent(e);
    };
    t.prototype.getRow = function (e) {
      return this.infiniteCache ? this.infiniteCache.getRow(e) : null;
    };
    t.prototype.getRowNode = function (e) {
      var t = null;
      this.forEachNode(function (n) {
        if (n.id === e) {
          t = n;
        }
      });
      return t;
    };
    t.prototype.forEachNode = function (e) {
      if (this.infiniteCache) {
        this.infiniteCache.forEachNodeDeep(e);
      }
    };
    t.prototype.getTopLevelRowCount = function () {
      return this.getRowCount();
    };
    t.prototype.getTopLevelRowDisplayedIndex = function (e) {
      return e;
    };
    t.prototype.getRowIndexAtPixel = function (e) {
      if (0 !== this.rowHeight) {
        var t = Math.floor(e / this.rowHeight);
        var n = this.getRowCount() - 1;
        return t > n ? n : t;
      }
      return 0;
    };
    t.prototype.getRowCount = function () {
      return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;
    };
    t.prototype.isRowPresent = function (e) {
      return !!this.getRowNode(e.id);
    };
    t.prototype.refreshCache = function () {
      if (this.infiniteCache) {
        this.infiniteCache.refreshCache();
      }
    };
    t.prototype.purgeCache = function () {
      if (this.infiniteCache) {
        this.infiniteCache.purgeCache();
      }
    };
    t.prototype.isLastRowIndexKnown = function () {
      return !!this.infiniteCache && this.infiniteCache.isLastRowIndexKnown();
    };
    t.prototype.setRowCount = function (e, t) {
      if (this.infiniteCache) {
        this.infiniteCache.setRowCount(e, t);
      }
    };
    _h([pe("filterManager")], t.prototype, "filterManager", undefined);
    _h([pe("sortController")], t.prototype, "sortController", undefined);
    _h([pe("selectionController")], t.prototype, "selectionController", undefined);
    _h([pe("gridApi")], t.prototype, "gridApi", undefined);
    _h([pe("columnApi")], t.prototype, "columnApi", undefined);
    _h([pe("rowRenderer")], t.prototype, "rowRenderer", undefined);
    _h([pe("rowNodeBlockLoader")], t.prototype, "rowNodeBlockLoader", undefined);
    _h([le], t.prototype, "init", null);
    _h([ue], t.prototype, "destroyDatasource", null);
    return t = _h([de("rowModel")], t);
  }(We);
  var bh = {
    moduleName: exports.ModuleNames.InfiniteRowModelModule,
    rowModels: {
      infinite: vh
    }
  };
  var yh = function () {
    function e() {}
    e.prototype.setBeans = function (e) {
      this.beans = e;
    };
    e.prototype.getFileName = function (e) {
      var t = this.getDefaultFileExtension();
      if (!(null != e && e.length)) {
        e = this.getDefaultFileName();
      }
      return -1 === e.indexOf(".") ? e + "." + t : e;
    };
    e.prototype.getMergedParamsAndData = function (e) {
      var t = this.mergeDefaultParams(e);
      return {
        mergedParams: t,
        data: this.beans.gridSerializer.serialize(this.createSerializingSession(t), t)
      };
    };
    e.prototype.mergeDefaultParams = function (e) {
      var t = this.getDefaultExportParams();
      var n = {};
      qr.assign(n, t);
      qr.assign(n, e);
      return n;
    };
    return e;
  }();
  var Eh = function () {
    function e(e) {
      this.groupColumns = [];
      var t = e.columnController;
      var n = e.valueService;
      var r = e.gridOptionsWrapper;
      var o = e.processCellCallback;
      var i = e.processHeaderCallback;
      var a = e.processGroupHeaderCallback;
      var s = e.processRowGroupCallback;
      this.columnController = t;
      this.valueService = n;
      this.gridOptionsWrapper = r;
      this.processCellCallback = o;
      this.processHeaderCallback = i;
      this.processGroupHeaderCallback = a;
      this.processRowGroupCallback = s;
    }
    e.prototype.prepare = function (e) {
      this.groupColumns = qr.filter(e, function (e) {
        return !!e.getColDef().showRowGroup;
      });
    };
    e.prototype.extractHeaderValue = function (e) {
      var t = this.getHeaderName(this.processHeaderCallback, e);
      return null != t ? t : "";
    };
    e.prototype.extractRowCellValue = function (e, t, n, r, o) {
      var i;
      var a = this.gridOptionsWrapper.isGroupMultiAutoColumn() ? o.rowGroupIndex : 0;
      i = o && o.group && (t === a && -1 !== this.groupColumns.indexOf(e) || 0 === t && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnController.isPivotMode())) ? this.createValueForGroupNode(o) : this.valueService.getValue(e, o);
      var s = this.processCell(n, o, e, i, this.processCellCallback, r);
      return null != s ? s : "";
    };
    e.prototype.getHeaderName = function (e, t) {
      return e ? e({
        column: t,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      }) : this.columnController.getDisplayNameForColumn(t, "csv", true);
    };
    e.prototype.createValueForGroupNode = function (e) {
      if (this.processRowGroupCallback) {
        return this.processRowGroupCallback({
          node: e,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext()
        });
      }
      var t = [e.key];
      if (!this.gridOptionsWrapper.isGroupMultiAutoColumn()) {
        for (; e.parent;) {
          e = e.parent;
          t.push(e.key);
        }
      }
      return t.reverse().join(" -> ");
    };
    e.prototype.processCell = function (e, t, n, r, o, i) {
      return o ? o({
        accumulatedRowIndex: e,
        column: n,
        node: t,
        value: r,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext(),
        type: i
      }) : null != r ? r : "";
    };
    return e;
  }();
  var Oh = function () {
    function e() {}
    e.download = function (e, t) {
      var n = document.defaultView || window;
      if (n) {
        if (n.navigator.msSaveOrOpenBlob) {
          n.navigator.msSaveOrOpenBlob(t, e);
        } else {
          var r = document.createElement("a");
          var o = n.URL.createObjectURL(t);
          r.setAttribute("href", o);
          r.setAttribute("download", e);
          r.style.display = "none";
          document.body.appendChild(r);
          r.dispatchEvent(new MouseEvent("click", {
            bubbles: false,
            cancelable: true,
            view: n
          }));
          document.body.removeChild(r);
          n.setTimeout(function () {
            n.URL.revokeObjectURL(o);
          }, 0);
        }
      } else {
        console.warn("AG Grid: There is no `window` associated with the current `document`");
      }
    };
    return e;
  }();
  var wh = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Ch = function (e) {
    function t(t) {
      var n = e.call(this, t) || this;
      n.isFirstLine = true;
      n.result = "";
      var r = t.suppressQuotes;
      var o = t.columnSeparator;
      n.suppressQuotes = r;
      n.columnSeparator = o;
      return n;
    }
    wh(t, e);
    t.prototype.addCustomContent = function (e) {
      var t = this;
      if (e) {
        if ("string" === typeof e) {
          if (!/^\s*\n/.test(e)) {
            this.beginNewLine();
          }
          e = e.replace(/\r?\n/g, "\r\n");
          this.result += e;
        } else {
          e.forEach(function (e) {
            t.beginNewLine();
            e.forEach(function (e, n) {
              if (0 !== n) {
                t.result += t.columnSeparator;
              }
              t.result += t.putInQuotes(e.data.value || "");
              if (e.mergeAcross) {
                t.appendEmptyCells(e.mergeAcross);
              }
            });
          });
        }
      }
    };
    t.prototype.onNewHeaderGroupingRow = function () {
      this.beginNewLine();
      return {
        onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
      };
    };
    t.prototype.onNewHeaderGroupingRowColumn = function (e, t, n) {
      if (0 != t) {
        this.result += this.columnSeparator;
      }
      this.result += this.putInQuotes(e);
      this.appendEmptyCells(n);
    };
    t.prototype.appendEmptyCells = function (e) {
      for (var t = 1; t <= e; t++) {
        this.result += this.columnSeparator + this.putInQuotes("");
      }
    };
    t.prototype.onNewHeaderRow = function () {
      this.beginNewLine();
      return {
        onColumn: this.onNewHeaderRowColumn.bind(this)
      };
    };
    t.prototype.onNewHeaderRowColumn = function (e, t) {
      if (0 != t) {
        this.result += this.columnSeparator;
      }
      this.result += this.putInQuotes(this.extractHeaderValue(e));
    };
    t.prototype.onNewBodyRow = function () {
      this.beginNewLine();
      return {
        onColumn: this.onNewBodyRowColumn.bind(this)
      };
    };
    t.prototype.onNewBodyRowColumn = function (e, t, n) {
      if (0 != t) {
        this.result += this.columnSeparator;
      }
      this.result += this.putInQuotes(this.extractRowCellValue(e, t, t, Ee.EXPORT_TYPE_CSV, n));
    };
    t.prototype.putInQuotes = function (e) {
      return this.suppressQuotes ? e : null === e || undefined === e ? "\"\"" : ("string" === typeof e ? t = e : "function" === typeof e.toString ? t = e.toString() : (console.warn("unknown value type during csv conversion"), t = ""), "\"" + t.replace(/"/g, "\"\"") + "\"");
      var t;
    };
    t.prototype.parse = function () {
      return this.result;
    };
    t.prototype.beginNewLine = function () {
      if (!this.isFirstLine) {
        this.result += "\r\n";
      }
      this.isFirstLine = false;
    };
    return t;
  }(Eh);
  var Th = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var Sh = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  var Ih = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Th(t, e);
    t.prototype.postConstruct = function () {
      this.setBeans({
        gridSerializer: this.gridSerializer,
        gridOptionsWrapper: this.gridOptionsWrapper
      });
    };
    t.prototype.getDefaultExportParams = function () {
      return this.gridOptionsWrapper.getDefaultExportParams("csv");
    };
    t.prototype.export = function (e) {
      if (this.isExportSuppressed()) {
        console.warn("ag-grid: Export cancelled. Export is not allowed as per your configuration.");
        return "";
      }
      var t = this.getMergedParamsAndData(e);
      var n = t.mergedParams;
      var r = t.data;
      var o = new Blob(["﻿", r], {
        type: window.navigator.msSaveOrOpenBlob ? this.getMimeType() : "octet/stream"
      });
      Oh.download(this.getFileName(n.fileName), o);
      return r;
    };
    t.prototype.exportDataAsCsv = function (e) {
      return this.export(e);
    };
    t.prototype.getDataAsCsv = function (e) {
      return this.getMergedParamsAndData(e).data;
    };
    t.prototype.getMimeType = function () {
      return "text/csv;charset=utf-8;";
    };
    t.prototype.getDefaultFileName = function () {
      return "export.csv";
    };
    t.prototype.getDefaultFileExtension = function () {
      return "csv";
    };
    t.prototype.createSerializingSession = function (e) {
      var t = this.columnController;
      var n = this.valueService;
      var r = this.gridOptionsWrapper;
      var o = e;
      var i = o.processCellCallback;
      var a = o.processHeaderCallback;
      var s = o.processGroupHeaderCallback;
      var c = o.processRowGroupCallback;
      var l = o.suppressQuotes;
      var u = o.columnSeparator;
      return new Ch({
        columnController: t,
        valueService: n,
        gridOptionsWrapper: r,
        processCellCallback: i || undefined,
        processHeaderCallback: a || undefined,
        processGroupHeaderCallback: s || undefined,
        processRowGroupCallback: c || undefined,
        suppressQuotes: l || false,
        columnSeparator: u || ","
      });
    };
    t.prototype.isExportSuppressed = function () {
      return this.gridOptionsWrapper.isSuppressCsvExport();
    };
    Sh([pe("columnController")], t.prototype, "columnController", undefined);
    Sh([pe("valueService")], t.prototype, "valueService", undefined);
    Sh([pe("gridSerializer")], t.prototype, "gridSerializer", undefined);
    Sh([pe("gridOptionsWrapper")], t.prototype, "gridOptionsWrapper", undefined);
    Sh([le], t.prototype, "postConstruct", null);
    return t = Sh([de("csvCreator")], t);
  }(yh);
  var Ah = function () {
    var e = function (t, n) {
      return (e = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var n in t) if (t.hasOwnProperty(n)) {
          e[n] = t[n];
        }
      })(t, n);
    };
    return function (t, n) {
      function r() {
        this.constructor = t;
      }
      e(t, n);
      t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
    };
  }();
  var jh = function (e, t, n, r) {
    var o;
    var i = arguments.length;
    var a = i < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
      a = Reflect.decorate(e, t, n, r);
    } else {
      for (var s = e.length - 1; s >= 0; s--) {
        if (o = e[s]) {
          a = (i < 3 ? o(a) : i > 3 ? o(t, n, a) : o(t, n)) || a;
        }
      }
    }
    if (i > 3 && a) {
      Object.defineProperty(t, n, a);
    }
    return a;
  };
  !function (e) {
    e[e.HEADER_GROUPING = 0] = "HEADER_GROUPING";
    e[e.HEADER = 1] = "HEADER";
    e[e.BODY = 2] = "BODY";
  }(exports.RowType || (exports.RowType = {}));
  var Nh = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }
    Ah(t, e);
    t.prototype.serialize = function (e, t) {
      if (undefined === t) {
        t = {};
      }
      var n = this.getColumnsToExport(t.allColumns, t.columnKeys);
      return qr.compose(this.prepareSession(n), this.prependContent(t), this.exportColumnGroups(t, n), this.exportHeaders(t, n), this.processPinnedTopRows(t, n), this.processRows(t, n), this.processPinnedBottomRows(t, n), this.appendContent(t))(e).parse();
    };
    t.prototype.processRow = function (e, t, n, r) {
      var o = t.shouldRowBeSkipped || function () {
        return false;
      };
      var i = this.gridOptionsWrapper;
      var a = i.getContext();
      var s = i.getApi();
      var c = i.getColumnApi();
      var l = i.isGroupRemoveSingleChildren();
      var u = i.isGroupHideOpenParents();
      var d = i.isGroupRemoveLowestSingleChildren();
      var p = this.columnController.isPivotMode() ? r.leafGroup : !r.group;
      var f = t.skipGroups || t.skipRowGroups;
      var h = d && r.leafGroup;
      var m = 1 === r.allChildrenCount && (l || h);
      if ((f && t.skipGroups && qr.doOnce(function () {
        return console.warn("AG Grid: Since v25.2 `skipGroups` has been renamed to `skipRowGroups`.");
      }, "gridSerializer-skipGroups"), !(!p && (t.skipRowGroups || m || u) || t.onlySelected && !r.isSelected() || t.skipPinnedTop && "top" === r.rowPinned || t.skipPinnedBottom && "bottom" === r.rowPinned)) && (!(-1 === r.level) || r.leafGroup) && !o({
        node: r,
        api: s,
        context: a
      })) {
        var g = e.onNewBodyRow();
        n.forEach(function (e, t) {
          g.onColumn(e, t, r);
        });
        if (t.getCustomContentBelowRow) {
          var _ = t.getCustomContentBelowRow({
            node: r,
            api: s,
            columnApi: c,
            context: a
          });
          if (_) {
            e.addCustomContent(_);
          }
        }
      }
    };
    t.prototype.appendContent = function (e) {
      return function (t) {
        var n = e.customFooter || e.appendContent;
        if (n) {
          if (e.customFooter) {
            qr.doOnce(function () {
              return console.warn("AG Grid: Since version 25.2.0 the `customFooter` param has been deprecated. Use `appendContent` instead.");
            }, "gridSerializer-customFooter");
          }
          t.addCustomContent(n);
        }
        return t;
      };
    };
    t.prototype.prependContent = function (e) {
      return function (t) {
        var n = e.customHeader || e.prependContent;
        if (n) {
          if (e.customHeader) {
            qr.doOnce(function () {
              return console.warn("AG Grid: Since version 25.2.0 the `customHeader` param has been deprecated. Use `prependContent` instead.");
            }, "gridSerializer-customHeader");
          }
          t.addCustomContent(n);
        }
        return t;
      };
    };
    t.prototype.prepareSession = function (e) {
      return function (t) {
        t.prepare(e);
        return t;
      };
    };
    t.prototype.exportColumnGroups = function (e, t) {
      var n = this;
      return function (r) {
        if (e.skipColumnGroupHeaders) {
          if (e.columnGroups) {
            qr.doOnce(function () {
              return console.warn("AG Grid: Since v25.2 the `columnGroups` param has deprecated, and groups are exported by default.");
            }, "gridSerializer-columnGroups");
          }
        } else {
          var o = new qe();
          var i = n.displayedGroupCreator.createDisplayedGroups(t, n.columnController.getGridBalancedTree(), o, null);
          n.recursivelyAddHeaderGroups(i, r, e.processGroupHeaderCallback);
        }
        return r;
      };
    };
    t.prototype.exportHeaders = function (e, t) {
      return function (n) {
        if (e.skipHeader || e.skipColumnHeaders) {
          if (e.skipHeader) {
            qr.doOnce(function () {
              return console.warn("AG Grid: Since v25.2 the `skipHeader` param has been renamed to `skipColumnHeaders`.");
            }, "gridSerializer-skipHeader");
          }
        } else {
          var r = n.onNewHeaderRow();
          t.forEach(function (e, t) {
            r.onColumn(e, t, undefined);
          });
        }
        return n;
      };
    };
    t.prototype.processPinnedTopRows = function (e, t) {
      var n = this;
      return function (r) {
        var o = n.processRow.bind(n, r, e, t);
        n.pinnedRowModel.forEachPinnedTopRow(o);
        return r;
      };
    };
    t.prototype.processRows = function (e, t) {
      var n = this;
      return function (r) {
        var o = n.rowModel;
        var i = o.getType();
        var a = i === Ee.ROW_MODEL_TYPE_CLIENT_SIDE;
        var s = i === Ee.ROW_MODEL_TYPE_SERVER_SIDE;
        var c = !a && e.onlySelected;
        var l = n.processRow.bind(n, r, e, t);
        if (n.columnController.isPivotMode()) {
          if (a) {
            o.forEachPivotNode(l);
          } else {
            o.forEachNode(l);
          }
        } else {
          if (e.onlySelectedAllPages || c) {
            n.selectionController.getSelectedNodes().forEach(l);
          } else {
            if (a || s) {
              o.forEachNodeAfterFilterAndSort(l);
            } else {
              o.forEachNode(l);
            }
          }
        }
        return r;
      };
    };
    t.prototype.processPinnedBottomRows = function (e, t) {
      var n = this;
      return function (r) {
        var o = n.processRow.bind(n, r, e, t);
        n.pinnedRowModel.forEachPinnedBottomRow(o);
        return r;
      };
    };
    t.prototype.getColumnsToExport = function (e, t) {
      if (undefined === e) {
        e = false;
      }
      var n = this.columnController.isPivotMode();
      return t && t.length ? this.columnController.getGridColumns(t) : e && !n ? (this.gridOptionsWrapper.isTreeData() ? this.columnController.getGridColumns([Ee.GROUP_AUTO_COLUMN_ID]) : []).concat(this.columnController.getAllPrimaryColumns() || []) : this.columnController.getAllDisplayedColumns();
    };
    t.prototype.recursivelyAddHeaderGroups = function (e, t, n) {
      var r = [];
      e.forEach(function (e) {
        var t = e;
        if (t.getChildren) {
          t.getChildren().forEach(function (e) {
            return r.push(e);
          });
        }
      });
      if (e.length > 0 && e[0] instanceof Se) {
        this.doAddHeaderHeader(t, e, n);
      }
      if (r && r.length > 0) {
        this.recursivelyAddHeaderGroups(r, t, n);
      }
    };
    t.prototype.doAddHeaderHeader = function (e, t, n) {
      var r = this;
      var o = e.onNewHeaderGroupingRow();
      var i = 0;
      t.forEach(function (e) {
        var t;
        var a = e;
        t = n ? n({
          columnGroup: a,
          api: r.gridOptionsWrapper.getApi(),
          columnApi: r.gridOptionsWrapper.getColumnApi(),
          context: r.gridOptionsWrapper.getContext()
        }) : r.columnController.getDisplayNameForColumnGroup(a, "header");
        o.onColumn(t || "", i++, a.getLeafColumns().length - 1);
      });
    };
    jh([pe("displayedGroupCreator")], t.prototype, "displayedGroupCreator", undefined);
    jh([pe("columnController")], t.prototype, "columnController", undefined);
    jh([pe("rowModel")], t.prototype, "rowModel", undefined);
    jh([pe("pinnedRowModel")], t.prototype, "pinnedRowModel", undefined);
    jh([pe("selectionController")], t.prototype, "selectionController", undefined);
    return t = jh([de("gridSerializer")], t);
  }(We);
  var Rh = {
    moduleName: exports.ModuleNames.CsvExportModule,
    beans: [Ih, Nh]
  };
  var kh = function () {
    function e() {}
    e.createHeader = function (e) {
      if (undefined === e) {
        e = {};
      }
      var t = ["version"];
      if (!e.version) {
        e.version = "1.0";
      }
      if (e.encoding) {
        t.push("encoding");
      }
      if (e.standalone) {
        t.push("standalone");
      }
      return "<?xml " + t.map(function (t) {
        return t + "=\"" + e[t] + "\"";
      }).join(" ") + " ?>";
    };
    e.createXml = function (e, t) {
      var n = this;
      var r = "";
      if (e.properties) {
        if (e.properties.prefixedAttributes) {
          e.properties.prefixedAttributes.forEach(function (e) {
            Object.keys(e.map).forEach(function (o) {
              r += n.returnAttributeIfPopulated(e.prefix + o, e.map[o], t);
            });
          });
        }
        if (e.properties.rawMap) {
          Object.keys(e.properties.rawMap).forEach(function (o) {
            r += n.returnAttributeIfPopulated(o, e.properties.rawMap[o], t);
          });
        }
      }
      var o = "<" + e.name + r;
      return e.children || null != e.textNode ? null != e.textNode ? o + ">" + e.textNode + "</" + e.name + ">\r\n" : (o += ">\r\n", e.children && e.children.forEach(function (e) {
        o += n.createXml(e, t);
      }), o + "</" + e.name + ">\r\n") : o + "/>\r\n";
    };
    e.returnAttributeIfPopulated = function (e, t, n) {
      if (!t && "" !== t && 0 !== t) {
        return "";
      }
      var r = t;
      if ("boolean" === typeof t && n) {
        r = n(t);
      }
      return " " + e + "=\"" + r + "\"";
    };
    return e;
  }();
  var xh = new Uint32Array([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]);
  var Dh = function () {
    function e() {}
    e.addFolders = function (e) {
      e.forEach(this.addFolder.bind(this));
    };
    e.addFolder = function (e) {
      this.folders.push({
        path: e,
        created: new Date(),
        isBase64: false
      });
    };
    e.addFile = function (e, t, n) {
      if (undefined === n) {
        n = false;
      }
      this.files.push({
        path: e,
        created: new Date(),
        content: t,
        isBase64: n
      });
    };
    e.getContent = function (e) {
      if (undefined === e) {
        e = "application/zip";
      }
      var t = this.buildFileStream();
      var n = this.buildUint8Array(t);
      this.clearStream();
      return new Blob([n], {
        type: e
      });
    };
    e.clearStream = function () {
      this.folders = [];
      this.files = [];
    };
    e.buildFileStream = function (e) {
      if (undefined === e) {
        e = "";
      }
      for (var t = this.folders.concat(this.files), n = t.length, r = "", o = 0, i = 0, a = 0, s = t; a < s.length; a++) {
        var c = s[a];
        var l = this.getHeader(c, o);
        var u = l.fileHeader;
        var d = l.folderHeader;
        var p = l.content;
        o += u.length + p.length;
        i += d.length;
        e += u + p;
        r += d;
      }
      return e + r + this.buildFolderEnd(n, i, o);
    };
    e.getHeader = function (e, t) {
      var n = e.content;
      var r = e.path;
      var o = e.created;
      var i = e.isBase64;
      var a = qr.utf8_encode;
      var s = qr.decToHex;
      var c = a(r);
      var l = c !== r;
      var u = this.convertTime(o);
      var d = this.convertDate(o);
      var p = "";
      if (l) {
        var f = s(1, 1) + s(this.getFromCrc32Table(c), 4) + c;
        p = "up" + s(f.length, 2) + f;
      }
      var h = n ? this.getConvertedContent(n, i) : {
        size: 0,
        content: ""
      };
      var m = h.size;
      var g = h.content;
      var _ = "\n\u0000" + (l ? "\u0000\b" : "\u0000\u0000") + "\u0000\u0000" + s(u, 2) + s(d, 2) + s(m ? this.getFromCrc32Table(g) : 0, 4) + s(m, 4) + s(m, 4) + s(c.length, 2) + s(p.length, 2);
      return {
        fileHeader: "PK\u0003\u0004" + _ + c + p,
        folderHeader: "PK\u0001\u0002\u0014\u0000" + _ + "\u0000\u0000\u0000\u0000\u0000\u0000" + (n ? "\u0000\u0000\u0000\u0000" : "\u0010\u0000\u0000\u0000") + s(t, 4) + c + p,
        content: g || ""
      };
    };
    e.getConvertedContent = function (e, t) {
      if (undefined === t) {
        t = false;
      }
      if (t) {
        e = e.split(";base64,")[1];
      }
      return {
        size: (e = t ? atob(e) : e).length,
        content: e
      };
    };
    e.buildFolderEnd = function (e, t, n) {
      var r = qr.decToHex;
      return "PK\u0005\u0006\u0000\u0000\u0000\u0000" + r(e, 2) + r(e, 2) + r(t, 4) + r(n, 4) + "\u0000\u0000";
    };
    e.buildUint8Array = function (e) {
      for (var t = new Uint8Array(e.length), n = 0; n < t.length; n++) {
        t[n] = e.charCodeAt(n);
      }
      return t;
    };
    e.getFromCrc32Table = function (e) {
      if (!e.length) {
        return 0;
      }
      for (var t = e.length, n = new Uint8Array(t), r = 0; r < t; r++) {
        n[r] = e.charCodeAt(r);
      }
      var o = -1;
      var i = 0;
      for (r = 0; r < t; r++) {
        i = n[r];
        o = o >>> 8 ^ xh[255 & (o ^ i)];
      }
      return -1 ^ o;
    };
    e.convertTime = function (e) {
      var t = e.getHours();
      t <<= 6;
      t |= e.getMinutes();
      t <<= 5;
      return t |= e.getSeconds() / 2;
    };
    e.convertDate = function (e) {
      var t = e.getFullYear() - 1980;
      t <<= 4;
      t |= e.getMonth() + 1;
      t <<= 5;
      return t |= e.getDate();
    };
    e.folders = [];
    e.files = [];
    return e;
  }();
  Oe.register(ch, false);
  Oe.register(bh, false);
  Oe.register(Rh, false);
  exports.AgAbstractField = Es;
  exports.AgAngleSelect = _p;
  exports.AgCheckbox = Ss;
  exports.AgColorPicker = op;
  exports.AgDialog = Hd;
  exports.AgGroupComponent = Pd;
  exports.AgInputNumberField = ap;
  exports.AgInputRange = cp;
  exports.AgInputTextArea = Kd;
  exports.AgInputTextField = zd;
  exports.AgPanel = Gd;
  exports.AgPromise = Zr;
  exports.AgRadioButton = gu;
  exports.AgSelect = hp;
  exports.AgSlider = Qd;
  exports.AgToggleButton = bp;
  exports.AlignedGridsService = Xu;
  exports.AnimateShowChangeCellRenderer = ki;
  exports.AnimateSlideCellRenderer = Mi;
  exports.AnimationFrameService = pd;
  exports.AutoWidthCalculator = Ul;
  exports.Autowired = pe;
  exports.BaseComponentWrapper = Lf;
  exports.BaseCreator = yh;
  exports.BaseGridSerializingSession = Eh;
  exports.Bean = de;
  exports.BeanStub = We;
  exports.BodyDropPivotTarget = Js;
  exports.BodyDropTarget = nc;
  exports.CellComp = rs;
  exports.CellNavigationService = du;
  exports.CellPositionUtils = Ap;
  exports.ChangedPath = xa;
  exports.CheckboxSelectionComponent = Qo;
  exports.ColDefUtil = zn;
  exports.Color = Yn;
  exports.Column = Ce;
  exports.ColumnApi = Fa;
  exports.ColumnController = dt;
  exports.ColumnFactory = Ye;
  exports.ColumnGroup = Se;
  exports.ColumnKeyCreator = f;
  exports.ColumnUtils = At;
  exports.Component = so;
  exports.ComponentUtil = Hn;
  exports.Constants = Ee;
  exports.Context = se;
  exports.ControllersService = af;
  exports.CssClassApplier = us;
  exports.CsvCreator = Ih;
  exports.CsvExportModule = Rh;
  exports.DateFilter = Bo;
  exports.DisplayedGroupCreator = Rt;
  exports.Downloader = Oh;
  exports.DragAndDropService = yi;
  exports.DragService = nu;
  exports.Environment = ld;
  exports.EventService = ye;
  exports.Events = Ke;
  exports.ExpressionService = wl;
  exports.FilterManager = yc;
  exports.FloatingFilterMapper = Us;
  exports.FloatingFilterWrapper = Vs;
  exports.FocusController = Nl;
  exports.Grid = Of;
  exports.GridApi = bl;
  exports.GridBodyComp = gl;
  exports.GridBodyController = Fc;
  exports.GridComp = Ql;
  exports.GridCompController = Kl;
  exports.GridCoreCreator = wf;
  exports.GridListener = function (e) {
    return fo.bind(this, e);
  };
  exports.GridOptionsWrapper = ka;
  exports.GridSerializer = Nh;
  exports.GroupCellRenderer = ji;
  exports.GroupInstanceIdCreator = qe;
  exports.GuiListener = function (e, t) {
    return ho.bind(this, e, t);
  };
  exports.HeaderContainer = ic;
  exports.HeaderNavigationService = lc;
  exports.HeaderPositionUtils = Vp;
  exports.HeaderRootComp = gc;
  exports.HeaderRowComp = qs;
  exports.HeadlessService = Dt;
  exports.HorizontalResizeService = Vl;
  exports.KeyCode = _o;
  exports.KeyName = uc;
  exports.LargeTextCellEditor = qi;
  exports.Logger = Bl;
  exports.LoggerFactory = Pl;
  exports.ManagedFocusComponent = So;
  exports.ModuleRegistry = Oe;
  exports.MouseEventService = cu;
  exports.MoveColumnController = Qs;
  exports.NumberFilter = Zi;
  exports.NumberSequence = Xr;
  exports.Optional = fe;
  exports.OriginalColumnGroup = Ie;
  exports.PaginationProxy = Lu;
  exports.PinnedRowModel = Rp;
  exports.PopupComponent = lo;
  exports.PopupEditorWrapper = Za;
  exports.PopupSelectCellEditor = zi;
  exports.PopupService = xl;
  exports.PopupTextCellEditor = Hi;
  exports.PostConstruct = le;
  exports.PreConstruct = ce;
  exports.PreDestroy = ue;
  exports.PropertyKeys = Gn;
  exports.ProvidedFilter = jo;
  exports.Qualifier = me;
  exports.QuerySelector = function (e) {
    return po.bind(this, e, undefined);
  };
  exports.RefSelector = uo;
  exports.ResizeObserverService = Rd;
  exports.RowController = qa;
  exports.RowNode = Ko;
  exports.RowNodeBlock = Qp;
  exports.RowNodeBlockLoader = ef;
  exports.RowNodeSorter = nf;
  exports.RowPositionUtils = Tp;
  exports.RowRenderer = ls;
  exports.ScalarFilter = Mo;
  exports.ScrollVisibleService = Eu;
  exports.SelectCellEditor = Ui;
  exports.SelectableService = Od;
  exports.SelectionController = Pa;
  exports.SetLeftFeature = gs;
  exports.SimpleFilter = xo;
  exports.SortController = iu;
  exports.StandardMenuFactory = $l;
  exports.StylingService = Cu;
  exports.TabbedLayout = jf;
  exports.TemplateService = Sl;
  exports.TestHeadless = Bn;
  exports.TextCellEditor = yo;
  exports.TextFilter = ha;
  exports.TextFloatingFilter = Ea;
  exports.Timer = Jr;
  exports.TooltipFeature = ro;
  exports.TouchListener = Fo;
  exports.UserComponentFactory = gi;
  exports.UserComponentRegistry = Ca;
  exports.ValueCache = Wu;
  exports.ValueFormatterService = hu;
  exports.ValueService = wc;
  exports.VanillaFrameworkOverrides = vu;
  exports.VirtualList = xf;
  exports.XmlFactory = kh;
  exports.ZipContainer = Dh;
  exports._ = qr;
  exports.defaultGroupComparator = function (e, t, n, o, i) {
    if (undefined === i) {
      i = false;
    }
    console.warn("AG Grid: Since ag-grid 11.0.0 defaultGroupComparator is not necessary. You can remove this from your colDef");
    var a = r(n) && n.group;
    var s = r(o) && o.group;
    var c = !a && !s;
    return a && s ? l(n.key, o.key, i) : c ? l(e, t, i) : a ? 1 : -1;
  };
  exports.initialiseAgGridWithAngular1 = function (e) {
    e.module("agGrid", []).directive("agGrid", function () {
      return {
        restrict: "A",
        controller: ["$element", "$scope", "$compile", "$attrs", Cf],
        scope: true
      };
    });
  };
  exports.initialiseAgGridWithWebComponents = function () {
    console.warn("ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. ");
    if (!Tf) {
      Tf = true;
      if (!("undefined" !== typeof document && document.registerElement)) {
        console.error("AG Grid: unable to find document.registerElement() function, unable to initialise AG Grid as a Web Component");
      }
      var e = Object.create(HTMLElement.prototype);
      Hn.ALL_PROPERTIES.forEach(function (t) {
        Object.defineProperty(e, t, {
          set: function (e) {
            this.__agGridSetProperty(t, e);
          },
          get: function () {
            return this.__agGridGetProperty(t);
          },
          enumerable: true,
          configurable: true
        });
      });
      var t = e;
      t.__agGridSetProperty = function (e, t) {
        if (!this.__attributes) {
          this.__attributes = {};
        }
        this.__attributes[e] = t;
        var n = {};
        n[e] = {
          currentValue: t
        };
        this.onChange(n);
      };
      t.onChange = function (e) {
        if (this._initialised) {
          Hn.processOnChange(e, this._gridOptions, this.api, this.columnApi);
        }
      };
      t.__agGridGetProperty = function (e) {
        if (!this.__attributes) {
          this.__attributes = {};
        }
        return this.__attributes[e];
      };
      t.setGridOptions = function (e) {
        var t = this.globalEventListener.bind(this);
        this._gridOptions = Hn.copyAttributesToGridOptions(e, this);
        var n = {
          globalEventListener: t
        };
        this._agGrid = new Of(this, this._gridOptions, n);
        this.api = e.api;
        this.columnApi = e.columnApi;
        this._initialised = true;
      };
      t.createdCallback = function () {
        for (var e = 0; e < this.attributes.length; e++) {
          var t = this.attributes[e];
          this.setPropertyFromAttribute(t);
        }
      };
      t.setPropertyFromAttribute = function (e) {
        var t;
        var n = "string" === typeof (t = e.nodeName) ? t.replace(/-([a-z])/g, function (e) {
          return e[1].toUpperCase();
        }) : t;
        var r = e.nodeValue;
        if (Hn.ALL_PROPERTIES.indexOf(n) >= 0) {
          this[n] = r;
        }
      };
      t.attachedCallback = function (e) {};
      t.detachedCallback = function (e) {};
      t.attributeChangedCallback = function (e) {
        var t = this.attributes[e];
        this.setPropertyFromAttribute(t);
      };
      t.globalEventListener = function (e, t) {
        var n = e.toLowerCase();
        var r = new Event(n);
        r.agGridDetails = t;
        this.dispatchEvent(r);
        var o = "on" + n;
        if ("function" === typeof this[o]) {
          this[o](r);
        }
      };
      document.registerElement("ag-grid", {
        prototype: e
      });
    }
  };
  exports.simpleHttpRequest = function (e) {
    return new Zr(function (t) {
      var n = new XMLHttpRequest();
      n.open("GET", e.url);
      n.send();
      n.onreadystatechange = function () {
        if (4 === n.readyState && 200 === n.status) {
          t(JSON.parse(n.responseText));
        }
      };
    });
  };
  exports.stringToArray = Kn;
}).call(this, require("../../710/251"));